(ns cdk.api.services.logs-test
  "Functions that represent AWS CDK enums and builders in the software.amazon.awscdk.services.logs package. "
  (:require [cdk.api.services.logs :refer [log-group-class
                                           retention-days]]
            [clojure.test :refer [deftest
                                  is
                                  testing]])
  (:import [software.amazon.awscdk.services.logs LogGroupClass
                                                 RetentionDays]))


(deftest log-group-class-test
  (testing "Testing enum function log-group-class"
    (is (= LogGroupClass/STANDARD (log-group-class {:item LogGroupClass/STANDARD} "test" :item)))
    (is (= LogGroupClass/STANDARD (log-group-class {:test/item LogGroupClass/STANDARD} "test" :item)))
    (is (= LogGroupClass/INFREQUENT_ACCESS (log-group-class {:item LogGroupClass/INFREQUENT_ACCESS} "test" :item)))
    (is (= LogGroupClass/INFREQUENT_ACCESS (log-group-class {:test/item LogGroupClass/INFREQUENT_ACCESS} "test" :item)))
    (is (= LogGroupClass/STANDARD (log-group-class {:item :standard} "test" :item)))
    (is (= LogGroupClass/STANDARD (log-group-class {:test/item :standard} "test" :item)))
    (is (= LogGroupClass/INFREQUENT_ACCESS (log-group-class {:item :infrequent-access} "test" :item)))
    (is (= LogGroupClass/INFREQUENT_ACCESS (log-group-class {:test/item :infrequent-access} "test" :item)))))


(deftest retention-days-test
  (testing "Testing enum function retention-days"
    (is (= RetentionDays/FOUR_MONTHS (retention-days {:item RetentionDays/FOUR_MONTHS} "test" :item)))
    (is (= RetentionDays/FOUR_MONTHS (retention-days {:test/item RetentionDays/FOUR_MONTHS} "test" :item)))
    (is (= RetentionDays/SEVEN_YEARS (retention-days {:item RetentionDays/SEVEN_YEARS} "test" :item)))
    (is (= RetentionDays/SEVEN_YEARS (retention-days {:test/item RetentionDays/SEVEN_YEARS} "test" :item)))
    (is (= RetentionDays/TEN_YEARS (retention-days {:item RetentionDays/TEN_YEARS} "test" :item)))
    (is (= RetentionDays/TEN_YEARS (retention-days {:test/item RetentionDays/TEN_YEARS} "test" :item)))
    (is (= RetentionDays/THREE_YEARS (retention-days {:item RetentionDays/THREE_YEARS} "test" :item)))
    (is (= RetentionDays/THREE_YEARS (retention-days {:test/item RetentionDays/THREE_YEARS} "test" :item)))
    (is (= RetentionDays/ONE_YEAR (retention-days {:item RetentionDays/ONE_YEAR} "test" :item)))
    (is (= RetentionDays/ONE_YEAR (retention-days {:test/item RetentionDays/ONE_YEAR} "test" :item)))
    (is (= RetentionDays/EIGHT_YEARS (retention-days {:item RetentionDays/EIGHT_YEARS} "test" :item)))
    (is (= RetentionDays/EIGHT_YEARS (retention-days {:test/item RetentionDays/EIGHT_YEARS} "test" :item)))
    (is (= RetentionDays/THREE_DAYS (retention-days {:item RetentionDays/THREE_DAYS} "test" :item)))
    (is (= RetentionDays/THREE_DAYS (retention-days {:test/item RetentionDays/THREE_DAYS} "test" :item)))
    (is (= RetentionDays/INFINITE (retention-days {:item RetentionDays/INFINITE} "test" :item)))
    (is (= RetentionDays/INFINITE (retention-days {:test/item RetentionDays/INFINITE} "test" :item)))
    (is (= RetentionDays/NINE_YEARS (retention-days {:item RetentionDays/NINE_YEARS} "test" :item)))
    (is (= RetentionDays/NINE_YEARS (retention-days {:test/item RetentionDays/NINE_YEARS} "test" :item)))
    (is (= RetentionDays/SIX_YEARS (retention-days {:item RetentionDays/SIX_YEARS} "test" :item)))
    (is (= RetentionDays/SIX_YEARS (retention-days {:test/item RetentionDays/SIX_YEARS} "test" :item)))
    (is (= RetentionDays/THIRTEEN_MONTHS (retention-days {:item RetentionDays/THIRTEEN_MONTHS} "test" :item)))
    (is (= RetentionDays/THIRTEEN_MONTHS (retention-days {:test/item RetentionDays/THIRTEEN_MONTHS} "test" :item)))
    (is (= RetentionDays/ONE_WEEK (retention-days {:item RetentionDays/ONE_WEEK} "test" :item)))
    (is (= RetentionDays/ONE_WEEK (retention-days {:test/item RetentionDays/ONE_WEEK} "test" :item)))
    (is (= RetentionDays/TWO_MONTHS (retention-days {:item RetentionDays/TWO_MONTHS} "test" :item)))
    (is (= RetentionDays/TWO_MONTHS (retention-days {:test/item RetentionDays/TWO_MONTHS} "test" :item)))
    (is (= RetentionDays/ONE_MONTH (retention-days {:item RetentionDays/ONE_MONTH} "test" :item)))
    (is (= RetentionDays/ONE_MONTH (retention-days {:test/item RetentionDays/ONE_MONTH} "test" :item)))
    (is (= RetentionDays/SIX_MONTHS (retention-days {:item RetentionDays/SIX_MONTHS} "test" :item)))
    (is (= RetentionDays/SIX_MONTHS (retention-days {:test/item RetentionDays/SIX_MONTHS} "test" :item)))
    (is (= RetentionDays/TWO_YEARS (retention-days {:item RetentionDays/TWO_YEARS} "test" :item)))
    (is (= RetentionDays/TWO_YEARS (retention-days {:test/item RetentionDays/TWO_YEARS} "test" :item)))
    (is (= RetentionDays/TWO_WEEKS (retention-days {:item RetentionDays/TWO_WEEKS} "test" :item)))
    (is (= RetentionDays/TWO_WEEKS (retention-days {:test/item RetentionDays/TWO_WEEKS} "test" :item)))
    (is (= RetentionDays/THREE_MONTHS (retention-days {:item RetentionDays/THREE_MONTHS} "test" :item)))
    (is (= RetentionDays/THREE_MONTHS (retention-days {:test/item RetentionDays/THREE_MONTHS} "test" :item)))
    (is (= RetentionDays/FIVE_YEARS (retention-days {:item RetentionDays/FIVE_YEARS} "test" :item)))
    (is (= RetentionDays/FIVE_YEARS (retention-days {:test/item RetentionDays/FIVE_YEARS} "test" :item)))
    (is (= RetentionDays/FIVE_MONTHS (retention-days {:item RetentionDays/FIVE_MONTHS} "test" :item)))
    (is (= RetentionDays/FIVE_MONTHS (retention-days {:test/item RetentionDays/FIVE_MONTHS} "test" :item)))
    (is (= RetentionDays/EIGHTEEN_MONTHS (retention-days {:item RetentionDays/EIGHTEEN_MONTHS} "test" :item)))
    (is (= RetentionDays/EIGHTEEN_MONTHS (retention-days {:test/item RetentionDays/EIGHTEEN_MONTHS} "test" :item)))
    (is (= RetentionDays/ONE_DAY (retention-days {:item RetentionDays/ONE_DAY} "test" :item)))
    (is (= RetentionDays/ONE_DAY (retention-days {:test/item RetentionDays/ONE_DAY} "test" :item)))
    (is (= RetentionDays/FIVE_DAYS (retention-days {:item RetentionDays/FIVE_DAYS} "test" :item)))
    (is (= RetentionDays/FIVE_DAYS (retention-days {:test/item RetentionDays/FIVE_DAYS} "test" :item)))
    (is (= RetentionDays/FOUR_MONTHS (retention-days {:item :four-months} "test" :item)))
    (is (= RetentionDays/FOUR_MONTHS (retention-days {:test/item :four-months} "test" :item)))
    (is (= RetentionDays/SEVEN_YEARS (retention-days {:item :seven-years} "test" :item)))
    (is (= RetentionDays/SEVEN_YEARS (retention-days {:test/item :seven-years} "test" :item)))
    (is (= RetentionDays/TEN_YEARS (retention-days {:item :ten-years} "test" :item)))
    (is (= RetentionDays/TEN_YEARS (retention-days {:test/item :ten-years} "test" :item)))
    (is (= RetentionDays/THREE_YEARS (retention-days {:item :three-years} "test" :item)))
    (is (= RetentionDays/THREE_YEARS (retention-days {:test/item :three-years} "test" :item)))
    (is (= RetentionDays/ONE_YEAR (retention-days {:item :one-year} "test" :item)))
    (is (= RetentionDays/ONE_YEAR (retention-days {:test/item :one-year} "test" :item)))
    (is (= RetentionDays/EIGHT_YEARS (retention-days {:item :eight-years} "test" :item)))
    (is (= RetentionDays/EIGHT_YEARS (retention-days {:test/item :eight-years} "test" :item)))
    (is (= RetentionDays/THREE_DAYS (retention-days {:item :three-days} "test" :item)))
    (is (= RetentionDays/THREE_DAYS (retention-days {:test/item :three-days} "test" :item)))
    (is (= RetentionDays/INFINITE (retention-days {:item :infinite} "test" :item)))
    (is (= RetentionDays/INFINITE (retention-days {:test/item :infinite} "test" :item)))
    (is (= RetentionDays/NINE_YEARS (retention-days {:item :nine-years} "test" :item)))
    (is (= RetentionDays/NINE_YEARS (retention-days {:test/item :nine-years} "test" :item)))
    (is (= RetentionDays/SIX_YEARS (retention-days {:item :six-years} "test" :item)))
    (is (= RetentionDays/SIX_YEARS (retention-days {:test/item :six-years} "test" :item)))
    (is (= RetentionDays/THIRTEEN_MONTHS (retention-days {:item :thirteen-months} "test" :item)))
    (is (= RetentionDays/THIRTEEN_MONTHS (retention-days {:test/item :thirteen-months} "test" :item)))
    (is (= RetentionDays/ONE_WEEK (retention-days {:item :one-week} "test" :item)))
    (is (= RetentionDays/ONE_WEEK (retention-days {:test/item :one-week} "test" :item)))
    (is (= RetentionDays/TWO_MONTHS (retention-days {:item :two-months} "test" :item)))
    (is (= RetentionDays/TWO_MONTHS (retention-days {:test/item :two-months} "test" :item)))
    (is (= RetentionDays/ONE_MONTH (retention-days {:item :one-month} "test" :item)))
    (is (= RetentionDays/ONE_MONTH (retention-days {:test/item :one-month} "test" :item)))
    (is (= RetentionDays/SIX_MONTHS (retention-days {:item :six-months} "test" :item)))
    (is (= RetentionDays/SIX_MONTHS (retention-days {:test/item :six-months} "test" :item)))
    (is (= RetentionDays/TWO_YEARS (retention-days {:item :two-years} "test" :item)))
    (is (= RetentionDays/TWO_YEARS (retention-days {:test/item :two-years} "test" :item)))
    (is (= RetentionDays/TWO_WEEKS (retention-days {:item :two-weeks} "test" :item)))
    (is (= RetentionDays/TWO_WEEKS (retention-days {:test/item :two-weeks} "test" :item)))
    (is (= RetentionDays/THREE_MONTHS (retention-days {:item :three-months} "test" :item)))
    (is (= RetentionDays/THREE_MONTHS (retention-days {:test/item :three-months} "test" :item)))
    (is (= RetentionDays/FIVE_YEARS (retention-days {:item :five-years} "test" :item)))
    (is (= RetentionDays/FIVE_YEARS (retention-days {:test/item :five-years} "test" :item)))
    (is (= RetentionDays/FIVE_MONTHS (retention-days {:item :five-months} "test" :item)))
    (is (= RetentionDays/FIVE_MONTHS (retention-days {:test/item :five-months} "test" :item)))
    (is (= RetentionDays/EIGHTEEN_MONTHS (retention-days {:item :eighteen-months} "test" :item)))
    (is (= RetentionDays/EIGHTEEN_MONTHS (retention-days {:test/item :eighteen-months} "test" :item)))
    (is (= RetentionDays/ONE_DAY (retention-days {:item :one-day} "test" :item)))
    (is (= RetentionDays/ONE_DAY (retention-days {:test/item :one-day} "test" :item)))
    (is (= RetentionDays/FIVE_DAYS (retention-days {:item :five-days} "test" :item)))
    (is (= RetentionDays/FIVE_DAYS (retention-days {:test/item :five-days} "test" :item)))))
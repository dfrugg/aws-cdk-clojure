(ns cdk.api.services.backup-test
  "Functions that represent AWS CDK enums and builders in the software.amazon.awscdk.services.backup package. "
  (:require [cdk.api.services.backup :refer [backup-vault-events
                                             tag-operation]]
            [clojure.test :refer [deftest
                                  is
                                  testing]])
  (:import [software.amazon.awscdk.services.backup BackupVaultEvents
                                                   TagOperation]))


(deftest backup-vault-events-test
  (testing "Testing enum function backup-vault-events"
    (is (= BackupVaultEvents/RESTORE_JOB_COMPLETED (backup-vault-events {:item BackupVaultEvents/RESTORE_JOB_COMPLETED} "test" :item)))
    (is (= BackupVaultEvents/RESTORE_JOB_COMPLETED (backup-vault-events {:test/item BackupVaultEvents/RESTORE_JOB_COMPLETED} "test" :item)))
    (is (= BackupVaultEvents/RECOVERY_POINT_MODIFIED (backup-vault-events {:item BackupVaultEvents/RECOVERY_POINT_MODIFIED} "test" :item)))
    (is (= BackupVaultEvents/RECOVERY_POINT_MODIFIED (backup-vault-events {:test/item BackupVaultEvents/RECOVERY_POINT_MODIFIED} "test" :item)))
    (is (= BackupVaultEvents/RESTORE_JOB_FAILED (backup-vault-events {:item BackupVaultEvents/RESTORE_JOB_FAILED} "test" :item)))
    (is (= BackupVaultEvents/RESTORE_JOB_FAILED (backup-vault-events {:test/item BackupVaultEvents/RESTORE_JOB_FAILED} "test" :item)))
    (is (= BackupVaultEvents/COPY_JOB_SUCCESSFUL (backup-vault-events {:item BackupVaultEvents/COPY_JOB_SUCCESSFUL} "test" :item)))
    (is (= BackupVaultEvents/COPY_JOB_SUCCESSFUL (backup-vault-events {:test/item BackupVaultEvents/COPY_JOB_SUCCESSFUL} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_PLAN_CREATED (backup-vault-events {:item BackupVaultEvents/BACKUP_PLAN_CREATED} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_PLAN_CREATED (backup-vault-events {:test/item BackupVaultEvents/BACKUP_PLAN_CREATED} "test" :item)))
    (is (= BackupVaultEvents/RESTORE_JOB_SUCCESSFUL (backup-vault-events {:item BackupVaultEvents/RESTORE_JOB_SUCCESSFUL} "test" :item)))
    (is (= BackupVaultEvents/RESTORE_JOB_SUCCESSFUL (backup-vault-events {:test/item BackupVaultEvents/RESTORE_JOB_SUCCESSFUL} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_EXPIRED (backup-vault-events {:item BackupVaultEvents/BACKUP_JOB_EXPIRED} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_EXPIRED (backup-vault-events {:test/item BackupVaultEvents/BACKUP_JOB_EXPIRED} "test" :item)))
    (is (= BackupVaultEvents/S3_RESTORE_OBJECT_FAILED (backup-vault-events {:item BackupVaultEvents/S3_RESTORE_OBJECT_FAILED} "test" :item)))
    (is (= BackupVaultEvents/S3_RESTORE_OBJECT_FAILED (backup-vault-events {:test/item BackupVaultEvents/S3_RESTORE_OBJECT_FAILED} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_FAILED (backup-vault-events {:item BackupVaultEvents/BACKUP_JOB_FAILED} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_FAILED (backup-vault-events {:test/item BackupVaultEvents/BACKUP_JOB_FAILED} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_PLAN_MODIFIED (backup-vault-events {:item BackupVaultEvents/BACKUP_PLAN_MODIFIED} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_PLAN_MODIFIED (backup-vault-events {:test/item BackupVaultEvents/BACKUP_PLAN_MODIFIED} "test" :item)))
    (is (= BackupVaultEvents/COPY_JOB_STARTED (backup-vault-events {:item BackupVaultEvents/COPY_JOB_STARTED} "test" :item)))
    (is (= BackupVaultEvents/COPY_JOB_STARTED (backup-vault-events {:test/item BackupVaultEvents/COPY_JOB_STARTED} "test" :item)))
    (is (= BackupVaultEvents/S3_BACKUP_OBJECT_FAILED (backup-vault-events {:item BackupVaultEvents/S3_BACKUP_OBJECT_FAILED} "test" :item)))
    (is (= BackupVaultEvents/S3_BACKUP_OBJECT_FAILED (backup-vault-events {:test/item BackupVaultEvents/S3_BACKUP_OBJECT_FAILED} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_STARTED (backup-vault-events {:item BackupVaultEvents/BACKUP_JOB_STARTED} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_STARTED (backup-vault-events {:test/item BackupVaultEvents/BACKUP_JOB_STARTED} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_COMPLETED (backup-vault-events {:item BackupVaultEvents/BACKUP_JOB_COMPLETED} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_COMPLETED (backup-vault-events {:test/item BackupVaultEvents/BACKUP_JOB_COMPLETED} "test" :item)))
    (is (= BackupVaultEvents/RESTORE_JOB_STARTED (backup-vault-events {:item BackupVaultEvents/RESTORE_JOB_STARTED} "test" :item)))
    (is (= BackupVaultEvents/RESTORE_JOB_STARTED (backup-vault-events {:test/item BackupVaultEvents/RESTORE_JOB_STARTED} "test" :item)))
    (is (= BackupVaultEvents/COPY_JOB_FAILED (backup-vault-events {:item BackupVaultEvents/COPY_JOB_FAILED} "test" :item)))
    (is (= BackupVaultEvents/COPY_JOB_FAILED (backup-vault-events {:test/item BackupVaultEvents/COPY_JOB_FAILED} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_SUCCESSFUL (backup-vault-events {:item BackupVaultEvents/BACKUP_JOB_SUCCESSFUL} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_SUCCESSFUL (backup-vault-events {:test/item BackupVaultEvents/BACKUP_JOB_SUCCESSFUL} "test" :item)))
    (is (= BackupVaultEvents/RESTORE_JOB_COMPLETED (backup-vault-events {:item :restore-job-completed} "test" :item)))
    (is (= BackupVaultEvents/RESTORE_JOB_COMPLETED (backup-vault-events {:test/item :restore-job-completed} "test" :item)))
    (is (= BackupVaultEvents/RECOVERY_POINT_MODIFIED (backup-vault-events {:item :recovery-point-modified} "test" :item)))
    (is (= BackupVaultEvents/RECOVERY_POINT_MODIFIED (backup-vault-events {:test/item :recovery-point-modified} "test" :item)))
    (is (= BackupVaultEvents/RESTORE_JOB_FAILED (backup-vault-events {:item :restore-job-failed} "test" :item)))
    (is (= BackupVaultEvents/RESTORE_JOB_FAILED (backup-vault-events {:test/item :restore-job-failed} "test" :item)))
    (is (= BackupVaultEvents/COPY_JOB_SUCCESSFUL (backup-vault-events {:item :copy-job-successful} "test" :item)))
    (is (= BackupVaultEvents/COPY_JOB_SUCCESSFUL (backup-vault-events {:test/item :copy-job-successful} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_PLAN_CREATED (backup-vault-events {:item :backup-plan-created} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_PLAN_CREATED (backup-vault-events {:test/item :backup-plan-created} "test" :item)))
    (is (= BackupVaultEvents/RESTORE_JOB_SUCCESSFUL (backup-vault-events {:item :restore-job-successful} "test" :item)))
    (is (= BackupVaultEvents/RESTORE_JOB_SUCCESSFUL (backup-vault-events {:test/item :restore-job-successful} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_EXPIRED (backup-vault-events {:item :backup-job-expired} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_EXPIRED (backup-vault-events {:test/item :backup-job-expired} "test" :item)))
    (is (= BackupVaultEvents/S3_RESTORE_OBJECT_FAILED (backup-vault-events {:item :s3-restore-object-failed} "test" :item)))
    (is (= BackupVaultEvents/S3_RESTORE_OBJECT_FAILED (backup-vault-events {:test/item :s3-restore-object-failed} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_FAILED (backup-vault-events {:item :backup-job-failed} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_FAILED (backup-vault-events {:test/item :backup-job-failed} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_PLAN_MODIFIED (backup-vault-events {:item :backup-plan-modified} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_PLAN_MODIFIED (backup-vault-events {:test/item :backup-plan-modified} "test" :item)))
    (is (= BackupVaultEvents/COPY_JOB_STARTED (backup-vault-events {:item :copy-job-started} "test" :item)))
    (is (= BackupVaultEvents/COPY_JOB_STARTED (backup-vault-events {:test/item :copy-job-started} "test" :item)))
    (is (= BackupVaultEvents/S3_BACKUP_OBJECT_FAILED (backup-vault-events {:item :s3-backup-object-failed} "test" :item)))
    (is (= BackupVaultEvents/S3_BACKUP_OBJECT_FAILED (backup-vault-events {:test/item :s3-backup-object-failed} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_STARTED (backup-vault-events {:item :backup-job-started} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_STARTED (backup-vault-events {:test/item :backup-job-started} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_COMPLETED (backup-vault-events {:item :backup-job-completed} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_COMPLETED (backup-vault-events {:test/item :backup-job-completed} "test" :item)))
    (is (= BackupVaultEvents/RESTORE_JOB_STARTED (backup-vault-events {:item :restore-job-started} "test" :item)))
    (is (= BackupVaultEvents/RESTORE_JOB_STARTED (backup-vault-events {:test/item :restore-job-started} "test" :item)))
    (is (= BackupVaultEvents/COPY_JOB_FAILED (backup-vault-events {:item :copy-job-failed} "test" :item)))
    (is (= BackupVaultEvents/COPY_JOB_FAILED (backup-vault-events {:test/item :copy-job-failed} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_SUCCESSFUL (backup-vault-events {:item :backup-job-successful} "test" :item)))
    (is (= BackupVaultEvents/BACKUP_JOB_SUCCESSFUL (backup-vault-events {:test/item :backup-job-successful} "test" :item)))))


(deftest tag-operation-test
  (testing "Testing enum function tag-operation"
    (is (= TagOperation/STRING_EQUALS (tag-operation {:item TagOperation/STRING_EQUALS} "test" :item)))
    (is (= TagOperation/STRING_EQUALS (tag-operation {:test/item TagOperation/STRING_EQUALS} "test" :item)))
    (is (= TagOperation/DUMMY (tag-operation {:item TagOperation/DUMMY} "test" :item)))
    (is (= TagOperation/DUMMY (tag-operation {:test/item TagOperation/DUMMY} "test" :item)))
    (is (= TagOperation/STRING_EQUALS (tag-operation {:item :string-equals} "test" :item)))
    (is (= TagOperation/STRING_EQUALS (tag-operation {:test/item :string-equals} "test" :item)))
    (is (= TagOperation/DUMMY (tag-operation {:item :dummy} "test" :item)))
    (is (= TagOperation/DUMMY (tag-operation {:test/item :dummy} "test" :item)))))
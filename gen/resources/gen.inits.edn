{; Package software.amazon.awscdk
 software.amazon.awscdk
 {Intrinsic$Builder {[java.lang.Object] {:fn-args "^Object value"
                                         :init-args "value"}}

  RemoveTag$Builder {[java.lang.String] {:fn-args "^String tag-key"
                                         :init-args "tag-key"}}

  SecretValue$Builder {[java.lang.Object] {:fn-args "^Object protected-value"
                                           :init-args "protected-value"
                                           :arg-descriptions {"protected-value" "Either a plain text builder, or an instance of [[cfn-dynamic-reference-service]]"}}}

  Stack$Builder {[] {:fn-args "" :init-args ""}
                 [software.constructs.Construct] {:discard? true}
                 [software.constructs.Construct java.lang.String] {:fn-args "^Construct scope" :init-args "scope (name id)"}}

  Tag$Builder {[java.lang.String java.lang.String] {:fn-args "^String tag-key ^String tag-value"
                                                    :init-args "tag-key tag-value"}}

  TagManager$Builder {[software.amazon.awscdk.TagType java.lang.String] {:fn-args "^TagType tag-type ^String resource-manager"
                                                                         :init-args "tag-type resource-manager"}
                      [software.amazon.awscdk.TagType java.lang.String java.lang.Object] {:fn-args "^TagType tag-type ^String resource-manager ^Object initial-tags"
                                                                                          :init-args "tag-type resource-manager initial-tags"}}}

 ; Package software.amazon.awscdk.aws_apigatewayv2_authorizers
 software.amazon.awscdk.aws_apigatewayv2_authorizers
 {HttpJwtAuthorizer$Builder {[java.lang.String java.lang.String] {:fn-args "^String jwt-issuer"
                                                                  :init-args "(name id) jwt-issuer"}}

  HttpLambdaAuthorizer$Builder {[java.lang.String software.amazon.awscdk.services.lambda.IFunction] {:fn-args "^IFunction handler-function"
                                                                                                     :init-args "(name id) handler-function"}}

  HttpUserPoolAuthorizer$Builder {[java.lang.String software.amazon.awscdk.services.cognito.IUserPool] {:fn-args "^IUserPool user-pool"
                                                                                                        :init-args "(name id) user-pool"}}
  WebSocketLambdaAuthorizer$Builder {[java.lang.String software.amazon.awscdk.services.lambda.IFunction] {:fn-args "^IFunction handler-function"
                                                                                                          :init-args "(name id) handler-function"}}}

 ; Package software.amazon.awscdk.aws_apigatewayv2_integrations
 software.amazon.awscdk.aws_apigatewayv2_integrations
 {HttpAlbIntegration$Builder {[java.lang.String software.amazon.awscdk.services.elasticloadbalancingv2.IApplicationListener] {:fn-args "^IApplicationListener listener"
                                                                                                                              :init-args "(name id) listener"}}

  HttpLambdaIntegration$Builder {[java.lang.String software.amazon.awscdk.services.lambda.IFunction] {:fn-args "^IFunction handler"
                                                                                                      :init-args "(name id) handler"}}

  HttpNlbIntegration$Builder {[java.lang.String software.amazon.awscdk.services.elasticloadbalancingv2.INetworkListener] {:fn-args "^INetworkListener listener"
                                                                                                                          :init-args "(name id) listener"}}

  HttpServiceDiscoveryIntegration$Builder {[java.lang.String software.amazon.awscdk.services.servicediscovery.IService] {:fn-args "^IService service"
                                                                                                                         :init-args "(name id) service"}}

  HttpStepFunctionsIntegration$Builder {[java.lang.String] {:fn-args ""
                                                            :init-args "(name id)"}}

  HttpUrlIntegration$Builder {[java.lang.String java.lang.String] {:fn-args "^String url"
                                                                   :init-args "(name id) url"}}

  WebSocketAwsIntegration$Builder {[java.lang.String] {:fn-args ""
                                                       :init-args "(name id)"}}

  WebSocketLambdaIntegration$Builder {[java.lang.String software.amazon.awscdk.services.lambda.IFunction] {:fn-args "^IFunction handler"
                                                                                                           :init-args "(name id) handler"}}}

 ; Package software.amazon.awscdk.cxapi
 software.amazon.awscdk.cxapi
 {AssetManifestArtifact$Builder {[software.amazon.awscdk.cxapi.CloudAssembly java.lang.String] {:fn-args "^CloudAssembly assembly ^String artifact-name"
                                                                                                :init-args "assembly artifact-name"}}

  CloudAssembly$Builder {[java.lang.String] {:fn-args "^String directory"
                                             :init-args "directory"}}

  CloudAssemblyBuilder$Builder {[] {:fn-args "" :init-args ""}
                                [java.lang.String] {:fn-args "^String out-dir" :init-args "out-dir"}}

  CloudFormationStackArtifact$Builder {[software.amazon.awscdk.cxapi.CloudAssembly java.lang.String] {:fn-args "^CloudAssembly assembly ^String artifact-id"
                                                                                                      :init-args "assembly artifact-id"}}

  NestedCloudAssemblyArtifact$Builder {[software.amazon.awscdk.cxapi.CloudAssembly java.lang.String] {:fn-args "^CloudAssembly assembly ^String artifact-name"
                                                                                                      :init-args "assembly artifact-name"}}

  TreeCloudArtifact$Builder {[software.amazon.awscdk.cxapi.CloudAssembly java.lang.String] {:fn-args "^CloudAssembly assembly ^String artifact-name"
                                                                                            :init-args "assembly artifact-name"}}}

 ; Package software.amazon.awscdk.pipelines
 software.amazon.awscdk.pipelines
 {CodeBuildStep$Builder {[java.lang.String] {:fn-args ""
                                             :init-args "(name id)"}}

  ConfirmPermissionsBroadening$Builder {[java.lang.String] {:fn-args ""
                                                            :init-args "(name id)"}}

  ManualApprovalStep$Builder {[java.lang.String] {:fn-args ""
                                                  :init-args "(name id)"}}

  ShellStep$Builder {[java.lang.String] {:fn-args ""
                                         :init-args "(name id)"}}

  Wave$Builder {[java.lang.String] {:fn-args ""
                                    :init-args "(name id)"}}}

 ; Package software.amazon.awscdk.services.apigateway
 software.amazon.awscdk.services.apigateway
 {AssetApiDefinition$Builder {[java.lang.String] {:fn-args "^String path"
                                                  :init-args "path"}}

  HttpIntegration$Builder {[java.lang.String] {:fn-args "^String url"
                                               :init-args "url"}}

  LambdaIntegration$Builder {[software.amazon.awscdk.services.lambda.IFunction] {:fn-args "^IFunction handler"
                                                                                 :init-args "handler"}}

  SagemakerIntegration$Builder {[software.amazon.awscdk.services.sagemaker.IEndpoint] {:fn-args "^IEndpoint endpoint"
                                                                                       :init-args "endpoint"}}}

 ; Package software.amazon.awscdk.services.appsync
 software.amazon.awscdk.services.appsync
 {AssetCode$Builder {[java.lang.String] {:fn-args "^String path"
                                         :init-args "path"}}}

 ; Package software.amazon.awscdk.services.backup
 software.amazon.awscdk.services.backup
 {BackupResource$Builder {[] {:fn-args ""
                              :init-args ""}
                          [java.lang.String] {:fn-args "^String resource"
                                              :init-args "resource"}
                          [java.lang.String software.constructs.Construct] {:fn-args "^String resource ^Construct construct"
                                                                            :init-args "resource construct"}}}

 ; Package software.amazon.awscdk.services.cloudfront
 software.amazon.awscdk.services.cloudfront
 {AssetImportSource$Builder {[java.lang.String] {:fn-args "^String path"
                                                 :init-args "path"}}}

 ; Package software.amazon.awscdk.services.cloudfront.origins
 software.amazon.awscdk.services.cloudfront.origins
 {FunctionUrlOrigin$Builder {[software.amazon.awscdk.services.lambda.IFunctionUrl] {:fn-args "^IFunctionUrl function-url"
                                                                                    :init-args "function-url"}}

  HttpOrigin$Builder {[java.lang.String] {:fn-args "^String domain-name"
                                          :init-args "domain-name"}}

  LoadBalancerV2Origin$Builder {[software.amazon.awscdk.services.elasticloadbalancingv2.ILoadBalancerV2] {:fn-args "^ILoadBalancerV2 load-balancer"
                                                                                                          :init-args "load-balancer"}}

  RestApiOrigin$Builder {[software.amazon.awscdk.services.apigateway.RestApiBase] {:fn-args "^RestApiBase rest-api"
                                                                                   :init-args "rest-api"}}

  S3Origin$Builder {[software.amazon.awscdk.services.s3.IBucket] {:fn-args "^IBucket bucket"
                                                                  :init-args "bucket"}}}

 ; Package software.amazon.awscdk.services.ec2
 software.amazon.awscdk.services.ec2
 {GenericLinuxImage$Builder {[java.util.Map] {:fn-args "^Map ami-map"
                                              :init-args "ami-map"}}

  GenericWindowsImage$Builder {[java.util.Map] {:fn-args "^Map ami-map"
                                                :init-args "ami-map"}}

  InterfaceVpcEndpointAwsService$Builder {[java.lang.String] {:fn-args "^String service-name" :init-args "service-name"}
                                          [java.lang.String java.lang.String] {:fn-args "^String service-name ^String prefix" :init-args "service-name prefix"}
                                          [java.lang.String java.lang.String java.lang.Number] {:fn-args "^String service-name ^String prefix ^String port"
                                                                                                :init-args "service-name prefix port"}}

  ResolveSsmParameterAtLaunchImage$Builder {[java.lang.String] {:fn-args "^String parameter-name"
                                                                :init-args "parameter-name"}}

  WindowsImage$Builder {[software.amazon.awscdk.services.ec2.WindowsVersion] {:fn-args "^WindowsVersion windows-version"
                                                                              :init-args "windows-version"}}}

 ; Package software.amazon.awscdk.services.ecs
 software.amazon.awscdk.services.ecs
 {AssetEnvironmentFile$Builder {[java.lang.String] {:fn-args "^String path"
                                                    :init-args "path"}}

  AssetImage$Builder {[java.lang.String] {:fn-args "^String directory"
                                          :init-args "directory"}}

  PortMap$Builder {[software.amazon.awscdk.services.ecs.NetworkMode] {:fn-args "^NetworkMode network-mode"
                                                                      :init-args "network-mode"}}

  RepositoryImage$Builder {[java.lang.String] {:fn-args "^String image-name"
                                               :init-args "image-name"}}

  ServiceConnect$Builder {[software.amazon.awscdk.services.ecs.NetworkMode] {:fn-args "^NetworkMode network-mode"
                                                                             :init-args "network-mode"}}}

 ; Package software.amazon.awscdk.services.events.targets
 software.amazon.awscdk.services.events.targets
 {ApiDestination$Builder {[software.amazon.awscdk.services.events.IApiDestination] {:fn-args "^IApiDestination api-destination"
                                                                                    :init-args "api-destination"}}

  ApiGateway$Builder {[software.amazon.awscdk.services.apigateway.IRestApi] {:fn-args "^IRestApi rest-api"
                                                                             :init-args "rest-api"}}

  AppSync$Builder {[software.amazon.awscdk.services.appsync.IGraphqlApi] {:fn-args "^IGraphqlApi graphql-api"
                                                                          :init-args "graphql-api"}}

  BatchJob$Builder {[java.lang.String software.constructs.IConstruct java.lang.String software.constructs.IConstruct]
                    {:fn-args "^String job-queue-arn ^IConstruct job-queue-scope ^String job-definition-arn ^IConstruct job-definition-scope"
                     :init-args "job-queue-arn job-queue-scope job-definition-arn job-definition-scope"}}

  CloudWatchLogGroup$Builder {[software.amazon.awscdk.services.logs.ILogGroup] {:fn-args "^ILogGroup log-group"
                                                                                :init-args "log-group"}}

  CodeBuildProject$Builder {[software.amazon.awscdk.services.codebuild.IProject] {:fn-args "^IProject project"
                                                                                  :init-args "project"}}

  CodePipeline$Builder {[software.amazon.awscdk.services.codepipeline.IPipeline] {:fn-args "^IPipeline pipeline"
                                                                                  :init-args "pipeline"}}

  EventBus$Builder {[software.amazon.awscdk.services.events.IEventBus] {:fn-args "^IEventBus event-bus"
                                                                        :init-args "event-bus"}}

  KinesisFirehoseStreamV2$Builder {[software.amazon.awscdk.services.events.targets.IDeliveryStream] {:fn-args "^IDeliveryStream delivery-stream"
                                                                                                     :init-args "delivery-stream"}}

  KinesisStream$Builder {[software.amazon.awscdk.services.kinesis.IStream] {:fn-args "^IStream stream"
                                                                            :init-args "stream"}}

  LambdaFunction$Builder {[software.amazon.awscdk.services.lambda.IFunction] {:fn-args "^IFunction handler"
                                                                              :init-args "handler"}}

  SfnStateMachine$Builder {[software.amazon.awscdk.services.stepfunctions.IStateMachine] {:fn-args "^IStateMachine state-machine"
                                                                                          :init-args "state-machine"}}

  SnsTopic$Builder {[software.amazon.awscdk.services.sns.ITopic] {:fn-args "^ITopic topic"
                                                                  :init-args "topic"}}

  SqsQueue$Builder {[software.amazon.awscdk.services.sqs.IQueue] {:fn-args "^IQueue queue"
                                                                  :init-args "queue"}}}

 ; Package software.amazon.awscdk.services.globalaccelerator.endpoints
 software.amazon.awscdk.services.globalaccelerator.endpoints
 {ApplicationLoadBalancerEndpoint$Builder {[software.amazon.awscdk.services.elasticloadbalancingv2.IApplicationLoadBalancer] {:fn-args "^IApplicationLoadBalancer load-balancer"
                                                                                                                              :init-args "load-balancer"}}

  CfnEipEndpoint$Builder {[software.amazon.awscdk.services.ec2.CfnEIP] {:fn-args "^CfnEIP eip"
                                                                        :init-args "eip"}}

  InstanceEndpoint$Builder {[software.amazon.awscdk.services.ec2.IInstance] {:fn-args "^IInstance endpoint-instance"
                                                                             :init-args "endpoint-instance"}}

  NetworkLoadBalancerEndpoint$Builder {[software.amazon.awscdk.services.elasticloadbalancingv2.INetworkLoadBalancer] {:fn-args "^INetworkLoadBalancer load-balancer"
                                                                                                                      :init-args "load-balancer"}}}

 ; Package software.amazon.awscdk.services.iam
 software.amazon.awscdk.services.iam
 {ServicePrincipal$Builder {[java.lang.String] {:fn-args "^String service"
                                                :init-args "service"}}}

 ; Package software.amazon.awscdk.services.lambda
 software.amazon.awscdk.services.lambda
 {AssetCode$Builder  {[java.lang.String] {:fn-args "^String path"
                                          :init-args "path"}}

  AssetImageCode$Builder {[java.lang.String] {:fn-args "^String directory"
                                              :init-args "directory"}}

  EcrImageCode$Builder {[software.amazon.awscdk.services.ecr.IRepository] {:fn-args "^IRepository repository"
                                                                           :init-args "repository"}}

  Runtime$Builder {[java.lang.String] {:fn-args "^String runtime-name"
                                       :init-args "runtime-name"}
                   [java.lang.String software.amazon.awscdk.services.lambda.RuntimeFamily] {:fn-args "^String runtime-name ^RuntimeFamily runtime-family"
                                                                                            :init-args "runtime-name runtime-family"}}}

 ; Package software.amazon.awscdk.services.lambda.destinations
 software.amazon.awscdk.services.lambda.destinations
 {LambdaDestination$Builder {[software.amazon.awscdk.services.lambda.IFunction] {:fn-args "^IFunction handler"
                                                                                 :init-args "handler"}}}

 ; Package software.amazon.awscdk.services.lambda.eventsources
 software.amazon.awscdk.services.lambda.eventsources
 {ApiEventSource$Builder {[java.lang.String java.lang.String] {:fn-args "^String method ^String path"
                                                               :init-args "method path"}}

  DynamoEventSource$Builder {[software.amazon.awscdk.services.dynamodb.ITable] {:fn-args "^ITable table"
                                                                                :init-args "table"}}

  KinesisEventSource$Builder {[software.amazon.awscdk.services.kinesis.IStream] {:fn-args "^IStream stream"
                                                                                 :init-args "stream"}}

  S3EventSource$Builder {[software.amazon.awscdk.services.s3.Bucket] {:fn-args "^Bucket bucket"
                                                                      :init-args "bucket"}}

  S3EventSourceV2$Builder {[software.amazon.awscdk.services.s3.IBucket] {:fn-args "^IBucket bucket"
                                                                         :init-args "bucket"}}

  SnsEventSource$Builder {[software.amazon.awscdk.services.sns.ITopic] {:fn-args "^ITopic topic"
                                                                        :init-args "topic"}}

  SqsEventSource$Builder {[software.amazon.awscdk.services.sqs.IQueue] {:fn-args "^IQueue queue"
                                                                        :init-args "queue"}}}

 ; Package software.amazon.awscdk.services.logs.destinations
 software.amazon.awscdk.services.logs.destinations
 {KinesisDestination$Builder {[software.amazon.awscdk.services.kinesis.IStream] {:fn-args "^IStream stream"
                                                                                 :init-args "stream"}}

  LambdaDestination$Builder {[software.amazon.awscdk.services.lambda.IFunction] {:fn-args "^IFunction handler"
                                                                                 :init-args "handler"}}}

 ; Package software.amazon.awscdk.services.secretsmanager
 software.amazon.awscdk.services.secretsmanager
 {SecretRotationApplication$Builder {[java.lang.String java.lang.String] {:fn-args "^String application-id ^String semantic-version"
                                                                          :init-args "application-id semantic-version"}}}

 ; Package software.amazon.awscdk.services.sns.subscriptions
 software.amazon.awscdk.services.sns.subscriptions
 {EmailSubscription$Builder {[java.lang.String] {:fn-args "^String email"
                                                 :init-args "email"}}

  LambdaSubscription$Builder {[software.amazon.awscdk.services.lambda.IFunction] {:fn-args "^IFunction handler"
                                                                                  :init-args "handler"}}

  SmsSubscription$Builder {[java.lang.String] {:fn-args "^String phone-number"
                                               :init-args "phone-number"}}

  SqsSubscription$Builder {[software.amazon.awscdk.services.sqs.IQueue] {:fn-args "^IQueue queue"
                                                                         :init-args "queue"}}

  UrlSubscription$Builder {[java.lang.String] {:fn-args "^String url"
                                               :init-args "url"}}}

 ; Package software.amazon.awscdk.services.stepfunctions
 software.amazon.awscdk.services.stepfunctions
 {FileDefinitionBody$Builder {[java.lang.String] {:fn-args "^String path"
                                                  :init-args "path"}}}

 ; Package software.amazon.awscdk.services.synthetics
 software.amazon.awscdk.services.synthetics
 {AssetCode$Builder {[java.lang.String] {:fn-args "^String path"
                                         :init-args "path"}}}
 }

(ns cdk.api.services.quicksight
  "Functions that represent AWS CDK enums and builders in the software.amazon.awscdk.services.quicksight package. "
  (:require [cdk.support :refer [lookup-entry]])
  (:import [software.amazon.awscdk.services.quicksight CfnAnalysis$AggregationFunctionProperty$Builder
                                                       CfnAnalysis$AggregationSortConfigurationProperty$Builder
                                                       CfnAnalysis$AnalysisDefaultsProperty$Builder
                                                       CfnAnalysis$AnalysisDefinitionProperty$Builder
                                                       CfnAnalysis$AnalysisErrorProperty$Builder
                                                       CfnAnalysis$AnalysisSourceEntityProperty$Builder
                                                       CfnAnalysis$AnalysisSourceTemplateProperty$Builder
                                                       CfnAnalysis$AnchorDateConfigurationProperty$Builder
                                                       CfnAnalysis$ArcAxisConfigurationProperty$Builder
                                                       CfnAnalysis$ArcAxisDisplayRangeProperty$Builder
                                                       CfnAnalysis$ArcConfigurationProperty$Builder
                                                       CfnAnalysis$ArcOptionsProperty$Builder
                                                       CfnAnalysis$AssetOptionsProperty$Builder
                                                       CfnAnalysis$AttributeAggregationFunctionProperty$Builder
                                                       CfnAnalysis$AxisDataOptionsProperty$Builder
                                                       CfnAnalysis$AxisDisplayMinMaxRangeProperty$Builder
                                                       CfnAnalysis$AxisDisplayOptionsProperty$Builder
                                                       CfnAnalysis$AxisDisplayRangeProperty$Builder
                                                       CfnAnalysis$AxisLabelOptionsProperty$Builder
                                                       CfnAnalysis$AxisLabelReferenceOptionsProperty$Builder
                                                       CfnAnalysis$AxisLinearScaleProperty$Builder
                                                       CfnAnalysis$AxisLogarithmicScaleProperty$Builder
                                                       CfnAnalysis$AxisScaleProperty$Builder
                                                       CfnAnalysis$AxisTickLabelOptionsProperty$Builder
                                                       CfnAnalysis$BarChartAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$BarChartConfigurationProperty$Builder
                                                       CfnAnalysis$BarChartFieldWellsProperty$Builder
                                                       CfnAnalysis$BarChartSortConfigurationProperty$Builder
                                                       CfnAnalysis$BarChartVisualProperty$Builder
                                                       CfnAnalysis$BinCountOptionsProperty$Builder
                                                       CfnAnalysis$BinWidthOptionsProperty$Builder
                                                       CfnAnalysis$BodySectionConfigurationProperty$Builder
                                                       CfnAnalysis$BodySectionContentProperty$Builder
                                                       CfnAnalysis$BoxPlotAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$BoxPlotChartConfigurationProperty$Builder
                                                       CfnAnalysis$BoxPlotFieldWellsProperty$Builder
                                                       CfnAnalysis$BoxPlotOptionsProperty$Builder
                                                       CfnAnalysis$BoxPlotSortConfigurationProperty$Builder
                                                       CfnAnalysis$BoxPlotStyleOptionsProperty$Builder
                                                       CfnAnalysis$BoxPlotVisualProperty$Builder
                                                       CfnAnalysis$Builder
                                                       CfnAnalysis$CalculatedFieldProperty$Builder
                                                       CfnAnalysis$CalculatedMeasureFieldProperty$Builder
                                                       CfnAnalysis$CascadingControlConfigurationProperty$Builder
                                                       CfnAnalysis$CascadingControlSourceProperty$Builder
                                                       CfnAnalysis$CategoricalDimensionFieldProperty$Builder
                                                       CfnAnalysis$CategoricalMeasureFieldProperty$Builder
                                                       CfnAnalysis$CategoryDrillDownFilterProperty$Builder
                                                       CfnAnalysis$CategoryFilterConfigurationProperty$Builder
                                                       CfnAnalysis$CategoryFilterProperty$Builder
                                                       CfnAnalysis$ChartAxisLabelOptionsProperty$Builder
                                                       CfnAnalysis$ClusterMarkerConfigurationProperty$Builder
                                                       CfnAnalysis$ClusterMarkerProperty$Builder
                                                       CfnAnalysis$ColorScaleProperty$Builder
                                                       CfnAnalysis$ColorsConfigurationProperty$Builder
                                                       CfnAnalysis$ColumnConfigurationProperty$Builder
                                                       CfnAnalysis$ColumnHierarchyProperty$Builder
                                                       CfnAnalysis$ColumnIdentifierProperty$Builder
                                                       CfnAnalysis$ColumnSortProperty$Builder
                                                       CfnAnalysis$ColumnTooltipItemProperty$Builder
                                                       CfnAnalysis$ComboChartAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$ComboChartConfigurationProperty$Builder
                                                       CfnAnalysis$ComboChartFieldWellsProperty$Builder
                                                       CfnAnalysis$ComboChartSortConfigurationProperty$Builder
                                                       CfnAnalysis$ComboChartVisualProperty$Builder
                                                       CfnAnalysis$ComparisonConfigurationProperty$Builder
                                                       CfnAnalysis$ComparisonFormatConfigurationProperty$Builder
                                                       CfnAnalysis$ComputationProperty$Builder
                                                       CfnAnalysis$ConditionalFormattingColorProperty$Builder
                                                       CfnAnalysis$ConditionalFormattingCustomIconConditionProperty$Builder
                                                       CfnAnalysis$ConditionalFormattingCustomIconOptionsProperty$Builder
                                                       CfnAnalysis$ConditionalFormattingGradientColorProperty$Builder
                                                       CfnAnalysis$ConditionalFormattingIconDisplayConfigurationProperty$Builder
                                                       CfnAnalysis$ConditionalFormattingIconProperty$Builder
                                                       CfnAnalysis$ConditionalFormattingIconSetProperty$Builder
                                                       CfnAnalysis$ConditionalFormattingSolidColorProperty$Builder
                                                       CfnAnalysis$ContributionAnalysisDefaultProperty$Builder
                                                       CfnAnalysis$CurrencyDisplayFormatConfigurationProperty$Builder
                                                       CfnAnalysis$CustomActionFilterOperationProperty$Builder
                                                       CfnAnalysis$CustomActionNavigationOperationProperty$Builder
                                                       CfnAnalysis$CustomActionSetParametersOperationProperty$Builder
                                                       CfnAnalysis$CustomActionURLOperationProperty$Builder
                                                       CfnAnalysis$CustomColorProperty$Builder
                                                       CfnAnalysis$CustomContentConfigurationProperty$Builder
                                                       CfnAnalysis$CustomContentVisualProperty$Builder
                                                       CfnAnalysis$CustomFilterConfigurationProperty$Builder
                                                       CfnAnalysis$CustomFilterListConfigurationProperty$Builder
                                                       CfnAnalysis$CustomNarrativeOptionsProperty$Builder
                                                       CfnAnalysis$CustomParameterValuesProperty$Builder
                                                       CfnAnalysis$CustomValuesConfigurationProperty$Builder
                                                       CfnAnalysis$DataBarsOptionsProperty$Builder
                                                       CfnAnalysis$DataColorProperty$Builder
                                                       CfnAnalysis$DataFieldSeriesItemProperty$Builder
                                                       CfnAnalysis$DataLabelOptionsProperty$Builder
                                                       CfnAnalysis$DataLabelTypeProperty$Builder
                                                       CfnAnalysis$DataPathColorProperty$Builder
                                                       CfnAnalysis$DataPathLabelTypeProperty$Builder
                                                       CfnAnalysis$DataPathSortProperty$Builder
                                                       CfnAnalysis$DataPathTypeProperty$Builder
                                                       CfnAnalysis$DataPathValueProperty$Builder
                                                       CfnAnalysis$DataSetIdentifierDeclarationProperty$Builder
                                                       CfnAnalysis$DataSetReferenceProperty$Builder
                                                       CfnAnalysis$DateAxisOptionsProperty$Builder
                                                       CfnAnalysis$DateDimensionFieldProperty$Builder
                                                       CfnAnalysis$DateMeasureFieldProperty$Builder
                                                       CfnAnalysis$DateTimeDefaultValuesProperty$Builder
                                                       CfnAnalysis$DateTimeFormatConfigurationProperty$Builder
                                                       CfnAnalysis$DateTimeHierarchyProperty$Builder
                                                       CfnAnalysis$DateTimeParameterDeclarationProperty$Builder
                                                       CfnAnalysis$DateTimeParameterProperty$Builder
                                                       CfnAnalysis$DateTimePickerControlDisplayOptionsProperty$Builder
                                                       CfnAnalysis$DateTimeValueWhenUnsetConfigurationProperty$Builder
                                                       CfnAnalysis$DecimalDefaultValuesProperty$Builder
                                                       CfnAnalysis$DecimalParameterDeclarationProperty$Builder
                                                       CfnAnalysis$DecimalParameterProperty$Builder
                                                       CfnAnalysis$DecimalPlacesConfigurationProperty$Builder
                                                       CfnAnalysis$DecimalValueWhenUnsetConfigurationProperty$Builder
                                                       CfnAnalysis$DefaultDateTimePickerControlOptionsProperty$Builder
                                                       CfnAnalysis$DefaultFilterControlConfigurationProperty$Builder
                                                       CfnAnalysis$DefaultFilterControlOptionsProperty$Builder
                                                       CfnAnalysis$DefaultFilterDropDownControlOptionsProperty$Builder
                                                       CfnAnalysis$DefaultFilterListControlOptionsProperty$Builder
                                                       CfnAnalysis$DefaultFreeFormLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$DefaultGridLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$DefaultInteractiveLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$DefaultNewSheetConfigurationProperty$Builder
                                                       CfnAnalysis$DefaultPaginatedLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$DefaultRelativeDateTimeControlOptionsProperty$Builder
                                                       CfnAnalysis$DefaultSectionBasedLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$DefaultSliderControlOptionsProperty$Builder
                                                       CfnAnalysis$DefaultTextAreaControlOptionsProperty$Builder
                                                       CfnAnalysis$DefaultTextFieldControlOptionsProperty$Builder
                                                       CfnAnalysis$DestinationParameterValueConfigurationProperty$Builder
                                                       CfnAnalysis$DimensionFieldProperty$Builder
                                                       CfnAnalysis$DonutCenterOptionsProperty$Builder
                                                       CfnAnalysis$DonutOptionsProperty$Builder
                                                       CfnAnalysis$DrillDownFilterProperty$Builder
                                                       CfnAnalysis$DropDownControlDisplayOptionsProperty$Builder
                                                       CfnAnalysis$DynamicDefaultValueProperty$Builder
                                                       CfnAnalysis$EmptyVisualProperty$Builder
                                                       CfnAnalysis$EntityProperty$Builder
                                                       CfnAnalysis$ExcludePeriodConfigurationProperty$Builder
                                                       CfnAnalysis$ExplicitHierarchyProperty$Builder
                                                       CfnAnalysis$FieldBasedTooltipProperty$Builder
                                                       CfnAnalysis$FieldLabelTypeProperty$Builder
                                                       CfnAnalysis$FieldSeriesItemProperty$Builder
                                                       CfnAnalysis$FieldSortOptionsProperty$Builder
                                                       CfnAnalysis$FieldSortProperty$Builder
                                                       CfnAnalysis$FieldTooltipItemProperty$Builder
                                                       CfnAnalysis$FilledMapAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$FilledMapConditionalFormattingOptionProperty$Builder
                                                       CfnAnalysis$FilledMapConditionalFormattingProperty$Builder
                                                       CfnAnalysis$FilledMapConfigurationProperty$Builder
                                                       CfnAnalysis$FilledMapFieldWellsProperty$Builder
                                                       CfnAnalysis$FilledMapShapeConditionalFormattingProperty$Builder
                                                       CfnAnalysis$FilledMapSortConfigurationProperty$Builder
                                                       CfnAnalysis$FilledMapVisualProperty$Builder
                                                       CfnAnalysis$FilterControlProperty$Builder
                                                       CfnAnalysis$FilterCrossSheetControlProperty$Builder
                                                       CfnAnalysis$FilterDateTimePickerControlProperty$Builder
                                                       CfnAnalysis$FilterDropDownControlProperty$Builder
                                                       CfnAnalysis$FilterGroupProperty$Builder
                                                       CfnAnalysis$FilterListConfigurationProperty$Builder
                                                       CfnAnalysis$FilterListControlProperty$Builder
                                                       CfnAnalysis$FilterOperationSelectedFieldsConfigurationProperty$Builder
                                                       CfnAnalysis$FilterOperationTargetVisualsConfigurationProperty$Builder
                                                       CfnAnalysis$FilterProperty$Builder
                                                       CfnAnalysis$FilterRelativeDateTimeControlProperty$Builder
                                                       CfnAnalysis$FilterScopeConfigurationProperty$Builder
                                                       CfnAnalysis$FilterSelectableValuesProperty$Builder
                                                       CfnAnalysis$FilterSliderControlProperty$Builder
                                                       CfnAnalysis$FilterTextAreaControlProperty$Builder
                                                       CfnAnalysis$FilterTextFieldControlProperty$Builder
                                                       CfnAnalysis$FontConfigurationProperty$Builder
                                                       CfnAnalysis$FontSizeProperty$Builder
                                                       CfnAnalysis$FontWeightProperty$Builder
                                                       CfnAnalysis$ForecastComputationProperty$Builder
                                                       CfnAnalysis$ForecastConfigurationProperty$Builder
                                                       CfnAnalysis$ForecastScenarioProperty$Builder
                                                       CfnAnalysis$FormatConfigurationProperty$Builder
                                                       CfnAnalysis$FreeFormLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnAnalysis$FreeFormLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$FreeFormLayoutElementBackgroundStyleProperty$Builder
                                                       CfnAnalysis$FreeFormLayoutElementBorderStyleProperty$Builder
                                                       CfnAnalysis$FreeFormLayoutElementProperty$Builder
                                                       CfnAnalysis$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder
                                                       CfnAnalysis$FreeFormSectionLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$FunnelChartAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$FunnelChartConfigurationProperty$Builder
                                                       CfnAnalysis$FunnelChartDataLabelOptionsProperty$Builder
                                                       CfnAnalysis$FunnelChartFieldWellsProperty$Builder
                                                       CfnAnalysis$FunnelChartSortConfigurationProperty$Builder
                                                       CfnAnalysis$FunnelChartVisualProperty$Builder
                                                       CfnAnalysis$GaugeChartArcConditionalFormattingProperty$Builder
                                                       CfnAnalysis$GaugeChartConditionalFormattingOptionProperty$Builder
                                                       CfnAnalysis$GaugeChartConditionalFormattingProperty$Builder
                                                       CfnAnalysis$GaugeChartConfigurationProperty$Builder
                                                       CfnAnalysis$GaugeChartFieldWellsProperty$Builder
                                                       CfnAnalysis$GaugeChartOptionsProperty$Builder
                                                       CfnAnalysis$GaugeChartPrimaryValueConditionalFormattingProperty$Builder
                                                       CfnAnalysis$GaugeChartVisualProperty$Builder
                                                       CfnAnalysis$GeospatialCoordinateBoundsProperty$Builder
                                                       CfnAnalysis$GeospatialHeatmapColorScaleProperty$Builder
                                                       CfnAnalysis$GeospatialHeatmapConfigurationProperty$Builder
                                                       CfnAnalysis$GeospatialHeatmapDataColorProperty$Builder
                                                       CfnAnalysis$GeospatialMapAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$GeospatialMapConfigurationProperty$Builder
                                                       CfnAnalysis$GeospatialMapFieldWellsProperty$Builder
                                                       CfnAnalysis$GeospatialMapStyleOptionsProperty$Builder
                                                       CfnAnalysis$GeospatialMapVisualProperty$Builder
                                                       CfnAnalysis$GeospatialPointStyleOptionsProperty$Builder
                                                       CfnAnalysis$GeospatialWindowOptionsProperty$Builder
                                                       CfnAnalysis$GlobalTableBorderOptionsProperty$Builder
                                                       CfnAnalysis$GradientColorProperty$Builder
                                                       CfnAnalysis$GradientStopProperty$Builder
                                                       CfnAnalysis$GridLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnAnalysis$GridLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$GridLayoutElementProperty$Builder
                                                       CfnAnalysis$GridLayoutScreenCanvasSizeOptionsProperty$Builder
                                                       CfnAnalysis$GrowthRateComputationProperty$Builder
                                                       CfnAnalysis$HeaderFooterSectionConfigurationProperty$Builder
                                                       CfnAnalysis$HeatMapAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$HeatMapConfigurationProperty$Builder
                                                       CfnAnalysis$HeatMapFieldWellsProperty$Builder
                                                       CfnAnalysis$HeatMapSortConfigurationProperty$Builder
                                                       CfnAnalysis$HeatMapVisualProperty$Builder
                                                       CfnAnalysis$HistogramAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$HistogramBinOptionsProperty$Builder
                                                       CfnAnalysis$HistogramConfigurationProperty$Builder
                                                       CfnAnalysis$HistogramFieldWellsProperty$Builder
                                                       CfnAnalysis$HistogramVisualProperty$Builder
                                                       CfnAnalysis$InsightConfigurationProperty$Builder
                                                       CfnAnalysis$InsightVisualProperty$Builder
                                                       CfnAnalysis$IntegerDefaultValuesProperty$Builder
                                                       CfnAnalysis$IntegerParameterDeclarationProperty$Builder
                                                       CfnAnalysis$IntegerParameterProperty$Builder
                                                       CfnAnalysis$IntegerValueWhenUnsetConfigurationProperty$Builder
                                                       CfnAnalysis$ItemsLimitConfigurationProperty$Builder
                                                       CfnAnalysis$KPIActualValueConditionalFormattingProperty$Builder
                                                       CfnAnalysis$KPIComparisonValueConditionalFormattingProperty$Builder
                                                       CfnAnalysis$KPIConditionalFormattingOptionProperty$Builder
                                                       CfnAnalysis$KPIConditionalFormattingProperty$Builder
                                                       CfnAnalysis$KPIConfigurationProperty$Builder
                                                       CfnAnalysis$KPIFieldWellsProperty$Builder
                                                       CfnAnalysis$KPIOptionsProperty$Builder
                                                       CfnAnalysis$KPIPrimaryValueConditionalFormattingProperty$Builder
                                                       CfnAnalysis$KPIProgressBarConditionalFormattingProperty$Builder
                                                       CfnAnalysis$KPISortConfigurationProperty$Builder
                                                       CfnAnalysis$KPISparklineOptionsProperty$Builder
                                                       CfnAnalysis$KPIVisualLayoutOptionsProperty$Builder
                                                       CfnAnalysis$KPIVisualProperty$Builder
                                                       CfnAnalysis$KPIVisualStandardLayoutProperty$Builder
                                                       CfnAnalysis$LabelOptionsProperty$Builder
                                                       CfnAnalysis$LayoutConfigurationProperty$Builder
                                                       CfnAnalysis$LayoutProperty$Builder
                                                       CfnAnalysis$LegendOptionsProperty$Builder
                                                       CfnAnalysis$LineChartAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$LineChartConfigurationProperty$Builder
                                                       CfnAnalysis$LineChartDefaultSeriesSettingsProperty$Builder
                                                       CfnAnalysis$LineChartFieldWellsProperty$Builder
                                                       CfnAnalysis$LineChartLineStyleSettingsProperty$Builder
                                                       CfnAnalysis$LineChartMarkerStyleSettingsProperty$Builder
                                                       CfnAnalysis$LineChartSeriesSettingsProperty$Builder
                                                       CfnAnalysis$LineChartSortConfigurationProperty$Builder
                                                       CfnAnalysis$LineChartVisualProperty$Builder
                                                       CfnAnalysis$LineSeriesAxisDisplayOptionsProperty$Builder
                                                       CfnAnalysis$ListControlDisplayOptionsProperty$Builder
                                                       CfnAnalysis$ListControlSearchOptionsProperty$Builder
                                                       CfnAnalysis$ListControlSelectAllOptionsProperty$Builder
                                                       CfnAnalysis$LoadingAnimationProperty$Builder
                                                       CfnAnalysis$LocalNavigationConfigurationProperty$Builder
                                                       CfnAnalysis$LongFormatTextProperty$Builder
                                                       CfnAnalysis$MappedDataSetParameterProperty$Builder
                                                       CfnAnalysis$MaximumLabelTypeProperty$Builder
                                                       CfnAnalysis$MaximumMinimumComputationProperty$Builder
                                                       CfnAnalysis$MeasureFieldProperty$Builder
                                                       CfnAnalysis$MetricComparisonComputationProperty$Builder
                                                       CfnAnalysis$MinimumLabelTypeProperty$Builder
                                                       CfnAnalysis$MissingDataConfigurationProperty$Builder
                                                       CfnAnalysis$NegativeValueConfigurationProperty$Builder
                                                       CfnAnalysis$NullValueFormatConfigurationProperty$Builder
                                                       CfnAnalysis$NumberDisplayFormatConfigurationProperty$Builder
                                                       CfnAnalysis$NumberFormatConfigurationProperty$Builder
                                                       CfnAnalysis$NumericAxisOptionsProperty$Builder
                                                       CfnAnalysis$NumericEqualityDrillDownFilterProperty$Builder
                                                       CfnAnalysis$NumericEqualityFilterProperty$Builder
                                                       CfnAnalysis$NumericFormatConfigurationProperty$Builder
                                                       CfnAnalysis$NumericRangeFilterProperty$Builder
                                                       CfnAnalysis$NumericRangeFilterValueProperty$Builder
                                                       CfnAnalysis$NumericSeparatorConfigurationProperty$Builder
                                                       CfnAnalysis$NumericalAggregationFunctionProperty$Builder
                                                       CfnAnalysis$NumericalDimensionFieldProperty$Builder
                                                       CfnAnalysis$NumericalMeasureFieldProperty$Builder
                                                       CfnAnalysis$PaginationConfigurationProperty$Builder
                                                       CfnAnalysis$PanelConfigurationProperty$Builder
                                                       CfnAnalysis$PanelTitleOptionsProperty$Builder
                                                       CfnAnalysis$ParameterControlProperty$Builder
                                                       CfnAnalysis$ParameterDateTimePickerControlProperty$Builder
                                                       CfnAnalysis$ParameterDeclarationProperty$Builder
                                                       CfnAnalysis$ParameterDropDownControlProperty$Builder
                                                       CfnAnalysis$ParameterListControlProperty$Builder
                                                       CfnAnalysis$ParameterSelectableValuesProperty$Builder
                                                       CfnAnalysis$ParameterSliderControlProperty$Builder
                                                       CfnAnalysis$ParameterTextAreaControlProperty$Builder
                                                       CfnAnalysis$ParameterTextFieldControlProperty$Builder
                                                       CfnAnalysis$ParametersProperty$Builder
                                                       CfnAnalysis$PercentVisibleRangeProperty$Builder
                                                       CfnAnalysis$PercentageDisplayFormatConfigurationProperty$Builder
                                                       CfnAnalysis$PercentileAggregationProperty$Builder
                                                       CfnAnalysis$PeriodOverPeriodComputationProperty$Builder
                                                       CfnAnalysis$PeriodToDateComputationProperty$Builder
                                                       CfnAnalysis$PieChartAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$PieChartConfigurationProperty$Builder
                                                       CfnAnalysis$PieChartFieldWellsProperty$Builder
                                                       CfnAnalysis$PieChartSortConfigurationProperty$Builder
                                                       CfnAnalysis$PieChartVisualProperty$Builder
                                                       CfnAnalysis$PivotFieldSortOptionsProperty$Builder
                                                       CfnAnalysis$PivotTableAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$PivotTableCellConditionalFormattingProperty$Builder
                                                       CfnAnalysis$PivotTableConditionalFormattingOptionProperty$Builder
                                                       CfnAnalysis$PivotTableConditionalFormattingProperty$Builder
                                                       CfnAnalysis$PivotTableConditionalFormattingScopeProperty$Builder
                                                       CfnAnalysis$PivotTableConfigurationProperty$Builder
                                                       CfnAnalysis$PivotTableDataPathOptionProperty$Builder
                                                       CfnAnalysis$PivotTableFieldCollapseStateOptionProperty$Builder
                                                       CfnAnalysis$PivotTableFieldCollapseStateTargetProperty$Builder
                                                       CfnAnalysis$PivotTableFieldOptionProperty$Builder
                                                       CfnAnalysis$PivotTableFieldOptionsProperty$Builder
                                                       CfnAnalysis$PivotTableFieldSubtotalOptionsProperty$Builder
                                                       CfnAnalysis$PivotTableFieldWellsProperty$Builder
                                                       CfnAnalysis$PivotTableOptionsProperty$Builder
                                                       CfnAnalysis$PivotTablePaginatedReportOptionsProperty$Builder
                                                       CfnAnalysis$PivotTableRowsLabelOptionsProperty$Builder
                                                       CfnAnalysis$PivotTableSortByProperty$Builder
                                                       CfnAnalysis$PivotTableSortConfigurationProperty$Builder
                                                       CfnAnalysis$PivotTableTotalOptionsProperty$Builder
                                                       CfnAnalysis$PivotTableVisualProperty$Builder
                                                       CfnAnalysis$PivotTotalOptionsProperty$Builder
                                                       CfnAnalysis$PredefinedHierarchyProperty$Builder
                                                       CfnAnalysis$ProgressBarOptionsProperty$Builder
                                                       CfnAnalysis$RadarChartAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$RadarChartAreaStyleSettingsProperty$Builder
                                                       CfnAnalysis$RadarChartConfigurationProperty$Builder
                                                       CfnAnalysis$RadarChartFieldWellsProperty$Builder
                                                       CfnAnalysis$RadarChartSeriesSettingsProperty$Builder
                                                       CfnAnalysis$RadarChartSortConfigurationProperty$Builder
                                                       CfnAnalysis$RadarChartVisualProperty$Builder
                                                       CfnAnalysis$RangeEndsLabelTypeProperty$Builder
                                                       CfnAnalysis$ReferenceLineCustomLabelConfigurationProperty$Builder
                                                       CfnAnalysis$ReferenceLineDataConfigurationProperty$Builder
                                                       CfnAnalysis$ReferenceLineDynamicDataConfigurationProperty$Builder
                                                       CfnAnalysis$ReferenceLineLabelConfigurationProperty$Builder
                                                       CfnAnalysis$ReferenceLineProperty$Builder
                                                       CfnAnalysis$ReferenceLineStaticDataConfigurationProperty$Builder
                                                       CfnAnalysis$ReferenceLineStyleConfigurationProperty$Builder
                                                       CfnAnalysis$ReferenceLineValueLabelConfigurationProperty$Builder
                                                       CfnAnalysis$RelativeDateTimeControlDisplayOptionsProperty$Builder
                                                       CfnAnalysis$RelativeDatesFilterProperty$Builder
                                                       CfnAnalysis$ResourcePermissionProperty$Builder
                                                       CfnAnalysis$RollingDateConfigurationProperty$Builder
                                                       CfnAnalysis$RowAlternateColorOptionsProperty$Builder
                                                       CfnAnalysis$SameSheetTargetVisualConfigurationProperty$Builder
                                                       CfnAnalysis$SankeyDiagramAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$SankeyDiagramChartConfigurationProperty$Builder
                                                       CfnAnalysis$SankeyDiagramFieldWellsProperty$Builder
                                                       CfnAnalysis$SankeyDiagramSortConfigurationProperty$Builder
                                                       CfnAnalysis$SankeyDiagramVisualProperty$Builder
                                                       CfnAnalysis$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$ScatterPlotConfigurationProperty$Builder
                                                       CfnAnalysis$ScatterPlotFieldWellsProperty$Builder
                                                       CfnAnalysis$ScatterPlotUnaggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$ScatterPlotVisualProperty$Builder
                                                       CfnAnalysis$ScrollBarOptionsProperty$Builder
                                                       CfnAnalysis$SecondaryValueOptionsProperty$Builder
                                                       CfnAnalysis$SectionAfterPageBreakProperty$Builder
                                                       CfnAnalysis$SectionBasedLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnAnalysis$SectionBasedLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder
                                                       CfnAnalysis$SectionLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$SectionPageBreakConfigurationProperty$Builder
                                                       CfnAnalysis$SectionStyleProperty$Builder
                                                       CfnAnalysis$SelectedSheetsFilterScopeConfigurationProperty$Builder
                                                       CfnAnalysis$SeriesItemProperty$Builder
                                                       CfnAnalysis$SetParameterValueConfigurationProperty$Builder
                                                       CfnAnalysis$ShapeConditionalFormatProperty$Builder
                                                       CfnAnalysis$SheetControlInfoIconLabelOptionsProperty$Builder
                                                       CfnAnalysis$SheetControlLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$SheetControlLayoutProperty$Builder
                                                       CfnAnalysis$SheetDefinitionProperty$Builder
                                                       CfnAnalysis$SheetElementConfigurationOverridesProperty$Builder
                                                       CfnAnalysis$SheetElementRenderingRuleProperty$Builder
                                                       CfnAnalysis$SheetProperty$Builder
                                                       CfnAnalysis$SheetTextBoxProperty$Builder
                                                       CfnAnalysis$SheetVisualScopingConfigurationProperty$Builder
                                                       CfnAnalysis$ShortFormatTextProperty$Builder
                                                       CfnAnalysis$SimpleClusterMarkerProperty$Builder
                                                       CfnAnalysis$SliderControlDisplayOptionsProperty$Builder
                                                       CfnAnalysis$SmallMultiplesAxisPropertiesProperty$Builder
                                                       CfnAnalysis$SmallMultiplesOptionsProperty$Builder
                                                       CfnAnalysis$SpacingProperty$Builder
                                                       CfnAnalysis$StringDefaultValuesProperty$Builder
                                                       CfnAnalysis$StringFormatConfigurationProperty$Builder
                                                       CfnAnalysis$StringParameterDeclarationProperty$Builder
                                                       CfnAnalysis$StringParameterProperty$Builder
                                                       CfnAnalysis$StringValueWhenUnsetConfigurationProperty$Builder
                                                       CfnAnalysis$SubtotalOptionsProperty$Builder
                                                       CfnAnalysis$TableAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$TableBorderOptionsProperty$Builder
                                                       CfnAnalysis$TableCellConditionalFormattingProperty$Builder
                                                       CfnAnalysis$TableCellImageSizingConfigurationProperty$Builder
                                                       CfnAnalysis$TableCellStyleProperty$Builder
                                                       CfnAnalysis$TableConditionalFormattingOptionProperty$Builder
                                                       CfnAnalysis$TableConditionalFormattingProperty$Builder
                                                       CfnAnalysis$TableConfigurationProperty$Builder
                                                       CfnAnalysis$TableFieldCustomIconContentProperty$Builder
                                                       CfnAnalysis$TableFieldCustomTextContentProperty$Builder
                                                       CfnAnalysis$TableFieldImageConfigurationProperty$Builder
                                                       CfnAnalysis$TableFieldLinkConfigurationProperty$Builder
                                                       CfnAnalysis$TableFieldLinkContentConfigurationProperty$Builder
                                                       CfnAnalysis$TableFieldOptionProperty$Builder
                                                       CfnAnalysis$TableFieldOptionsProperty$Builder
                                                       CfnAnalysis$TableFieldURLConfigurationProperty$Builder
                                                       CfnAnalysis$TableFieldWellsProperty$Builder
                                                       CfnAnalysis$TableInlineVisualizationProperty$Builder
                                                       CfnAnalysis$TableOptionsProperty$Builder
                                                       CfnAnalysis$TablePaginatedReportOptionsProperty$Builder
                                                       CfnAnalysis$TablePinnedFieldOptionsProperty$Builder
                                                       CfnAnalysis$TableRowConditionalFormattingProperty$Builder
                                                       CfnAnalysis$TableSideBorderOptionsProperty$Builder
                                                       CfnAnalysis$TableSortConfigurationProperty$Builder
                                                       CfnAnalysis$TableStyleTargetProperty$Builder
                                                       CfnAnalysis$TableUnaggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$TableVisualProperty$Builder
                                                       CfnAnalysis$TextAreaControlDisplayOptionsProperty$Builder
                                                       CfnAnalysis$TextConditionalFormatProperty$Builder
                                                       CfnAnalysis$TextControlPlaceholderOptionsProperty$Builder
                                                       CfnAnalysis$TextFieldControlDisplayOptionsProperty$Builder
                                                       CfnAnalysis$ThousandSeparatorOptionsProperty$Builder
                                                       CfnAnalysis$TimeBasedForecastPropertiesProperty$Builder
                                                       CfnAnalysis$TimeEqualityFilterProperty$Builder
                                                       CfnAnalysis$TimeRangeDrillDownFilterProperty$Builder
                                                       CfnAnalysis$TimeRangeFilterProperty$Builder
                                                       CfnAnalysis$TimeRangeFilterValueProperty$Builder
                                                       CfnAnalysis$TooltipItemProperty$Builder
                                                       CfnAnalysis$TooltipOptionsProperty$Builder
                                                       CfnAnalysis$TopBottomFilterProperty$Builder
                                                       CfnAnalysis$TopBottomMoversComputationProperty$Builder
                                                       CfnAnalysis$TopBottomRankedComputationProperty$Builder
                                                       CfnAnalysis$TotalAggregationComputationProperty$Builder
                                                       CfnAnalysis$TotalAggregationFunctionProperty$Builder
                                                       CfnAnalysis$TotalAggregationOptionProperty$Builder
                                                       CfnAnalysis$TotalOptionsProperty$Builder
                                                       CfnAnalysis$TreeMapAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$TreeMapConfigurationProperty$Builder
                                                       CfnAnalysis$TreeMapFieldWellsProperty$Builder
                                                       CfnAnalysis$TreeMapSortConfigurationProperty$Builder
                                                       CfnAnalysis$TreeMapVisualProperty$Builder
                                                       CfnAnalysis$TrendArrowOptionsProperty$Builder
                                                       CfnAnalysis$UnaggregatedFieldProperty$Builder
                                                       CfnAnalysis$UniqueValuesComputationProperty$Builder
                                                       CfnAnalysis$ValidationStrategyProperty$Builder
                                                       CfnAnalysis$VisibleRangeOptionsProperty$Builder
                                                       CfnAnalysis$VisualCustomActionOperationProperty$Builder
                                                       CfnAnalysis$VisualCustomActionProperty$Builder
                                                       CfnAnalysis$VisualPaletteProperty$Builder
                                                       CfnAnalysis$VisualProperty$Builder
                                                       CfnAnalysis$VisualSubtitleLabelOptionsProperty$Builder
                                                       CfnAnalysis$VisualTitleLabelOptionsProperty$Builder
                                                       CfnAnalysis$WaterfallChartAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$WaterfallChartColorConfigurationProperty$Builder
                                                       CfnAnalysis$WaterfallChartConfigurationProperty$Builder
                                                       CfnAnalysis$WaterfallChartFieldWellsProperty$Builder
                                                       CfnAnalysis$WaterfallChartGroupColorConfigurationProperty$Builder
                                                       CfnAnalysis$WaterfallChartOptionsProperty$Builder
                                                       CfnAnalysis$WaterfallChartSortConfigurationProperty$Builder
                                                       CfnAnalysis$WaterfallVisualProperty$Builder
                                                       CfnAnalysis$WhatIfPointScenarioProperty$Builder
                                                       CfnAnalysis$WhatIfRangeScenarioProperty$Builder
                                                       CfnAnalysis$WordCloudAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$WordCloudChartConfigurationProperty$Builder
                                                       CfnAnalysis$WordCloudFieldWellsProperty$Builder
                                                       CfnAnalysis$WordCloudOptionsProperty$Builder
                                                       CfnAnalysis$WordCloudSortConfigurationProperty$Builder
                                                       CfnAnalysis$WordCloudVisualProperty$Builder
                                                       CfnAnalysisProps$Builder
                                                       CfnDashboard$AdHocFilteringOptionProperty$Builder
                                                       CfnDashboard$AggregationFunctionProperty$Builder
                                                       CfnDashboard$AggregationSortConfigurationProperty$Builder
                                                       CfnDashboard$AnalysisDefaultsProperty$Builder
                                                       CfnDashboard$AnchorDateConfigurationProperty$Builder
                                                       CfnDashboard$ArcAxisConfigurationProperty$Builder
                                                       CfnDashboard$ArcAxisDisplayRangeProperty$Builder
                                                       CfnDashboard$ArcConfigurationProperty$Builder
                                                       CfnDashboard$ArcOptionsProperty$Builder
                                                       CfnDashboard$AssetOptionsProperty$Builder
                                                       CfnDashboard$AttributeAggregationFunctionProperty$Builder
                                                       CfnDashboard$AxisDataOptionsProperty$Builder
                                                       CfnDashboard$AxisDisplayMinMaxRangeProperty$Builder
                                                       CfnDashboard$AxisDisplayOptionsProperty$Builder
                                                       CfnDashboard$AxisDisplayRangeProperty$Builder
                                                       CfnDashboard$AxisLabelOptionsProperty$Builder
                                                       CfnDashboard$AxisLabelReferenceOptionsProperty$Builder
                                                       CfnDashboard$AxisLinearScaleProperty$Builder
                                                       CfnDashboard$AxisLogarithmicScaleProperty$Builder
                                                       CfnDashboard$AxisScaleProperty$Builder
                                                       CfnDashboard$AxisTickLabelOptionsProperty$Builder
                                                       CfnDashboard$BarChartAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$BarChartConfigurationProperty$Builder
                                                       CfnDashboard$BarChartFieldWellsProperty$Builder
                                                       CfnDashboard$BarChartSortConfigurationProperty$Builder
                                                       CfnDashboard$BarChartVisualProperty$Builder
                                                       CfnDashboard$BinCountOptionsProperty$Builder
                                                       CfnDashboard$BinWidthOptionsProperty$Builder
                                                       CfnDashboard$BodySectionConfigurationProperty$Builder
                                                       CfnDashboard$BodySectionContentProperty$Builder
                                                       CfnDashboard$BoxPlotAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$BoxPlotChartConfigurationProperty$Builder
                                                       CfnDashboard$BoxPlotFieldWellsProperty$Builder
                                                       CfnDashboard$BoxPlotOptionsProperty$Builder
                                                       CfnDashboard$BoxPlotSortConfigurationProperty$Builder
                                                       CfnDashboard$BoxPlotStyleOptionsProperty$Builder
                                                       CfnDashboard$BoxPlotVisualProperty$Builder
                                                       CfnDashboard$Builder
                                                       CfnDashboard$CalculatedFieldProperty$Builder
                                                       CfnDashboard$CalculatedMeasureFieldProperty$Builder
                                                       CfnDashboard$CascadingControlConfigurationProperty$Builder
                                                       CfnDashboard$CascadingControlSourceProperty$Builder
                                                       CfnDashboard$CategoricalDimensionFieldProperty$Builder
                                                       CfnDashboard$CategoricalMeasureFieldProperty$Builder
                                                       CfnDashboard$CategoryDrillDownFilterProperty$Builder
                                                       CfnDashboard$CategoryFilterConfigurationProperty$Builder
                                                       CfnDashboard$CategoryFilterProperty$Builder
                                                       CfnDashboard$ChartAxisLabelOptionsProperty$Builder
                                                       CfnDashboard$ClusterMarkerConfigurationProperty$Builder
                                                       CfnDashboard$ClusterMarkerProperty$Builder
                                                       CfnDashboard$ColorScaleProperty$Builder
                                                       CfnDashboard$ColorsConfigurationProperty$Builder
                                                       CfnDashboard$ColumnConfigurationProperty$Builder
                                                       CfnDashboard$ColumnHierarchyProperty$Builder
                                                       CfnDashboard$ColumnIdentifierProperty$Builder
                                                       CfnDashboard$ColumnSortProperty$Builder
                                                       CfnDashboard$ColumnTooltipItemProperty$Builder
                                                       CfnDashboard$ComboChartAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$ComboChartConfigurationProperty$Builder
                                                       CfnDashboard$ComboChartFieldWellsProperty$Builder
                                                       CfnDashboard$ComboChartSortConfigurationProperty$Builder
                                                       CfnDashboard$ComboChartVisualProperty$Builder
                                                       CfnDashboard$ComparisonConfigurationProperty$Builder
                                                       CfnDashboard$ComparisonFormatConfigurationProperty$Builder
                                                       CfnDashboard$ComputationProperty$Builder
                                                       CfnDashboard$ConditionalFormattingColorProperty$Builder
                                                       CfnDashboard$ConditionalFormattingCustomIconConditionProperty$Builder
                                                       CfnDashboard$ConditionalFormattingCustomIconOptionsProperty$Builder
                                                       CfnDashboard$ConditionalFormattingGradientColorProperty$Builder
                                                       CfnDashboard$ConditionalFormattingIconDisplayConfigurationProperty$Builder
                                                       CfnDashboard$ConditionalFormattingIconProperty$Builder
                                                       CfnDashboard$ConditionalFormattingIconSetProperty$Builder
                                                       CfnDashboard$ConditionalFormattingSolidColorProperty$Builder
                                                       CfnDashboard$ContributionAnalysisDefaultProperty$Builder
                                                       CfnDashboard$CurrencyDisplayFormatConfigurationProperty$Builder
                                                       CfnDashboard$CustomActionFilterOperationProperty$Builder
                                                       CfnDashboard$CustomActionNavigationOperationProperty$Builder
                                                       CfnDashboard$CustomActionSetParametersOperationProperty$Builder
                                                       CfnDashboard$CustomActionURLOperationProperty$Builder
                                                       CfnDashboard$CustomColorProperty$Builder
                                                       CfnDashboard$CustomContentConfigurationProperty$Builder
                                                       CfnDashboard$CustomContentVisualProperty$Builder
                                                       CfnDashboard$CustomFilterConfigurationProperty$Builder
                                                       CfnDashboard$CustomFilterListConfigurationProperty$Builder
                                                       CfnDashboard$CustomNarrativeOptionsProperty$Builder
                                                       CfnDashboard$CustomParameterValuesProperty$Builder
                                                       CfnDashboard$CustomValuesConfigurationProperty$Builder
                                                       CfnDashboard$DashboardErrorProperty$Builder
                                                       CfnDashboard$DashboardPublishOptionsProperty$Builder
                                                       CfnDashboard$DashboardSourceEntityProperty$Builder
                                                       CfnDashboard$DashboardSourceTemplateProperty$Builder
                                                       CfnDashboard$DashboardVersionDefinitionProperty$Builder
                                                       CfnDashboard$DashboardVersionProperty$Builder
                                                       CfnDashboard$DashboardVisualPublishOptionsProperty$Builder
                                                       CfnDashboard$DataBarsOptionsProperty$Builder
                                                       CfnDashboard$DataColorProperty$Builder
                                                       CfnDashboard$DataFieldSeriesItemProperty$Builder
                                                       CfnDashboard$DataLabelOptionsProperty$Builder
                                                       CfnDashboard$DataLabelTypeProperty$Builder
                                                       CfnDashboard$DataPathColorProperty$Builder
                                                       CfnDashboard$DataPathLabelTypeProperty$Builder
                                                       CfnDashboard$DataPathSortProperty$Builder
                                                       CfnDashboard$DataPathTypeProperty$Builder
                                                       CfnDashboard$DataPathValueProperty$Builder
                                                       CfnDashboard$DataPointDrillUpDownOptionProperty$Builder
                                                       CfnDashboard$DataPointMenuLabelOptionProperty$Builder
                                                       CfnDashboard$DataPointTooltipOptionProperty$Builder
                                                       CfnDashboard$DataSetIdentifierDeclarationProperty$Builder
                                                       CfnDashboard$DataSetReferenceProperty$Builder
                                                       CfnDashboard$DateAxisOptionsProperty$Builder
                                                       CfnDashboard$DateDimensionFieldProperty$Builder
                                                       CfnDashboard$DateMeasureFieldProperty$Builder
                                                       CfnDashboard$DateTimeDefaultValuesProperty$Builder
                                                       CfnDashboard$DateTimeFormatConfigurationProperty$Builder
                                                       CfnDashboard$DateTimeHierarchyProperty$Builder
                                                       CfnDashboard$DateTimeParameterDeclarationProperty$Builder
                                                       CfnDashboard$DateTimeParameterProperty$Builder
                                                       CfnDashboard$DateTimePickerControlDisplayOptionsProperty$Builder
                                                       CfnDashboard$DateTimeValueWhenUnsetConfigurationProperty$Builder
                                                       CfnDashboard$DecimalDefaultValuesProperty$Builder
                                                       CfnDashboard$DecimalParameterDeclarationProperty$Builder
                                                       CfnDashboard$DecimalParameterProperty$Builder
                                                       CfnDashboard$DecimalPlacesConfigurationProperty$Builder
                                                       CfnDashboard$DecimalValueWhenUnsetConfigurationProperty$Builder
                                                       CfnDashboard$DefaultDateTimePickerControlOptionsProperty$Builder
                                                       CfnDashboard$DefaultFilterControlConfigurationProperty$Builder
                                                       CfnDashboard$DefaultFilterControlOptionsProperty$Builder
                                                       CfnDashboard$DefaultFilterDropDownControlOptionsProperty$Builder
                                                       CfnDashboard$DefaultFilterListControlOptionsProperty$Builder
                                                       CfnDashboard$DefaultFreeFormLayoutConfigurationProperty$Builder
                                                       CfnDashboard$DefaultGridLayoutConfigurationProperty$Builder
                                                       CfnDashboard$DefaultInteractiveLayoutConfigurationProperty$Builder
                                                       CfnDashboard$DefaultNewSheetConfigurationProperty$Builder
                                                       CfnDashboard$DefaultPaginatedLayoutConfigurationProperty$Builder
                                                       CfnDashboard$DefaultRelativeDateTimeControlOptionsProperty$Builder
                                                       CfnDashboard$DefaultSectionBasedLayoutConfigurationProperty$Builder
                                                       CfnDashboard$DefaultSliderControlOptionsProperty$Builder
                                                       CfnDashboard$DefaultTextAreaControlOptionsProperty$Builder
                                                       CfnDashboard$DefaultTextFieldControlOptionsProperty$Builder
                                                       CfnDashboard$DestinationParameterValueConfigurationProperty$Builder
                                                       CfnDashboard$DimensionFieldProperty$Builder
                                                       CfnDashboard$DonutCenterOptionsProperty$Builder
                                                       CfnDashboard$DonutOptionsProperty$Builder
                                                       CfnDashboard$DrillDownFilterProperty$Builder
                                                       CfnDashboard$DropDownControlDisplayOptionsProperty$Builder
                                                       CfnDashboard$DynamicDefaultValueProperty$Builder
                                                       CfnDashboard$EmptyVisualProperty$Builder
                                                       CfnDashboard$EntityProperty$Builder
                                                       CfnDashboard$ExcludePeriodConfigurationProperty$Builder
                                                       CfnDashboard$ExplicitHierarchyProperty$Builder
                                                       CfnDashboard$ExportHiddenFieldsOptionProperty$Builder
                                                       CfnDashboard$ExportToCSVOptionProperty$Builder
                                                       CfnDashboard$ExportWithHiddenFieldsOptionProperty$Builder
                                                       CfnDashboard$FieldBasedTooltipProperty$Builder
                                                       CfnDashboard$FieldLabelTypeProperty$Builder
                                                       CfnDashboard$FieldSeriesItemProperty$Builder
                                                       CfnDashboard$FieldSortOptionsProperty$Builder
                                                       CfnDashboard$FieldSortProperty$Builder
                                                       CfnDashboard$FieldTooltipItemProperty$Builder
                                                       CfnDashboard$FilledMapAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$FilledMapConditionalFormattingOptionProperty$Builder
                                                       CfnDashboard$FilledMapConditionalFormattingProperty$Builder
                                                       CfnDashboard$FilledMapConfigurationProperty$Builder
                                                       CfnDashboard$FilledMapFieldWellsProperty$Builder
                                                       CfnDashboard$FilledMapShapeConditionalFormattingProperty$Builder
                                                       CfnDashboard$FilledMapSortConfigurationProperty$Builder
                                                       CfnDashboard$FilledMapVisualProperty$Builder
                                                       CfnDashboard$FilterControlProperty$Builder
                                                       CfnDashboard$FilterCrossSheetControlProperty$Builder
                                                       CfnDashboard$FilterDateTimePickerControlProperty$Builder
                                                       CfnDashboard$FilterDropDownControlProperty$Builder
                                                       CfnDashboard$FilterGroupProperty$Builder
                                                       CfnDashboard$FilterListConfigurationProperty$Builder
                                                       CfnDashboard$FilterListControlProperty$Builder
                                                       CfnDashboard$FilterOperationSelectedFieldsConfigurationProperty$Builder
                                                       CfnDashboard$FilterOperationTargetVisualsConfigurationProperty$Builder
                                                       CfnDashboard$FilterProperty$Builder
                                                       CfnDashboard$FilterRelativeDateTimeControlProperty$Builder
                                                       CfnDashboard$FilterScopeConfigurationProperty$Builder
                                                       CfnDashboard$FilterSelectableValuesProperty$Builder
                                                       CfnDashboard$FilterSliderControlProperty$Builder
                                                       CfnDashboard$FilterTextAreaControlProperty$Builder
                                                       CfnDashboard$FilterTextFieldControlProperty$Builder
                                                       CfnDashboard$FontConfigurationProperty$Builder
                                                       CfnDashboard$FontSizeProperty$Builder
                                                       CfnDashboard$FontWeightProperty$Builder
                                                       CfnDashboard$ForecastComputationProperty$Builder
                                                       CfnDashboard$ForecastConfigurationProperty$Builder
                                                       CfnDashboard$ForecastScenarioProperty$Builder
                                                       CfnDashboard$FormatConfigurationProperty$Builder
                                                       CfnDashboard$FreeFormLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnDashboard$FreeFormLayoutConfigurationProperty$Builder
                                                       CfnDashboard$FreeFormLayoutElementBackgroundStyleProperty$Builder
                                                       CfnDashboard$FreeFormLayoutElementBorderStyleProperty$Builder
                                                       CfnDashboard$FreeFormLayoutElementProperty$Builder
                                                       CfnDashboard$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder
                                                       CfnDashboard$FreeFormSectionLayoutConfigurationProperty$Builder
                                                       CfnDashboard$FunnelChartAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$FunnelChartConfigurationProperty$Builder
                                                       CfnDashboard$FunnelChartDataLabelOptionsProperty$Builder
                                                       CfnDashboard$FunnelChartFieldWellsProperty$Builder
                                                       CfnDashboard$FunnelChartSortConfigurationProperty$Builder
                                                       CfnDashboard$FunnelChartVisualProperty$Builder
                                                       CfnDashboard$GaugeChartArcConditionalFormattingProperty$Builder
                                                       CfnDashboard$GaugeChartConditionalFormattingOptionProperty$Builder
                                                       CfnDashboard$GaugeChartConditionalFormattingProperty$Builder
                                                       CfnDashboard$GaugeChartConfigurationProperty$Builder
                                                       CfnDashboard$GaugeChartFieldWellsProperty$Builder
                                                       CfnDashboard$GaugeChartOptionsProperty$Builder
                                                       CfnDashboard$GaugeChartPrimaryValueConditionalFormattingProperty$Builder
                                                       CfnDashboard$GaugeChartVisualProperty$Builder
                                                       CfnDashboard$GeospatialCoordinateBoundsProperty$Builder
                                                       CfnDashboard$GeospatialHeatmapColorScaleProperty$Builder
                                                       CfnDashboard$GeospatialHeatmapConfigurationProperty$Builder
                                                       CfnDashboard$GeospatialHeatmapDataColorProperty$Builder
                                                       CfnDashboard$GeospatialMapAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$GeospatialMapConfigurationProperty$Builder
                                                       CfnDashboard$GeospatialMapFieldWellsProperty$Builder
                                                       CfnDashboard$GeospatialMapStyleOptionsProperty$Builder
                                                       CfnDashboard$GeospatialMapVisualProperty$Builder
                                                       CfnDashboard$GeospatialPointStyleOptionsProperty$Builder
                                                       CfnDashboard$GeospatialWindowOptionsProperty$Builder
                                                       CfnDashboard$GlobalTableBorderOptionsProperty$Builder
                                                       CfnDashboard$GradientColorProperty$Builder
                                                       CfnDashboard$GradientStopProperty$Builder
                                                       CfnDashboard$GridLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnDashboard$GridLayoutConfigurationProperty$Builder
                                                       CfnDashboard$GridLayoutElementProperty$Builder
                                                       CfnDashboard$GridLayoutScreenCanvasSizeOptionsProperty$Builder
                                                       CfnDashboard$GrowthRateComputationProperty$Builder
                                                       CfnDashboard$HeaderFooterSectionConfigurationProperty$Builder
                                                       CfnDashboard$HeatMapAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$HeatMapConfigurationProperty$Builder
                                                       CfnDashboard$HeatMapFieldWellsProperty$Builder
                                                       CfnDashboard$HeatMapSortConfigurationProperty$Builder
                                                       CfnDashboard$HeatMapVisualProperty$Builder
                                                       CfnDashboard$HistogramAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$HistogramBinOptionsProperty$Builder
                                                       CfnDashboard$HistogramConfigurationProperty$Builder
                                                       CfnDashboard$HistogramFieldWellsProperty$Builder
                                                       CfnDashboard$HistogramVisualProperty$Builder
                                                       CfnDashboard$InsightConfigurationProperty$Builder
                                                       CfnDashboard$InsightVisualProperty$Builder
                                                       CfnDashboard$IntegerDefaultValuesProperty$Builder
                                                       CfnDashboard$IntegerParameterDeclarationProperty$Builder
                                                       CfnDashboard$IntegerParameterProperty$Builder
                                                       CfnDashboard$IntegerValueWhenUnsetConfigurationProperty$Builder
                                                       CfnDashboard$ItemsLimitConfigurationProperty$Builder
                                                       CfnDashboard$KPIActualValueConditionalFormattingProperty$Builder
                                                       CfnDashboard$KPIComparisonValueConditionalFormattingProperty$Builder
                                                       CfnDashboard$KPIConditionalFormattingOptionProperty$Builder
                                                       CfnDashboard$KPIConditionalFormattingProperty$Builder
                                                       CfnDashboard$KPIConfigurationProperty$Builder
                                                       CfnDashboard$KPIFieldWellsProperty$Builder
                                                       CfnDashboard$KPIOptionsProperty$Builder
                                                       CfnDashboard$KPIPrimaryValueConditionalFormattingProperty$Builder
                                                       CfnDashboard$KPIProgressBarConditionalFormattingProperty$Builder
                                                       CfnDashboard$KPISortConfigurationProperty$Builder
                                                       CfnDashboard$KPISparklineOptionsProperty$Builder
                                                       CfnDashboard$KPIVisualLayoutOptionsProperty$Builder
                                                       CfnDashboard$KPIVisualProperty$Builder
                                                       CfnDashboard$KPIVisualStandardLayoutProperty$Builder
                                                       CfnDashboard$LabelOptionsProperty$Builder
                                                       CfnDashboard$LayoutConfigurationProperty$Builder
                                                       CfnDashboard$LayoutProperty$Builder
                                                       CfnDashboard$LegendOptionsProperty$Builder
                                                       CfnDashboard$LineChartAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$LineChartConfigurationProperty$Builder
                                                       CfnDashboard$LineChartDefaultSeriesSettingsProperty$Builder
                                                       CfnDashboard$LineChartFieldWellsProperty$Builder
                                                       CfnDashboard$LineChartLineStyleSettingsProperty$Builder
                                                       CfnDashboard$LineChartMarkerStyleSettingsProperty$Builder
                                                       CfnDashboard$LineChartSeriesSettingsProperty$Builder
                                                       CfnDashboard$LineChartSortConfigurationProperty$Builder
                                                       CfnDashboard$LineChartVisualProperty$Builder
                                                       CfnDashboard$LineSeriesAxisDisplayOptionsProperty$Builder
                                                       CfnDashboard$LinkSharingConfigurationProperty$Builder
                                                       CfnDashboard$ListControlDisplayOptionsProperty$Builder
                                                       CfnDashboard$ListControlSearchOptionsProperty$Builder
                                                       CfnDashboard$ListControlSelectAllOptionsProperty$Builder
                                                       CfnDashboard$LoadingAnimationProperty$Builder
                                                       CfnDashboard$LocalNavigationConfigurationProperty$Builder
                                                       CfnDashboard$LongFormatTextProperty$Builder
                                                       CfnDashboard$MappedDataSetParameterProperty$Builder
                                                       CfnDashboard$MaximumLabelTypeProperty$Builder
                                                       CfnDashboard$MaximumMinimumComputationProperty$Builder
                                                       CfnDashboard$MeasureFieldProperty$Builder
                                                       CfnDashboard$MetricComparisonComputationProperty$Builder
                                                       CfnDashboard$MinimumLabelTypeProperty$Builder
                                                       CfnDashboard$MissingDataConfigurationProperty$Builder
                                                       CfnDashboard$NegativeValueConfigurationProperty$Builder
                                                       CfnDashboard$NullValueFormatConfigurationProperty$Builder
                                                       CfnDashboard$NumberDisplayFormatConfigurationProperty$Builder
                                                       CfnDashboard$NumberFormatConfigurationProperty$Builder
                                                       CfnDashboard$NumericAxisOptionsProperty$Builder
                                                       CfnDashboard$NumericEqualityDrillDownFilterProperty$Builder
                                                       CfnDashboard$NumericEqualityFilterProperty$Builder
                                                       CfnDashboard$NumericFormatConfigurationProperty$Builder
                                                       CfnDashboard$NumericRangeFilterProperty$Builder
                                                       CfnDashboard$NumericRangeFilterValueProperty$Builder
                                                       CfnDashboard$NumericSeparatorConfigurationProperty$Builder
                                                       CfnDashboard$NumericalAggregationFunctionProperty$Builder
                                                       CfnDashboard$NumericalDimensionFieldProperty$Builder
                                                       CfnDashboard$NumericalMeasureFieldProperty$Builder
                                                       CfnDashboard$PaginationConfigurationProperty$Builder
                                                       CfnDashboard$PanelConfigurationProperty$Builder
                                                       CfnDashboard$PanelTitleOptionsProperty$Builder
                                                       CfnDashboard$ParameterControlProperty$Builder
                                                       CfnDashboard$ParameterDateTimePickerControlProperty$Builder
                                                       CfnDashboard$ParameterDeclarationProperty$Builder
                                                       CfnDashboard$ParameterDropDownControlProperty$Builder
                                                       CfnDashboard$ParameterListControlProperty$Builder
                                                       CfnDashboard$ParameterSelectableValuesProperty$Builder
                                                       CfnDashboard$ParameterSliderControlProperty$Builder
                                                       CfnDashboard$ParameterTextAreaControlProperty$Builder
                                                       CfnDashboard$ParameterTextFieldControlProperty$Builder
                                                       CfnDashboard$ParametersProperty$Builder
                                                       CfnDashboard$PercentVisibleRangeProperty$Builder
                                                       CfnDashboard$PercentageDisplayFormatConfigurationProperty$Builder
                                                       CfnDashboard$PercentileAggregationProperty$Builder
                                                       CfnDashboard$PeriodOverPeriodComputationProperty$Builder
                                                       CfnDashboard$PeriodToDateComputationProperty$Builder
                                                       CfnDashboard$PieChartAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$PieChartConfigurationProperty$Builder
                                                       CfnDashboard$PieChartFieldWellsProperty$Builder
                                                       CfnDashboard$PieChartSortConfigurationProperty$Builder
                                                       CfnDashboard$PieChartVisualProperty$Builder
                                                       CfnDashboard$PivotFieldSortOptionsProperty$Builder
                                                       CfnDashboard$PivotTableAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$PivotTableCellConditionalFormattingProperty$Builder
                                                       CfnDashboard$PivotTableConditionalFormattingOptionProperty$Builder
                                                       CfnDashboard$PivotTableConditionalFormattingProperty$Builder
                                                       CfnDashboard$PivotTableConditionalFormattingScopeProperty$Builder
                                                       CfnDashboard$PivotTableConfigurationProperty$Builder
                                                       CfnDashboard$PivotTableDataPathOptionProperty$Builder
                                                       CfnDashboard$PivotTableFieldCollapseStateOptionProperty$Builder
                                                       CfnDashboard$PivotTableFieldCollapseStateTargetProperty$Builder
                                                       CfnDashboard$PivotTableFieldOptionProperty$Builder
                                                       CfnDashboard$PivotTableFieldOptionsProperty$Builder
                                                       CfnDashboard$PivotTableFieldSubtotalOptionsProperty$Builder
                                                       CfnDashboard$PivotTableFieldWellsProperty$Builder
                                                       CfnDashboard$PivotTableOptionsProperty$Builder
                                                       CfnDashboard$PivotTablePaginatedReportOptionsProperty$Builder
                                                       CfnDashboard$PivotTableRowsLabelOptionsProperty$Builder
                                                       CfnDashboard$PivotTableSortByProperty$Builder
                                                       CfnDashboard$PivotTableSortConfigurationProperty$Builder
                                                       CfnDashboard$PivotTableTotalOptionsProperty$Builder
                                                       CfnDashboard$PivotTableVisualProperty$Builder
                                                       CfnDashboard$PivotTotalOptionsProperty$Builder
                                                       CfnDashboard$PredefinedHierarchyProperty$Builder
                                                       CfnDashboard$ProgressBarOptionsProperty$Builder
                                                       CfnDashboard$RadarChartAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$RadarChartAreaStyleSettingsProperty$Builder
                                                       CfnDashboard$RadarChartConfigurationProperty$Builder
                                                       CfnDashboard$RadarChartFieldWellsProperty$Builder
                                                       CfnDashboard$RadarChartSeriesSettingsProperty$Builder
                                                       CfnDashboard$RadarChartSortConfigurationProperty$Builder
                                                       CfnDashboard$RadarChartVisualProperty$Builder
                                                       CfnDashboard$RangeEndsLabelTypeProperty$Builder
                                                       CfnDashboard$ReferenceLineCustomLabelConfigurationProperty$Builder
                                                       CfnDashboard$ReferenceLineDataConfigurationProperty$Builder
                                                       CfnDashboard$ReferenceLineDynamicDataConfigurationProperty$Builder
                                                       CfnDashboard$ReferenceLineLabelConfigurationProperty$Builder
                                                       CfnDashboard$ReferenceLineProperty$Builder
                                                       CfnDashboard$ReferenceLineStaticDataConfigurationProperty$Builder
                                                       CfnDashboard$ReferenceLineStyleConfigurationProperty$Builder
                                                       CfnDashboard$ReferenceLineValueLabelConfigurationProperty$Builder
                                                       CfnDashboard$RelativeDateTimeControlDisplayOptionsProperty$Builder
                                                       CfnDashboard$RelativeDatesFilterProperty$Builder
                                                       CfnDashboard$ResourcePermissionProperty$Builder
                                                       CfnDashboard$RollingDateConfigurationProperty$Builder
                                                       CfnDashboard$RowAlternateColorOptionsProperty$Builder
                                                       CfnDashboard$SameSheetTargetVisualConfigurationProperty$Builder
                                                       CfnDashboard$SankeyDiagramAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$SankeyDiagramChartConfigurationProperty$Builder
                                                       CfnDashboard$SankeyDiagramFieldWellsProperty$Builder
                                                       CfnDashboard$SankeyDiagramSortConfigurationProperty$Builder
                                                       CfnDashboard$SankeyDiagramVisualProperty$Builder
                                                       CfnDashboard$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$ScatterPlotConfigurationProperty$Builder
                                                       CfnDashboard$ScatterPlotFieldWellsProperty$Builder
                                                       CfnDashboard$ScatterPlotUnaggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$ScatterPlotVisualProperty$Builder
                                                       CfnDashboard$ScrollBarOptionsProperty$Builder
                                                       CfnDashboard$SecondaryValueOptionsProperty$Builder
                                                       CfnDashboard$SectionAfterPageBreakProperty$Builder
                                                       CfnDashboard$SectionBasedLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnDashboard$SectionBasedLayoutConfigurationProperty$Builder
                                                       CfnDashboard$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder
                                                       CfnDashboard$SectionLayoutConfigurationProperty$Builder
                                                       CfnDashboard$SectionPageBreakConfigurationProperty$Builder
                                                       CfnDashboard$SectionStyleProperty$Builder
                                                       CfnDashboard$SelectedSheetsFilterScopeConfigurationProperty$Builder
                                                       CfnDashboard$SeriesItemProperty$Builder
                                                       CfnDashboard$SetParameterValueConfigurationProperty$Builder
                                                       CfnDashboard$ShapeConditionalFormatProperty$Builder
                                                       CfnDashboard$SheetControlInfoIconLabelOptionsProperty$Builder
                                                       CfnDashboard$SheetControlLayoutConfigurationProperty$Builder
                                                       CfnDashboard$SheetControlLayoutProperty$Builder
                                                       CfnDashboard$SheetControlsOptionProperty$Builder
                                                       CfnDashboard$SheetDefinitionProperty$Builder
                                                       CfnDashboard$SheetElementConfigurationOverridesProperty$Builder
                                                       CfnDashboard$SheetElementRenderingRuleProperty$Builder
                                                       CfnDashboard$SheetLayoutElementMaximizationOptionProperty$Builder
                                                       CfnDashboard$SheetProperty$Builder
                                                       CfnDashboard$SheetTextBoxProperty$Builder
                                                       CfnDashboard$SheetVisualScopingConfigurationProperty$Builder
                                                       CfnDashboard$ShortFormatTextProperty$Builder
                                                       CfnDashboard$SimpleClusterMarkerProperty$Builder
                                                       CfnDashboard$SliderControlDisplayOptionsProperty$Builder
                                                       CfnDashboard$SmallMultiplesAxisPropertiesProperty$Builder
                                                       CfnDashboard$SmallMultiplesOptionsProperty$Builder
                                                       CfnDashboard$SpacingProperty$Builder
                                                       CfnDashboard$StringDefaultValuesProperty$Builder
                                                       CfnDashboard$StringFormatConfigurationProperty$Builder
                                                       CfnDashboard$StringParameterDeclarationProperty$Builder
                                                       CfnDashboard$StringParameterProperty$Builder
                                                       CfnDashboard$StringValueWhenUnsetConfigurationProperty$Builder
                                                       CfnDashboard$SubtotalOptionsProperty$Builder
                                                       CfnDashboard$TableAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$TableBorderOptionsProperty$Builder
                                                       CfnDashboard$TableCellConditionalFormattingProperty$Builder
                                                       CfnDashboard$TableCellImageSizingConfigurationProperty$Builder
                                                       CfnDashboard$TableCellStyleProperty$Builder
                                                       CfnDashboard$TableConditionalFormattingOptionProperty$Builder
                                                       CfnDashboard$TableConditionalFormattingProperty$Builder
                                                       CfnDashboard$TableConfigurationProperty$Builder
                                                       CfnDashboard$TableFieldCustomIconContentProperty$Builder
                                                       CfnDashboard$TableFieldCustomTextContentProperty$Builder
                                                       CfnDashboard$TableFieldImageConfigurationProperty$Builder
                                                       CfnDashboard$TableFieldLinkConfigurationProperty$Builder
                                                       CfnDashboard$TableFieldLinkContentConfigurationProperty$Builder
                                                       CfnDashboard$TableFieldOptionProperty$Builder
                                                       CfnDashboard$TableFieldOptionsProperty$Builder
                                                       CfnDashboard$TableFieldURLConfigurationProperty$Builder
                                                       CfnDashboard$TableFieldWellsProperty$Builder
                                                       CfnDashboard$TableInlineVisualizationProperty$Builder
                                                       CfnDashboard$TableOptionsProperty$Builder
                                                       CfnDashboard$TablePaginatedReportOptionsProperty$Builder
                                                       CfnDashboard$TablePinnedFieldOptionsProperty$Builder
                                                       CfnDashboard$TableRowConditionalFormattingProperty$Builder
                                                       CfnDashboard$TableSideBorderOptionsProperty$Builder
                                                       CfnDashboard$TableSortConfigurationProperty$Builder
                                                       CfnDashboard$TableStyleTargetProperty$Builder
                                                       CfnDashboard$TableUnaggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$TableVisualProperty$Builder
                                                       CfnDashboard$TextAreaControlDisplayOptionsProperty$Builder
                                                       CfnDashboard$TextConditionalFormatProperty$Builder
                                                       CfnDashboard$TextControlPlaceholderOptionsProperty$Builder
                                                       CfnDashboard$TextFieldControlDisplayOptionsProperty$Builder
                                                       CfnDashboard$ThousandSeparatorOptionsProperty$Builder
                                                       CfnDashboard$TimeBasedForecastPropertiesProperty$Builder
                                                       CfnDashboard$TimeEqualityFilterProperty$Builder
                                                       CfnDashboard$TimeRangeDrillDownFilterProperty$Builder
                                                       CfnDashboard$TimeRangeFilterProperty$Builder
                                                       CfnDashboard$TimeRangeFilterValueProperty$Builder
                                                       CfnDashboard$TooltipItemProperty$Builder
                                                       CfnDashboard$TooltipOptionsProperty$Builder
                                                       CfnDashboard$TopBottomFilterProperty$Builder
                                                       CfnDashboard$TopBottomMoversComputationProperty$Builder
                                                       CfnDashboard$TopBottomRankedComputationProperty$Builder
                                                       CfnDashboard$TotalAggregationComputationProperty$Builder
                                                       CfnDashboard$TotalAggregationFunctionProperty$Builder
                                                       CfnDashboard$TotalAggregationOptionProperty$Builder
                                                       CfnDashboard$TotalOptionsProperty$Builder
                                                       CfnDashboard$TreeMapAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$TreeMapConfigurationProperty$Builder
                                                       CfnDashboard$TreeMapFieldWellsProperty$Builder
                                                       CfnDashboard$TreeMapSortConfigurationProperty$Builder
                                                       CfnDashboard$TreeMapVisualProperty$Builder
                                                       CfnDashboard$TrendArrowOptionsProperty$Builder
                                                       CfnDashboard$UnaggregatedFieldProperty$Builder
                                                       CfnDashboard$UniqueValuesComputationProperty$Builder
                                                       CfnDashboard$ValidationStrategyProperty$Builder
                                                       CfnDashboard$VisibleRangeOptionsProperty$Builder
                                                       CfnDashboard$VisualAxisSortOptionProperty$Builder
                                                       CfnDashboard$VisualCustomActionOperationProperty$Builder
                                                       CfnDashboard$VisualCustomActionProperty$Builder
                                                       CfnDashboard$VisualMenuOptionProperty$Builder
                                                       CfnDashboard$VisualPaletteProperty$Builder
                                                       CfnDashboard$VisualProperty$Builder
                                                       CfnDashboard$VisualSubtitleLabelOptionsProperty$Builder
                                                       CfnDashboard$VisualTitleLabelOptionsProperty$Builder
                                                       CfnDashboard$WaterfallChartAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$WaterfallChartColorConfigurationProperty$Builder
                                                       CfnDashboard$WaterfallChartConfigurationProperty$Builder
                                                       CfnDashboard$WaterfallChartFieldWellsProperty$Builder
                                                       CfnDashboard$WaterfallChartGroupColorConfigurationProperty$Builder
                                                       CfnDashboard$WaterfallChartOptionsProperty$Builder
                                                       CfnDashboard$WaterfallChartSortConfigurationProperty$Builder
                                                       CfnDashboard$WaterfallVisualProperty$Builder
                                                       CfnDashboard$WhatIfPointScenarioProperty$Builder
                                                       CfnDashboard$WhatIfRangeScenarioProperty$Builder
                                                       CfnDashboard$WordCloudAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$WordCloudChartConfigurationProperty$Builder
                                                       CfnDashboard$WordCloudFieldWellsProperty$Builder
                                                       CfnDashboard$WordCloudOptionsProperty$Builder
                                                       CfnDashboard$WordCloudSortConfigurationProperty$Builder
                                                       CfnDashboard$WordCloudVisualProperty$Builder
                                                       CfnDashboardProps$Builder
                                                       CfnDataSet$Builder
                                                       CfnDataSet$CalculatedColumnProperty$Builder
                                                       CfnDataSet$CastColumnTypeOperationProperty$Builder
                                                       CfnDataSet$ColumnDescriptionProperty$Builder
                                                       CfnDataSet$ColumnGroupProperty$Builder
                                                       CfnDataSet$ColumnLevelPermissionRuleProperty$Builder
                                                       CfnDataSet$ColumnTagProperty$Builder
                                                       CfnDataSet$CreateColumnsOperationProperty$Builder
                                                       CfnDataSet$CustomSqlProperty$Builder
                                                       CfnDataSet$DataSetRefreshPropertiesProperty$Builder
                                                       CfnDataSet$DataSetUsageConfigurationProperty$Builder
                                                       CfnDataSet$DatasetParameterProperty$Builder
                                                       CfnDataSet$DateTimeDatasetParameterDefaultValuesProperty$Builder
                                                       CfnDataSet$DateTimeDatasetParameterProperty$Builder
                                                       CfnDataSet$DecimalDatasetParameterDefaultValuesProperty$Builder
                                                       CfnDataSet$DecimalDatasetParameterProperty$Builder
                                                       CfnDataSet$FieldFolderProperty$Builder
                                                       CfnDataSet$FilterOperationProperty$Builder
                                                       CfnDataSet$GeoSpatialColumnGroupProperty$Builder
                                                       CfnDataSet$IncrementalRefreshProperty$Builder
                                                       CfnDataSet$IngestionWaitPolicyProperty$Builder
                                                       CfnDataSet$InputColumnProperty$Builder
                                                       CfnDataSet$IntegerDatasetParameterDefaultValuesProperty$Builder
                                                       CfnDataSet$IntegerDatasetParameterProperty$Builder
                                                       CfnDataSet$JoinInstructionProperty$Builder
                                                       CfnDataSet$JoinKeyPropertiesProperty$Builder
                                                       CfnDataSet$LogicalTableProperty$Builder
                                                       CfnDataSet$LogicalTableSourceProperty$Builder
                                                       CfnDataSet$LookbackWindowProperty$Builder
                                                       CfnDataSet$NewDefaultValuesProperty$Builder
                                                       CfnDataSet$OutputColumnProperty$Builder
                                                       CfnDataSet$OverrideDatasetParameterOperationProperty$Builder
                                                       CfnDataSet$PhysicalTableProperty$Builder
                                                       CfnDataSet$ProjectOperationProperty$Builder
                                                       CfnDataSet$RefreshConfigurationProperty$Builder
                                                       CfnDataSet$RelationalTableProperty$Builder
                                                       CfnDataSet$RenameColumnOperationProperty$Builder
                                                       CfnDataSet$ResourcePermissionProperty$Builder
                                                       CfnDataSet$RowLevelPermissionDataSetProperty$Builder
                                                       CfnDataSet$RowLevelPermissionTagConfigurationProperty$Builder
                                                       CfnDataSet$RowLevelPermissionTagRuleProperty$Builder
                                                       CfnDataSet$S3SourceProperty$Builder
                                                       CfnDataSet$StringDatasetParameterDefaultValuesProperty$Builder
                                                       CfnDataSet$StringDatasetParameterProperty$Builder
                                                       CfnDataSet$TagColumnOperationProperty$Builder
                                                       CfnDataSet$TransformOperationProperty$Builder
                                                       CfnDataSet$UntagColumnOperationProperty$Builder
                                                       CfnDataSet$UploadSettingsProperty$Builder
                                                       CfnDataSetProps$Builder
                                                       CfnDataSource$AmazonElasticsearchParametersProperty$Builder
                                                       CfnDataSource$AmazonOpenSearchParametersProperty$Builder
                                                       CfnDataSource$AthenaParametersProperty$Builder
                                                       CfnDataSource$AuroraParametersProperty$Builder
                                                       CfnDataSource$AuroraPostgreSqlParametersProperty$Builder
                                                       CfnDataSource$Builder
                                                       CfnDataSource$CredentialPairProperty$Builder
                                                       CfnDataSource$DataSourceCredentialsProperty$Builder
                                                       CfnDataSource$DataSourceErrorInfoProperty$Builder
                                                       CfnDataSource$DataSourceParametersProperty$Builder
                                                       CfnDataSource$DatabricksParametersProperty$Builder
                                                       CfnDataSource$IdentityCenterConfigurationProperty$Builder
                                                       CfnDataSource$ManifestFileLocationProperty$Builder
                                                       CfnDataSource$MariaDbParametersProperty$Builder
                                                       CfnDataSource$MySqlParametersProperty$Builder
                                                       CfnDataSource$OracleParametersProperty$Builder
                                                       CfnDataSource$PostgreSqlParametersProperty$Builder
                                                       CfnDataSource$PrestoParametersProperty$Builder
                                                       CfnDataSource$RdsParametersProperty$Builder
                                                       CfnDataSource$RedshiftIAMParametersProperty$Builder
                                                       CfnDataSource$RedshiftParametersProperty$Builder
                                                       CfnDataSource$ResourcePermissionProperty$Builder
                                                       CfnDataSource$S3ParametersProperty$Builder
                                                       CfnDataSource$SnowflakeParametersProperty$Builder
                                                       CfnDataSource$SparkParametersProperty$Builder
                                                       CfnDataSource$SqlServerParametersProperty$Builder
                                                       CfnDataSource$SslPropertiesProperty$Builder
                                                       CfnDataSource$StarburstParametersProperty$Builder
                                                       CfnDataSource$TeradataParametersProperty$Builder
                                                       CfnDataSource$TrinoParametersProperty$Builder
                                                       CfnDataSource$VpcConnectionPropertiesProperty$Builder
                                                       CfnDataSourceProps$Builder
                                                       CfnRefreshSchedule$Builder
                                                       CfnRefreshSchedule$RefreshOnDayProperty$Builder
                                                       CfnRefreshSchedule$RefreshScheduleMapProperty$Builder
                                                       CfnRefreshSchedule$ScheduleFrequencyProperty$Builder
                                                       CfnRefreshScheduleProps$Builder
                                                       CfnTemplate$AggregationFunctionProperty$Builder
                                                       CfnTemplate$AggregationSortConfigurationProperty$Builder
                                                       CfnTemplate$AnalysisDefaultsProperty$Builder
                                                       CfnTemplate$AnchorDateConfigurationProperty$Builder
                                                       CfnTemplate$ArcAxisConfigurationProperty$Builder
                                                       CfnTemplate$ArcAxisDisplayRangeProperty$Builder
                                                       CfnTemplate$ArcConfigurationProperty$Builder
                                                       CfnTemplate$ArcOptionsProperty$Builder
                                                       CfnTemplate$AssetOptionsProperty$Builder
                                                       CfnTemplate$AttributeAggregationFunctionProperty$Builder
                                                       CfnTemplate$AxisDataOptionsProperty$Builder
                                                       CfnTemplate$AxisDisplayMinMaxRangeProperty$Builder
                                                       CfnTemplate$AxisDisplayOptionsProperty$Builder
                                                       CfnTemplate$AxisDisplayRangeProperty$Builder
                                                       CfnTemplate$AxisLabelOptionsProperty$Builder
                                                       CfnTemplate$AxisLabelReferenceOptionsProperty$Builder
                                                       CfnTemplate$AxisLinearScaleProperty$Builder
                                                       CfnTemplate$AxisLogarithmicScaleProperty$Builder
                                                       CfnTemplate$AxisScaleProperty$Builder
                                                       CfnTemplate$AxisTickLabelOptionsProperty$Builder
                                                       CfnTemplate$BarChartAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$BarChartConfigurationProperty$Builder
                                                       CfnTemplate$BarChartFieldWellsProperty$Builder
                                                       CfnTemplate$BarChartSortConfigurationProperty$Builder
                                                       CfnTemplate$BarChartVisualProperty$Builder
                                                       CfnTemplate$BinCountOptionsProperty$Builder
                                                       CfnTemplate$BinWidthOptionsProperty$Builder
                                                       CfnTemplate$BodySectionConfigurationProperty$Builder
                                                       CfnTemplate$BodySectionContentProperty$Builder
                                                       CfnTemplate$BoxPlotAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$BoxPlotChartConfigurationProperty$Builder
                                                       CfnTemplate$BoxPlotFieldWellsProperty$Builder
                                                       CfnTemplate$BoxPlotOptionsProperty$Builder
                                                       CfnTemplate$BoxPlotSortConfigurationProperty$Builder
                                                       CfnTemplate$BoxPlotStyleOptionsProperty$Builder
                                                       CfnTemplate$BoxPlotVisualProperty$Builder
                                                       CfnTemplate$Builder
                                                       CfnTemplate$CalculatedFieldProperty$Builder
                                                       CfnTemplate$CalculatedMeasureFieldProperty$Builder
                                                       CfnTemplate$CascadingControlConfigurationProperty$Builder
                                                       CfnTemplate$CascadingControlSourceProperty$Builder
                                                       CfnTemplate$CategoricalDimensionFieldProperty$Builder
                                                       CfnTemplate$CategoricalMeasureFieldProperty$Builder
                                                       CfnTemplate$CategoryDrillDownFilterProperty$Builder
                                                       CfnTemplate$CategoryFilterConfigurationProperty$Builder
                                                       CfnTemplate$CategoryFilterProperty$Builder
                                                       CfnTemplate$ChartAxisLabelOptionsProperty$Builder
                                                       CfnTemplate$ClusterMarkerConfigurationProperty$Builder
                                                       CfnTemplate$ClusterMarkerProperty$Builder
                                                       CfnTemplate$ColorScaleProperty$Builder
                                                       CfnTemplate$ColorsConfigurationProperty$Builder
                                                       CfnTemplate$ColumnConfigurationProperty$Builder
                                                       CfnTemplate$ColumnGroupColumnSchemaProperty$Builder
                                                       CfnTemplate$ColumnGroupSchemaProperty$Builder
                                                       CfnTemplate$ColumnHierarchyProperty$Builder
                                                       CfnTemplate$ColumnIdentifierProperty$Builder
                                                       CfnTemplate$ColumnSchemaProperty$Builder
                                                       CfnTemplate$ColumnSortProperty$Builder
                                                       CfnTemplate$ColumnTooltipItemProperty$Builder
                                                       CfnTemplate$ComboChartAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$ComboChartConfigurationProperty$Builder
                                                       CfnTemplate$ComboChartFieldWellsProperty$Builder
                                                       CfnTemplate$ComboChartSortConfigurationProperty$Builder
                                                       CfnTemplate$ComboChartVisualProperty$Builder
                                                       CfnTemplate$ComparisonConfigurationProperty$Builder
                                                       CfnTemplate$ComparisonFormatConfigurationProperty$Builder
                                                       CfnTemplate$ComputationProperty$Builder
                                                       CfnTemplate$ConditionalFormattingColorProperty$Builder
                                                       CfnTemplate$ConditionalFormattingCustomIconConditionProperty$Builder
                                                       CfnTemplate$ConditionalFormattingCustomIconOptionsProperty$Builder
                                                       CfnTemplate$ConditionalFormattingGradientColorProperty$Builder
                                                       CfnTemplate$ConditionalFormattingIconDisplayConfigurationProperty$Builder
                                                       CfnTemplate$ConditionalFormattingIconProperty$Builder
                                                       CfnTemplate$ConditionalFormattingIconSetProperty$Builder
                                                       CfnTemplate$ConditionalFormattingSolidColorProperty$Builder
                                                       CfnTemplate$ContributionAnalysisDefaultProperty$Builder
                                                       CfnTemplate$CurrencyDisplayFormatConfigurationProperty$Builder
                                                       CfnTemplate$CustomActionFilterOperationProperty$Builder
                                                       CfnTemplate$CustomActionNavigationOperationProperty$Builder
                                                       CfnTemplate$CustomActionSetParametersOperationProperty$Builder
                                                       CfnTemplate$CustomActionURLOperationProperty$Builder
                                                       CfnTemplate$CustomColorProperty$Builder
                                                       CfnTemplate$CustomContentConfigurationProperty$Builder
                                                       CfnTemplate$CustomContentVisualProperty$Builder
                                                       CfnTemplate$CustomFilterConfigurationProperty$Builder
                                                       CfnTemplate$CustomFilterListConfigurationProperty$Builder
                                                       CfnTemplate$CustomNarrativeOptionsProperty$Builder
                                                       CfnTemplate$CustomParameterValuesProperty$Builder
                                                       CfnTemplate$CustomValuesConfigurationProperty$Builder
                                                       CfnTemplate$DataBarsOptionsProperty$Builder
                                                       CfnTemplate$DataColorProperty$Builder
                                                       CfnTemplate$DataFieldSeriesItemProperty$Builder
                                                       CfnTemplate$DataLabelOptionsProperty$Builder
                                                       CfnTemplate$DataLabelTypeProperty$Builder
                                                       CfnTemplate$DataPathColorProperty$Builder
                                                       CfnTemplate$DataPathLabelTypeProperty$Builder
                                                       CfnTemplate$DataPathSortProperty$Builder
                                                       CfnTemplate$DataPathTypeProperty$Builder
                                                       CfnTemplate$DataPathValueProperty$Builder
                                                       CfnTemplate$DataSetConfigurationProperty$Builder
                                                       CfnTemplate$DataSetReferenceProperty$Builder
                                                       CfnTemplate$DataSetSchemaProperty$Builder
                                                       CfnTemplate$DateAxisOptionsProperty$Builder
                                                       CfnTemplate$DateDimensionFieldProperty$Builder
                                                       CfnTemplate$DateMeasureFieldProperty$Builder
                                                       CfnTemplate$DateTimeDefaultValuesProperty$Builder
                                                       CfnTemplate$DateTimeFormatConfigurationProperty$Builder
                                                       CfnTemplate$DateTimeHierarchyProperty$Builder
                                                       CfnTemplate$DateTimeParameterDeclarationProperty$Builder
                                                       CfnTemplate$DateTimePickerControlDisplayOptionsProperty$Builder
                                                       CfnTemplate$DateTimeValueWhenUnsetConfigurationProperty$Builder
                                                       CfnTemplate$DecimalDefaultValuesProperty$Builder
                                                       CfnTemplate$DecimalParameterDeclarationProperty$Builder
                                                       CfnTemplate$DecimalPlacesConfigurationProperty$Builder
                                                       CfnTemplate$DecimalValueWhenUnsetConfigurationProperty$Builder
                                                       CfnTemplate$DefaultDateTimePickerControlOptionsProperty$Builder
                                                       CfnTemplate$DefaultFilterControlConfigurationProperty$Builder
                                                       CfnTemplate$DefaultFilterControlOptionsProperty$Builder
                                                       CfnTemplate$DefaultFilterDropDownControlOptionsProperty$Builder
                                                       CfnTemplate$DefaultFilterListControlOptionsProperty$Builder
                                                       CfnTemplate$DefaultFreeFormLayoutConfigurationProperty$Builder
                                                       CfnTemplate$DefaultGridLayoutConfigurationProperty$Builder
                                                       CfnTemplate$DefaultInteractiveLayoutConfigurationProperty$Builder
                                                       CfnTemplate$DefaultNewSheetConfigurationProperty$Builder
                                                       CfnTemplate$DefaultPaginatedLayoutConfigurationProperty$Builder
                                                       CfnTemplate$DefaultRelativeDateTimeControlOptionsProperty$Builder
                                                       CfnTemplate$DefaultSectionBasedLayoutConfigurationProperty$Builder
                                                       CfnTemplate$DefaultSliderControlOptionsProperty$Builder
                                                       CfnTemplate$DefaultTextAreaControlOptionsProperty$Builder
                                                       CfnTemplate$DefaultTextFieldControlOptionsProperty$Builder
                                                       CfnTemplate$DestinationParameterValueConfigurationProperty$Builder
                                                       CfnTemplate$DimensionFieldProperty$Builder
                                                       CfnTemplate$DonutCenterOptionsProperty$Builder
                                                       CfnTemplate$DonutOptionsProperty$Builder
                                                       CfnTemplate$DrillDownFilterProperty$Builder
                                                       CfnTemplate$DropDownControlDisplayOptionsProperty$Builder
                                                       CfnTemplate$DynamicDefaultValueProperty$Builder
                                                       CfnTemplate$EmptyVisualProperty$Builder
                                                       CfnTemplate$EntityProperty$Builder
                                                       CfnTemplate$ExcludePeriodConfigurationProperty$Builder
                                                       CfnTemplate$ExplicitHierarchyProperty$Builder
                                                       CfnTemplate$FieldBasedTooltipProperty$Builder
                                                       CfnTemplate$FieldLabelTypeProperty$Builder
                                                       CfnTemplate$FieldSeriesItemProperty$Builder
                                                       CfnTemplate$FieldSortOptionsProperty$Builder
                                                       CfnTemplate$FieldSortProperty$Builder
                                                       CfnTemplate$FieldTooltipItemProperty$Builder
                                                       CfnTemplate$FilledMapAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$FilledMapConditionalFormattingOptionProperty$Builder
                                                       CfnTemplate$FilledMapConditionalFormattingProperty$Builder
                                                       CfnTemplate$FilledMapConfigurationProperty$Builder
                                                       CfnTemplate$FilledMapFieldWellsProperty$Builder
                                                       CfnTemplate$FilledMapShapeConditionalFormattingProperty$Builder
                                                       CfnTemplate$FilledMapSortConfigurationProperty$Builder
                                                       CfnTemplate$FilledMapVisualProperty$Builder
                                                       CfnTemplate$FilterControlProperty$Builder
                                                       CfnTemplate$FilterCrossSheetControlProperty$Builder
                                                       CfnTemplate$FilterDateTimePickerControlProperty$Builder
                                                       CfnTemplate$FilterDropDownControlProperty$Builder
                                                       CfnTemplate$FilterGroupProperty$Builder
                                                       CfnTemplate$FilterListConfigurationProperty$Builder
                                                       CfnTemplate$FilterListControlProperty$Builder
                                                       CfnTemplate$FilterOperationSelectedFieldsConfigurationProperty$Builder
                                                       CfnTemplate$FilterOperationTargetVisualsConfigurationProperty$Builder
                                                       CfnTemplate$FilterProperty$Builder
                                                       CfnTemplate$FilterRelativeDateTimeControlProperty$Builder
                                                       CfnTemplate$FilterScopeConfigurationProperty$Builder
                                                       CfnTemplate$FilterSelectableValuesProperty$Builder
                                                       CfnTemplate$FilterSliderControlProperty$Builder
                                                       CfnTemplate$FilterTextAreaControlProperty$Builder
                                                       CfnTemplate$FilterTextFieldControlProperty$Builder
                                                       CfnTemplate$FontConfigurationProperty$Builder
                                                       CfnTemplate$FontSizeProperty$Builder
                                                       CfnTemplate$FontWeightProperty$Builder
                                                       CfnTemplate$ForecastComputationProperty$Builder
                                                       CfnTemplate$ForecastConfigurationProperty$Builder
                                                       CfnTemplate$ForecastScenarioProperty$Builder
                                                       CfnTemplate$FormatConfigurationProperty$Builder
                                                       CfnTemplate$FreeFormLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnTemplate$FreeFormLayoutConfigurationProperty$Builder
                                                       CfnTemplate$FreeFormLayoutElementBackgroundStyleProperty$Builder
                                                       CfnTemplate$FreeFormLayoutElementBorderStyleProperty$Builder
                                                       CfnTemplate$FreeFormLayoutElementProperty$Builder
                                                       CfnTemplate$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder
                                                       CfnTemplate$FreeFormSectionLayoutConfigurationProperty$Builder
                                                       CfnTemplate$FunnelChartAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$FunnelChartConfigurationProperty$Builder
                                                       CfnTemplate$FunnelChartDataLabelOptionsProperty$Builder
                                                       CfnTemplate$FunnelChartFieldWellsProperty$Builder
                                                       CfnTemplate$FunnelChartSortConfigurationProperty$Builder
                                                       CfnTemplate$FunnelChartVisualProperty$Builder
                                                       CfnTemplate$GaugeChartArcConditionalFormattingProperty$Builder
                                                       CfnTemplate$GaugeChartConditionalFormattingOptionProperty$Builder
                                                       CfnTemplate$GaugeChartConditionalFormattingProperty$Builder
                                                       CfnTemplate$GaugeChartConfigurationProperty$Builder
                                                       CfnTemplate$GaugeChartFieldWellsProperty$Builder
                                                       CfnTemplate$GaugeChartOptionsProperty$Builder
                                                       CfnTemplate$GaugeChartPrimaryValueConditionalFormattingProperty$Builder
                                                       CfnTemplate$GaugeChartVisualProperty$Builder
                                                       CfnTemplate$GeospatialCoordinateBoundsProperty$Builder
                                                       CfnTemplate$GeospatialHeatmapColorScaleProperty$Builder
                                                       CfnTemplate$GeospatialHeatmapConfigurationProperty$Builder
                                                       CfnTemplate$GeospatialHeatmapDataColorProperty$Builder
                                                       CfnTemplate$GeospatialMapAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$GeospatialMapConfigurationProperty$Builder
                                                       CfnTemplate$GeospatialMapFieldWellsProperty$Builder
                                                       CfnTemplate$GeospatialMapStyleOptionsProperty$Builder
                                                       CfnTemplate$GeospatialMapVisualProperty$Builder
                                                       CfnTemplate$GeospatialPointStyleOptionsProperty$Builder
                                                       CfnTemplate$GeospatialWindowOptionsProperty$Builder
                                                       CfnTemplate$GlobalTableBorderOptionsProperty$Builder
                                                       CfnTemplate$GradientColorProperty$Builder
                                                       CfnTemplate$GradientStopProperty$Builder
                                                       CfnTemplate$GridLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnTemplate$GridLayoutConfigurationProperty$Builder
                                                       CfnTemplate$GridLayoutElementProperty$Builder
                                                       CfnTemplate$GridLayoutScreenCanvasSizeOptionsProperty$Builder
                                                       CfnTemplate$GrowthRateComputationProperty$Builder
                                                       CfnTemplate$HeaderFooterSectionConfigurationProperty$Builder
                                                       CfnTemplate$HeatMapAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$HeatMapConfigurationProperty$Builder
                                                       CfnTemplate$HeatMapFieldWellsProperty$Builder
                                                       CfnTemplate$HeatMapSortConfigurationProperty$Builder
                                                       CfnTemplate$HeatMapVisualProperty$Builder
                                                       CfnTemplate$HistogramAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$HistogramBinOptionsProperty$Builder
                                                       CfnTemplate$HistogramConfigurationProperty$Builder
                                                       CfnTemplate$HistogramFieldWellsProperty$Builder
                                                       CfnTemplate$HistogramVisualProperty$Builder
                                                       CfnTemplate$InsightConfigurationProperty$Builder
                                                       CfnTemplate$InsightVisualProperty$Builder
                                                       CfnTemplate$IntegerDefaultValuesProperty$Builder
                                                       CfnTemplate$IntegerParameterDeclarationProperty$Builder
                                                       CfnTemplate$IntegerValueWhenUnsetConfigurationProperty$Builder
                                                       CfnTemplate$ItemsLimitConfigurationProperty$Builder
                                                       CfnTemplate$KPIActualValueConditionalFormattingProperty$Builder
                                                       CfnTemplate$KPIComparisonValueConditionalFormattingProperty$Builder
                                                       CfnTemplate$KPIConditionalFormattingOptionProperty$Builder
                                                       CfnTemplate$KPIConditionalFormattingProperty$Builder
                                                       CfnTemplate$KPIConfigurationProperty$Builder
                                                       CfnTemplate$KPIFieldWellsProperty$Builder
                                                       CfnTemplate$KPIOptionsProperty$Builder
                                                       CfnTemplate$KPIPrimaryValueConditionalFormattingProperty$Builder
                                                       CfnTemplate$KPIProgressBarConditionalFormattingProperty$Builder
                                                       CfnTemplate$KPISortConfigurationProperty$Builder
                                                       CfnTemplate$KPISparklineOptionsProperty$Builder
                                                       CfnTemplate$KPIVisualLayoutOptionsProperty$Builder
                                                       CfnTemplate$KPIVisualProperty$Builder
                                                       CfnTemplate$KPIVisualStandardLayoutProperty$Builder
                                                       CfnTemplate$LabelOptionsProperty$Builder
                                                       CfnTemplate$LayoutConfigurationProperty$Builder
                                                       CfnTemplate$LayoutProperty$Builder
                                                       CfnTemplate$LegendOptionsProperty$Builder
                                                       CfnTemplate$LineChartAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$LineChartConfigurationProperty$Builder
                                                       CfnTemplate$LineChartDefaultSeriesSettingsProperty$Builder
                                                       CfnTemplate$LineChartFieldWellsProperty$Builder
                                                       CfnTemplate$LineChartLineStyleSettingsProperty$Builder
                                                       CfnTemplate$LineChartMarkerStyleSettingsProperty$Builder
                                                       CfnTemplate$LineChartSeriesSettingsProperty$Builder
                                                       CfnTemplate$LineChartSortConfigurationProperty$Builder
                                                       CfnTemplate$LineChartVisualProperty$Builder
                                                       CfnTemplate$LineSeriesAxisDisplayOptionsProperty$Builder
                                                       CfnTemplate$ListControlDisplayOptionsProperty$Builder
                                                       CfnTemplate$ListControlSearchOptionsProperty$Builder
                                                       CfnTemplate$ListControlSelectAllOptionsProperty$Builder
                                                       CfnTemplate$LoadingAnimationProperty$Builder
                                                       CfnTemplate$LocalNavigationConfigurationProperty$Builder
                                                       CfnTemplate$LongFormatTextProperty$Builder
                                                       CfnTemplate$MappedDataSetParameterProperty$Builder
                                                       CfnTemplate$MaximumLabelTypeProperty$Builder
                                                       CfnTemplate$MaximumMinimumComputationProperty$Builder
                                                       CfnTemplate$MeasureFieldProperty$Builder
                                                       CfnTemplate$MetricComparisonComputationProperty$Builder
                                                       CfnTemplate$MinimumLabelTypeProperty$Builder
                                                       CfnTemplate$MissingDataConfigurationProperty$Builder
                                                       CfnTemplate$NegativeValueConfigurationProperty$Builder
                                                       CfnTemplate$NullValueFormatConfigurationProperty$Builder
                                                       CfnTemplate$NumberDisplayFormatConfigurationProperty$Builder
                                                       CfnTemplate$NumberFormatConfigurationProperty$Builder
                                                       CfnTemplate$NumericAxisOptionsProperty$Builder
                                                       CfnTemplate$NumericEqualityDrillDownFilterProperty$Builder
                                                       CfnTemplate$NumericEqualityFilterProperty$Builder
                                                       CfnTemplate$NumericFormatConfigurationProperty$Builder
                                                       CfnTemplate$NumericRangeFilterProperty$Builder
                                                       CfnTemplate$NumericRangeFilterValueProperty$Builder
                                                       CfnTemplate$NumericSeparatorConfigurationProperty$Builder
                                                       CfnTemplate$NumericalAggregationFunctionProperty$Builder
                                                       CfnTemplate$NumericalDimensionFieldProperty$Builder
                                                       CfnTemplate$NumericalMeasureFieldProperty$Builder
                                                       CfnTemplate$PaginationConfigurationProperty$Builder
                                                       CfnTemplate$PanelConfigurationProperty$Builder
                                                       CfnTemplate$PanelTitleOptionsProperty$Builder
                                                       CfnTemplate$ParameterControlProperty$Builder
                                                       CfnTemplate$ParameterDateTimePickerControlProperty$Builder
                                                       CfnTemplate$ParameterDeclarationProperty$Builder
                                                       CfnTemplate$ParameterDropDownControlProperty$Builder
                                                       CfnTemplate$ParameterListControlProperty$Builder
                                                       CfnTemplate$ParameterSelectableValuesProperty$Builder
                                                       CfnTemplate$ParameterSliderControlProperty$Builder
                                                       CfnTemplate$ParameterTextAreaControlProperty$Builder
                                                       CfnTemplate$ParameterTextFieldControlProperty$Builder
                                                       CfnTemplate$PercentVisibleRangeProperty$Builder
                                                       CfnTemplate$PercentageDisplayFormatConfigurationProperty$Builder
                                                       CfnTemplate$PercentileAggregationProperty$Builder
                                                       CfnTemplate$PeriodOverPeriodComputationProperty$Builder
                                                       CfnTemplate$PeriodToDateComputationProperty$Builder
                                                       CfnTemplate$PieChartAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$PieChartConfigurationProperty$Builder
                                                       CfnTemplate$PieChartFieldWellsProperty$Builder
                                                       CfnTemplate$PieChartSortConfigurationProperty$Builder
                                                       CfnTemplate$PieChartVisualProperty$Builder
                                                       CfnTemplate$PivotFieldSortOptionsProperty$Builder
                                                       CfnTemplate$PivotTableAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$PivotTableCellConditionalFormattingProperty$Builder
                                                       CfnTemplate$PivotTableConditionalFormattingOptionProperty$Builder
                                                       CfnTemplate$PivotTableConditionalFormattingProperty$Builder
                                                       CfnTemplate$PivotTableConditionalFormattingScopeProperty$Builder
                                                       CfnTemplate$PivotTableConfigurationProperty$Builder
                                                       CfnTemplate$PivotTableDataPathOptionProperty$Builder
                                                       CfnTemplate$PivotTableFieldCollapseStateOptionProperty$Builder
                                                       CfnTemplate$PivotTableFieldCollapseStateTargetProperty$Builder
                                                       CfnTemplate$PivotTableFieldOptionProperty$Builder
                                                       CfnTemplate$PivotTableFieldOptionsProperty$Builder
                                                       CfnTemplate$PivotTableFieldSubtotalOptionsProperty$Builder
                                                       CfnTemplate$PivotTableFieldWellsProperty$Builder
                                                       CfnTemplate$PivotTableOptionsProperty$Builder
                                                       CfnTemplate$PivotTablePaginatedReportOptionsProperty$Builder
                                                       CfnTemplate$PivotTableRowsLabelOptionsProperty$Builder
                                                       CfnTemplate$PivotTableSortByProperty$Builder
                                                       CfnTemplate$PivotTableSortConfigurationProperty$Builder
                                                       CfnTemplate$PivotTableTotalOptionsProperty$Builder
                                                       CfnTemplate$PivotTableVisualProperty$Builder
                                                       CfnTemplate$PivotTotalOptionsProperty$Builder
                                                       CfnTemplate$PredefinedHierarchyProperty$Builder
                                                       CfnTemplate$ProgressBarOptionsProperty$Builder
                                                       CfnTemplate$RadarChartAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$RadarChartAreaStyleSettingsProperty$Builder
                                                       CfnTemplate$RadarChartConfigurationProperty$Builder
                                                       CfnTemplate$RadarChartFieldWellsProperty$Builder
                                                       CfnTemplate$RadarChartSeriesSettingsProperty$Builder
                                                       CfnTemplate$RadarChartSortConfigurationProperty$Builder
                                                       CfnTemplate$RadarChartVisualProperty$Builder
                                                       CfnTemplate$RangeEndsLabelTypeProperty$Builder
                                                       CfnTemplate$ReferenceLineCustomLabelConfigurationProperty$Builder
                                                       CfnTemplate$ReferenceLineDataConfigurationProperty$Builder
                                                       CfnTemplate$ReferenceLineDynamicDataConfigurationProperty$Builder
                                                       CfnTemplate$ReferenceLineLabelConfigurationProperty$Builder
                                                       CfnTemplate$ReferenceLineProperty$Builder
                                                       CfnTemplate$ReferenceLineStaticDataConfigurationProperty$Builder
                                                       CfnTemplate$ReferenceLineStyleConfigurationProperty$Builder
                                                       CfnTemplate$ReferenceLineValueLabelConfigurationProperty$Builder
                                                       CfnTemplate$RelativeDateTimeControlDisplayOptionsProperty$Builder
                                                       CfnTemplate$RelativeDatesFilterProperty$Builder
                                                       CfnTemplate$ResourcePermissionProperty$Builder
                                                       CfnTemplate$RollingDateConfigurationProperty$Builder
                                                       CfnTemplate$RowAlternateColorOptionsProperty$Builder
                                                       CfnTemplate$SameSheetTargetVisualConfigurationProperty$Builder
                                                       CfnTemplate$SankeyDiagramAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$SankeyDiagramChartConfigurationProperty$Builder
                                                       CfnTemplate$SankeyDiagramFieldWellsProperty$Builder
                                                       CfnTemplate$SankeyDiagramSortConfigurationProperty$Builder
                                                       CfnTemplate$SankeyDiagramVisualProperty$Builder
                                                       CfnTemplate$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$ScatterPlotConfigurationProperty$Builder
                                                       CfnTemplate$ScatterPlotFieldWellsProperty$Builder
                                                       CfnTemplate$ScatterPlotUnaggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$ScatterPlotVisualProperty$Builder
                                                       CfnTemplate$ScrollBarOptionsProperty$Builder
                                                       CfnTemplate$SecondaryValueOptionsProperty$Builder
                                                       CfnTemplate$SectionAfterPageBreakProperty$Builder
                                                       CfnTemplate$SectionBasedLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnTemplate$SectionBasedLayoutConfigurationProperty$Builder
                                                       CfnTemplate$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder
                                                       CfnTemplate$SectionLayoutConfigurationProperty$Builder
                                                       CfnTemplate$SectionPageBreakConfigurationProperty$Builder
                                                       CfnTemplate$SectionStyleProperty$Builder
                                                       CfnTemplate$SelectedSheetsFilterScopeConfigurationProperty$Builder
                                                       CfnTemplate$SeriesItemProperty$Builder
                                                       CfnTemplate$SetParameterValueConfigurationProperty$Builder
                                                       CfnTemplate$ShapeConditionalFormatProperty$Builder
                                                       CfnTemplate$SheetControlInfoIconLabelOptionsProperty$Builder
                                                       CfnTemplate$SheetControlLayoutConfigurationProperty$Builder
                                                       CfnTemplate$SheetControlLayoutProperty$Builder
                                                       CfnTemplate$SheetDefinitionProperty$Builder
                                                       CfnTemplate$SheetElementConfigurationOverridesProperty$Builder
                                                       CfnTemplate$SheetElementRenderingRuleProperty$Builder
                                                       CfnTemplate$SheetProperty$Builder
                                                       CfnTemplate$SheetTextBoxProperty$Builder
                                                       CfnTemplate$SheetVisualScopingConfigurationProperty$Builder
                                                       CfnTemplate$ShortFormatTextProperty$Builder
                                                       CfnTemplate$SimpleClusterMarkerProperty$Builder
                                                       CfnTemplate$SliderControlDisplayOptionsProperty$Builder
                                                       CfnTemplate$SmallMultiplesAxisPropertiesProperty$Builder
                                                       CfnTemplate$SmallMultiplesOptionsProperty$Builder
                                                       CfnTemplate$SpacingProperty$Builder
                                                       CfnTemplate$StringDefaultValuesProperty$Builder
                                                       CfnTemplate$StringFormatConfigurationProperty$Builder
                                                       CfnTemplate$StringParameterDeclarationProperty$Builder
                                                       CfnTemplate$StringValueWhenUnsetConfigurationProperty$Builder
                                                       CfnTemplate$SubtotalOptionsProperty$Builder
                                                       CfnTemplate$TableAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$TableBorderOptionsProperty$Builder
                                                       CfnTemplate$TableCellConditionalFormattingProperty$Builder
                                                       CfnTemplate$TableCellImageSizingConfigurationProperty$Builder
                                                       CfnTemplate$TableCellStyleProperty$Builder
                                                       CfnTemplate$TableConditionalFormattingOptionProperty$Builder
                                                       CfnTemplate$TableConditionalFormattingProperty$Builder
                                                       CfnTemplate$TableConfigurationProperty$Builder
                                                       CfnTemplate$TableFieldCustomIconContentProperty$Builder
                                                       CfnTemplate$TableFieldCustomTextContentProperty$Builder
                                                       CfnTemplate$TableFieldImageConfigurationProperty$Builder
                                                       CfnTemplate$TableFieldLinkConfigurationProperty$Builder
                                                       CfnTemplate$TableFieldLinkContentConfigurationProperty$Builder
                                                       CfnTemplate$TableFieldOptionProperty$Builder
                                                       CfnTemplate$TableFieldOptionsProperty$Builder
                                                       CfnTemplate$TableFieldURLConfigurationProperty$Builder
                                                       CfnTemplate$TableFieldWellsProperty$Builder
                                                       CfnTemplate$TableInlineVisualizationProperty$Builder
                                                       CfnTemplate$TableOptionsProperty$Builder
                                                       CfnTemplate$TablePaginatedReportOptionsProperty$Builder
                                                       CfnTemplate$TablePinnedFieldOptionsProperty$Builder
                                                       CfnTemplate$TableRowConditionalFormattingProperty$Builder
                                                       CfnTemplate$TableSideBorderOptionsProperty$Builder
                                                       CfnTemplate$TableSortConfigurationProperty$Builder
                                                       CfnTemplate$TableStyleTargetProperty$Builder
                                                       CfnTemplate$TableUnaggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$TableVisualProperty$Builder
                                                       CfnTemplate$TemplateErrorProperty$Builder
                                                       CfnTemplate$TemplateSourceAnalysisProperty$Builder
                                                       CfnTemplate$TemplateSourceEntityProperty$Builder
                                                       CfnTemplate$TemplateSourceTemplateProperty$Builder
                                                       CfnTemplate$TemplateVersionDefinitionProperty$Builder
                                                       CfnTemplate$TemplateVersionProperty$Builder
                                                       CfnTemplate$TextAreaControlDisplayOptionsProperty$Builder
                                                       CfnTemplate$TextConditionalFormatProperty$Builder
                                                       CfnTemplate$TextControlPlaceholderOptionsProperty$Builder
                                                       CfnTemplate$TextFieldControlDisplayOptionsProperty$Builder
                                                       CfnTemplate$ThousandSeparatorOptionsProperty$Builder
                                                       CfnTemplate$TimeBasedForecastPropertiesProperty$Builder
                                                       CfnTemplate$TimeEqualityFilterProperty$Builder
                                                       CfnTemplate$TimeRangeDrillDownFilterProperty$Builder
                                                       CfnTemplate$TimeRangeFilterProperty$Builder
                                                       CfnTemplate$TimeRangeFilterValueProperty$Builder
                                                       CfnTemplate$TooltipItemProperty$Builder
                                                       CfnTemplate$TooltipOptionsProperty$Builder
                                                       CfnTemplate$TopBottomFilterProperty$Builder
                                                       CfnTemplate$TopBottomMoversComputationProperty$Builder
                                                       CfnTemplate$TopBottomRankedComputationProperty$Builder
                                                       CfnTemplate$TotalAggregationComputationProperty$Builder
                                                       CfnTemplate$TotalAggregationFunctionProperty$Builder
                                                       CfnTemplate$TotalAggregationOptionProperty$Builder
                                                       CfnTemplate$TotalOptionsProperty$Builder
                                                       CfnTemplate$TreeMapAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$TreeMapConfigurationProperty$Builder
                                                       CfnTemplate$TreeMapFieldWellsProperty$Builder
                                                       CfnTemplate$TreeMapSortConfigurationProperty$Builder
                                                       CfnTemplate$TreeMapVisualProperty$Builder
                                                       CfnTemplate$TrendArrowOptionsProperty$Builder
                                                       CfnTemplate$UnaggregatedFieldProperty$Builder
                                                       CfnTemplate$UniqueValuesComputationProperty$Builder
                                                       CfnTemplate$ValidationStrategyProperty$Builder
                                                       CfnTemplate$VisibleRangeOptionsProperty$Builder
                                                       CfnTemplate$VisualCustomActionOperationProperty$Builder
                                                       CfnTemplate$VisualCustomActionProperty$Builder
                                                       CfnTemplate$VisualPaletteProperty$Builder
                                                       CfnTemplate$VisualProperty$Builder
                                                       CfnTemplate$VisualSubtitleLabelOptionsProperty$Builder
                                                       CfnTemplate$VisualTitleLabelOptionsProperty$Builder
                                                       CfnTemplate$WaterfallChartAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$WaterfallChartColorConfigurationProperty$Builder
                                                       CfnTemplate$WaterfallChartConfigurationProperty$Builder
                                                       CfnTemplate$WaterfallChartFieldWellsProperty$Builder
                                                       CfnTemplate$WaterfallChartGroupColorConfigurationProperty$Builder
                                                       CfnTemplate$WaterfallChartOptionsProperty$Builder
                                                       CfnTemplate$WaterfallChartSortConfigurationProperty$Builder
                                                       CfnTemplate$WaterfallVisualProperty$Builder
                                                       CfnTemplate$WhatIfPointScenarioProperty$Builder
                                                       CfnTemplate$WhatIfRangeScenarioProperty$Builder
                                                       CfnTemplate$WordCloudAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$WordCloudChartConfigurationProperty$Builder
                                                       CfnTemplate$WordCloudFieldWellsProperty$Builder
                                                       CfnTemplate$WordCloudOptionsProperty$Builder
                                                       CfnTemplate$WordCloudSortConfigurationProperty$Builder
                                                       CfnTemplate$WordCloudVisualProperty$Builder
                                                       CfnTemplateProps$Builder
                                                       CfnTheme$BorderStyleProperty$Builder
                                                       CfnTheme$Builder
                                                       CfnTheme$DataColorPaletteProperty$Builder
                                                       CfnTheme$FontProperty$Builder
                                                       CfnTheme$GutterStyleProperty$Builder
                                                       CfnTheme$MarginStyleProperty$Builder
                                                       CfnTheme$ResourcePermissionProperty$Builder
                                                       CfnTheme$SheetStyleProperty$Builder
                                                       CfnTheme$ThemeConfigurationProperty$Builder
                                                       CfnTheme$ThemeErrorProperty$Builder
                                                       CfnTheme$ThemeVersionProperty$Builder
                                                       CfnTheme$TileLayoutStyleProperty$Builder
                                                       CfnTheme$TileStyleProperty$Builder
                                                       CfnTheme$TypographyProperty$Builder
                                                       CfnTheme$UIColorPaletteProperty$Builder
                                                       CfnThemeProps$Builder
                                                       CfnTopic$Builder
                                                       CfnTopic$CellValueSynonymProperty$Builder
                                                       CfnTopic$CollectiveConstantProperty$Builder
                                                       CfnTopic$ComparativeOrderProperty$Builder
                                                       CfnTopic$DataAggregationProperty$Builder
                                                       CfnTopic$DatasetMetadataProperty$Builder
                                                       CfnTopic$DefaultFormattingProperty$Builder
                                                       CfnTopic$DisplayFormatOptionsProperty$Builder
                                                       CfnTopic$NamedEntityDefinitionMetricProperty$Builder
                                                       CfnTopic$NamedEntityDefinitionProperty$Builder
                                                       CfnTopic$NegativeFormatProperty$Builder
                                                       CfnTopic$RangeConstantProperty$Builder
                                                       CfnTopic$SemanticEntityTypeProperty$Builder
                                                       CfnTopic$SemanticTypeProperty$Builder
                                                       CfnTopic$TopicCalculatedFieldProperty$Builder
                                                       CfnTopic$TopicCategoryFilterConstantProperty$Builder
                                                       CfnTopic$TopicCategoryFilterProperty$Builder
                                                       CfnTopic$TopicColumnProperty$Builder
                                                       CfnTopic$TopicDateRangeFilterProperty$Builder
                                                       CfnTopic$TopicFilterProperty$Builder
                                                       CfnTopic$TopicNamedEntityProperty$Builder
                                                       CfnTopic$TopicNumericEqualityFilterProperty$Builder
                                                       CfnTopic$TopicNumericRangeFilterProperty$Builder
                                                       CfnTopic$TopicRangeFilterConstantProperty$Builder
                                                       CfnTopic$TopicRelativeDateFilterProperty$Builder
                                                       CfnTopic$TopicSingularFilterConstantProperty$Builder
                                                       CfnTopicProps$Builder
                                                       CfnVPCConnection$Builder
                                                       CfnVPCConnection$NetworkInterfaceProperty$Builder
                                                       CfnVPCConnectionProps$Builder]))


(defn build-cfn-analysis-aggregation-function-property-builder
  "The build-cfn-analysis-aggregation-function-property-builder function updates a CfnAnalysis$AggregationFunctionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AggregationFunctionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `attributeAggregationFunction` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AttributeAggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:attribute-aggregation-function` |
| `categoricalAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:categorical-aggregation-function` |
| `dateAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-aggregation-function` |
| `numericalAggregationFunction` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumericalAggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:numerical-aggregation-function` |
"
  [^CfnAnalysis$AggregationFunctionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :attribute-aggregation-function)]
    (. builder attributeAggregationFunction data))
  (when-let [data (lookup-entry config id :categorical-aggregation-function)]
    (. builder categoricalAggregationFunction data))
  (when-let [data (lookup-entry config id :date-aggregation-function)]
    (. builder dateAggregationFunction data))
  (when-let [data (lookup-entry config id :numerical-aggregation-function)]
    (. builder numericalAggregationFunction data))
  (.build builder))


(defn cfn-analysis-aggregation-function-property-builder
  "Creates a  `CfnAnalysis$AggregationFunctionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-aggregation-function-property-builder (new CfnAnalysis$AggregationFunctionProperty$Builder) id config))


(defn build-cfn-analysis-aggregation-sort-configuration-property-builder
  "The build-cfn-analysis-aggregation-sort-configuration-property-builder function updates a CfnAnalysis$AggregationSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AggregationSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `sortDirection` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-direction` |
"
  [^CfnAnalysis$AggregationSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :sort-direction)]
    (. builder sortDirection data))
  (.build builder))


(defn cfn-analysis-aggregation-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$AggregationSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-aggregation-sort-configuration-property-builder (new CfnAnalysis$AggregationSortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-analysis-defaults-property-builder
  "The build-cfn-analysis-analysis-defaults-property-builder function updates a CfnAnalysis$AnalysisDefaultsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AnalysisDefaultsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultNewSheetConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DefaultNewSheetConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-new-sheet-configuration` |
"
  [^CfnAnalysis$AnalysisDefaultsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-new-sheet-configuration)]
    (. builder defaultNewSheetConfiguration data))
  (.build builder))


(defn cfn-analysis-analysis-defaults-property-builder
  "Creates a  `CfnAnalysis$AnalysisDefaultsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-analysis-defaults-property-builder (new CfnAnalysis$AnalysisDefaultsProperty$Builder) id config))


(defn build-cfn-analysis-analysis-definition-property-builder
  "The build-cfn-analysis-analysis-definition-property-builder function updates a CfnAnalysis$AnalysisDefinitionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AnalysisDefinitionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `analysisDefaults` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AnalysisDefaultsProperty | [[cdk.support/lookup-entry]] | `:analysis-defaults` |
| `calculatedFields` | java.util.List | [[cdk.support/lookup-entry]] | `:calculated-fields` |
| `columnConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:column-configurations` |
| `dataSetIdentifierDeclarations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-set-identifier-declarations` |
| `filterGroups` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-groups` |
| `options` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:options` |
| `parameterDeclarations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameter-declarations` |
| `sheets` | java.util.List | [[cdk.support/lookup-entry]] | `:sheets` |
"
  [^CfnAnalysis$AnalysisDefinitionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :analysis-defaults)]
    (. builder analysisDefaults data))
  (when-let [data (lookup-entry config id :calculated-fields)]
    (. builder calculatedFields data))
  (when-let [data (lookup-entry config id :column-configurations)]
    (. builder columnConfigurations data))
  (when-let [data (lookup-entry config id :data-set-identifier-declarations)]
    (. builder dataSetIdentifierDeclarations data))
  (when-let [data (lookup-entry config id :filter-groups)]
    (. builder filterGroups data))
  (when-let [data (lookup-entry config id :options)]
    (. builder options data))
  (when-let [data (lookup-entry config id :parameter-declarations)]
    (. builder parameterDeclarations data))
  (when-let [data (lookup-entry config id :sheets)]
    (. builder sheets data))
  (.build builder))


(defn cfn-analysis-analysis-definition-property-builder
  "Creates a  `CfnAnalysis$AnalysisDefinitionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-analysis-definition-property-builder (new CfnAnalysis$AnalysisDefinitionProperty$Builder) id config))


(defn build-cfn-analysis-analysis-error-property-builder
  "The build-cfn-analysis-analysis-error-property-builder function updates a CfnAnalysis$AnalysisErrorProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AnalysisErrorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `message` | java.lang.String | [[cdk.support/lookup-entry]] | `:message` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `violatedEntities` | java.util.List | [[cdk.support/lookup-entry]] | `:violated-entities` |
"
  [^CfnAnalysis$AnalysisErrorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :message)]
    (. builder message data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :violated-entities)]
    (. builder violatedEntities data))
  (.build builder))


(defn cfn-analysis-analysis-error-property-builder
  "Creates a  `CfnAnalysis$AnalysisErrorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-analysis-error-property-builder (new CfnAnalysis$AnalysisErrorProperty$Builder) id config))


(defn build-cfn-analysis-analysis-source-entity-property-builder
  "The build-cfn-analysis-analysis-source-entity-property-builder function updates a CfnAnalysis$AnalysisSourceEntityProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AnalysisSourceEntityProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sourceTemplate` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-template` |
"
  [^CfnAnalysis$AnalysisSourceEntityProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :source-template)]
    (. builder sourceTemplate data))
  (.build builder))


(defn cfn-analysis-analysis-source-entity-property-builder
  "Creates a  `CfnAnalysis$AnalysisSourceEntityProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-analysis-source-entity-property-builder (new CfnAnalysis$AnalysisSourceEntityProperty$Builder) id config))


(defn build-cfn-analysis-analysis-source-template-property-builder
  "The build-cfn-analysis-analysis-source-template-property-builder function updates a CfnAnalysis$AnalysisSourceTemplateProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AnalysisSourceTemplateProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arn` | java.lang.String | [[cdk.support/lookup-entry]] | `:arn` |
| `dataSetReferences` | java.util.List | [[cdk.support/lookup-entry]] | `:data-set-references` |
"
  [^CfnAnalysis$AnalysisSourceTemplateProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arn)]
    (. builder arn data))
  (when-let [data (lookup-entry config id :data-set-references)]
    (. builder dataSetReferences data))
  (.build builder))


(defn cfn-analysis-analysis-source-template-property-builder
  "Creates a  `CfnAnalysis$AnalysisSourceTemplateProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-analysis-source-template-property-builder (new CfnAnalysis$AnalysisSourceTemplateProperty$Builder) id config))


(defn build-cfn-analysis-anchor-date-configuration-property-builder
  "The build-cfn-analysis-anchor-date-configuration-property-builder function updates a CfnAnalysis$AnchorDateConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AnchorDateConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `anchorOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:anchor-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
"
  [^CfnAnalysis$AnchorDateConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :anchor-option)]
    (. builder anchorOption data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (.build builder))


(defn cfn-analysis-anchor-date-configuration-property-builder
  "Creates a  `CfnAnalysis$AnchorDateConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-anchor-date-configuration-property-builder (new CfnAnalysis$AnchorDateConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-arc-axis-configuration-property-builder
  "The build-cfn-analysis-arc-axis-configuration-property-builder function updates a CfnAnalysis$ArcAxisConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ArcAxisConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `range` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range` |
| `reserveRange` | java.lang.Number | [[cdk.support/lookup-entry]] | `:reserve-range` |
"
  [^CfnAnalysis$ArcAxisConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :range)]
    (. builder range data))
  (when-let [data (lookup-entry config id :reserve-range)]
    (. builder reserveRange data))
  (.build builder))


(defn cfn-analysis-arc-axis-configuration-property-builder
  "Creates a  `CfnAnalysis$ArcAxisConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-arc-axis-configuration-property-builder (new CfnAnalysis$ArcAxisConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-arc-axis-display-range-property-builder
  "The build-cfn-analysis-arc-axis-display-range-property-builder function updates a CfnAnalysis$ArcAxisDisplayRangeProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ArcAxisDisplayRangeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `max` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max` |
| `min` | java.lang.Number | [[cdk.support/lookup-entry]] | `:min` |
"
  [^CfnAnalysis$ArcAxisDisplayRangeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :max)]
    (. builder max data))
  (when-let [data (lookup-entry config id :min)]
    (. builder min data))
  (.build builder))


(defn cfn-analysis-arc-axis-display-range-property-builder
  "Creates a  `CfnAnalysis$ArcAxisDisplayRangeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-arc-axis-display-range-property-builder (new CfnAnalysis$ArcAxisDisplayRangeProperty$Builder) id config))


(defn build-cfn-analysis-arc-configuration-property-builder
  "The build-cfn-analysis-arc-configuration-property-builder function updates a CfnAnalysis$ArcConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ArcConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:arc-angle` |
| `arcThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:arc-thickness` |
"
  [^CfnAnalysis$ArcConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arc-angle)]
    (. builder arcAngle data))
  (when-let [data (lookup-entry config id :arc-thickness)]
    (. builder arcThickness data))
  (.build builder))


(defn cfn-analysis-arc-configuration-property-builder
  "Creates a  `CfnAnalysis$ArcConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-arc-configuration-property-builder (new CfnAnalysis$ArcConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-arc-options-property-builder
  "The build-cfn-analysis-arc-options-property-builder function updates a CfnAnalysis$ArcOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ArcOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:arc-thickness` |
"
  [^CfnAnalysis$ArcOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arc-thickness)]
    (. builder arcThickness data))
  (.build builder))


(defn cfn-analysis-arc-options-property-builder
  "Creates a  `CfnAnalysis$ArcOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-arc-options-property-builder (new CfnAnalysis$ArcOptionsProperty$Builder) id config))


(defn build-cfn-analysis-asset-options-property-builder
  "The build-cfn-analysis-asset-options-property-builder function updates a CfnAnalysis$AssetOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AssetOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `timezone` | java.lang.String | [[cdk.support/lookup-entry]] | `:timezone` |
| `weekStart` | java.lang.String | [[cdk.support/lookup-entry]] | `:week-start` |
"
  [^CfnAnalysis$AssetOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :timezone)]
    (. builder timezone data))
  (when-let [data (lookup-entry config id :week-start)]
    (. builder weekStart data))
  (.build builder))


(defn cfn-analysis-asset-options-property-builder
  "Creates a  `CfnAnalysis$AssetOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-asset-options-property-builder (new CfnAnalysis$AssetOptionsProperty$Builder) id config))


(defn build-cfn-analysis-attribute-aggregation-function-property-builder
  "The build-cfn-analysis-attribute-aggregation-function-property-builder function updates a CfnAnalysis$AttributeAggregationFunctionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AttributeAggregationFunctionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleAttributeAggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-attribute-aggregation` |
| `valueForMultipleValues` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-for-multiple-values` |
"
  [^CfnAnalysis$AttributeAggregationFunctionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :simple-attribute-aggregation)]
    (. builder simpleAttributeAggregation data))
  (when-let [data (lookup-entry config id :value-for-multiple-values)]
    (. builder valueForMultipleValues data))
  (.build builder))


(defn cfn-analysis-attribute-aggregation-function-property-builder
  "Creates a  `CfnAnalysis$AttributeAggregationFunctionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-attribute-aggregation-function-property-builder (new CfnAnalysis$AttributeAggregationFunctionProperty$Builder) id config))


(defn build-cfn-analysis-axis-data-options-property-builder
  "The build-cfn-analysis-axis-data-options-property-builder function updates a CfnAnalysis$AxisDataOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AxisDataOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateAxisOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-axis-options` |
| `numericAxisOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-axis-options` |
"
  [^CfnAnalysis$AxisDataOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-axis-options)]
    (. builder dateAxisOptions data))
  (when-let [data (lookup-entry config id :numeric-axis-options)]
    (. builder numericAxisOptions data))
  (.build builder))


(defn cfn-analysis-axis-data-options-property-builder
  "Creates a  `CfnAnalysis$AxisDataOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-axis-data-options-property-builder (new CfnAnalysis$AxisDataOptionsProperty$Builder) id config))


(defn build-cfn-analysis-axis-display-min-max-range-property-builder
  "The build-cfn-analysis-axis-display-min-max-range-property-builder function updates a CfnAnalysis$AxisDisplayMinMaxRangeProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AxisDisplayMinMaxRangeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `maximum` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum` |
| `minimum` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum` |
"
  [^CfnAnalysis$AxisDisplayMinMaxRangeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :maximum)]
    (. builder maximum data))
  (when-let [data (lookup-entry config id :minimum)]
    (. builder minimum data))
  (.build builder))


(defn cfn-analysis-axis-display-min-max-range-property-builder
  "Creates a  `CfnAnalysis$AxisDisplayMinMaxRangeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-axis-display-min-max-range-property-builder (new CfnAnalysis$AxisDisplayMinMaxRangeProperty$Builder) id config))


(defn build-cfn-analysis-axis-display-options-property-builder
  "The build-cfn-analysis-axis-display-options-property-builder function updates a CfnAnalysis$AxisDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AxisDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisLineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-line-visibility` |
| `axisOffset` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-offset` |
| `dataOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDataOptionsProperty | [[cdk.support/lookup-entry]] | `:data-options` |
| `gridLineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:grid-line-visibility` |
| `scrollbarOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ScrollBarOptionsProperty | [[cdk.support/lookup-entry]] | `:scrollbar-options` |
| `tickLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisTickLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:tick-label-options` |
"
  [^CfnAnalysis$AxisDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-line-visibility)]
    (. builder axisLineVisibility data))
  (when-let [data (lookup-entry config id :axis-offset)]
    (. builder axisOffset data))
  (when-let [data (lookup-entry config id :data-options)]
    (. builder dataOptions data))
  (when-let [data (lookup-entry config id :grid-line-visibility)]
    (. builder gridLineVisibility data))
  (when-let [data (lookup-entry config id :scrollbar-options)]
    (. builder scrollbarOptions data))
  (when-let [data (lookup-entry config id :tick-label-options)]
    (. builder tickLabelOptions data))
  (.build builder))


(defn cfn-analysis-axis-display-options-property-builder
  "Creates a  `CfnAnalysis$AxisDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-axis-display-options-property-builder (new CfnAnalysis$AxisDisplayOptionsProperty$Builder) id config))


(defn build-cfn-analysis-axis-display-range-property-builder
  "The build-cfn-analysis-axis-display-range-property-builder function updates a CfnAnalysis$AxisDisplayRangeProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AxisDisplayRangeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataDriven` | java.lang.Object | [[cdk.support/lookup-entry]] | `:data-driven` |
| `minMax` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:min-max` |
"
  [^CfnAnalysis$AxisDisplayRangeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-driven)]
    (. builder dataDriven data))
  (when-let [data (lookup-entry config id :min-max)]
    (. builder minMax data))
  (.build builder))


(defn cfn-analysis-axis-display-range-property-builder
  "Creates a  `CfnAnalysis$AxisDisplayRangeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-axis-display-range-property-builder (new CfnAnalysis$AxisDisplayRangeProperty$Builder) id config))


(defn build-cfn-analysis-axis-label-options-property-builder
  "The build-cfn-analysis-axis-label-options-property-builder function updates a CfnAnalysis$AxisLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AxisLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `applyTo` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:apply-to` |
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |
"
  [^CfnAnalysis$AxisLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :apply-to)]
    (. builder applyTo data))
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (.build builder))


(defn cfn-analysis-axis-label-options-property-builder
  "Creates a  `CfnAnalysis$AxisLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-axis-label-options-property-builder (new CfnAnalysis$AxisLabelOptionsProperty$Builder) id config))


(defn build-cfn-analysis-axis-label-reference-options-property-builder
  "The build-cfn-analysis-axis-label-reference-options-property-builder function updates a CfnAnalysis$AxisLabelReferenceOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AxisLabelReferenceOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
"
  [^CfnAnalysis$AxisLabelReferenceOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (.build builder))


(defn cfn-analysis-axis-label-reference-options-property-builder
  "Creates a  `CfnAnalysis$AxisLabelReferenceOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-axis-label-reference-options-property-builder (new CfnAnalysis$AxisLabelReferenceOptionsProperty$Builder) id config))


(defn build-cfn-analysis-axis-linear-scale-property-builder
  "The build-cfn-analysis-axis-linear-scale-property-builder function updates a CfnAnalysis$AxisLinearScaleProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AxisLinearScaleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `stepCount` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-count` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
"
  [^CfnAnalysis$AxisLinearScaleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :step-count)]
    (. builder stepCount data))
  (when-let [data (lookup-entry config id :step-size)]
    (. builder stepSize data))
  (.build builder))


(defn cfn-analysis-axis-linear-scale-property-builder
  "Creates a  `CfnAnalysis$AxisLinearScaleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-axis-linear-scale-property-builder (new CfnAnalysis$AxisLinearScaleProperty$Builder) id config))


(defn build-cfn-analysis-axis-logarithmic-scale-property-builder
  "The build-cfn-analysis-axis-logarithmic-scale-property-builder function updates a CfnAnalysis$AxisLogarithmicScaleProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AxisLogarithmicScaleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `base` | java.lang.Number | [[cdk.support/lookup-entry]] | `:base` |
"
  [^CfnAnalysis$AxisLogarithmicScaleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :base)]
    (. builder base data))
  (.build builder))


(defn cfn-analysis-axis-logarithmic-scale-property-builder
  "Creates a  `CfnAnalysis$AxisLogarithmicScaleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-axis-logarithmic-scale-property-builder (new CfnAnalysis$AxisLogarithmicScaleProperty$Builder) id config))


(defn build-cfn-analysis-axis-scale-property-builder
  "The build-cfn-analysis-axis-scale-property-builder function updates a CfnAnalysis$AxisScaleProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AxisScaleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `linear` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisLinearScaleProperty | [[cdk.support/lookup-entry]] | `:linear` |
| `logarithmic` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisLogarithmicScaleProperty | [[cdk.support/lookup-entry]] | `:logarithmic` |
"
  [^CfnAnalysis$AxisScaleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :linear)]
    (. builder linear data))
  (when-let [data (lookup-entry config id :logarithmic)]
    (. builder logarithmic data))
  (.build builder))


(defn cfn-analysis-axis-scale-property-builder
  "Creates a  `CfnAnalysis$AxisScaleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-axis-scale-property-builder (new CfnAnalysis$AxisScaleProperty$Builder) id config))


(defn build-cfn-analysis-axis-tick-label-options-property-builder
  "The build-cfn-analysis-axis-tick-label-options-property-builder function updates a CfnAnalysis$AxisTickLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$AxisTickLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `labelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:label-options` |
| `rotationAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:rotation-angle` |
"
  [^CfnAnalysis$AxisTickLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :label-options)]
    (. builder labelOptions data))
  (when-let [data (lookup-entry config id :rotation-angle)]
    (. builder rotationAngle data))
  (.build builder))


(defn cfn-analysis-axis-tick-label-options-property-builder
  "Creates a  `CfnAnalysis$AxisTickLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-axis-tick-label-options-property-builder (new CfnAnalysis$AxisTickLabelOptionsProperty$Builder) id config))


(defn build-cfn-analysis-bar-chart-aggregated-field-wells-property-builder
  "The build-cfn-analysis-bar-chart-aggregated-field-wells-property-builder function updates a CfnAnalysis$BarChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$BarChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | java.util.List | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `smallMultiples` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$BarChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :small-multiples)]
    (. builder smallMultiples data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-bar-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$BarChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-bar-chart-aggregated-field-wells-property-builder (new CfnAnalysis$BarChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-bar-chart-configuration-property-builder
  "The build-cfn-analysis-bar-chart-configuration-property-builder function updates a CfnAnalysis$BarChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$BarChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barsArrangement` | java.lang.String | [[cdk.support/lookup-entry]] | `:bars-arrangement` |
| `categoryAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `contributionAnalysisDefaults` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `orientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:orientation` |
| `referenceLines` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `smallMultiplesOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SmallMultiplesOptionsProperty | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$BarChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-axis` |
| `valueLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnAnalysis$BarChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bars-arrangement)]
    (. builder barsArrangement data))
  (when-let [data (lookup-entry config id :category-axis)]
    (. builder categoryAxis data))
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :color-label-options)]
    (. builder colorLabelOptions data))
  (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
    (. builder contributionAnalysisDefaults data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :orientation)]
    (. builder orientation data))
  (when-let [data (lookup-entry config id :reference-lines)]
    (. builder referenceLines data))
  (when-let [data (lookup-entry config id :small-multiples-options)]
    (. builder smallMultiplesOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :value-axis)]
    (. builder valueAxis data))
  (when-let [data (lookup-entry config id :value-label-options)]
    (. builder valueLabelOptions data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-analysis-bar-chart-configuration-property-builder
  "Creates a  `CfnAnalysis$BarChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-bar-chart-configuration-property-builder (new CfnAnalysis$BarChartConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-bar-chart-field-wells-property-builder
  "The build-cfn-analysis-bar-chart-field-wells-property-builder function updates a CfnAnalysis$BarChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$BarChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bar-chart-aggregated-field-wells` |
"
  [^CfnAnalysis$BarChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bar-chart-aggregated-field-wells)]
    (. builder barChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-bar-chart-field-wells-property-builder
  "Creates a  `CfnAnalysis$BarChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-bar-chart-field-wells-property-builder (new CfnAnalysis$BarChartFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-bar-chart-sort-configuration-property-builder
  "The build-cfn-analysis-bar-chart-sort-configuration-property-builder function updates a CfnAnalysis$BarChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$BarChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | java.util.List | [[cdk.support/lookup-entry]] | `:color-sort` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |
"
  [^CfnAnalysis$BarChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :color-items-limit)]
    (. builder colorItemsLimit data))
  (when-let [data (lookup-entry config id :color-sort)]
    (. builder colorSort data))
  (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
    (. builder smallMultiplesLimitConfiguration data))
  (when-let [data (lookup-entry config id :small-multiples-sort)]
    (. builder smallMultiplesSort data))
  (.build builder))


(defn cfn-analysis-bar-chart-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$BarChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-bar-chart-sort-configuration-property-builder (new CfnAnalysis$BarChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-bar-chart-visual-property-builder
  "The build-cfn-analysis-bar-chart-visual-property-builder function updates a CfnAnalysis$BarChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$BarChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$BarChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$BarChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-bar-chart-visual-property-builder
  "Creates a  `CfnAnalysis$BarChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-bar-chart-visual-property-builder (new CfnAnalysis$BarChartVisualProperty$Builder) id config))


(defn build-cfn-analysis-bin-count-options-property-builder
  "The build-cfn-analysis-bin-count-options-property-builder function updates a CfnAnalysis$BinCountOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$BinCountOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$BinCountOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-bin-count-options-property-builder
  "Creates a  `CfnAnalysis$BinCountOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-bin-count-options-property-builder (new CfnAnalysis$BinCountOptionsProperty$Builder) id config))


(defn build-cfn-analysis-bin-width-options-property-builder
  "The build-cfn-analysis-bin-width-options-property-builder function updates a CfnAnalysis$BinWidthOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$BinWidthOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binCountLimit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:bin-count-limit` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$BinWidthOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bin-count-limit)]
    (. builder binCountLimit data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-bin-width-options-property-builder
  "Creates a  `CfnAnalysis$BinWidthOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-bin-width-options-property-builder (new CfnAnalysis$BinWidthOptionsProperty$Builder) id config))


(defn build-cfn-analysis-body-section-configuration-property-builder
  "The build-cfn-analysis-body-section-configuration-property-builder function updates a CfnAnalysis$BodySectionConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$BodySectionConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | software.amazon.awscdk.services.quicksight.CfnAnalysis$BodySectionContentProperty | [[cdk.support/lookup-entry]] | `:content` |
| `pageBreakConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:page-break-configuration` |
| `sectionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:section-id` |
| `style` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style` |
"
  [^CfnAnalysis$BodySectionConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :content)]
    (. builder content data))
  (when-let [data (lookup-entry config id :page-break-configuration)]
    (. builder pageBreakConfiguration data))
  (when-let [data (lookup-entry config id :section-id)]
    (. builder sectionId data))
  (when-let [data (lookup-entry config id :style)]
    (. builder style data))
  (.build builder))


(defn cfn-analysis-body-section-configuration-property-builder
  "Creates a  `CfnAnalysis$BodySectionConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-body-section-configuration-property-builder (new CfnAnalysis$BodySectionConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-body-section-content-property-builder
  "The build-cfn-analysis-body-section-content-property-builder function updates a CfnAnalysis$BodySectionContentProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$BodySectionContentProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `layout` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SectionLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:layout` |
"
  [^CfnAnalysis$BodySectionContentProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :layout)]
    (. builder layout data))
  (.build builder))


(defn cfn-analysis-body-section-content-property-builder
  "Creates a  `CfnAnalysis$BodySectionContentProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-body-section-content-property-builder (new CfnAnalysis$BodySectionContentProperty$Builder) id config))


(defn build-cfn-analysis-box-plot-aggregated-field-wells-property-builder
  "The build-cfn-analysis-box-plot-aggregated-field-wells-property-builder function updates a CfnAnalysis$BoxPlotAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$BoxPlotAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-by` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$BoxPlotAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :group-by)]
    (. builder groupBy data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-box-plot-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$BoxPlotAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-box-plot-aggregated-field-wells-property-builder (new CfnAnalysis$BoxPlotAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-box-plot-chart-configuration-property-builder
  "The build-cfn-analysis-box-plot-chart-configuration-property-builder function updates a CfnAnalysis$BoxPlotChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$BoxPlotChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `boxPlotOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$BoxPlotOptionsProperty | [[cdk.support/lookup-entry]] | `:box-plot-options` |
| `categoryAxis` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | java.util.List | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnAnalysis$BoxPlotChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :box-plot-options)]
    (. builder boxPlotOptions data))
  (when-let [data (lookup-entry config id :category-axis)]
    (. builder categoryAxis data))
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
    (. builder primaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
    (. builder primaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :reference-lines)]
    (. builder referenceLines data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-analysis-box-plot-chart-configuration-property-builder
  "Creates a  `CfnAnalysis$BoxPlotChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-box-plot-chart-configuration-property-builder (new CfnAnalysis$BoxPlotChartConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-box-plot-field-wells-property-builder
  "The build-cfn-analysis-box-plot-field-wells-property-builder function updates a CfnAnalysis$BoxPlotFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$BoxPlotFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `boxPlotAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$BoxPlotAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:box-plot-aggregated-field-wells` |
"
  [^CfnAnalysis$BoxPlotFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :box-plot-aggregated-field-wells)]
    (. builder boxPlotAggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-box-plot-field-wells-property-builder
  "Creates a  `CfnAnalysis$BoxPlotFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-box-plot-field-wells-property-builder (new CfnAnalysis$BoxPlotFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-box-plot-options-property-builder
  "The build-cfn-analysis-box-plot-options-property-builder function updates a CfnAnalysis$BoxPlotOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$BoxPlotOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `allDataPointsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:all-data-points-visibility` |
| `outlierVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:outlier-visibility` |
| `styleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style-options` |
"
  [^CfnAnalysis$BoxPlotOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :all-data-points-visibility)]
    (. builder allDataPointsVisibility data))
  (when-let [data (lookup-entry config id :outlier-visibility)]
    (. builder outlierVisibility data))
  (when-let [data (lookup-entry config id :style-options)]
    (. builder styleOptions data))
  (.build builder))


(defn cfn-analysis-box-plot-options-property-builder
  "Creates a  `CfnAnalysis$BoxPlotOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-box-plot-options-property-builder (new CfnAnalysis$BoxPlotOptionsProperty$Builder) id config))


(defn build-cfn-analysis-box-plot-sort-configuration-property-builder
  "The build-cfn-analysis-box-plot-sort-configuration-property-builder function updates a CfnAnalysis$BoxPlotSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$BoxPlotSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `paginationConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PaginationConfigurationProperty | [[cdk.support/lookup-entry]] | `:pagination-configuration` |
"
  [^CfnAnalysis$BoxPlotSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :pagination-configuration)]
    (. builder paginationConfiguration data))
  (.build builder))


(defn cfn-analysis-box-plot-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$BoxPlotSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-box-plot-sort-configuration-property-builder (new CfnAnalysis$BoxPlotSortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-box-plot-style-options-property-builder
  "The build-cfn-analysis-box-plot-style-options-property-builder function updates a CfnAnalysis$BoxPlotStyleOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$BoxPlotStyleOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fillStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:fill-style` |
"
  [^CfnAnalysis$BoxPlotStyleOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :fill-style)]
    (. builder fillStyle data))
  (.build builder))


(defn cfn-analysis-box-plot-style-options-property-builder
  "Creates a  `CfnAnalysis$BoxPlotStyleOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-box-plot-style-options-property-builder (new CfnAnalysis$BoxPlotStyleOptionsProperty$Builder) id config))


(defn build-cfn-analysis-box-plot-visual-property-builder
  "The build-cfn-analysis-box-plot-visual-property-builder function updates a CfnAnalysis$BoxPlotVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$BoxPlotVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$BoxPlotChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$BoxPlotVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-box-plot-visual-property-builder
  "Creates a  `CfnAnalysis$BoxPlotVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-box-plot-visual-property-builder (new CfnAnalysis$BoxPlotVisualProperty$Builder) id config))


(defn build-cfn-analysis-builder
  "The build-cfn-analysis-builder function updates a CfnAnalysis$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `analysisId` | java.lang.String | [[cdk.support/lookup-entry]] | `:analysis-id` |
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `definition` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:definition` |
| `errors` | java.util.List | [[cdk.support/lookup-entry]] | `:errors` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameters` |
| `permissions` | java.util.List | [[cdk.support/lookup-entry]] | `:permissions` |
| `sheets` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sheets` |
| `sourceEntity` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AnalysisSourceEntityProperty | [[cdk.support/lookup-entry]] | `:source-entity` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `themeArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:theme-arn` |
| `validationStrategy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:validation-strategy` |
"
  [^CfnAnalysis$Builder builder id config]
  (when-let [data (lookup-entry config id :analysis-id)]
    (. builder analysisId data))
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :definition)]
    (. builder definition data))
  (when-let [data (lookup-entry config id :errors)]
    (. builder errors data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :parameters)]
    (. builder parameters data))
  (when-let [data (lookup-entry config id :permissions)]
    (. builder permissions data))
  (when-let [data (lookup-entry config id :sheets)]
    (. builder sheets data))
  (when-let [data (lookup-entry config id :source-entity)]
    (. builder sourceEntity data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (when-let [data (lookup-entry config id :tags)]
    (. builder tags data))
  (when-let [data (lookup-entry config id :theme-arn)]
    (. builder themeArn data))
  (when-let [data (lookup-entry config id :validation-strategy)]
    (. builder validationStrategy data))
  (.build builder))


(defn cfn-analysis-builder
  "Creates a  `CfnAnalysis$Builder` instance using a scope and ID, applies the data configuration, then builds it.  Takes the following arguments: 
| Argument | DataType | Description |
|---|---|---|
| scope | software.constructs.Construct | The parent scope construct of the object being built. |
| id | String or Keyword or Symbol | Value to use as both the ID of the object being build and the namespace when looking up configuration values. |
| config | map | Data configuration |"
  [^software.constructs.Construct scope id config]
  (build-cfn-analysis-builder (CfnAnalysis$Builder/create scope (name id)) id config))


(defn build-cfn-analysis-calculated-field-property-builder
  "The build-cfn-analysis-calculated-field-property-builder function updates a CfnAnalysis$CalculatedFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CalculatedFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
"
  [^CfnAnalysis$CalculatedFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (.build builder))


(defn cfn-analysis-calculated-field-property-builder
  "Creates a  `CfnAnalysis$CalculatedFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-calculated-field-property-builder (new CfnAnalysis$CalculatedFieldProperty$Builder) id config))


(defn build-cfn-analysis-calculated-measure-field-property-builder
  "The build-cfn-analysis-calculated-measure-field-property-builder function updates a CfnAnalysis$CalculatedMeasureFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CalculatedMeasureFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
"
  [^CfnAnalysis$CalculatedMeasureFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (.build builder))


(defn cfn-analysis-calculated-measure-field-property-builder
  "Creates a  `CfnAnalysis$CalculatedMeasureFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-calculated-measure-field-property-builder (new CfnAnalysis$CalculatedMeasureFieldProperty$Builder) id config))


(defn build-cfn-analysis-cascading-control-configuration-property-builder
  "The build-cfn-analysis-cascading-control-configuration-property-builder function updates a CfnAnalysis$CascadingControlConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CascadingControlConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sourceControls` | java.util.List | [[cdk.support/lookup-entry]] | `:source-controls` |
"
  [^CfnAnalysis$CascadingControlConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :source-controls)]
    (. builder sourceControls data))
  (.build builder))


(defn cfn-analysis-cascading-control-configuration-property-builder
  "Creates a  `CfnAnalysis$CascadingControlConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-cascading-control-configuration-property-builder (new CfnAnalysis$CascadingControlConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-cascading-control-source-property-builder
  "The build-cfn-analysis-cascading-control-source-property-builder function updates a CfnAnalysis$CascadingControlSourceProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CascadingControlSourceProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnToMatch` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-to-match` |
| `sourceSheetControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-sheet-control-id` |
"
  [^CfnAnalysis$CascadingControlSourceProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-to-match)]
    (. builder columnToMatch data))
  (when-let [data (lookup-entry config id :source-sheet-control-id)]
    (. builder sourceSheetControlId data))
  (.build builder))


(defn cfn-analysis-cascading-control-source-property-builder
  "Creates a  `CfnAnalysis$CascadingControlSourceProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-cascading-control-source-property-builder (new CfnAnalysis$CascadingControlSourceProperty$Builder) id config))


(defn build-cfn-analysis-categorical-dimension-field-property-builder
  "The build-cfn-analysis-categorical-dimension-field-property-builder function updates a CfnAnalysis$CategoricalDimensionFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CategoricalDimensionFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$StringFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnAnalysis$CategoricalDimensionFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-analysis-categorical-dimension-field-property-builder
  "Creates a  `CfnAnalysis$CategoricalDimensionFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-categorical-dimension-field-property-builder (new CfnAnalysis$CategoricalDimensionFieldProperty$Builder) id config))


(defn build-cfn-analysis-categorical-measure-field-property-builder
  "The build-cfn-analysis-categorical-measure-field-property-builder function updates a CfnAnalysis$CategoricalMeasureFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CategoricalMeasureFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
"
  [^CfnAnalysis$CategoricalMeasureFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (.build builder))


(defn cfn-analysis-categorical-measure-field-property-builder
  "Creates a  `CfnAnalysis$CategoricalMeasureFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-categorical-measure-field-property-builder (new CfnAnalysis$CategoricalMeasureFieldProperty$Builder) id config))


(defn build-cfn-analysis-category-drill-down-filter-property-builder
  "The build-cfn-analysis-category-drill-down-filter-property-builder function updates a CfnAnalysis$CategoryDrillDownFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CategoryDrillDownFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
"
  [^CfnAnalysis$CategoryDrillDownFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-values)]
    (. builder categoryValues data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (.build builder))


(defn cfn-analysis-category-drill-down-filter-property-builder
  "Creates a  `CfnAnalysis$CategoryDrillDownFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-category-drill-down-filter-property-builder (new CfnAnalysis$CategoryDrillDownFilterProperty$Builder) id config))


(defn build-cfn-analysis-category-filter-configuration-property-builder
  "The build-cfn-analysis-category-filter-configuration-property-builder function updates a CfnAnalysis$CategoryFilterConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CategoryFilterConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customFilterConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CustomFilterConfigurationProperty | [[cdk.support/lookup-entry]] | `:custom-filter-configuration` |
| `customFilterListConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CustomFilterListConfigurationProperty | [[cdk.support/lookup-entry]] | `:custom-filter-list-configuration` |
| `filterListConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-list-configuration` |
"
  [^CfnAnalysis$CategoryFilterConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-filter-configuration)]
    (. builder customFilterConfiguration data))
  (when-let [data (lookup-entry config id :custom-filter-list-configuration)]
    (. builder customFilterListConfiguration data))
  (when-let [data (lookup-entry config id :filter-list-configuration)]
    (. builder filterListConfiguration data))
  (.build builder))


(defn cfn-analysis-category-filter-configuration-property-builder
  "Creates a  `CfnAnalysis$CategoryFilterConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-category-filter-configuration-property-builder (new CfnAnalysis$CategoryFilterConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-category-filter-property-builder
  "The build-cfn-analysis-category-filter-property-builder function updates a CfnAnalysis$CategoryFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CategoryFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `configuration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:configuration` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
"
  [^CfnAnalysis$CategoryFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :configuration)]
    (. builder configuration data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (.build builder))


(defn cfn-analysis-category-filter-property-builder
  "Creates a  `CfnAnalysis$CategoryFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-category-filter-property-builder (new CfnAnalysis$CategoryFilterProperty$Builder) id config))


(defn build-cfn-analysis-chart-axis-label-options-property-builder
  "The build-cfn-analysis-chart-axis-label-options-property-builder function updates a CfnAnalysis$ChartAxisLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ChartAxisLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:axis-label-options` |
| `sortIconVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-icon-visibility` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$ChartAxisLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-label-options)]
    (. builder axisLabelOptions data))
  (when-let [data (lookup-entry config id :sort-icon-visibility)]
    (. builder sortIconVisibility data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-chart-axis-label-options-property-builder
  "Creates a  `CfnAnalysis$ChartAxisLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-chart-axis-label-options-property-builder (new CfnAnalysis$ChartAxisLabelOptionsProperty$Builder) id config))


(defn build-cfn-analysis-cluster-marker-configuration-property-builder
  "The build-cfn-analysis-cluster-marker-configuration-property-builder function updates a CfnAnalysis$ClusterMarkerConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ClusterMarkerConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `clusterMarker` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cluster-marker` |
"
  [^CfnAnalysis$ClusterMarkerConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cluster-marker)]
    (. builder clusterMarker data))
  (.build builder))


(defn cfn-analysis-cluster-marker-configuration-property-builder
  "Creates a  `CfnAnalysis$ClusterMarkerConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-cluster-marker-configuration-property-builder (new CfnAnalysis$ClusterMarkerConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-cluster-marker-property-builder
  "The build-cfn-analysis-cluster-marker-property-builder function updates a CfnAnalysis$ClusterMarkerProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ClusterMarkerProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleClusterMarker` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:simple-cluster-marker` |
"
  [^CfnAnalysis$ClusterMarkerProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :simple-cluster-marker)]
    (. builder simpleClusterMarker data))
  (.build builder))


(defn cfn-analysis-cluster-marker-property-builder
  "Creates a  `CfnAnalysis$ClusterMarkerProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-cluster-marker-property-builder (new CfnAnalysis$ClusterMarkerProperty$Builder) id config))


(defn build-cfn-analysis-color-scale-property-builder
  "The build-cfn-analysis-color-scale-property-builder function updates a CfnAnalysis$ColorScaleProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ColorScaleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorFillType` | java.lang.String | [[cdk.support/lookup-entry]] | `:color-fill-type` |
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
| `nullValueColor` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataColorProperty | [[cdk.support/lookup-entry]] | `:null-value-color` |
"
  [^CfnAnalysis$ColorScaleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color-fill-type)]
    (. builder colorFillType data))
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :null-value-color)]
    (. builder nullValueColor data))
  (.build builder))


(defn cfn-analysis-color-scale-property-builder
  "Creates a  `CfnAnalysis$ColorScaleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-color-scale-property-builder (new CfnAnalysis$ColorScaleProperty$Builder) id config))


(defn build-cfn-analysis-colors-configuration-property-builder
  "The build-cfn-analysis-colors-configuration-property-builder function updates a CfnAnalysis$ColorsConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ColorsConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customColors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-colors` |
"
  [^CfnAnalysis$ColorsConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-colors)]
    (. builder customColors data))
  (.build builder))


(defn cfn-analysis-colors-configuration-property-builder
  "Creates a  `CfnAnalysis$ColorsConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-colors-configuration-property-builder (new CfnAnalysis$ColorsConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-column-configuration-property-builder
  "The build-cfn-analysis-column-configuration-property-builder function updates a CfnAnalysis$ColumnConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ColumnConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorsConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColorsConfigurationProperty | [[cdk.support/lookup-entry]] | `:colors-configuration` |
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `role` | java.lang.String | [[cdk.support/lookup-entry]] | `:role` |
"
  [^CfnAnalysis$ColumnConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :colors-configuration)]
    (. builder colorsConfiguration data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (when-let [data (lookup-entry config id :role)]
    (. builder role data))
  (.build builder))


(defn cfn-analysis-column-configuration-property-builder
  "Creates a  `CfnAnalysis$ColumnConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-column-configuration-property-builder (new CfnAnalysis$ColumnConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-column-hierarchy-property-builder
  "The build-cfn-analysis-column-hierarchy-property-builder function updates a CfnAnalysis$ColumnHierarchyProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ColumnHierarchyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeHierarchy` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DateTimeHierarchyProperty | [[cdk.support/lookup-entry]] | `:date-time-hierarchy` |
| `explicitHierarchy` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ExplicitHierarchyProperty | [[cdk.support/lookup-entry]] | `:explicit-hierarchy` |
| `predefinedHierarchy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:predefined-hierarchy` |
"
  [^CfnAnalysis$ColumnHierarchyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-hierarchy)]
    (. builder dateTimeHierarchy data))
  (when-let [data (lookup-entry config id :explicit-hierarchy)]
    (. builder explicitHierarchy data))
  (when-let [data (lookup-entry config id :predefined-hierarchy)]
    (. builder predefinedHierarchy data))
  (.build builder))


(defn cfn-analysis-column-hierarchy-property-builder
  "Creates a  `CfnAnalysis$ColumnHierarchyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-column-hierarchy-property-builder (new CfnAnalysis$ColumnHierarchyProperty$Builder) id config))


(defn build-cfn-analysis-column-identifier-property-builder
  "The build-cfn-analysis-column-identifier-property-builder function updates a CfnAnalysis$ColumnIdentifierProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ColumnIdentifierProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
"
  [^CfnAnalysis$ColumnIdentifierProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-name)]
    (. builder columnName data))
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (.build builder))


(defn cfn-analysis-column-identifier-property-builder
  "Creates a  `CfnAnalysis$ColumnIdentifierProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-column-identifier-property-builder (new CfnAnalysis$ColumnIdentifierProperty$Builder) id config))


(defn build-cfn-analysis-column-sort-property-builder
  "The build-cfn-analysis-column-sort-property-builder function updates a CfnAnalysis$ColumnSortProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ColumnSortProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `sortBy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-by` |
"
  [^CfnAnalysis$ColumnSortProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :direction)]
    (. builder direction data))
  (when-let [data (lookup-entry config id :sort-by)]
    (. builder sortBy data))
  (.build builder))


(defn cfn-analysis-column-sort-property-builder
  "Creates a  `CfnAnalysis$ColumnSortProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-column-sort-property-builder (new CfnAnalysis$ColumnSortProperty$Builder) id config))


(defn build-cfn-analysis-column-tooltip-item-property-builder
  "The build-cfn-analysis-column-tooltip-item-property-builder function updates a CfnAnalysis$ColumnTooltipItemProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ColumnTooltipItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregation` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `label` | java.lang.String | [[cdk.support/lookup-entry]] | `:label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$ColumnTooltipItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation)]
    (. builder aggregation data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :label)]
    (. builder label data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-column-tooltip-item-property-builder
  "Creates a  `CfnAnalysis$ColumnTooltipItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-column-tooltip-item-property-builder (new CfnAnalysis$ColumnTooltipItemProperty$Builder) id config))


(defn build-cfn-analysis-combo-chart-aggregated-field-wells-property-builder
  "The build-cfn-analysis-combo-chart-aggregated-field-wells-property-builder function updates a CfnAnalysis$ComboChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ComboChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bar-values` |
| `category` | java.util.List | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `lineValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-values` |
"
  [^CfnAnalysis$ComboChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bar-values)]
    (. builder barValues data))
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :line-values)]
    (. builder lineValues data))
  (.build builder))


(defn cfn-analysis-combo-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$ComboChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-combo-chart-aggregated-field-wells-property-builder (new CfnAnalysis$ComboChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-combo-chart-configuration-property-builder
  "The build-cfn-analysis-combo-chart-configuration-property-builder function updates a CfnAnalysis$ComboChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ComboChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barDataLabels` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:bar-data-labels` |
| `barsArrangement` | java.lang.String | [[cdk.support/lookup-entry]] | `:bars-arrangement` |
| `categoryAxis` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `lineDataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-data-labels` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | java.util.List | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `secondaryYAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:secondary-y-axis-display-options` |
| `secondaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:secondary-y-axis-label-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ComboChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnAnalysis$ComboChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bar-data-labels)]
    (. builder barDataLabels data))
  (when-let [data (lookup-entry config id :bars-arrangement)]
    (. builder barsArrangement data))
  (when-let [data (lookup-entry config id :category-axis)]
    (. builder categoryAxis data))
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :color-label-options)]
    (. builder colorLabelOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :line-data-labels)]
    (. builder lineDataLabels data))
  (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
    (. builder primaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
    (. builder primaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :reference-lines)]
    (. builder referenceLines data))
  (when-let [data (lookup-entry config id :secondary-y-axis-display-options)]
    (. builder secondaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :secondary-y-axis-label-options)]
    (. builder secondaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-analysis-combo-chart-configuration-property-builder
  "Creates a  `CfnAnalysis$ComboChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-combo-chart-configuration-property-builder (new CfnAnalysis$ComboChartConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-combo-chart-field-wells-property-builder
  "The build-cfn-analysis-combo-chart-field-wells-property-builder function updates a CfnAnalysis$ComboChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ComboChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comboChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:combo-chart-aggregated-field-wells` |
"
  [^CfnAnalysis$ComboChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :combo-chart-aggregated-field-wells)]
    (. builder comboChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-combo-chart-field-wells-property-builder
  "Creates a  `CfnAnalysis$ComboChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-combo-chart-field-wells-property-builder (new CfnAnalysis$ComboChartFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-combo-chart-sort-configuration-property-builder
  "The build-cfn-analysis-combo-chart-sort-configuration-property-builder function updates a CfnAnalysis$ComboChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ComboChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | java.util.List | [[cdk.support/lookup-entry]] | `:color-sort` |
"
  [^CfnAnalysis$ComboChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :color-items-limit)]
    (. builder colorItemsLimit data))
  (when-let [data (lookup-entry config id :color-sort)]
    (. builder colorSort data))
  (.build builder))


(defn cfn-analysis-combo-chart-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$ComboChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-combo-chart-sort-configuration-property-builder (new CfnAnalysis$ComboChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-combo-chart-visual-property-builder
  "The build-cfn-analysis-combo-chart-visual-property-builder function updates a CfnAnalysis$ComboChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ComboChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ComboChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$ComboChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-combo-chart-visual-property-builder
  "Creates a  `CfnAnalysis$ComboChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-combo-chart-visual-property-builder (new CfnAnalysis$ComboChartVisualProperty$Builder) id config))


(defn build-cfn-analysis-comparison-configuration-property-builder
  "The build-cfn-analysis-comparison-configuration-property-builder function updates a CfnAnalysis$ComparisonConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ComparisonConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comparisonFormat` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:comparison-format` |
| `comparisonMethod` | java.lang.String | [[cdk.support/lookup-entry]] | `:comparison-method` |
"
  [^CfnAnalysis$ComparisonConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :comparison-format)]
    (. builder comparisonFormat data))
  (when-let [data (lookup-entry config id :comparison-method)]
    (. builder comparisonMethod data))
  (.build builder))


(defn cfn-analysis-comparison-configuration-property-builder
  "Creates a  `CfnAnalysis$ComparisonConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-comparison-configuration-property-builder (new CfnAnalysis$ComparisonConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-comparison-format-configuration-property-builder
  "The build-cfn-analysis-comparison-format-configuration-property-builder function updates a CfnAnalysis$ComparisonFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ComparisonFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `numberDisplayFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:number-display-format-configuration` |
| `percentageDisplayFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PercentageDisplayFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:percentage-display-format-configuration` |
"
  [^CfnAnalysis$ComparisonFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :number-display-format-configuration)]
    (. builder numberDisplayFormatConfiguration data))
  (when-let [data (lookup-entry config id :percentage-display-format-configuration)]
    (. builder percentageDisplayFormatConfiguration data))
  (.build builder))


(defn cfn-analysis-comparison-format-configuration-property-builder
  "Creates a  `CfnAnalysis$ComparisonFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-comparison-format-configuration-property-builder (new CfnAnalysis$ComparisonFormatConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-computation-property-builder
  "The build-cfn-analysis-computation-property-builder function updates a CfnAnalysis$ComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `forecast` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:forecast` |
| `growthRate` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GrowthRateComputationProperty | [[cdk.support/lookup-entry]] | `:growth-rate` |
| `maximumMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:maximum-minimum` |
| `metricComparison` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MetricComparisonComputationProperty | [[cdk.support/lookup-entry]] | `:metric-comparison` |
| `periodOverPeriod` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:period-over-period` |
| `periodToDate` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PeriodToDateComputationProperty | [[cdk.support/lookup-entry]] | `:period-to-date` |
| `topBottomMovers` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TopBottomMoversComputationProperty | [[cdk.support/lookup-entry]] | `:top-bottom-movers` |
| `topBottomRanked` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TopBottomRankedComputationProperty | [[cdk.support/lookup-entry]] | `:top-bottom-ranked` |
| `totalAggregation` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TotalAggregationComputationProperty | [[cdk.support/lookup-entry]] | `:total-aggregation` |
| `uniqueValues` | software.amazon.awscdk.services.quicksight.CfnAnalysis$UniqueValuesComputationProperty | [[cdk.support/lookup-entry]] | `:unique-values` |
"
  [^CfnAnalysis$ComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :forecast)]
    (. builder forecast data))
  (when-let [data (lookup-entry config id :growth-rate)]
    (. builder growthRate data))
  (when-let [data (lookup-entry config id :maximum-minimum)]
    (. builder maximumMinimum data))
  (when-let [data (lookup-entry config id :metric-comparison)]
    (. builder metricComparison data))
  (when-let [data (lookup-entry config id :period-over-period)]
    (. builder periodOverPeriod data))
  (when-let [data (lookup-entry config id :period-to-date)]
    (. builder periodToDate data))
  (when-let [data (lookup-entry config id :top-bottom-movers)]
    (. builder topBottomMovers data))
  (when-let [data (lookup-entry config id :top-bottom-ranked)]
    (. builder topBottomRanked data))
  (when-let [data (lookup-entry config id :total-aggregation)]
    (. builder totalAggregation data))
  (when-let [data (lookup-entry config id :unique-values)]
    (. builder uniqueValues data))
  (.build builder))


(defn cfn-analysis-computation-property-builder
  "Creates a  `CfnAnalysis$ComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-computation-property-builder (new CfnAnalysis$ComputationProperty$Builder) id config))


(defn build-cfn-analysis-conditional-formatting-color-property-builder
  "The build-cfn-analysis-conditional-formatting-color-property-builder function updates a CfnAnalysis$ConditionalFormattingColorProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ConditionalFormattingColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `gradient` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:gradient` |
| `solid` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingSolidColorProperty | [[cdk.support/lookup-entry]] | `:solid` |
"
  [^CfnAnalysis$ConditionalFormattingColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :gradient)]
    (. builder gradient data))
  (when-let [data (lookup-entry config id :solid)]
    (. builder solid data))
  (.build builder))


(defn cfn-analysis-conditional-formatting-color-property-builder
  "Creates a  `CfnAnalysis$ConditionalFormattingColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-conditional-formatting-color-property-builder (new CfnAnalysis$ConditionalFormattingColorProperty$Builder) id config))


(defn build-cfn-analysis-conditional-formatting-custom-icon-condition-property-builder
  "The build-cfn-analysis-conditional-formatting-custom-icon-condition-property-builder function updates a CfnAnalysis$ConditionalFormattingCustomIconConditionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ConditionalFormattingCustomIconConditionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `displayConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-configuration` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `iconOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingCustomIconOptionsProperty | [[cdk.support/lookup-entry]] | `:icon-options` |
"
  [^CfnAnalysis$ConditionalFormattingCustomIconConditionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :display-configuration)]
    (. builder displayConfiguration data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (when-let [data (lookup-entry config id :icon-options)]
    (. builder iconOptions data))
  (.build builder))


(defn cfn-analysis-conditional-formatting-custom-icon-condition-property-builder
  "Creates a  `CfnAnalysis$ConditionalFormattingCustomIconConditionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-conditional-formatting-custom-icon-condition-property-builder (new CfnAnalysis$ConditionalFormattingCustomIconConditionProperty$Builder) id config))


(defn build-cfn-analysis-conditional-formatting-custom-icon-options-property-builder
  "The build-cfn-analysis-conditional-formatting-custom-icon-options-property-builder function updates a CfnAnalysis$ConditionalFormattingCustomIconOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ConditionalFormattingCustomIconOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon` |
| `unicodeIcon` | java.lang.String | [[cdk.support/lookup-entry]] | `:unicode-icon` |
"
  [^CfnAnalysis$ConditionalFormattingCustomIconOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :unicode-icon)]
    (. builder unicodeIcon data))
  (.build builder))


(defn cfn-analysis-conditional-formatting-custom-icon-options-property-builder
  "Creates a  `CfnAnalysis$ConditionalFormattingCustomIconOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-conditional-formatting-custom-icon-options-property-builder (new CfnAnalysis$ConditionalFormattingCustomIconOptionsProperty$Builder) id config))


(defn build-cfn-analysis-conditional-formatting-gradient-color-property-builder
  "The build-cfn-analysis-conditional-formatting-gradient-color-property-builder function updates a CfnAnalysis$ConditionalFormattingGradientColorProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ConditionalFormattingGradientColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
"
  [^CfnAnalysis$ConditionalFormattingGradientColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (.build builder))


(defn cfn-analysis-conditional-formatting-gradient-color-property-builder
  "Creates a  `CfnAnalysis$ConditionalFormattingGradientColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-conditional-formatting-gradient-color-property-builder (new CfnAnalysis$ConditionalFormattingGradientColorProperty$Builder) id config))


(defn build-cfn-analysis-conditional-formatting-icon-display-configuration-property-builder
  "The build-cfn-analysis-conditional-formatting-icon-display-configuration-property-builder function updates a CfnAnalysis$ConditionalFormattingIconDisplayConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ConditionalFormattingIconDisplayConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `iconDisplayOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon-display-option` |
"
  [^CfnAnalysis$ConditionalFormattingIconDisplayConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon-display-option)]
    (. builder iconDisplayOption data))
  (.build builder))


(defn cfn-analysis-conditional-formatting-icon-display-configuration-property-builder
  "Creates a  `CfnAnalysis$ConditionalFormattingIconDisplayConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-conditional-formatting-icon-display-configuration-property-builder (new CfnAnalysis$ConditionalFormattingIconDisplayConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-conditional-formatting-icon-property-builder
  "The build-cfn-analysis-conditional-formatting-icon-property-builder function updates a CfnAnalysis$ConditionalFormattingIconProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ConditionalFormattingIconProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customCondition` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingCustomIconConditionProperty | [[cdk.support/lookup-entry]] | `:custom-condition` |
| `iconSet` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon-set` |
"
  [^CfnAnalysis$ConditionalFormattingIconProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-condition)]
    (. builder customCondition data))
  (when-let [data (lookup-entry config id :icon-set)]
    (. builder iconSet data))
  (.build builder))


(defn cfn-analysis-conditional-formatting-icon-property-builder
  "Creates a  `CfnAnalysis$ConditionalFormattingIconProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-conditional-formatting-icon-property-builder (new CfnAnalysis$ConditionalFormattingIconProperty$Builder) id config))


(defn build-cfn-analysis-conditional-formatting-icon-set-property-builder
  "The build-cfn-analysis-conditional-formatting-icon-set-property-builder function updates a CfnAnalysis$ConditionalFormattingIconSetProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ConditionalFormattingIconSetProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `iconSetType` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon-set-type` |
"
  [^CfnAnalysis$ConditionalFormattingIconSetProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (when-let [data (lookup-entry config id :icon-set-type)]
    (. builder iconSetType data))
  (.build builder))


(defn cfn-analysis-conditional-formatting-icon-set-property-builder
  "Creates a  `CfnAnalysis$ConditionalFormattingIconSetProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-conditional-formatting-icon-set-property-builder (new CfnAnalysis$ConditionalFormattingIconSetProperty$Builder) id config))


(defn build-cfn-analysis-conditional-formatting-solid-color-property-builder
  "The build-cfn-analysis-conditional-formatting-solid-color-property-builder function updates a CfnAnalysis$ConditionalFormattingSolidColorProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ConditionalFormattingSolidColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
"
  [^CfnAnalysis$ConditionalFormattingSolidColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (.build builder))


(defn cfn-analysis-conditional-formatting-solid-color-property-builder
  "Creates a  `CfnAnalysis$ConditionalFormattingSolidColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-conditional-formatting-solid-color-property-builder (new CfnAnalysis$ConditionalFormattingSolidColorProperty$Builder) id config))


(defn build-cfn-analysis-contribution-analysis-default-property-builder
  "The build-cfn-analysis-contribution-analysis-default-property-builder function updates a CfnAnalysis$ContributionAnalysisDefaultProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ContributionAnalysisDefaultProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contributorDimensions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:contributor-dimensions` |
| `measureFieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-field-id` |
"
  [^CfnAnalysis$ContributionAnalysisDefaultProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :contributor-dimensions)]
    (. builder contributorDimensions data))
  (when-let [data (lookup-entry config id :measure-field-id)]
    (. builder measureFieldId data))
  (.build builder))


(defn cfn-analysis-contribution-analysis-default-property-builder
  "Creates a  `CfnAnalysis$ContributionAnalysisDefaultProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-contribution-analysis-default-property-builder (new CfnAnalysis$ContributionAnalysisDefaultProperty$Builder) id config))


(defn build-cfn-analysis-currency-display-format-configuration-property-builder
  "The build-cfn-analysis-currency-display-format-configuration-property-builder function updates a CfnAnalysis$CurrencyDisplayFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CurrencyDisplayFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NegativeValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numberScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:number-scale` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |
| `symbol` | java.lang.String | [[cdk.support/lookup-entry]] | `:symbol` |
"
  [^CfnAnalysis$CurrencyDisplayFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :decimal-places-configuration)]
    (. builder decimalPlacesConfiguration data))
  (when-let [data (lookup-entry config id :negative-value-configuration)]
    (. builder negativeValueConfiguration data))
  (when-let [data (lookup-entry config id :null-value-format-configuration)]
    (. builder nullValueFormatConfiguration data))
  (when-let [data (lookup-entry config id :number-scale)]
    (. builder numberScale data))
  (when-let [data (lookup-entry config id :prefix)]
    (. builder prefix data))
  (when-let [data (lookup-entry config id :separator-configuration)]
    (. builder separatorConfiguration data))
  (when-let [data (lookup-entry config id :suffix)]
    (. builder suffix data))
  (when-let [data (lookup-entry config id :symbol)]
    (. builder symbol data))
  (.build builder))


(defn cfn-analysis-currency-display-format-configuration-property-builder
  "Creates a  `CfnAnalysis$CurrencyDisplayFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-currency-display-format-configuration-property-builder (new CfnAnalysis$CurrencyDisplayFormatConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-custom-action-filter-operation-property-builder
  "The build-cfn-analysis-custom-action-filter-operation-property-builder function updates a CfnAnalysis$CustomActionFilterOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CustomActionFilterOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `selectedFieldsConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-fields-configuration` |
| `targetVisualsConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilterOperationTargetVisualsConfigurationProperty | [[cdk.support/lookup-entry]] | `:target-visuals-configuration` |
"
  [^CfnAnalysis$CustomActionFilterOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :selected-fields-configuration)]
    (. builder selectedFieldsConfiguration data))
  (when-let [data (lookup-entry config id :target-visuals-configuration)]
    (. builder targetVisualsConfiguration data))
  (.build builder))


(defn cfn-analysis-custom-action-filter-operation-property-builder
  "Creates a  `CfnAnalysis$CustomActionFilterOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-custom-action-filter-operation-property-builder (new CfnAnalysis$CustomActionFilterOperationProperty$Builder) id config))


(defn build-cfn-analysis-custom-action-navigation-operation-property-builder
  "The build-cfn-analysis-custom-action-navigation-operation-property-builder function updates a CfnAnalysis$CustomActionNavigationOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CustomActionNavigationOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `localNavigationConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:local-navigation-configuration` |
"
  [^CfnAnalysis$CustomActionNavigationOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :local-navigation-configuration)]
    (. builder localNavigationConfiguration data))
  (.build builder))


(defn cfn-analysis-custom-action-navigation-operation-property-builder
  "Creates a  `CfnAnalysis$CustomActionNavigationOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-custom-action-navigation-operation-property-builder (new CfnAnalysis$CustomActionNavigationOperationProperty$Builder) id config))


(defn build-cfn-analysis-custom-action-set-parameters-operation-property-builder
  "The build-cfn-analysis-custom-action-set-parameters-operation-property-builder function updates a CfnAnalysis$CustomActionSetParametersOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CustomActionSetParametersOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameterValueConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:parameter-value-configurations` |
"
  [^CfnAnalysis$CustomActionSetParametersOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :parameter-value-configurations)]
    (. builder parameterValueConfigurations data))
  (.build builder))


(defn cfn-analysis-custom-action-set-parameters-operation-property-builder
  "Creates a  `CfnAnalysis$CustomActionSetParametersOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-custom-action-set-parameters-operation-property-builder (new CfnAnalysis$CustomActionSetParametersOperationProperty$Builder) id config))


(defn build-cfn-analysis-custom-action-url-operation-property-builder
  "The build-cfn-analysis-custom-action-url-operation-property-builder function updates a CfnAnalysis$CustomActionURLOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CustomActionURLOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `urlTarget` | java.lang.String | [[cdk.support/lookup-entry]] | `:url-target` |
| `urlTemplate` | java.lang.String | [[cdk.support/lookup-entry]] | `:url-template` |
"
  [^CfnAnalysis$CustomActionURLOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :url-target)]
    (. builder urlTarget data))
  (when-let [data (lookup-entry config id :url-template)]
    (. builder urlTemplate data))
  (.build builder))


(defn cfn-analysis-custom-action-url-operation-property-builder
  "Creates a  `CfnAnalysis$CustomActionURLOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-custom-action-url-operation-property-builder (new CfnAnalysis$CustomActionURLOperationProperty$Builder) id config))


(defn build-cfn-analysis-custom-color-property-builder
  "The build-cfn-analysis-custom-color-property-builder function updates a CfnAnalysis$CustomColorProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CustomColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `specialValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:special-value` |
"
  [^CfnAnalysis$CustomColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :field-value)]
    (. builder fieldValue data))
  (when-let [data (lookup-entry config id :special-value)]
    (. builder specialValue data))
  (.build builder))


(defn cfn-analysis-custom-color-property-builder
  "Creates a  `CfnAnalysis$CustomColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-custom-color-property-builder (new CfnAnalysis$CustomColorProperty$Builder) id config))


(defn build-cfn-analysis-custom-content-configuration-property-builder
  "The build-cfn-analysis-custom-content-configuration-property-builder function updates a CfnAnalysis$CustomContentConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CustomContentConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-type` |
| `contentUrl` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-url` |
| `imageScaling` | java.lang.String | [[cdk.support/lookup-entry]] | `:image-scaling` |
"
  [^CfnAnalysis$CustomContentConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :content-type)]
    (. builder contentType data))
  (when-let [data (lookup-entry config id :content-url)]
    (. builder contentUrl data))
  (when-let [data (lookup-entry config id :image-scaling)]
    (. builder imageScaling data))
  (.build builder))


(defn cfn-analysis-custom-content-configuration-property-builder
  "Creates a  `CfnAnalysis$CustomContentConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-custom-content-configuration-property-builder (new CfnAnalysis$CustomContentConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-custom-content-visual-property-builder
  "The build-cfn-analysis-custom-content-visual-property-builder function updates a CfnAnalysis$CustomContentVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CustomContentVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CustomContentConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$CustomContentVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-custom-content-visual-property-builder
  "Creates a  `CfnAnalysis$CustomContentVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-custom-content-visual-property-builder (new CfnAnalysis$CustomContentVisualProperty$Builder) id config))


(defn build-cfn-analysis-custom-filter-configuration-property-builder
  "The build-cfn-analysis-custom-filter-configuration-property-builder function updates a CfnAnalysis$CustomFilterConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CustomFilterConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-value` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
"
  [^CfnAnalysis$CustomFilterConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-value)]
    (. builder categoryValue data))
  (when-let [data (lookup-entry config id :match-operator)]
    (. builder matchOperator data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (.build builder))


(defn cfn-analysis-custom-filter-configuration-property-builder
  "Creates a  `CfnAnalysis$CustomFilterConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-custom-filter-configuration-property-builder (new CfnAnalysis$CustomFilterConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-custom-filter-list-configuration-property-builder
  "The build-cfn-analysis-custom-filter-list-configuration-property-builder function updates a CfnAnalysis$CustomFilterListConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CustomFilterListConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
"
  [^CfnAnalysis$CustomFilterListConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-values)]
    (. builder categoryValues data))
  (when-let [data (lookup-entry config id :match-operator)]
    (. builder matchOperator data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (.build builder))


(defn cfn-analysis-custom-filter-list-configuration-property-builder
  "Creates a  `CfnAnalysis$CustomFilterListConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-custom-filter-list-configuration-property-builder (new CfnAnalysis$CustomFilterListConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-custom-narrative-options-property-builder
  "The build-cfn-analysis-custom-narrative-options-property-builder function updates a CfnAnalysis$CustomNarrativeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CustomNarrativeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `narrative` | java.lang.String | [[cdk.support/lookup-entry]] | `:narrative` |
"
  [^CfnAnalysis$CustomNarrativeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :narrative)]
    (. builder narrative data))
  (.build builder))


(defn cfn-analysis-custom-narrative-options-property-builder
  "Creates a  `CfnAnalysis$CustomNarrativeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-custom-narrative-options-property-builder (new CfnAnalysis$CustomNarrativeOptionsProperty$Builder) id config))


(defn build-cfn-analysis-custom-parameter-values-property-builder
  "The build-cfn-analysis-custom-parameter-values-property-builder function updates a CfnAnalysis$CustomParameterValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CustomParameterValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeValues` | java.util.List | [[cdk.support/lookup-entry]] | `:date-time-values` |
| `decimalValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-values` |
| `integerValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:integer-values` |
| `stringValues` | java.util.List | [[cdk.support/lookup-entry]] | `:string-values` |
"
  [^CfnAnalysis$CustomParameterValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-values)]
    (. builder dateTimeValues data))
  (when-let [data (lookup-entry config id :decimal-values)]
    (. builder decimalValues data))
  (when-let [data (lookup-entry config id :integer-values)]
    (. builder integerValues data))
  (when-let [data (lookup-entry config id :string-values)]
    (. builder stringValues data))
  (.build builder))


(defn cfn-analysis-custom-parameter-values-property-builder
  "Creates a  `CfnAnalysis$CustomParameterValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-custom-parameter-values-property-builder (new CfnAnalysis$CustomParameterValuesProperty$Builder) id config))


(defn build-cfn-analysis-custom-values-configuration-property-builder
  "The build-cfn-analysis-custom-values-configuration-property-builder function updates a CfnAnalysis$CustomValuesConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$CustomValuesConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValues` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CustomParameterValuesProperty | [[cdk.support/lookup-entry]] | `:custom-values` |
| `includeNullValue` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:include-null-value` |
"
  [^CfnAnalysis$CustomValuesConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-values)]
    (. builder customValues data))
  (when-let [data (lookup-entry config id :include-null-value)]
    (. builder includeNullValue data))
  (.build builder))


(defn cfn-analysis-custom-values-configuration-property-builder
  "Creates a  `CfnAnalysis$CustomValuesConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-custom-values-configuration-property-builder (new CfnAnalysis$CustomValuesConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-data-bars-options-property-builder
  "The build-cfn-analysis-data-bars-options-property-builder function updates a CfnAnalysis$DataBarsOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DataBarsOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `negativeColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:negative-color` |
| `positiveColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:positive-color` |
"
  [^CfnAnalysis$DataBarsOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :negative-color)]
    (. builder negativeColor data))
  (when-let [data (lookup-entry config id :positive-color)]
    (. builder positiveColor data))
  (.build builder))


(defn cfn-analysis-data-bars-options-property-builder
  "Creates a  `CfnAnalysis$DataBarsOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-data-bars-options-property-builder (new CfnAnalysis$DataBarsOptionsProperty$Builder) id config))


(defn build-cfn-analysis-data-color-property-builder
  "The build-cfn-analysis-data-color-property-builder function updates a CfnAnalysis$DataColorProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DataColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `dataValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:data-value` |
"
  [^CfnAnalysis$DataColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :data-value)]
    (. builder dataValue data))
  (.build builder))


(defn cfn-analysis-data-color-property-builder
  "Creates a  `CfnAnalysis$DataColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-data-color-property-builder (new CfnAnalysis$DataColorProperty$Builder) id config))


(defn build-cfn-analysis-data-field-series-item-property-builder
  "The build-cfn-analysis-data-field-series-item-property-builder function updates a CfnAnalysis$DataFieldSeriesItemProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DataFieldSeriesItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `settings` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LineChartSeriesSettingsProperty | [[cdk.support/lookup-entry]] | `:settings` |
"
  [^CfnAnalysis$DataFieldSeriesItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-binding)]
    (. builder axisBinding data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :field-value)]
    (. builder fieldValue data))
  (when-let [data (lookup-entry config id :settings)]
    (. builder settings data))
  (.build builder))


(defn cfn-analysis-data-field-series-item-property-builder
  "Creates a  `CfnAnalysis$DataFieldSeriesItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-data-field-series-item-property-builder (new CfnAnalysis$DataFieldSeriesItemProperty$Builder) id config))


(defn build-cfn-analysis-data-label-options-property-builder
  "The build-cfn-analysis-data-label-options-property-builder function updates a CfnAnalysis$DataLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DataLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-label-visibility` |
| `dataLabelTypes` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-label-types` |
| `labelColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-color` |
| `labelContent` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-content` |
| `labelFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label-font-configuration` |
| `measureLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-label-visibility` |
| `overlap` | java.lang.String | [[cdk.support/lookup-entry]] | `:overlap` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$DataLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-label-visibility)]
    (. builder categoryLabelVisibility data))
  (when-let [data (lookup-entry config id :data-label-types)]
    (. builder dataLabelTypes data))
  (when-let [data (lookup-entry config id :label-color)]
    (. builder labelColor data))
  (when-let [data (lookup-entry config id :label-content)]
    (. builder labelContent data))
  (when-let [data (lookup-entry config id :label-font-configuration)]
    (. builder labelFontConfiguration data))
  (when-let [data (lookup-entry config id :measure-label-visibility)]
    (. builder measureLabelVisibility data))
  (when-let [data (lookup-entry config id :overlap)]
    (. builder overlap data))
  (when-let [data (lookup-entry config id :position)]
    (. builder position data))
  (when-let [data (lookup-entry config id :totals-visibility)]
    (. builder totalsVisibility data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-data-label-options-property-builder
  "Creates a  `CfnAnalysis$DataLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-data-label-options-property-builder (new CfnAnalysis$DataLabelOptionsProperty$Builder) id config))


(defn build-cfn-analysis-data-label-type-property-builder
  "The build-cfn-analysis-data-label-type-property-builder function updates a CfnAnalysis$DataLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DataLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathLabelType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-path-label-type` |
| `fieldLabelType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-label-type` |
| `maximumLabelType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:maximum-label-type` |
| `minimumLabelType` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MinimumLabelTypeProperty | [[cdk.support/lookup-entry]] | `:minimum-label-type` |
| `rangeEndsLabelType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-ends-label-type` |
"
  [^CfnAnalysis$DataLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-path-label-type)]
    (. builder dataPathLabelType data))
  (when-let [data (lookup-entry config id :field-label-type)]
    (. builder fieldLabelType data))
  (when-let [data (lookup-entry config id :maximum-label-type)]
    (. builder maximumLabelType data))
  (when-let [data (lookup-entry config id :minimum-label-type)]
    (. builder minimumLabelType data))
  (when-let [data (lookup-entry config id :range-ends-label-type)]
    (. builder rangeEndsLabelType data))
  (.build builder))


(defn cfn-analysis-data-label-type-property-builder
  "Creates a  `CfnAnalysis$DataLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-data-label-type-property-builder (new CfnAnalysis$DataLabelTypeProperty$Builder) id config))


(defn build-cfn-analysis-data-path-color-property-builder
  "The build-cfn-analysis-data-path-color-property-builder function updates a CfnAnalysis$DataPathColorProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DataPathColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `element` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:element` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnAnalysis$DataPathColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :element)]
    (. builder element data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-analysis-data-path-color-property-builder
  "Creates a  `CfnAnalysis$DataPathColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-data-path-color-property-builder (new CfnAnalysis$DataPathColorProperty$Builder) id config))


(defn build-cfn-analysis-data-path-label-type-property-builder
  "The build-cfn-analysis-data-path-label-type-property-builder function updates a CfnAnalysis$DataPathLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DataPathLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$DataPathLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :field-value)]
    (. builder fieldValue data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-data-path-label-type-property-builder
  "Creates a  `CfnAnalysis$DataPathLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-data-path-label-type-property-builder (new CfnAnalysis$DataPathLabelTypeProperty$Builder) id config))


(defn build-cfn-analysis-data-path-sort-property-builder
  "The build-cfn-analysis-data-path-sort-property-builder function updates a CfnAnalysis$DataPathSortProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DataPathSortProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `sortPaths` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-paths` |
"
  [^CfnAnalysis$DataPathSortProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :direction)]
    (. builder direction data))
  (when-let [data (lookup-entry config id :sort-paths)]
    (. builder sortPaths data))
  (.build builder))


(defn cfn-analysis-data-path-sort-property-builder
  "Creates a  `CfnAnalysis$DataPathSortProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-data-path-sort-property-builder (new CfnAnalysis$DataPathSortProperty$Builder) id config))


(defn build-cfn-analysis-data-path-type-property-builder
  "The build-cfn-analysis-data-path-type-property-builder function updates a CfnAnalysis$DataPathTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DataPathTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pivotTableDataPathType` | java.lang.String | [[cdk.support/lookup-entry]] | `:pivot-table-data-path-type` |
"
  [^CfnAnalysis$DataPathTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :pivot-table-data-path-type)]
    (. builder pivotTableDataPathType data))
  (.build builder))


(defn cfn-analysis-data-path-type-property-builder
  "Creates a  `CfnAnalysis$DataPathTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-data-path-type-property-builder (new CfnAnalysis$DataPathTypeProperty$Builder) id config))


(defn build-cfn-analysis-data-path-value-property-builder
  "The build-cfn-analysis-data-path-value-property-builder function updates a CfnAnalysis$DataPathValueProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DataPathValueProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-path-type` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
"
  [^CfnAnalysis$DataPathValueProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-path-type)]
    (. builder dataPathType data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :field-value)]
    (. builder fieldValue data))
  (.build builder))


(defn cfn-analysis-data-path-value-property-builder
  "Creates a  `CfnAnalysis$DataPathValueProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-data-path-value-property-builder (new CfnAnalysis$DataPathValueProperty$Builder) id config))


(defn build-cfn-analysis-data-set-identifier-declaration-property-builder
  "The build-cfn-analysis-data-set-identifier-declaration-property-builder function updates a CfnAnalysis$DataSetIdentifierDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DataSetIdentifierDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-arn` |
| `identifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:identifier` |
"
  [^CfnAnalysis$DataSetIdentifierDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-set-arn)]
    (. builder dataSetArn data))
  (when-let [data (lookup-entry config id :identifier)]
    (. builder identifier data))
  (.build builder))


(defn cfn-analysis-data-set-identifier-declaration-property-builder
  "Creates a  `CfnAnalysis$DataSetIdentifierDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-data-set-identifier-declaration-property-builder (new CfnAnalysis$DataSetIdentifierDeclarationProperty$Builder) id config))


(defn build-cfn-analysis-data-set-reference-property-builder
  "The build-cfn-analysis-data-set-reference-property-builder function updates a CfnAnalysis$DataSetReferenceProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DataSetReferenceProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-arn` |
| `dataSetPlaceholder` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-placeholder` |
"
  [^CfnAnalysis$DataSetReferenceProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-set-arn)]
    (. builder dataSetArn data))
  (when-let [data (lookup-entry config id :data-set-placeholder)]
    (. builder dataSetPlaceholder data))
  (.build builder))


(defn cfn-analysis-data-set-reference-property-builder
  "Creates a  `CfnAnalysis$DataSetReferenceProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-data-set-reference-property-builder (new CfnAnalysis$DataSetReferenceProperty$Builder) id config))


(defn build-cfn-analysis-date-axis-options-property-builder
  "The build-cfn-analysis-date-axis-options-property-builder function updates a CfnAnalysis$DateAxisOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DateAxisOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `missingDateVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:missing-date-visibility` |
"
  [^CfnAnalysis$DateAxisOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :missing-date-visibility)]
    (. builder missingDateVisibility data))
  (.build builder))


(defn cfn-analysis-date-axis-options-property-builder
  "Creates a  `CfnAnalysis$DateAxisOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-date-axis-options-property-builder (new CfnAnalysis$DateAxisOptionsProperty$Builder) id config))


(defn build-cfn-analysis-date-dimension-field-property-builder
  "The build-cfn-analysis-date-dimension-field-property-builder function updates a CfnAnalysis$DateDimensionFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DateDimensionFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `dateGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-granularity` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnAnalysis$DateDimensionFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :date-granularity)]
    (. builder dateGranularity data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-analysis-date-dimension-field-property-builder
  "Creates a  `CfnAnalysis$DateDimensionFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-date-dimension-field-property-builder (new CfnAnalysis$DateDimensionFieldProperty$Builder) id config))


(defn build-cfn-analysis-date-measure-field-property-builder
  "The build-cfn-analysis-date-measure-field-property-builder function updates a CfnAnalysis$DateMeasureFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DateMeasureFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DateTimeFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
"
  [^CfnAnalysis$DateMeasureFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (.build builder))


(defn cfn-analysis-date-measure-field-property-builder
  "Creates a  `CfnAnalysis$DateMeasureFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-date-measure-field-property-builder (new CfnAnalysis$DateMeasureFieldProperty$Builder) id config))


(defn build-cfn-analysis-date-time-default-values-property-builder
  "The build-cfn-analysis-date-time-default-values-property-builder function updates a CfnAnalysis$DateTimeDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DateTimeDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DynamicDefaultValueProperty | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `rollingDate` | software.amazon.awscdk.services.quicksight.CfnAnalysis$RollingDateConfigurationProperty | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |
"
  [^CfnAnalysis$DateTimeDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :dynamic-value)]
    (. builder dynamicValue data))
  (when-let [data (lookup-entry config id :rolling-date)]
    (. builder rollingDate data))
  (when-let [data (lookup-entry config id :static-values)]
    (. builder staticValues data))
  (.build builder))


(defn cfn-analysis-date-time-default-values-property-builder
  "Creates a  `CfnAnalysis$DateTimeDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-date-time-default-values-property-builder (new CfnAnalysis$DateTimeDefaultValuesProperty$Builder) id config))


(defn build-cfn-analysis-date-time-format-configuration-property-builder
  "The build-cfn-analysis-date-time-format-configuration-property-builder function updates a CfnAnalysis$DateTimeFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DateTimeFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numericFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumericFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:numeric-format-configuration` |
"
  [^CfnAnalysis$DateTimeFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-format)]
    (. builder dateTimeFormat data))
  (when-let [data (lookup-entry config id :null-value-format-configuration)]
    (. builder nullValueFormatConfiguration data))
  (when-let [data (lookup-entry config id :numeric-format-configuration)]
    (. builder numericFormatConfiguration data))
  (.build builder))


(defn cfn-analysis-date-time-format-configuration-property-builder
  "Creates a  `CfnAnalysis$DateTimeFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-date-time-format-configuration-property-builder (new CfnAnalysis$DateTimeFormatConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-date-time-hierarchy-property-builder
  "The build-cfn-analysis-date-time-hierarchy-property-builder function updates a CfnAnalysis$DateTimeHierarchyProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DateTimeHierarchyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `drillDownFilters` | java.util.List | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnAnalysis$DateTimeHierarchyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :drill-down-filters)]
    (. builder drillDownFilters data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-analysis-date-time-hierarchy-property-builder
  "Creates a  `CfnAnalysis$DateTimeHierarchyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-date-time-hierarchy-property-builder (new CfnAnalysis$DateTimeHierarchyProperty$Builder) id config))


(defn build-cfn-analysis-date-time-parameter-declaration-property-builder
  "The build-cfn-analysis-date-time-parameter-declaration-property-builder function updates a CfnAnalysis$DateTimeParameterDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DateTimeParameterDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DateTimeDefaultValuesProperty | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
| `valueWhenUnset` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DateTimeValueWhenUnsetConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-when-unset` |
"
  [^CfnAnalysis$DateTimeParameterDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-values)]
    (. builder defaultValues data))
  (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
    (. builder mappedDataSetParameters data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (when-let [data (lookup-entry config id :value-when-unset)]
    (. builder valueWhenUnset data))
  (.build builder))


(defn cfn-analysis-date-time-parameter-declaration-property-builder
  "Creates a  `CfnAnalysis$DateTimeParameterDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-date-time-parameter-declaration-property-builder (new CfnAnalysis$DateTimeParameterDeclarationProperty$Builder) id config))


(defn build-cfn-analysis-date-time-parameter-property-builder
  "The build-cfn-analysis-date-time-parameter-property-builder function updates a CfnAnalysis$DateTimeParameterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DateTimeParameterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$DateTimeParameterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-date-time-parameter-property-builder
  "Creates a  `CfnAnalysis$DateTimeParameterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-date-time-parameter-property-builder (new CfnAnalysis$DateTimeParameterProperty$Builder) id config))


(defn build-cfn-analysis-date-time-picker-control-display-options-property-builder
  "The build-cfn-analysis-date-time-picker-control-display-options-property-builder function updates a CfnAnalysis$DateTimePickerControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DateTimePickerControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnAnalysis$DateTimePickerControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-format)]
    (. builder dateTimeFormat data))
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-analysis-date-time-picker-control-display-options-property-builder
  "Creates a  `CfnAnalysis$DateTimePickerControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-date-time-picker-control-display-options-property-builder (new CfnAnalysis$DateTimePickerControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-analysis-date-time-value-when-unset-configuration-property-builder
  "The build-cfn-analysis-date-time-value-when-unset-configuration-property-builder function updates a CfnAnalysis$DateTimeValueWhenUnsetConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DateTimeValueWhenUnsetConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |
"
  [^CfnAnalysis$DateTimeValueWhenUnsetConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-value)]
    (. builder customValue data))
  (when-let [data (lookup-entry config id :value-when-unset-option)]
    (. builder valueWhenUnsetOption data))
  (.build builder))


(defn cfn-analysis-date-time-value-when-unset-configuration-property-builder
  "Creates a  `CfnAnalysis$DateTimeValueWhenUnsetConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-date-time-value-when-unset-configuration-property-builder (new CfnAnalysis$DateTimeValueWhenUnsetConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-decimal-default-values-property-builder
  "The build-cfn-analysis-decimal-default-values-property-builder function updates a CfnAnalysis$DecimalDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DecimalDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |
"
  [^CfnAnalysis$DecimalDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :dynamic-value)]
    (. builder dynamicValue data))
  (when-let [data (lookup-entry config id :static-values)]
    (. builder staticValues data))
  (.build builder))


(defn cfn-analysis-decimal-default-values-property-builder
  "Creates a  `CfnAnalysis$DecimalDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-decimal-default-values-property-builder (new CfnAnalysis$DecimalDefaultValuesProperty$Builder) id config))


(defn build-cfn-analysis-decimal-parameter-declaration-property-builder
  "The build-cfn-analysis-decimal-parameter-declaration-property-builder function updates a CfnAnalysis$DecimalParameterDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DecimalParameterDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DecimalDefaultValuesProperty | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-when-unset` |
"
  [^CfnAnalysis$DecimalParameterDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-values)]
    (. builder defaultValues data))
  (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
    (. builder mappedDataSetParameters data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :parameter-value-type)]
    (. builder parameterValueType data))
  (when-let [data (lookup-entry config id :value-when-unset)]
    (. builder valueWhenUnset data))
  (.build builder))


(defn cfn-analysis-decimal-parameter-declaration-property-builder
  "Creates a  `CfnAnalysis$DecimalParameterDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-decimal-parameter-declaration-property-builder (new CfnAnalysis$DecimalParameterDeclarationProperty$Builder) id config))


(defn build-cfn-analysis-decimal-parameter-property-builder
  "The build-cfn-analysis-decimal-parameter-property-builder function updates a CfnAnalysis$DecimalParameterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DecimalParameterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$DecimalParameterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-decimal-parameter-property-builder
  "Creates a  `CfnAnalysis$DecimalParameterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-decimal-parameter-property-builder (new CfnAnalysis$DecimalParameterProperty$Builder) id config))


(defn build-cfn-analysis-decimal-places-configuration-property-builder
  "The build-cfn-analysis-decimal-places-configuration-property-builder function updates a CfnAnalysis$DecimalPlacesConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DecimalPlacesConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlaces` | java.lang.Number | [[cdk.support/lookup-entry]] | `:decimal-places` |
"
  [^CfnAnalysis$DecimalPlacesConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :decimal-places)]
    (. builder decimalPlaces data))
  (.build builder))


(defn cfn-analysis-decimal-places-configuration-property-builder
  "Creates a  `CfnAnalysis$DecimalPlacesConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-decimal-places-configuration-property-builder (new CfnAnalysis$DecimalPlacesConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-decimal-value-when-unset-configuration-property-builder
  "The build-cfn-analysis-decimal-value-when-unset-configuration-property-builder function updates a CfnAnalysis$DecimalValueWhenUnsetConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DecimalValueWhenUnsetConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |
"
  [^CfnAnalysis$DecimalValueWhenUnsetConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-value)]
    (. builder customValue data))
  (when-let [data (lookup-entry config id :value-when-unset-option)]
    (. builder valueWhenUnsetOption data))
  (.build builder))


(defn cfn-analysis-decimal-value-when-unset-configuration-property-builder
  "Creates a  `CfnAnalysis$DecimalValueWhenUnsetConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-decimal-value-when-unset-configuration-property-builder (new CfnAnalysis$DecimalValueWhenUnsetConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-default-date-time-picker-control-options-property-builder
  "The build-cfn-analysis-default-date-time-picker-control-options-property-builder function updates a CfnAnalysis$DefaultDateTimePickerControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DefaultDateTimePickerControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DateTimePickerControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnAnalysis$DefaultDateTimePickerControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-analysis-default-date-time-picker-control-options-property-builder
  "Creates a  `CfnAnalysis$DefaultDateTimePickerControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-default-date-time-picker-control-options-property-builder (new CfnAnalysis$DefaultDateTimePickerControlOptionsProperty$Builder) id config))


(defn build-cfn-analysis-default-filter-control-configuration-property-builder
  "The build-cfn-analysis-default-filter-control-configuration-property-builder function updates a CfnAnalysis$DefaultFilterControlConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DefaultFilterControlConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `controlOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:control-options` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnAnalysis$DefaultFilterControlConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :control-options)]
    (. builder controlOptions data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-analysis-default-filter-control-configuration-property-builder
  "Creates a  `CfnAnalysis$DefaultFilterControlConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-default-filter-control-configuration-property-builder (new CfnAnalysis$DefaultFilterControlConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-default-filter-control-options-property-builder
  "The build-cfn-analysis-default-filter-control-options-property-builder function updates a CfnAnalysis$DefaultFilterControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DefaultFilterControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultDateTimePickerOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-date-time-picker-options` |
| `defaultDropdownOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-dropdown-options` |
| `defaultListOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-list-options` |
| `defaultRelativeDateTimeOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DefaultRelativeDateTimeControlOptionsProperty | [[cdk.support/lookup-entry]] | `:default-relative-date-time-options` |
| `defaultSliderOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-slider-options` |
| `defaultTextAreaOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-text-area-options` |
| `defaultTextFieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-text-field-options` |
"
  [^CfnAnalysis$DefaultFilterControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-date-time-picker-options)]
    (. builder defaultDateTimePickerOptions data))
  (when-let [data (lookup-entry config id :default-dropdown-options)]
    (. builder defaultDropdownOptions data))
  (when-let [data (lookup-entry config id :default-list-options)]
    (. builder defaultListOptions data))
  (when-let [data (lookup-entry config id :default-relative-date-time-options)]
    (. builder defaultRelativeDateTimeOptions data))
  (when-let [data (lookup-entry config id :default-slider-options)]
    (. builder defaultSliderOptions data))
  (when-let [data (lookup-entry config id :default-text-area-options)]
    (. builder defaultTextAreaOptions data))
  (when-let [data (lookup-entry config id :default-text-field-options)]
    (. builder defaultTextFieldOptions data))
  (.build builder))


(defn cfn-analysis-default-filter-control-options-property-builder
  "Creates a  `CfnAnalysis$DefaultFilterControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-default-filter-control-options-property-builder (new CfnAnalysis$DefaultFilterControlOptionsProperty$Builder) id config))


(defn build-cfn-analysis-default-filter-drop-down-control-options-property-builder
  "The build-cfn-analysis-default-filter-drop-down-control-options-property-builder function updates a CfnAnalysis$DefaultFilterDropDownControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DefaultFilterDropDownControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DropDownControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnAnalysis$DefaultFilterDropDownControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-analysis-default-filter-drop-down-control-options-property-builder
  "Creates a  `CfnAnalysis$DefaultFilterDropDownControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-default-filter-drop-down-control-options-property-builder (new CfnAnalysis$DefaultFilterDropDownControlOptionsProperty$Builder) id config))


(defn build-cfn-analysis-default-filter-list-control-options-property-builder
  "The build-cfn-analysis-default-filter-list-control-options-property-builder function updates a CfnAnalysis$DefaultFilterListControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DefaultFilterListControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ListControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnAnalysis$DefaultFilterListControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-analysis-default-filter-list-control-options-property-builder
  "Creates a  `CfnAnalysis$DefaultFilterListControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-default-filter-list-control-options-property-builder (new CfnAnalysis$DefaultFilterListControlOptionsProperty$Builder) id config))


(defn build-cfn-analysis-default-free-form-layout-configuration-property-builder
  "The build-cfn-analysis-default-free-form-layout-configuration-property-builder function updates a CfnAnalysis$DefaultFreeFormLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DefaultFreeFormLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
"
  [^CfnAnalysis$DefaultFreeFormLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (.build builder))


(defn cfn-analysis-default-free-form-layout-configuration-property-builder
  "Creates a  `CfnAnalysis$DefaultFreeFormLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-default-free-form-layout-configuration-property-builder (new CfnAnalysis$DefaultFreeFormLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-default-grid-layout-configuration-property-builder
  "The build-cfn-analysis-default-grid-layout-configuration-property-builder function updates a CfnAnalysis$DefaultGridLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DefaultGridLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
"
  [^CfnAnalysis$DefaultGridLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (.build builder))


(defn cfn-analysis-default-grid-layout-configuration-property-builder
  "Creates a  `CfnAnalysis$DefaultGridLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-default-grid-layout-configuration-property-builder (new CfnAnalysis$DefaultGridLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-default-interactive-layout-configuration-property-builder
  "The build-cfn-analysis-default-interactive-layout-configuration-property-builder function updates a CfnAnalysis$DefaultInteractiveLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DefaultInteractiveLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeForm` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DefaultFreeFormLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:free-form` |
| `grid` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DefaultGridLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:grid` |
"
  [^CfnAnalysis$DefaultInteractiveLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :free-form)]
    (. builder freeForm data))
  (when-let [data (lookup-entry config id :grid)]
    (. builder grid data))
  (.build builder))


(defn cfn-analysis-default-interactive-layout-configuration-property-builder
  "Creates a  `CfnAnalysis$DefaultInteractiveLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-default-interactive-layout-configuration-property-builder (new CfnAnalysis$DefaultInteractiveLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-default-new-sheet-configuration-property-builder
  "The build-cfn-analysis-default-new-sheet-configuration-property-builder function updates a CfnAnalysis$DefaultNewSheetConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DefaultNewSheetConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `interactiveLayoutConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:interactive-layout-configuration` |
| `paginatedLayoutConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DefaultPaginatedLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:paginated-layout-configuration` |
| `sheetContentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-content-type` |
"
  [^CfnAnalysis$DefaultNewSheetConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :interactive-layout-configuration)]
    (. builder interactiveLayoutConfiguration data))
  (when-let [data (lookup-entry config id :paginated-layout-configuration)]
    (. builder paginatedLayoutConfiguration data))
  (when-let [data (lookup-entry config id :sheet-content-type)]
    (. builder sheetContentType data))
  (.build builder))


(defn cfn-analysis-default-new-sheet-configuration-property-builder
  "Creates a  `CfnAnalysis$DefaultNewSheetConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-default-new-sheet-configuration-property-builder (new CfnAnalysis$DefaultNewSheetConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-default-paginated-layout-configuration-property-builder
  "The build-cfn-analysis-default-paginated-layout-configuration-property-builder function updates a CfnAnalysis$DefaultPaginatedLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DefaultPaginatedLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sectionBased` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DefaultSectionBasedLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:section-based` |
"
  [^CfnAnalysis$DefaultPaginatedLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :section-based)]
    (. builder sectionBased data))
  (.build builder))


(defn cfn-analysis-default-paginated-layout-configuration-property-builder
  "Creates a  `CfnAnalysis$DefaultPaginatedLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-default-paginated-layout-configuration-property-builder (new CfnAnalysis$DefaultPaginatedLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-default-relative-date-time-control-options-property-builder
  "The build-cfn-analysis-default-relative-date-time-control-options-property-builder function updates a CfnAnalysis$DefaultRelativeDateTimeControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DefaultRelativeDateTimeControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$RelativeDateTimeControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
"
  [^CfnAnalysis$DefaultRelativeDateTimeControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (.build builder))


(defn cfn-analysis-default-relative-date-time-control-options-property-builder
  "Creates a  `CfnAnalysis$DefaultRelativeDateTimeControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-default-relative-date-time-control-options-property-builder (new CfnAnalysis$DefaultRelativeDateTimeControlOptionsProperty$Builder) id config))


(defn build-cfn-analysis-default-section-based-layout-configuration-property-builder
  "The build-cfn-analysis-default-section-based-layout-configuration-property-builder function updates a CfnAnalysis$DefaultSectionBasedLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DefaultSectionBasedLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SectionBasedLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
"
  [^CfnAnalysis$DefaultSectionBasedLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (.build builder))


(defn cfn-analysis-default-section-based-layout-configuration-property-builder
  "Creates a  `CfnAnalysis$DefaultSectionBasedLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-default-section-based-layout-configuration-property-builder (new CfnAnalysis$DefaultSectionBasedLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-default-slider-control-options-property-builder
  "The build-cfn-analysis-default-slider-control-options-property-builder function updates a CfnAnalysis$DefaultSliderControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DefaultSliderControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SliderControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnAnalysis$DefaultSliderControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :maximum-value)]
    (. builder maximumValue data))
  (when-let [data (lookup-entry config id :minimum-value)]
    (. builder minimumValue data))
  (when-let [data (lookup-entry config id :step-size)]
    (. builder stepSize data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-analysis-default-slider-control-options-property-builder
  "Creates a  `CfnAnalysis$DefaultSliderControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-default-slider-control-options-property-builder (new CfnAnalysis$DefaultSliderControlOptionsProperty$Builder) id config))


(defn build-cfn-analysis-default-text-area-control-options-property-builder
  "The build-cfn-analysis-default-text-area-control-options-property-builder function updates a CfnAnalysis$DefaultTextAreaControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DefaultTextAreaControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
"
  [^CfnAnalysis$DefaultTextAreaControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :delimiter)]
    (. builder delimiter data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (.build builder))


(defn cfn-analysis-default-text-area-control-options-property-builder
  "Creates a  `CfnAnalysis$DefaultTextAreaControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-default-text-area-control-options-property-builder (new CfnAnalysis$DefaultTextAreaControlOptionsProperty$Builder) id config))


(defn build-cfn-analysis-default-text-field-control-options-property-builder
  "The build-cfn-analysis-default-text-field-control-options-property-builder function updates a CfnAnalysis$DefaultTextFieldControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DefaultTextFieldControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TextFieldControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
"
  [^CfnAnalysis$DefaultTextFieldControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (.build builder))


(defn cfn-analysis-default-text-field-control-options-property-builder
  "Creates a  `CfnAnalysis$DefaultTextFieldControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-default-text-field-control-options-property-builder (new CfnAnalysis$DefaultTextFieldControlOptionsProperty$Builder) id config))


(defn build-cfn-analysis-destination-parameter-value-configuration-property-builder
  "The build-cfn-analysis-destination-parameter-value-configuration-property-builder function updates a CfnAnalysis$DestinationParameterValueConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DestinationParameterValueConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValuesConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-values-configuration` |
| `selectAllValueOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-value-options` |
| `sourceColumn` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-column` |
| `sourceField` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-field` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
"
  [^CfnAnalysis$DestinationParameterValueConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-values-configuration)]
    (. builder customValuesConfiguration data))
  (when-let [data (lookup-entry config id :select-all-value-options)]
    (. builder selectAllValueOptions data))
  (when-let [data (lookup-entry config id :source-column)]
    (. builder sourceColumn data))
  (when-let [data (lookup-entry config id :source-field)]
    (. builder sourceField data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (.build builder))


(defn cfn-analysis-destination-parameter-value-configuration-property-builder
  "Creates a  `CfnAnalysis$DestinationParameterValueConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-destination-parameter-value-configuration-property-builder (new CfnAnalysis$DestinationParameterValueConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-dimension-field-property-builder
  "The build-cfn-analysis-dimension-field-property-builder function updates a CfnAnalysis$DimensionFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DimensionFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoricalDimensionField` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CategoricalDimensionFieldProperty | [[cdk.support/lookup-entry]] | `:categorical-dimension-field` |
| `dateDimensionField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-dimension-field` |
| `numericalDimensionField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numerical-dimension-field` |
"
  [^CfnAnalysis$DimensionFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :categorical-dimension-field)]
    (. builder categoricalDimensionField data))
  (when-let [data (lookup-entry config id :date-dimension-field)]
    (. builder dateDimensionField data))
  (when-let [data (lookup-entry config id :numerical-dimension-field)]
    (. builder numericalDimensionField data))
  (.build builder))


(defn cfn-analysis-dimension-field-property-builder
  "Creates a  `CfnAnalysis$DimensionFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-dimension-field-property-builder (new CfnAnalysis$DimensionFieldProperty$Builder) id config))


(defn build-cfn-analysis-donut-center-options-property-builder
  "The build-cfn-analysis-donut-center-options-property-builder function updates a CfnAnalysis$DonutCenterOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DonutCenterOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `labelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-visibility` |
"
  [^CfnAnalysis$DonutCenterOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :label-visibility)]
    (. builder labelVisibility data))
  (.build builder))


(defn cfn-analysis-donut-center-options-property-builder
  "Creates a  `CfnAnalysis$DonutCenterOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-donut-center-options-property-builder (new CfnAnalysis$DonutCenterOptionsProperty$Builder) id config))


(defn build-cfn-analysis-donut-options-property-builder
  "The build-cfn-analysis-donut-options-property-builder function updates a CfnAnalysis$DonutOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DonutOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:arc-options` |
| `donutCenterOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DonutCenterOptionsProperty | [[cdk.support/lookup-entry]] | `:donut-center-options` |
"
  [^CfnAnalysis$DonutOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arc-options)]
    (. builder arcOptions data))
  (when-let [data (lookup-entry config id :donut-center-options)]
    (. builder donutCenterOptions data))
  (.build builder))


(defn cfn-analysis-donut-options-property-builder
  "Creates a  `CfnAnalysis$DonutOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-donut-options-property-builder (new CfnAnalysis$DonutOptionsProperty$Builder) id config))


(defn build-cfn-analysis-drill-down-filter-property-builder
  "The build-cfn-analysis-drill-down-filter-property-builder function updates a CfnAnalysis$DrillDownFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DrillDownFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryFilter` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CategoryDrillDownFilterProperty | [[cdk.support/lookup-entry]] | `:category-filter` |
| `numericEqualityFilter` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumericEqualityDrillDownFilterProperty | [[cdk.support/lookup-entry]] | `:numeric-equality-filter` |
| `timeRangeFilter` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TimeRangeDrillDownFilterProperty | [[cdk.support/lookup-entry]] | `:time-range-filter` |
"
  [^CfnAnalysis$DrillDownFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-filter)]
    (. builder categoryFilter data))
  (when-let [data (lookup-entry config id :numeric-equality-filter)]
    (. builder numericEqualityFilter data))
  (when-let [data (lookup-entry config id :time-range-filter)]
    (. builder timeRangeFilter data))
  (.build builder))


(defn cfn-analysis-drill-down-filter-property-builder
  "Creates a  `CfnAnalysis$DrillDownFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-drill-down-filter-property-builder (new CfnAnalysis$DrillDownFilterProperty$Builder) id config))


(defn build-cfn-analysis-drop-down-control-display-options-property-builder
  "The build-cfn-analysis-drop-down-control-display-options-property-builder function updates a CfnAnalysis$DropDownControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DropDownControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `selectAllOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ListControlSelectAllOptionsProperty | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnAnalysis$DropDownControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-analysis-drop-down-control-display-options-property-builder
  "Creates a  `CfnAnalysis$DropDownControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-drop-down-control-display-options-property-builder (new CfnAnalysis$DropDownControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-analysis-dynamic-default-value-property-builder
  "The build-cfn-analysis-dynamic-default-value-property-builder function updates a CfnAnalysis$DynamicDefaultValueProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$DynamicDefaultValueProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValueColumn` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-value-column` |
| `groupNameColumn` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-name-column` |
| `userNameColumn` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:user-name-column` |
"
  [^CfnAnalysis$DynamicDefaultValueProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-value-column)]
    (. builder defaultValueColumn data))
  (when-let [data (lookup-entry config id :group-name-column)]
    (. builder groupNameColumn data))
  (when-let [data (lookup-entry config id :user-name-column)]
    (. builder userNameColumn data))
  (.build builder))


(defn cfn-analysis-dynamic-default-value-property-builder
  "Creates a  `CfnAnalysis$DynamicDefaultValueProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-dynamic-default-value-property-builder (new CfnAnalysis$DynamicDefaultValueProperty$Builder) id config))


(defn build-cfn-analysis-empty-visual-property-builder
  "The build-cfn-analysis-empty-visual-property-builder function updates a CfnAnalysis$EmptyVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$EmptyVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$EmptyVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-empty-visual-property-builder
  "Creates a  `CfnAnalysis$EmptyVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-empty-visual-property-builder (new CfnAnalysis$EmptyVisualProperty$Builder) id config))


(defn build-cfn-analysis-entity-property-builder
  "The build-cfn-analysis-entity-property-builder function updates a CfnAnalysis$EntityProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$EntityProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `path` | java.lang.String | [[cdk.support/lookup-entry]] | `:path` |
"
  [^CfnAnalysis$EntityProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :path)]
    (. builder path data))
  (.build builder))


(defn cfn-analysis-entity-property-builder
  "Creates a  `CfnAnalysis$EntityProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-entity-property-builder (new CfnAnalysis$EntityProperty$Builder) id config))


(defn build-cfn-analysis-exclude-period-configuration-property-builder
  "The build-cfn-analysis-exclude-period-configuration-property-builder function updates a CfnAnalysis$ExcludePeriodConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ExcludePeriodConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `amount` | java.lang.Number | [[cdk.support/lookup-entry]] | `:amount` |
| `granularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:granularity` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
"
  [^CfnAnalysis$ExcludePeriodConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :amount)]
    (. builder amount data))
  (when-let [data (lookup-entry config id :granularity)]
    (. builder granularity data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (.build builder))


(defn cfn-analysis-exclude-period-configuration-property-builder
  "Creates a  `CfnAnalysis$ExcludePeriodConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-exclude-period-configuration-property-builder (new CfnAnalysis$ExcludePeriodConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-explicit-hierarchy-property-builder
  "The build-cfn-analysis-explicit-hierarchy-property-builder function updates a CfnAnalysis$ExplicitHierarchyProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ExplicitHierarchyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:columns` |
| `drillDownFilters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnAnalysis$ExplicitHierarchyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (when-let [data (lookup-entry config id :drill-down-filters)]
    (. builder drillDownFilters data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-analysis-explicit-hierarchy-property-builder
  "Creates a  `CfnAnalysis$ExplicitHierarchyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-explicit-hierarchy-property-builder (new CfnAnalysis$ExplicitHierarchyProperty$Builder) id config))


(defn build-cfn-analysis-field-based-tooltip-property-builder
  "The build-cfn-analysis-field-based-tooltip-property-builder function updates a CfnAnalysis$FieldBasedTooltipProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FieldBasedTooltipProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-visibility` |
| `tooltipFields` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip-fields` |
| `tooltipTitleType` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-title-type` |
"
  [^CfnAnalysis$FieldBasedTooltipProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-visibility)]
    (. builder aggregationVisibility data))
  (when-let [data (lookup-entry config id :tooltip-fields)]
    (. builder tooltipFields data))
  (when-let [data (lookup-entry config id :tooltip-title-type)]
    (. builder tooltipTitleType data))
  (.build builder))


(defn cfn-analysis-field-based-tooltip-property-builder
  "Creates a  `CfnAnalysis$FieldBasedTooltipProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-field-based-tooltip-property-builder (new CfnAnalysis$FieldBasedTooltipProperty$Builder) id config))


(defn build-cfn-analysis-field-label-type-property-builder
  "The build-cfn-analysis-field-label-type-property-builder function updates a CfnAnalysis$FieldLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FieldLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$FieldLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-field-label-type-property-builder
  "Creates a  `CfnAnalysis$FieldLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-field-label-type-property-builder (new CfnAnalysis$FieldLabelTypeProperty$Builder) id config))


(defn build-cfn-analysis-field-series-item-property-builder
  "The build-cfn-analysis-field-series-item-property-builder function updates a CfnAnalysis$FieldSeriesItemProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FieldSeriesItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `settings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:settings` |
"
  [^CfnAnalysis$FieldSeriesItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-binding)]
    (. builder axisBinding data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :settings)]
    (. builder settings data))
  (.build builder))


(defn cfn-analysis-field-series-item-property-builder
  "Creates a  `CfnAnalysis$FieldSeriesItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-field-series-item-property-builder (new CfnAnalysis$FieldSeriesItemProperty$Builder) id config))


(defn build-cfn-analysis-field-sort-options-property-builder
  "The build-cfn-analysis-field-sort-options-property-builder function updates a CfnAnalysis$FieldSortOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FieldSortOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-sort` |
| `fieldSort` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FieldSortProperty | [[cdk.support/lookup-entry]] | `:field-sort` |
"
  [^CfnAnalysis$FieldSortOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-sort)]
    (. builder columnSort data))
  (when-let [data (lookup-entry config id :field-sort)]
    (. builder fieldSort data))
  (.build builder))


(defn cfn-analysis-field-sort-options-property-builder
  "Creates a  `CfnAnalysis$FieldSortOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-field-sort-options-property-builder (new CfnAnalysis$FieldSortOptionsProperty$Builder) id config))


(defn build-cfn-analysis-field-sort-property-builder
  "The build-cfn-analysis-field-sort-property-builder function updates a CfnAnalysis$FieldSortProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FieldSortProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
"
  [^CfnAnalysis$FieldSortProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :direction)]
    (. builder direction data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (.build builder))


(defn cfn-analysis-field-sort-property-builder
  "Creates a  `CfnAnalysis$FieldSortProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-field-sort-property-builder (new CfnAnalysis$FieldSortProperty$Builder) id config))


(defn build-cfn-analysis-field-tooltip-item-property-builder
  "The build-cfn-analysis-field-tooltip-item-property-builder function updates a CfnAnalysis$FieldTooltipItemProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FieldTooltipItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `label` | java.lang.String | [[cdk.support/lookup-entry]] | `:label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$FieldTooltipItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :label)]
    (. builder label data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-field-tooltip-item-property-builder
  "Creates a  `CfnAnalysis$FieldTooltipItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-field-tooltip-item-property-builder (new CfnAnalysis$FieldTooltipItemProperty$Builder) id config))


(defn build-cfn-analysis-filled-map-aggregated-field-wells-property-builder
  "The build-cfn-analysis-filled-map-aggregated-field-wells-property-builder function updates a CfnAnalysis$FilledMapAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilledMapAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `geospatial` | java.util.List | [[cdk.support/lookup-entry]] | `:geospatial` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$FilledMapAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :geospatial)]
    (. builder geospatial data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-filled-map-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$FilledMapAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filled-map-aggregated-field-wells-property-builder (new CfnAnalysis$FilledMapAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-filled-map-conditional-formatting-option-property-builder
  "The build-cfn-analysis-filled-map-conditional-formatting-option-property-builder function updates a CfnAnalysis$FilledMapConditionalFormattingOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilledMapConditionalFormattingOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `shape` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:shape` |
"
  [^CfnAnalysis$FilledMapConditionalFormattingOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :shape)]
    (. builder shape data))
  (.build builder))


(defn cfn-analysis-filled-map-conditional-formatting-option-property-builder
  "Creates a  `CfnAnalysis$FilledMapConditionalFormattingOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filled-map-conditional-formatting-option-property-builder (new CfnAnalysis$FilledMapConditionalFormattingOptionProperty$Builder) id config))


(defn build-cfn-analysis-filled-map-conditional-formatting-property-builder
  "The build-cfn-analysis-filled-map-conditional-formatting-property-builder function updates a CfnAnalysis$FilledMapConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilledMapConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |
"
  [^CfnAnalysis$FilledMapConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :conditional-formatting-options)]
    (. builder conditionalFormattingOptions data))
  (.build builder))


(defn cfn-analysis-filled-map-conditional-formatting-property-builder
  "Creates a  `CfnAnalysis$FilledMapConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filled-map-conditional-formatting-property-builder (new CfnAnalysis$FilledMapConditionalFormattingProperty$Builder) id config))


(defn build-cfn-analysis-filled-map-configuration-property-builder
  "The build-cfn-analysis-filled-map-configuration-property-builder function updates a CfnAnalysis$FilledMapConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilledMapConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilledMapFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `mapStyleOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GeospatialMapStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:map-style-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilledMapSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `windowOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GeospatialWindowOptionsProperty | [[cdk.support/lookup-entry]] | `:window-options` |
"
  [^CfnAnalysis$FilledMapConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :map-style-options)]
    (. builder mapStyleOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :window-options)]
    (. builder windowOptions data))
  (.build builder))


(defn cfn-analysis-filled-map-configuration-property-builder
  "Creates a  `CfnAnalysis$FilledMapConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filled-map-configuration-property-builder (new CfnAnalysis$FilledMapConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-filled-map-field-wells-property-builder
  "The build-cfn-analysis-filled-map-field-wells-property-builder function updates a CfnAnalysis$FilledMapFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilledMapFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `filledMapAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filled-map-aggregated-field-wells` |
"
  [^CfnAnalysis$FilledMapFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :filled-map-aggregated-field-wells)]
    (. builder filledMapAggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-filled-map-field-wells-property-builder
  "Creates a  `CfnAnalysis$FilledMapFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filled-map-field-wells-property-builder (new CfnAnalysis$FilledMapFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-filled-map-shape-conditional-formatting-property-builder
  "The build-cfn-analysis-filled-map-shape-conditional-formatting-property-builder function updates a CfnAnalysis$FilledMapShapeConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilledMapShapeConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `format` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ShapeConditionalFormatProperty | [[cdk.support/lookup-entry]] | `:format` |
"
  [^CfnAnalysis$FilledMapShapeConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format)]
    (. builder format data))
  (.build builder))


(defn cfn-analysis-filled-map-shape-conditional-formatting-property-builder
  "Creates a  `CfnAnalysis$FilledMapShapeConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filled-map-shape-conditional-formatting-property-builder (new CfnAnalysis$FilledMapShapeConditionalFormattingProperty$Builder) id config))


(defn build-cfn-analysis-filled-map-sort-configuration-property-builder
  "The build-cfn-analysis-filled-map-sort-configuration-property-builder function updates a CfnAnalysis$FilledMapSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilledMapSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
"
  [^CfnAnalysis$FilledMapSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (.build builder))


(defn cfn-analysis-filled-map-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$FilledMapSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filled-map-sort-configuration-property-builder (new CfnAnalysis$FilledMapSortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-filled-map-visual-property-builder
  "The build-cfn-analysis-filled-map-visual-property-builder function updates a CfnAnalysis$FilledMapVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilledMapVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilledMapConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$FilledMapVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :conditional-formatting)]
    (. builder conditionalFormatting data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-filled-map-visual-property-builder
  "Creates a  `CfnAnalysis$FilledMapVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filled-map-visual-property-builder (new CfnAnalysis$FilledMapVisualProperty$Builder) id config))


(defn build-cfn-analysis-filter-control-property-builder
  "The build-cfn-analysis-filter-control-property-builder function updates a CfnAnalysis$FilterControlProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilterControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `crossSheet` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cross-sheet` |
| `dateTimePicker` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilterDateTimePickerControlProperty | [[cdk.support/lookup-entry]] | `:date-time-picker` |
| `dropdown` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilterDropDownControlProperty | [[cdk.support/lookup-entry]] | `:dropdown` |
| `list` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:list` |
| `relativeDateTime` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilterRelativeDateTimeControlProperty | [[cdk.support/lookup-entry]] | `:relative-date-time` |
| `slider` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:slider` |
| `textArea` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilterTextAreaControlProperty | [[cdk.support/lookup-entry]] | `:text-area` |
| `textField` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilterTextFieldControlProperty | [[cdk.support/lookup-entry]] | `:text-field` |
"
  [^CfnAnalysis$FilterControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cross-sheet)]
    (. builder crossSheet data))
  (when-let [data (lookup-entry config id :date-time-picker)]
    (. builder dateTimePicker data))
  (when-let [data (lookup-entry config id :dropdown)]
    (. builder dropdown data))
  (when-let [data (lookup-entry config id :list)]
    (. builder list data))
  (when-let [data (lookup-entry config id :relative-date-time)]
    (. builder relativeDateTime data))
  (when-let [data (lookup-entry config id :slider)]
    (. builder slider data))
  (when-let [data (lookup-entry config id :text-area)]
    (. builder textArea data))
  (when-let [data (lookup-entry config id :text-field)]
    (. builder textField data))
  (.build builder))


(defn cfn-analysis-filter-control-property-builder
  "Creates a  `CfnAnalysis$FilterControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filter-control-property-builder (new CfnAnalysis$FilterControlProperty$Builder) id config))


(defn build-cfn-analysis-filter-cross-sheet-control-property-builder
  "The build-cfn-analysis-filter-cross-sheet-control-property-builder function updates a CfnAnalysis$FilterCrossSheetControlProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilterCrossSheetControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
"
  [^CfnAnalysis$FilterCrossSheetControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cascading-control-configuration)]
    (. builder cascadingControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (.build builder))


(defn cfn-analysis-filter-cross-sheet-control-property-builder
  "Creates a  `CfnAnalysis$FilterCrossSheetControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filter-cross-sheet-control-property-builder (new CfnAnalysis$FilterCrossSheetControlProperty$Builder) id config))


(defn build-cfn-analysis-filter-date-time-picker-control-property-builder
  "The build-cfn-analysis-filter-date-time-picker-control-property-builder function updates a CfnAnalysis$FilterDateTimePickerControlProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilterDateTimePickerControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DateTimePickerControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnAnalysis$FilterDateTimePickerControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-analysis-filter-date-time-picker-control-property-builder
  "Creates a  `CfnAnalysis$FilterDateTimePickerControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filter-date-time-picker-control-property-builder (new CfnAnalysis$FilterDateTimePickerControlProperty$Builder) id config))


(defn build-cfn-analysis-filter-drop-down-control-property-builder
  "The build-cfn-analysis-filter-drop-down-control-property-builder function updates a CfnAnalysis$FilterDropDownControlProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilterDropDownControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `selectableValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnAnalysis$FilterDropDownControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cascading-control-configuration)]
    (. builder cascadingControlConfiguration data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-analysis-filter-drop-down-control-property-builder
  "Creates a  `CfnAnalysis$FilterDropDownControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filter-drop-down-control-property-builder (new CfnAnalysis$FilterDropDownControlProperty$Builder) id config))


(defn build-cfn-analysis-filter-group-property-builder
  "The build-cfn-analysis-filter-group-property-builder function updates a CfnAnalysis$FilterGroupProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilterGroupProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `crossDataset` | java.lang.String | [[cdk.support/lookup-entry]] | `:cross-dataset` |
| `filterGroupId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-group-id` |
| `filters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filters` |
| `scopeConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scope-configuration` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
"
  [^CfnAnalysis$FilterGroupProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cross-dataset)]
    (. builder crossDataset data))
  (when-let [data (lookup-entry config id :filter-group-id)]
    (. builder filterGroupId data))
  (when-let [data (lookup-entry config id :filters)]
    (. builder filters data))
  (when-let [data (lookup-entry config id :scope-configuration)]
    (. builder scopeConfiguration data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (.build builder))


(defn cfn-analysis-filter-group-property-builder
  "Creates a  `CfnAnalysis$FilterGroupProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filter-group-property-builder (new CfnAnalysis$FilterGroupProperty$Builder) id config))


(defn build-cfn-analysis-filter-list-configuration-property-builder
  "The build-cfn-analysis-filter-list-configuration-property-builder function updates a CfnAnalysis$FilterListConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilterListConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
"
  [^CfnAnalysis$FilterListConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-values)]
    (. builder categoryValues data))
  (when-let [data (lookup-entry config id :match-operator)]
    (. builder matchOperator data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (.build builder))


(defn cfn-analysis-filter-list-configuration-property-builder
  "Creates a  `CfnAnalysis$FilterListConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filter-list-configuration-property-builder (new CfnAnalysis$FilterListConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-filter-list-control-property-builder
  "The build-cfn-analysis-filter-list-control-property-builder function updates a CfnAnalysis$FilterListControlProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilterListControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `selectableValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnAnalysis$FilterListControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cascading-control-configuration)]
    (. builder cascadingControlConfiguration data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-analysis-filter-list-control-property-builder
  "Creates a  `CfnAnalysis$FilterListControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filter-list-control-property-builder (new CfnAnalysis$FilterListControlProperty$Builder) id config))


(defn build-cfn-analysis-filter-operation-selected-fields-configuration-property-builder
  "The build-cfn-analysis-filter-operation-selected-fields-configuration-property-builder function updates a CfnAnalysis$FilterOperationSelectedFieldsConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilterOperationSelectedFieldsConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `selectedColumns` | java.util.List | [[cdk.support/lookup-entry]] | `:selected-columns` |
| `selectedFieldOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-field-options` |
| `selectedFields` | java.util.List | [[cdk.support/lookup-entry]] | `:selected-fields` |
"
  [^CfnAnalysis$FilterOperationSelectedFieldsConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :selected-columns)]
    (. builder selectedColumns data))
  (when-let [data (lookup-entry config id :selected-field-options)]
    (. builder selectedFieldOptions data))
  (when-let [data (lookup-entry config id :selected-fields)]
    (. builder selectedFields data))
  (.build builder))


(defn cfn-analysis-filter-operation-selected-fields-configuration-property-builder
  "Creates a  `CfnAnalysis$FilterOperationSelectedFieldsConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filter-operation-selected-fields-configuration-property-builder (new CfnAnalysis$FilterOperationSelectedFieldsConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-filter-operation-target-visuals-configuration-property-builder
  "The build-cfn-analysis-filter-operation-target-visuals-configuration-property-builder function updates a CfnAnalysis$FilterOperationTargetVisualsConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilterOperationTargetVisualsConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sameSheetTargetVisualConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SameSheetTargetVisualConfigurationProperty | [[cdk.support/lookup-entry]] | `:same-sheet-target-visual-configuration` |
"
  [^CfnAnalysis$FilterOperationTargetVisualsConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :same-sheet-target-visual-configuration)]
    (. builder sameSheetTargetVisualConfiguration data))
  (.build builder))


(defn cfn-analysis-filter-operation-target-visuals-configuration-property-builder
  "Creates a  `CfnAnalysis$FilterOperationTargetVisualsConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filter-operation-target-visuals-configuration-property-builder (new CfnAnalysis$FilterOperationTargetVisualsConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-filter-property-builder
  "The build-cfn-analysis-filter-property-builder function updates a CfnAnalysis$FilterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryFilter` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CategoryFilterProperty | [[cdk.support/lookup-entry]] | `:category-filter` |
| `numericEqualityFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-equality-filter` |
| `numericRangeFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-range-filter` |
| `relativeDatesFilter` | software.amazon.awscdk.services.quicksight.CfnAnalysis$RelativeDatesFilterProperty | [[cdk.support/lookup-entry]] | `:relative-dates-filter` |
| `timeEqualityFilter` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TimeEqualityFilterProperty | [[cdk.support/lookup-entry]] | `:time-equality-filter` |
| `timeRangeFilter` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TimeRangeFilterProperty | [[cdk.support/lookup-entry]] | `:time-range-filter` |
| `topBottomFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:top-bottom-filter` |
"
  [^CfnAnalysis$FilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-filter)]
    (. builder categoryFilter data))
  (when-let [data (lookup-entry config id :numeric-equality-filter)]
    (. builder numericEqualityFilter data))
  (when-let [data (lookup-entry config id :numeric-range-filter)]
    (. builder numericRangeFilter data))
  (when-let [data (lookup-entry config id :relative-dates-filter)]
    (. builder relativeDatesFilter data))
  (when-let [data (lookup-entry config id :time-equality-filter)]
    (. builder timeEqualityFilter data))
  (when-let [data (lookup-entry config id :time-range-filter)]
    (. builder timeRangeFilter data))
  (when-let [data (lookup-entry config id :top-bottom-filter)]
    (. builder topBottomFilter data))
  (.build builder))


(defn cfn-analysis-filter-property-builder
  "Creates a  `CfnAnalysis$FilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filter-property-builder (new CfnAnalysis$FilterProperty$Builder) id config))


(defn build-cfn-analysis-filter-relative-date-time-control-property-builder
  "The build-cfn-analysis-filter-relative-date-time-control-property-builder function updates a CfnAnalysis$FilterRelativeDateTimeControlProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilterRelativeDateTimeControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnAnalysis$FilterRelativeDateTimeControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-analysis-filter-relative-date-time-control-property-builder
  "Creates a  `CfnAnalysis$FilterRelativeDateTimeControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filter-relative-date-time-control-property-builder (new CfnAnalysis$FilterRelativeDateTimeControlProperty$Builder) id config))


(defn build-cfn-analysis-filter-scope-configuration-property-builder
  "The build-cfn-analysis-filter-scope-configuration-property-builder function updates a CfnAnalysis$FilterScopeConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilterScopeConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `allSheets` | java.lang.Object | [[cdk.support/lookup-entry]] | `:all-sheets` |
| `selectedSheets` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SelectedSheetsFilterScopeConfigurationProperty | [[cdk.support/lookup-entry]] | `:selected-sheets` |
"
  [^CfnAnalysis$FilterScopeConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :all-sheets)]
    (. builder allSheets data))
  (when-let [data (lookup-entry config id :selected-sheets)]
    (. builder selectedSheets data))
  (.build builder))


(defn cfn-analysis-filter-scope-configuration-property-builder
  "Creates a  `CfnAnalysis$FilterScopeConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filter-scope-configuration-property-builder (new CfnAnalysis$FilterScopeConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-filter-selectable-values-property-builder
  "The build-cfn-analysis-filter-selectable-values-property-builder function updates a CfnAnalysis$FilterSelectableValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilterSelectableValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$FilterSelectableValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-filter-selectable-values-property-builder
  "Creates a  `CfnAnalysis$FilterSelectableValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filter-selectable-values-property-builder (new CfnAnalysis$FilterSelectableValuesProperty$Builder) id config))


(defn build-cfn-analysis-filter-slider-control-property-builder
  "The build-cfn-analysis-filter-slider-control-property-builder function updates a CfnAnalysis$FilterSliderControlProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilterSliderControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnAnalysis$FilterSliderControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :maximum-value)]
    (. builder maximumValue data))
  (when-let [data (lookup-entry config id :minimum-value)]
    (. builder minimumValue data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :step-size)]
    (. builder stepSize data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-analysis-filter-slider-control-property-builder
  "Creates a  `CfnAnalysis$FilterSliderControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filter-slider-control-property-builder (new CfnAnalysis$FilterSliderControlProperty$Builder) id config))


(defn build-cfn-analysis-filter-text-area-control-property-builder
  "The build-cfn-analysis-filter-text-area-control-property-builder function updates a CfnAnalysis$FilterTextAreaControlProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilterTextAreaControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TextAreaControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnAnalysis$FilterTextAreaControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :delimiter)]
    (. builder delimiter data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-analysis-filter-text-area-control-property-builder
  "Creates a  `CfnAnalysis$FilterTextAreaControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filter-text-area-control-property-builder (new CfnAnalysis$FilterTextAreaControlProperty$Builder) id config))


(defn build-cfn-analysis-filter-text-field-control-property-builder
  "The build-cfn-analysis-filter-text-field-control-property-builder function updates a CfnAnalysis$FilterTextFieldControlProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FilterTextFieldControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnAnalysis$FilterTextFieldControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-analysis-filter-text-field-control-property-builder
  "Creates a  `CfnAnalysis$FilterTextFieldControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-filter-text-field-control-property-builder (new CfnAnalysis$FilterTextFieldControlProperty$Builder) id config))


(defn build-cfn-analysis-font-configuration-property-builder
  "The build-cfn-analysis-font-configuration-property-builder function updates a CfnAnalysis$FontConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FontConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-color` |
| `fontDecoration` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-decoration` |
| `fontSize` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FontSizeProperty | [[cdk.support/lookup-entry]] | `:font-size` |
| `fontStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-style` |
| `fontWeight` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FontWeightProperty | [[cdk.support/lookup-entry]] | `:font-weight` |
"
  [^CfnAnalysis$FontConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :font-color)]
    (. builder fontColor data))
  (when-let [data (lookup-entry config id :font-decoration)]
    (. builder fontDecoration data))
  (when-let [data (lookup-entry config id :font-size)]
    (. builder fontSize data))
  (when-let [data (lookup-entry config id :font-style)]
    (. builder fontStyle data))
  (when-let [data (lookup-entry config id :font-weight)]
    (. builder fontWeight data))
  (.build builder))


(defn cfn-analysis-font-configuration-property-builder
  "Creates a  `CfnAnalysis$FontConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-font-configuration-property-builder (new CfnAnalysis$FontConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-font-size-property-builder
  "The build-cfn-analysis-font-size-property-builder function updates a CfnAnalysis$FontSizeProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FontSizeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `relative` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative` |
"
  [^CfnAnalysis$FontSizeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :relative)]
    (. builder relative data))
  (.build builder))


(defn cfn-analysis-font-size-property-builder
  "Creates a  `CfnAnalysis$FontSizeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-font-size-property-builder (new CfnAnalysis$FontSizeProperty$Builder) id config))


(defn build-cfn-analysis-font-weight-property-builder
  "The build-cfn-analysis-font-weight-property-builder function updates a CfnAnalysis$FontWeightProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FontWeightProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
"
  [^CfnAnalysis$FontWeightProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (.build builder))


(defn cfn-analysis-font-weight-property-builder
  "Creates a  `CfnAnalysis$FontWeightProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-font-weight-property-builder (new CfnAnalysis$FontWeightProperty$Builder) id config))


(defn build-cfn-analysis-forecast-computation-property-builder
  "The build-cfn-analysis-forecast-computation-property-builder function updates a CfnAnalysis$ForecastComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ForecastComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `customSeasonalityValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-seasonality-value` |
| `lowerBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:lower-boundary` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodsBackward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-backward` |
| `periodsForward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-forward` |
| `predictionInterval` | java.lang.Number | [[cdk.support/lookup-entry]] | `:prediction-interval` |
| `seasonality` | java.lang.String | [[cdk.support/lookup-entry]] | `:seasonality` |
| `time` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |
| `upperBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:upper-boundary` |
| `value` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$ForecastComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :custom-seasonality-value)]
    (. builder customSeasonalityValue data))
  (when-let [data (lookup-entry config id :lower-boundary)]
    (. builder lowerBoundary data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :periods-backward)]
    (. builder periodsBackward data))
  (when-let [data (lookup-entry config id :periods-forward)]
    (. builder periodsForward data))
  (when-let [data (lookup-entry config id :prediction-interval)]
    (. builder predictionInterval data))
  (when-let [data (lookup-entry config id :seasonality)]
    (. builder seasonality data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :upper-boundary)]
    (. builder upperBoundary data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-forecast-computation-property-builder
  "Creates a  `CfnAnalysis$ForecastComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-forecast-computation-property-builder (new CfnAnalysis$ForecastComputationProperty$Builder) id config))


(defn build-cfn-analysis-forecast-configuration-property-builder
  "The build-cfn-analysis-forecast-configuration-property-builder function updates a CfnAnalysis$ForecastConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ForecastConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `forecastProperties` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:forecast-properties` |
| `scenario` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scenario` |
"
  [^CfnAnalysis$ForecastConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :forecast-properties)]
    (. builder forecastProperties data))
  (when-let [data (lookup-entry config id :scenario)]
    (. builder scenario data))
  (.build builder))


(defn cfn-analysis-forecast-configuration-property-builder
  "Creates a  `CfnAnalysis$ForecastConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-forecast-configuration-property-builder (new CfnAnalysis$ForecastConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-forecast-scenario-property-builder
  "The build-cfn-analysis-forecast-scenario-property-builder function updates a CfnAnalysis$ForecastScenarioProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ForecastScenarioProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `whatIfPointScenario` | software.amazon.awscdk.services.quicksight.CfnAnalysis$WhatIfPointScenarioProperty | [[cdk.support/lookup-entry]] | `:what-if-point-scenario` |
| `whatIfRangeScenario` | software.amazon.awscdk.services.quicksight.CfnAnalysis$WhatIfRangeScenarioProperty | [[cdk.support/lookup-entry]] | `:what-if-range-scenario` |
"
  [^CfnAnalysis$ForecastScenarioProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :what-if-point-scenario)]
    (. builder whatIfPointScenario data))
  (when-let [data (lookup-entry config id :what-if-range-scenario)]
    (. builder whatIfRangeScenario data))
  (.build builder))


(defn cfn-analysis-forecast-scenario-property-builder
  "Creates a  `CfnAnalysis$ForecastScenarioProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-forecast-scenario-property-builder (new CfnAnalysis$ForecastScenarioProperty$Builder) id config))


(defn build-cfn-analysis-format-configuration-property-builder
  "The build-cfn-analysis-format-configuration-property-builder function updates a CfnAnalysis$FormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-time-format-configuration` |
| `numberFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:number-format-configuration` |
| `stringFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:string-format-configuration` |
"
  [^CfnAnalysis$FormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-format-configuration)]
    (. builder dateTimeFormatConfiguration data))
  (when-let [data (lookup-entry config id :number-format-configuration)]
    (. builder numberFormatConfiguration data))
  (when-let [data (lookup-entry config id :string-format-configuration)]
    (. builder stringFormatConfiguration data))
  (.build builder))


(defn cfn-analysis-format-configuration-property-builder
  "Creates a  `CfnAnalysis$FormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-format-configuration-property-builder (new CfnAnalysis$FormatConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-free-form-layout-canvas-size-options-property-builder
  "The build-cfn-analysis-free-form-layout-canvas-size-options-property-builder function updates a CfnAnalysis$FreeFormLayoutCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FreeFormLayoutCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `screenCanvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:screen-canvas-size-options` |
"
  [^CfnAnalysis$FreeFormLayoutCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :screen-canvas-size-options)]
    (. builder screenCanvasSizeOptions data))
  (.build builder))


(defn cfn-analysis-free-form-layout-canvas-size-options-property-builder
  "Creates a  `CfnAnalysis$FreeFormLayoutCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-free-form-layout-canvas-size-options-property-builder (new CfnAnalysis$FreeFormLayoutCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-analysis-free-form-layout-configuration-property-builder
  "The build-cfn-analysis-free-form-layout-configuration-property-builder function updates a CfnAnalysis$FreeFormLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FreeFormLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FreeFormLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `elements` | java.util.List | [[cdk.support/lookup-entry]] | `:elements` |
"
  [^CfnAnalysis$FreeFormLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (when-let [data (lookup-entry config id :elements)]
    (. builder elements data))
  (.build builder))


(defn cfn-analysis-free-form-layout-configuration-property-builder
  "Creates a  `CfnAnalysis$FreeFormLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-free-form-layout-configuration-property-builder (new CfnAnalysis$FreeFormLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-free-form-layout-element-background-style-property-builder
  "The build-cfn-analysis-free-form-layout-element-background-style-property-builder function updates a CfnAnalysis$FreeFormLayoutElementBackgroundStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FreeFormLayoutElementBackgroundStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$FreeFormLayoutElementBackgroundStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-free-form-layout-element-background-style-property-builder
  "Creates a  `CfnAnalysis$FreeFormLayoutElementBackgroundStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-free-form-layout-element-background-style-property-builder (new CfnAnalysis$FreeFormLayoutElementBackgroundStyleProperty$Builder) id config))


(defn build-cfn-analysis-free-form-layout-element-border-style-property-builder
  "The build-cfn-analysis-free-form-layout-element-border-style-property-builder function updates a CfnAnalysis$FreeFormLayoutElementBorderStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FreeFormLayoutElementBorderStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$FreeFormLayoutElementBorderStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-free-form-layout-element-border-style-property-builder
  "Creates a  `CfnAnalysis$FreeFormLayoutElementBorderStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-free-form-layout-element-border-style-property-builder (new CfnAnalysis$FreeFormLayoutElementBorderStyleProperty$Builder) id config))


(defn build-cfn-analysis-free-form-layout-element-property-builder
  "The build-cfn-analysis-free-form-layout-element-property-builder function updates a CfnAnalysis$FreeFormLayoutElementProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FreeFormLayoutElementProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FreeFormLayoutElementBackgroundStyleProperty | [[cdk.support/lookup-entry]] | `:background-style` |
| `borderStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FreeFormLayoutElementBorderStyleProperty | [[cdk.support/lookup-entry]] | `:border-style` |
| `elementId` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-id` |
| `elementType` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-type` |
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `loadingAnimation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:loading-animation` |
| `renderingRules` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rendering-rules` |
| `selectedBorderStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FreeFormLayoutElementBorderStyleProperty | [[cdk.support/lookup-entry]] | `:selected-border-style` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |
| `xAxisLocation` | java.lang.String | [[cdk.support/lookup-entry]] | `:x-axis-location` |
| `yAxisLocation` | java.lang.String | [[cdk.support/lookup-entry]] | `:y-axis-location` |
"
  [^CfnAnalysis$FreeFormLayoutElementProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-style)]
    (. builder backgroundStyle data))
  (when-let [data (lookup-entry config id :border-style)]
    (. builder borderStyle data))
  (when-let [data (lookup-entry config id :element-id)]
    (. builder elementId data))
  (when-let [data (lookup-entry config id :element-type)]
    (. builder elementType data))
  (when-let [data (lookup-entry config id :height)]
    (. builder height data))
  (when-let [data (lookup-entry config id :loading-animation)]
    (. builder loadingAnimation data))
  (when-let [data (lookup-entry config id :rendering-rules)]
    (. builder renderingRules data))
  (when-let [data (lookup-entry config id :selected-border-style)]
    (. builder selectedBorderStyle data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (when-let [data (lookup-entry config id :width)]
    (. builder width data))
  (when-let [data (lookup-entry config id :x-axis-location)]
    (. builder xAxisLocation data))
  (when-let [data (lookup-entry config id :y-axis-location)]
    (. builder yAxisLocation data))
  (.build builder))


(defn cfn-analysis-free-form-layout-element-property-builder
  "Creates a  `CfnAnalysis$FreeFormLayoutElementProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-free-form-layout-element-property-builder (new CfnAnalysis$FreeFormLayoutElementProperty$Builder) id config))


(defn build-cfn-analysis-free-form-layout-screen-canvas-size-options-property-builder
  "The build-cfn-analysis-free-form-layout-screen-canvas-size-options-property-builder function updates a CfnAnalysis$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `optimizedViewPortWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:optimized-view-port-width` |
"
  [^CfnAnalysis$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :optimized-view-port-width)]
    (. builder optimizedViewPortWidth data))
  (.build builder))


(defn cfn-analysis-free-form-layout-screen-canvas-size-options-property-builder
  "Creates a  `CfnAnalysis$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-free-form-layout-screen-canvas-size-options-property-builder (new CfnAnalysis$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-analysis-free-form-section-layout-configuration-property-builder
  "The build-cfn-analysis-free-form-section-layout-configuration-property-builder function updates a CfnAnalysis$FreeFormSectionLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FreeFormSectionLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `elements` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:elements` |
"
  [^CfnAnalysis$FreeFormSectionLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :elements)]
    (. builder elements data))
  (.build builder))


(defn cfn-analysis-free-form-section-layout-configuration-property-builder
  "Creates a  `CfnAnalysis$FreeFormSectionLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-free-form-section-layout-configuration-property-builder (new CfnAnalysis$FreeFormSectionLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-funnel-chart-aggregated-field-wells-property-builder
  "The build-cfn-analysis-funnel-chart-aggregated-field-wells-property-builder function updates a CfnAnalysis$FunnelChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FunnelChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$FunnelChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-funnel-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$FunnelChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-funnel-chart-aggregated-field-wells-property-builder (new CfnAnalysis$FunnelChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-funnel-chart-configuration-property-builder
  "The build-cfn-analysis-funnel-chart-configuration-property-builder function updates a CfnAnalysis$FunnelChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FunnelChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `dataLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FunnelChartDataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-label-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FunnelChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FunnelChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnAnalysis$FunnelChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :data-label-options)]
    (. builder dataLabelOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :value-label-options)]
    (. builder valueLabelOptions data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-analysis-funnel-chart-configuration-property-builder
  "Creates a  `CfnAnalysis$FunnelChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-funnel-chart-configuration-property-builder (new CfnAnalysis$FunnelChartConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-funnel-chart-data-label-options-property-builder
  "The build-cfn-analysis-funnel-chart-data-label-options-property-builder function updates a CfnAnalysis$FunnelChartDataLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FunnelChartDataLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-label-visibility` |
| `labelColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-color` |
| `labelFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label-font-configuration` |
| `measureDataLabelStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-data-label-style` |
| `measureLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-label-visibility` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$FunnelChartDataLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-label-visibility)]
    (. builder categoryLabelVisibility data))
  (when-let [data (lookup-entry config id :label-color)]
    (. builder labelColor data))
  (when-let [data (lookup-entry config id :label-font-configuration)]
    (. builder labelFontConfiguration data))
  (when-let [data (lookup-entry config id :measure-data-label-style)]
    (. builder measureDataLabelStyle data))
  (when-let [data (lookup-entry config id :measure-label-visibility)]
    (. builder measureLabelVisibility data))
  (when-let [data (lookup-entry config id :position)]
    (. builder position data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-funnel-chart-data-label-options-property-builder
  "Creates a  `CfnAnalysis$FunnelChartDataLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-funnel-chart-data-label-options-property-builder (new CfnAnalysis$FunnelChartDataLabelOptionsProperty$Builder) id config))


(defn build-cfn-analysis-funnel-chart-field-wells-property-builder
  "The build-cfn-analysis-funnel-chart-field-wells-property-builder function updates a CfnAnalysis$FunnelChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FunnelChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `funnelChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:funnel-chart-aggregated-field-wells` |
"
  [^CfnAnalysis$FunnelChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :funnel-chart-aggregated-field-wells)]
    (. builder funnelChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-funnel-chart-field-wells-property-builder
  "Creates a  `CfnAnalysis$FunnelChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-funnel-chart-field-wells-property-builder (new CfnAnalysis$FunnelChartFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-funnel-chart-sort-configuration-property-builder
  "The build-cfn-analysis-funnel-chart-sort-configuration-property-builder function updates a CfnAnalysis$FunnelChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FunnelChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
"
  [^CfnAnalysis$FunnelChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (.build builder))


(defn cfn-analysis-funnel-chart-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$FunnelChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-funnel-chart-sort-configuration-property-builder (new CfnAnalysis$FunnelChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-funnel-chart-visual-property-builder
  "The build-cfn-analysis-funnel-chart-visual-property-builder function updates a CfnAnalysis$FunnelChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$FunnelChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$FunnelChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-funnel-chart-visual-property-builder
  "Creates a  `CfnAnalysis$FunnelChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-funnel-chart-visual-property-builder (new CfnAnalysis$FunnelChartVisualProperty$Builder) id config))


(defn build-cfn-analysis-gauge-chart-arc-conditional-formatting-property-builder
  "The build-cfn-analysis-gauge-chart-arc-conditional-formatting-property-builder function updates a CfnAnalysis$GaugeChartArcConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GaugeChartArcConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `foregroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:foreground-color` |
"
  [^CfnAnalysis$GaugeChartArcConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :foreground-color)]
    (. builder foregroundColor data))
  (.build builder))


(defn cfn-analysis-gauge-chart-arc-conditional-formatting-property-builder
  "Creates a  `CfnAnalysis$GaugeChartArcConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-gauge-chart-arc-conditional-formatting-property-builder (new CfnAnalysis$GaugeChartArcConditionalFormattingProperty$Builder) id config))


(defn build-cfn-analysis-gauge-chart-conditional-formatting-option-property-builder
  "The build-cfn-analysis-gauge-chart-conditional-formatting-option-property-builder function updates a CfnAnalysis$GaugeChartConditionalFormattingOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GaugeChartConditionalFormattingOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arc` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GaugeChartArcConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:arc` |
| `primaryValue` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GaugeChartPrimaryValueConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:primary-value` |
"
  [^CfnAnalysis$GaugeChartConditionalFormattingOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arc)]
    (. builder arc data))
  (when-let [data (lookup-entry config id :primary-value)]
    (. builder primaryValue data))
  (.build builder))


(defn cfn-analysis-gauge-chart-conditional-formatting-option-property-builder
  "Creates a  `CfnAnalysis$GaugeChartConditionalFormattingOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-gauge-chart-conditional-formatting-option-property-builder (new CfnAnalysis$GaugeChartConditionalFormattingOptionProperty$Builder) id config))


(defn build-cfn-analysis-gauge-chart-conditional-formatting-property-builder
  "The build-cfn-analysis-gauge-chart-conditional-formatting-property-builder function updates a CfnAnalysis$GaugeChartConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GaugeChartConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |
"
  [^CfnAnalysis$GaugeChartConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :conditional-formatting-options)]
    (. builder conditionalFormattingOptions data))
  (.build builder))


(defn cfn-analysis-gauge-chart-conditional-formatting-property-builder
  "Creates a  `CfnAnalysis$GaugeChartConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-gauge-chart-conditional-formatting-property-builder (new CfnAnalysis$GaugeChartConditionalFormattingProperty$Builder) id config))


(defn build-cfn-analysis-gauge-chart-configuration-property-builder
  "The build-cfn-analysis-gauge-chart-configuration-property-builder function updates a CfnAnalysis$GaugeChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GaugeChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `gaugeChartOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:gauge-chart-options` |
| `tooltipOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip-options` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnAnalysis$GaugeChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :gauge-chart-options)]
    (. builder gaugeChartOptions data))
  (when-let [data (lookup-entry config id :tooltip-options)]
    (. builder tooltipOptions data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-analysis-gauge-chart-configuration-property-builder
  "Creates a  `CfnAnalysis$GaugeChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-gauge-chart-configuration-property-builder (new CfnAnalysis$GaugeChartConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-gauge-chart-field-wells-property-builder
  "The build-cfn-analysis-gauge-chart-field-wells-property-builder function updates a CfnAnalysis$GaugeChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GaugeChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetValues` | java.util.List | [[cdk.support/lookup-entry]] | `:target-values` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$GaugeChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :target-values)]
    (. builder targetValues data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-gauge-chart-field-wells-property-builder
  "Creates a  `CfnAnalysis$GaugeChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-gauge-chart-field-wells-property-builder (new CfnAnalysis$GaugeChartFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-gauge-chart-options-property-builder
  "The build-cfn-analysis-gauge-chart-options-property-builder function updates a CfnAnalysis$GaugeChartOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GaugeChartOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arc` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:arc` |
| `arcAxis` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ArcAxisConfigurationProperty | [[cdk.support/lookup-entry]] | `:arc-axis` |
| `comparison` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:comparison` |
| `primaryValueDisplayType` | java.lang.String | [[cdk.support/lookup-entry]] | `:primary-value-display-type` |
| `primaryValueFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-value-font-configuration` |
"
  [^CfnAnalysis$GaugeChartOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arc)]
    (. builder arc data))
  (when-let [data (lookup-entry config id :arc-axis)]
    (. builder arcAxis data))
  (when-let [data (lookup-entry config id :comparison)]
    (. builder comparison data))
  (when-let [data (lookup-entry config id :primary-value-display-type)]
    (. builder primaryValueDisplayType data))
  (when-let [data (lookup-entry config id :primary-value-font-configuration)]
    (. builder primaryValueFontConfiguration data))
  (.build builder))


(defn cfn-analysis-gauge-chart-options-property-builder
  "Creates a  `CfnAnalysis$GaugeChartOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-gauge-chart-options-property-builder (new CfnAnalysis$GaugeChartOptionsProperty$Builder) id config))


(defn build-cfn-analysis-gauge-chart-primary-value-conditional-formatting-property-builder
  "The build-cfn-analysis-gauge-chart-primary-value-conditional-formatting-property-builder function updates a CfnAnalysis$GaugeChartPrimaryValueConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GaugeChartPrimaryValueConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingIconProperty | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnAnalysis$GaugeChartPrimaryValueConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-analysis-gauge-chart-primary-value-conditional-formatting-property-builder
  "Creates a  `CfnAnalysis$GaugeChartPrimaryValueConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-gauge-chart-primary-value-conditional-formatting-property-builder (new CfnAnalysis$GaugeChartPrimaryValueConditionalFormattingProperty$Builder) id config))


(defn build-cfn-analysis-gauge-chart-visual-property-builder
  "The build-cfn-analysis-gauge-chart-visual-property-builder function updates a CfnAnalysis$GaugeChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GaugeChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GaugeChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GaugeChartConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$GaugeChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :conditional-formatting)]
    (. builder conditionalFormatting data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-gauge-chart-visual-property-builder
  "Creates a  `CfnAnalysis$GaugeChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-gauge-chart-visual-property-builder (new CfnAnalysis$GaugeChartVisualProperty$Builder) id config))


(defn build-cfn-analysis-geospatial-coordinate-bounds-property-builder
  "The build-cfn-analysis-geospatial-coordinate-bounds-property-builder function updates a CfnAnalysis$GeospatialCoordinateBoundsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GeospatialCoordinateBoundsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `east` | java.lang.Number | [[cdk.support/lookup-entry]] | `:east` |
| `north` | java.lang.Number | [[cdk.support/lookup-entry]] | `:north` |
| `south` | java.lang.Number | [[cdk.support/lookup-entry]] | `:south` |
| `west` | java.lang.Number | [[cdk.support/lookup-entry]] | `:west` |
"
  [^CfnAnalysis$GeospatialCoordinateBoundsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :east)]
    (. builder east data))
  (when-let [data (lookup-entry config id :north)]
    (. builder north data))
  (when-let [data (lookup-entry config id :south)]
    (. builder south data))
  (when-let [data (lookup-entry config id :west)]
    (. builder west data))
  (.build builder))


(defn cfn-analysis-geospatial-coordinate-bounds-property-builder
  "Creates a  `CfnAnalysis$GeospatialCoordinateBoundsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-geospatial-coordinate-bounds-property-builder (new CfnAnalysis$GeospatialCoordinateBoundsProperty$Builder) id config))


(defn build-cfn-analysis-geospatial-heatmap-color-scale-property-builder
  "The build-cfn-analysis-geospatial-heatmap-color-scale-property-builder function updates a CfnAnalysis$GeospatialHeatmapColorScaleProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GeospatialHeatmapColorScaleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
"
  [^CfnAnalysis$GeospatialHeatmapColorScaleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (.build builder))


(defn cfn-analysis-geospatial-heatmap-color-scale-property-builder
  "Creates a  `CfnAnalysis$GeospatialHeatmapColorScaleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-geospatial-heatmap-color-scale-property-builder (new CfnAnalysis$GeospatialHeatmapColorScaleProperty$Builder) id config))


(defn build-cfn-analysis-geospatial-heatmap-configuration-property-builder
  "The build-cfn-analysis-geospatial-heatmap-configuration-property-builder function updates a CfnAnalysis$GeospatialHeatmapConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GeospatialHeatmapConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatmapColor` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GeospatialHeatmapColorScaleProperty | [[cdk.support/lookup-entry]] | `:heatmap-color` |
"
  [^CfnAnalysis$GeospatialHeatmapConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :heatmap-color)]
    (. builder heatmapColor data))
  (.build builder))


(defn cfn-analysis-geospatial-heatmap-configuration-property-builder
  "Creates a  `CfnAnalysis$GeospatialHeatmapConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-geospatial-heatmap-configuration-property-builder (new CfnAnalysis$GeospatialHeatmapConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-geospatial-heatmap-data-color-property-builder
  "The build-cfn-analysis-geospatial-heatmap-data-color-property-builder function updates a CfnAnalysis$GeospatialHeatmapDataColorProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GeospatialHeatmapDataColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
"
  [^CfnAnalysis$GeospatialHeatmapDataColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (.build builder))


(defn cfn-analysis-geospatial-heatmap-data-color-property-builder
  "Creates a  `CfnAnalysis$GeospatialHeatmapDataColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-geospatial-heatmap-data-color-property-builder (new CfnAnalysis$GeospatialHeatmapDataColorProperty$Builder) id config))


(defn build-cfn-analysis-geospatial-map-aggregated-field-wells-property-builder
  "The build-cfn-analysis-geospatial-map-aggregated-field-wells-property-builder function updates a CfnAnalysis$GeospatialMapAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GeospatialMapAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `geospatial` | java.util.List | [[cdk.support/lookup-entry]] | `:geospatial` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$GeospatialMapAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :geospatial)]
    (. builder geospatial data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-geospatial-map-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$GeospatialMapAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-geospatial-map-aggregated-field-wells-property-builder (new CfnAnalysis$GeospatialMapAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-geospatial-map-configuration-property-builder
  "The build-cfn-analysis-geospatial-map-configuration-property-builder function updates a CfnAnalysis$GeospatialMapConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GeospatialMapConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `mapStyleOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GeospatialMapStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:map-style-options` |
| `pointStyleOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GeospatialPointStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:point-style-options` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `windowOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GeospatialWindowOptionsProperty | [[cdk.support/lookup-entry]] | `:window-options` |
"
  [^CfnAnalysis$GeospatialMapConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :map-style-options)]
    (. builder mapStyleOptions data))
  (when-let [data (lookup-entry config id :point-style-options)]
    (. builder pointStyleOptions data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (when-let [data (lookup-entry config id :window-options)]
    (. builder windowOptions data))
  (.build builder))


(defn cfn-analysis-geospatial-map-configuration-property-builder
  "Creates a  `CfnAnalysis$GeospatialMapConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-geospatial-map-configuration-property-builder (new CfnAnalysis$GeospatialMapConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-geospatial-map-field-wells-property-builder
  "The build-cfn-analysis-geospatial-map-field-wells-property-builder function updates a CfnAnalysis$GeospatialMapFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GeospatialMapFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `geospatialMapAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GeospatialMapAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:geospatial-map-aggregated-field-wells` |
"
  [^CfnAnalysis$GeospatialMapFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :geospatial-map-aggregated-field-wells)]
    (. builder geospatialMapAggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-geospatial-map-field-wells-property-builder
  "Creates a  `CfnAnalysis$GeospatialMapFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-geospatial-map-field-wells-property-builder (new CfnAnalysis$GeospatialMapFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-geospatial-map-style-options-property-builder
  "The build-cfn-analysis-geospatial-map-style-options-property-builder function updates a CfnAnalysis$GeospatialMapStyleOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GeospatialMapStyleOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `baseMapStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:base-map-style` |
"
  [^CfnAnalysis$GeospatialMapStyleOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :base-map-style)]
    (. builder baseMapStyle data))
  (.build builder))


(defn cfn-analysis-geospatial-map-style-options-property-builder
  "Creates a  `CfnAnalysis$GeospatialMapStyleOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-geospatial-map-style-options-property-builder (new CfnAnalysis$GeospatialMapStyleOptionsProperty$Builder) id config))


(defn build-cfn-analysis-geospatial-map-visual-property-builder
  "The build-cfn-analysis-geospatial-map-visual-property-builder function updates a CfnAnalysis$GeospatialMapVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GeospatialMapVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$GeospatialMapVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-geospatial-map-visual-property-builder
  "Creates a  `CfnAnalysis$GeospatialMapVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-geospatial-map-visual-property-builder (new CfnAnalysis$GeospatialMapVisualProperty$Builder) id config))


(defn build-cfn-analysis-geospatial-point-style-options-property-builder
  "The build-cfn-analysis-geospatial-point-style-options-property-builder function updates a CfnAnalysis$GeospatialPointStyleOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GeospatialPointStyleOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `clusterMarkerConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cluster-marker-configuration` |
| `heatmapConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heatmap-configuration` |
| `selectedPointStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-point-style` |
"
  [^CfnAnalysis$GeospatialPointStyleOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cluster-marker-configuration)]
    (. builder clusterMarkerConfiguration data))
  (when-let [data (lookup-entry config id :heatmap-configuration)]
    (. builder heatmapConfiguration data))
  (when-let [data (lookup-entry config id :selected-point-style)]
    (. builder selectedPointStyle data))
  (.build builder))


(defn cfn-analysis-geospatial-point-style-options-property-builder
  "Creates a  `CfnAnalysis$GeospatialPointStyleOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-geospatial-point-style-options-property-builder (new CfnAnalysis$GeospatialPointStyleOptionsProperty$Builder) id config))


(defn build-cfn-analysis-geospatial-window-options-property-builder
  "The build-cfn-analysis-geospatial-window-options-property-builder function updates a CfnAnalysis$GeospatialWindowOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GeospatialWindowOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bounds` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bounds` |
| `mapZoomMode` | java.lang.String | [[cdk.support/lookup-entry]] | `:map-zoom-mode` |
"
  [^CfnAnalysis$GeospatialWindowOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bounds)]
    (. builder bounds data))
  (when-let [data (lookup-entry config id :map-zoom-mode)]
    (. builder mapZoomMode data))
  (.build builder))


(defn cfn-analysis-geospatial-window-options-property-builder
  "Creates a  `CfnAnalysis$GeospatialWindowOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-geospatial-window-options-property-builder (new CfnAnalysis$GeospatialWindowOptionsProperty$Builder) id config))


(defn build-cfn-analysis-global-table-border-options-property-builder
  "The build-cfn-analysis-global-table-border-options-property-builder function updates a CfnAnalysis$GlobalTableBorderOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GlobalTableBorderOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sideSpecificBorder` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableSideBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:side-specific-border` |
| `uniformBorder` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:uniform-border` |
"
  [^CfnAnalysis$GlobalTableBorderOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :side-specific-border)]
    (. builder sideSpecificBorder data))
  (when-let [data (lookup-entry config id :uniform-border)]
    (. builder uniformBorder data))
  (.build builder))


(defn cfn-analysis-global-table-border-options-property-builder
  "Creates a  `CfnAnalysis$GlobalTableBorderOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-global-table-border-options-property-builder (new CfnAnalysis$GlobalTableBorderOptionsProperty$Builder) id config))


(defn build-cfn-analysis-gradient-color-property-builder
  "The build-cfn-analysis-gradient-color-property-builder function updates a CfnAnalysis$GradientColorProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GradientColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `stops` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:stops` |
"
  [^CfnAnalysis$GradientColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :stops)]
    (. builder stops data))
  (.build builder))


(defn cfn-analysis-gradient-color-property-builder
  "Creates a  `CfnAnalysis$GradientColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-gradient-color-property-builder (new CfnAnalysis$GradientColorProperty$Builder) id config))


(defn build-cfn-analysis-gradient-stop-property-builder
  "The build-cfn-analysis-gradient-stop-property-builder function updates a CfnAnalysis$GradientStopProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GradientStopProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `dataValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:data-value` |
| `gradientOffset` | java.lang.Number | [[cdk.support/lookup-entry]] | `:gradient-offset` |
"
  [^CfnAnalysis$GradientStopProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :data-value)]
    (. builder dataValue data))
  (when-let [data (lookup-entry config id :gradient-offset)]
    (. builder gradientOffset data))
  (.build builder))


(defn cfn-analysis-gradient-stop-property-builder
  "Creates a  `CfnAnalysis$GradientStopProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-gradient-stop-property-builder (new CfnAnalysis$GradientStopProperty$Builder) id config))


(defn build-cfn-analysis-grid-layout-canvas-size-options-property-builder
  "The build-cfn-analysis-grid-layout-canvas-size-options-property-builder function updates a CfnAnalysis$GridLayoutCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GridLayoutCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `screenCanvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GridLayoutScreenCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:screen-canvas-size-options` |
"
  [^CfnAnalysis$GridLayoutCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :screen-canvas-size-options)]
    (. builder screenCanvasSizeOptions data))
  (.build builder))


(defn cfn-analysis-grid-layout-canvas-size-options-property-builder
  "Creates a  `CfnAnalysis$GridLayoutCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-grid-layout-canvas-size-options-property-builder (new CfnAnalysis$GridLayoutCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-analysis-grid-layout-configuration-property-builder
  "The build-cfn-analysis-grid-layout-configuration-property-builder function updates a CfnAnalysis$GridLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GridLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `elements` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:elements` |
"
  [^CfnAnalysis$GridLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (when-let [data (lookup-entry config id :elements)]
    (. builder elements data))
  (.build builder))


(defn cfn-analysis-grid-layout-configuration-property-builder
  "Creates a  `CfnAnalysis$GridLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-grid-layout-configuration-property-builder (new CfnAnalysis$GridLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-grid-layout-element-property-builder
  "The build-cfn-analysis-grid-layout-element-property-builder function updates a CfnAnalysis$GridLayoutElementProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GridLayoutElementProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnIndex` | java.lang.Number | [[cdk.support/lookup-entry]] | `:column-index` |
| `columnSpan` | java.lang.Number | [[cdk.support/lookup-entry]] | `:column-span` |
| `elementId` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-id` |
| `elementType` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-type` |
| `rowIndex` | java.lang.Number | [[cdk.support/lookup-entry]] | `:row-index` |
| `rowSpan` | java.lang.Number | [[cdk.support/lookup-entry]] | `:row-span` |
"
  [^CfnAnalysis$GridLayoutElementProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-index)]
    (. builder columnIndex data))
  (when-let [data (lookup-entry config id :column-span)]
    (. builder columnSpan data))
  (when-let [data (lookup-entry config id :element-id)]
    (. builder elementId data))
  (when-let [data (lookup-entry config id :element-type)]
    (. builder elementType data))
  (when-let [data (lookup-entry config id :row-index)]
    (. builder rowIndex data))
  (when-let [data (lookup-entry config id :row-span)]
    (. builder rowSpan data))
  (.build builder))


(defn cfn-analysis-grid-layout-element-property-builder
  "Creates a  `CfnAnalysis$GridLayoutElementProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-grid-layout-element-property-builder (new CfnAnalysis$GridLayoutElementProperty$Builder) id config))


(defn build-cfn-analysis-grid-layout-screen-canvas-size-options-property-builder
  "The build-cfn-analysis-grid-layout-screen-canvas-size-options-property-builder function updates a CfnAnalysis$GridLayoutScreenCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GridLayoutScreenCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `optimizedViewPortWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:optimized-view-port-width` |
| `resizeOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:resize-option` |
"
  [^CfnAnalysis$GridLayoutScreenCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :optimized-view-port-width)]
    (. builder optimizedViewPortWidth data))
  (when-let [data (lookup-entry config id :resize-option)]
    (. builder resizeOption data))
  (.build builder))


(defn cfn-analysis-grid-layout-screen-canvas-size-options-property-builder
  "Creates a  `CfnAnalysis$GridLayoutScreenCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-grid-layout-screen-canvas-size-options-property-builder (new CfnAnalysis$GridLayoutScreenCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-analysis-growth-rate-computation-property-builder
  "The build-cfn-analysis-growth-rate-computation-property-builder function updates a CfnAnalysis$GrowthRateComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$GrowthRateComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:period-size` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$GrowthRateComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :period-size)]
    (. builder periodSize data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-growth-rate-computation-property-builder
  "Creates a  `CfnAnalysis$GrowthRateComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-growth-rate-computation-property-builder (new CfnAnalysis$GrowthRateComputationProperty$Builder) id config))


(defn build-cfn-analysis-header-footer-section-configuration-property-builder
  "The build-cfn-analysis-header-footer-section-configuration-property-builder function updates a CfnAnalysis$HeaderFooterSectionConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$HeaderFooterSectionConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `layout` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SectionLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:layout` |
| `sectionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:section-id` |
| `style` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style` |
"
  [^CfnAnalysis$HeaderFooterSectionConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :layout)]
    (. builder layout data))
  (when-let [data (lookup-entry config id :section-id)]
    (. builder sectionId data))
  (when-let [data (lookup-entry config id :style)]
    (. builder style data))
  (.build builder))


(defn cfn-analysis-header-footer-section-configuration-property-builder
  "Creates a  `CfnAnalysis$HeaderFooterSectionConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-header-footer-section-configuration-property-builder (new CfnAnalysis$HeaderFooterSectionConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-heat-map-aggregated-field-wells-property-builder
  "The build-cfn-analysis-heat-map-aggregated-field-wells-property-builder function updates a CfnAnalysis$HeatMapAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$HeatMapAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `rows` | java.util.List | [[cdk.support/lookup-entry]] | `:rows` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$HeatMapAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (when-let [data (lookup-entry config id :rows)]
    (. builder rows data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-heat-map-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$HeatMapAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-heat-map-aggregated-field-wells-property-builder (new CfnAnalysis$HeatMapAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-heat-map-configuration-property-builder
  "The build-cfn-analysis-heat-map-configuration-property-builder function updates a CfnAnalysis$HeatMapConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$HeatMapConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorScale` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-scale` |
| `columnLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-label-options` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `rowLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-label-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
"
  [^CfnAnalysis$HeatMapConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color-scale)]
    (. builder colorScale data))
  (when-let [data (lookup-entry config id :column-label-options)]
    (. builder columnLabelOptions data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :row-label-options)]
    (. builder rowLabelOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (.build builder))


(defn cfn-analysis-heat-map-configuration-property-builder
  "Creates a  `CfnAnalysis$HeatMapConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-heat-map-configuration-property-builder (new CfnAnalysis$HeatMapConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-heat-map-field-wells-property-builder
  "The build-cfn-analysis-heat-map-field-wells-property-builder function updates a CfnAnalysis$HeatMapFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$HeatMapFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatMapAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$HeatMapAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:heat-map-aggregated-field-wells` |
"
  [^CfnAnalysis$HeatMapFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :heat-map-aggregated-field-wells)]
    (. builder heatMapAggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-heat-map-field-wells-property-builder
  "Creates a  `CfnAnalysis$HeatMapFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-heat-map-field-wells-property-builder (new CfnAnalysis$HeatMapFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-heat-map-sort-configuration-property-builder
  "The build-cfn-analysis-heat-map-sort-configuration-property-builder function updates a CfnAnalysis$HeatMapSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$HeatMapSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatMapColumnItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:heat-map-column-items-limit-configuration` |
| `heatMapColumnSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heat-map-column-sort` |
| `heatMapRowItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:heat-map-row-items-limit-configuration` |
| `heatMapRowSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heat-map-row-sort` |
"
  [^CfnAnalysis$HeatMapSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :heat-map-column-items-limit-configuration)]
    (. builder heatMapColumnItemsLimitConfiguration data))
  (when-let [data (lookup-entry config id :heat-map-column-sort)]
    (. builder heatMapColumnSort data))
  (when-let [data (lookup-entry config id :heat-map-row-items-limit-configuration)]
    (. builder heatMapRowItemsLimitConfiguration data))
  (when-let [data (lookup-entry config id :heat-map-row-sort)]
    (. builder heatMapRowSort data))
  (.build builder))


(defn cfn-analysis-heat-map-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$HeatMapSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-heat-map-sort-configuration-property-builder (new CfnAnalysis$HeatMapSortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-heat-map-visual-property-builder
  "The build-cfn-analysis-heat-map-visual-property-builder function updates a CfnAnalysis$HeatMapVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$HeatMapVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$HeatMapVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-heat-map-visual-property-builder
  "Creates a  `CfnAnalysis$HeatMapVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-heat-map-visual-property-builder (new CfnAnalysis$HeatMapVisualProperty$Builder) id config))


(defn build-cfn-analysis-histogram-aggregated-field-wells-property-builder
  "The build-cfn-analysis-histogram-aggregated-field-wells-property-builder function updates a CfnAnalysis$HistogramAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$HistogramAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$HistogramAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-histogram-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$HistogramAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-histogram-aggregated-field-wells-property-builder (new CfnAnalysis$HistogramAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-histogram-bin-options-property-builder
  "The build-cfn-analysis-histogram-bin-options-property-builder function updates a CfnAnalysis$HistogramBinOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$HistogramBinOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binCount` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bin-count` |
| `binWidth` | software.amazon.awscdk.services.quicksight.CfnAnalysis$BinWidthOptionsProperty | [[cdk.support/lookup-entry]] | `:bin-width` |
| `selectedBinType` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-bin-type` |
| `startValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:start-value` |
"
  [^CfnAnalysis$HistogramBinOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bin-count)]
    (. builder binCount data))
  (when-let [data (lookup-entry config id :bin-width)]
    (. builder binWidth data))
  (when-let [data (lookup-entry config id :selected-bin-type)]
    (. builder selectedBinType data))
  (when-let [data (lookup-entry config id :start-value)]
    (. builder startValue data))
  (.build builder))


(defn cfn-analysis-histogram-bin-options-property-builder
  "Creates a  `CfnAnalysis$HistogramBinOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-histogram-bin-options-property-builder (new CfnAnalysis$HistogramBinOptionsProperty$Builder) id config))


(defn build-cfn-analysis-histogram-configuration-property-builder
  "The build-cfn-analysis-histogram-configuration-property-builder function updates a CfnAnalysis$HistogramConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$HistogramConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$HistogramBinOptionsProperty | [[cdk.support/lookup-entry]] | `:bin-options` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |
| `yAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:y-axis-display-options` |
"
  [^CfnAnalysis$HistogramConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bin-options)]
    (. builder binOptions data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (when-let [data (lookup-entry config id :x-axis-display-options)]
    (. builder xAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :x-axis-label-options)]
    (. builder xAxisLabelOptions data))
  (when-let [data (lookup-entry config id :y-axis-display-options)]
    (. builder yAxisDisplayOptions data))
  (.build builder))


(defn cfn-analysis-histogram-configuration-property-builder
  "Creates a  `CfnAnalysis$HistogramConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-histogram-configuration-property-builder (new CfnAnalysis$HistogramConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-histogram-field-wells-property-builder
  "The build-cfn-analysis-histogram-field-wells-property-builder function updates a CfnAnalysis$HistogramFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$HistogramFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `histogramAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$HistogramAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:histogram-aggregated-field-wells` |
"
  [^CfnAnalysis$HistogramFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :histogram-aggregated-field-wells)]
    (. builder histogramAggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-histogram-field-wells-property-builder
  "Creates a  `CfnAnalysis$HistogramFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-histogram-field-wells-property-builder (new CfnAnalysis$HistogramFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-histogram-visual-property-builder
  "The build-cfn-analysis-histogram-visual-property-builder function updates a CfnAnalysis$HistogramVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$HistogramVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$HistogramVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-histogram-visual-property-builder
  "Creates a  `CfnAnalysis$HistogramVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-histogram-visual-property-builder (new CfnAnalysis$HistogramVisualProperty$Builder) id config))


(defn build-cfn-analysis-insight-configuration-property-builder
  "The build-cfn-analysis-insight-configuration-property-builder function updates a CfnAnalysis$InsightConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$InsightConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computations` | java.util.List | [[cdk.support/lookup-entry]] | `:computations` |
| `customNarrative` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-narrative` |
"
  [^CfnAnalysis$InsightConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computations)]
    (. builder computations data))
  (when-let [data (lookup-entry config id :custom-narrative)]
    (. builder customNarrative data))
  (.build builder))


(defn cfn-analysis-insight-configuration-property-builder
  "Creates a  `CfnAnalysis$InsightConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-insight-configuration-property-builder (new CfnAnalysis$InsightConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-insight-visual-property-builder
  "The build-cfn-analysis-insight-visual-property-builder function updates a CfnAnalysis$InsightVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$InsightVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `insightConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:insight-configuration` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$InsightVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :insight-configuration)]
    (. builder insightConfiguration data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-insight-visual-property-builder
  "Creates a  `CfnAnalysis$InsightVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-insight-visual-property-builder (new CfnAnalysis$InsightVisualProperty$Builder) id config))


(defn build-cfn-analysis-integer-default-values-property-builder
  "The build-cfn-analysis-integer-default-values-property-builder function updates a CfnAnalysis$IntegerDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$IntegerDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DynamicDefaultValueProperty | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |
"
  [^CfnAnalysis$IntegerDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :dynamic-value)]
    (. builder dynamicValue data))
  (when-let [data (lookup-entry config id :static-values)]
    (. builder staticValues data))
  (.build builder))


(defn cfn-analysis-integer-default-values-property-builder
  "Creates a  `CfnAnalysis$IntegerDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-integer-default-values-property-builder (new CfnAnalysis$IntegerDefaultValuesProperty$Builder) id config))


(defn build-cfn-analysis-integer-parameter-declaration-property-builder
  "The build-cfn-analysis-integer-parameter-declaration-property-builder function updates a CfnAnalysis$IntegerParameterDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$IntegerParameterDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-when-unset` |
"
  [^CfnAnalysis$IntegerParameterDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-values)]
    (. builder defaultValues data))
  (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
    (. builder mappedDataSetParameters data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :parameter-value-type)]
    (. builder parameterValueType data))
  (when-let [data (lookup-entry config id :value-when-unset)]
    (. builder valueWhenUnset data))
  (.build builder))


(defn cfn-analysis-integer-parameter-declaration-property-builder
  "Creates a  `CfnAnalysis$IntegerParameterDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-integer-parameter-declaration-property-builder (new CfnAnalysis$IntegerParameterDeclarationProperty$Builder) id config))


(defn build-cfn-analysis-integer-parameter-property-builder
  "The build-cfn-analysis-integer-parameter-property-builder function updates a CfnAnalysis$IntegerParameterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$IntegerParameterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$IntegerParameterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-integer-parameter-property-builder
  "Creates a  `CfnAnalysis$IntegerParameterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-integer-parameter-property-builder (new CfnAnalysis$IntegerParameterProperty$Builder) id config))


(defn build-cfn-analysis-integer-value-when-unset-configuration-property-builder
  "The build-cfn-analysis-integer-value-when-unset-configuration-property-builder function updates a CfnAnalysis$IntegerValueWhenUnsetConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$IntegerValueWhenUnsetConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |
"
  [^CfnAnalysis$IntegerValueWhenUnsetConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-value)]
    (. builder customValue data))
  (when-let [data (lookup-entry config id :value-when-unset-option)]
    (. builder valueWhenUnsetOption data))
  (.build builder))


(defn cfn-analysis-integer-value-when-unset-configuration-property-builder
  "Creates a  `CfnAnalysis$IntegerValueWhenUnsetConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-integer-value-when-unset-configuration-property-builder (new CfnAnalysis$IntegerValueWhenUnsetConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-items-limit-configuration-property-builder
  "The build-cfn-analysis-items-limit-configuration-property-builder function updates a CfnAnalysis$ItemsLimitConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ItemsLimitConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `itemsLimit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:items-limit` |
| `otherCategories` | java.lang.String | [[cdk.support/lookup-entry]] | `:other-categories` |
"
  [^CfnAnalysis$ItemsLimitConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :items-limit)]
    (. builder itemsLimit data))
  (when-let [data (lookup-entry config id :other-categories)]
    (. builder otherCategories data))
  (.build builder))


(defn cfn-analysis-items-limit-configuration-property-builder
  "Creates a  `CfnAnalysis$ItemsLimitConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-items-limit-configuration-property-builder (new CfnAnalysis$ItemsLimitConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-kpi-actual-value-conditional-formatting-property-builder
  "The build-cfn-analysis-kpi-actual-value-conditional-formatting-property-builder function updates a CfnAnalysis$KPIActualValueConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$KPIActualValueConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnAnalysis$KPIActualValueConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-analysis-kpi-actual-value-conditional-formatting-property-builder
  "Creates a  `CfnAnalysis$KPIActualValueConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-kpi-actual-value-conditional-formatting-property-builder (new CfnAnalysis$KPIActualValueConditionalFormattingProperty$Builder) id config))


(defn build-cfn-analysis-kpi-comparison-value-conditional-formatting-property-builder
  "The build-cfn-analysis-kpi-comparison-value-conditional-formatting-property-builder function updates a CfnAnalysis$KPIComparisonValueConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$KPIComparisonValueConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingIconProperty | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnAnalysis$KPIComparisonValueConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-analysis-kpi-comparison-value-conditional-formatting-property-builder
  "Creates a  `CfnAnalysis$KPIComparisonValueConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-kpi-comparison-value-conditional-formatting-property-builder (new CfnAnalysis$KPIComparisonValueConditionalFormattingProperty$Builder) id config))


(defn build-cfn-analysis-kpi-conditional-formatting-option-property-builder
  "The build-cfn-analysis-kpi-conditional-formatting-option-property-builder function updates a CfnAnalysis$KPIConditionalFormattingOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$KPIConditionalFormattingOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actualValue` | software.amazon.awscdk.services.quicksight.CfnAnalysis$KPIActualValueConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:actual-value` |
| `comparisonValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:comparison-value` |
| `primaryValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-value` |
| `progressBar` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:progress-bar` |
"
  [^CfnAnalysis$KPIConditionalFormattingOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actual-value)]
    (. builder actualValue data))
  (when-let [data (lookup-entry config id :comparison-value)]
    (. builder comparisonValue data))
  (when-let [data (lookup-entry config id :primary-value)]
    (. builder primaryValue data))
  (when-let [data (lookup-entry config id :progress-bar)]
    (. builder progressBar data))
  (.build builder))


(defn cfn-analysis-kpi-conditional-formatting-option-property-builder
  "Creates a  `CfnAnalysis$KPIConditionalFormattingOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-kpi-conditional-formatting-option-property-builder (new CfnAnalysis$KPIConditionalFormattingOptionProperty$Builder) id config))


(defn build-cfn-analysis-kpi-conditional-formatting-property-builder
  "The build-cfn-analysis-kpi-conditional-formatting-property-builder function updates a CfnAnalysis$KPIConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$KPIConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |
"
  [^CfnAnalysis$KPIConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :conditional-formatting-options)]
    (. builder conditionalFormattingOptions data))
  (.build builder))


(defn cfn-analysis-kpi-conditional-formatting-property-builder
  "Creates a  `CfnAnalysis$KPIConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-kpi-conditional-formatting-property-builder (new CfnAnalysis$KPIConditionalFormattingProperty$Builder) id config))


(defn build-cfn-analysis-kpi-configuration-property-builder
  "The build-cfn-analysis-kpi-configuration-property-builder function updates a CfnAnalysis$KPIConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$KPIConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$KPIFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `kpiOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:kpi-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
"
  [^CfnAnalysis$KPIConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :kpi-options)]
    (. builder kpiOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (.build builder))


(defn cfn-analysis-kpi-configuration-property-builder
  "Creates a  `CfnAnalysis$KPIConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-kpi-configuration-property-builder (new CfnAnalysis$KPIConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-kpi-field-wells-property-builder
  "The build-cfn-analysis-kpi-field-wells-property-builder function updates a CfnAnalysis$KPIFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$KPIFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target-values` |
| `trendGroups` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:trend-groups` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$KPIFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :target-values)]
    (. builder targetValues data))
  (when-let [data (lookup-entry config id :trend-groups)]
    (. builder trendGroups data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-kpi-field-wells-property-builder
  "Creates a  `CfnAnalysis$KPIFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-kpi-field-wells-property-builder (new CfnAnalysis$KPIFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-kpi-options-property-builder
  "The build-cfn-analysis-kpi-options-property-builder function updates a CfnAnalysis$KPIOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$KPIOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comparison` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ComparisonConfigurationProperty | [[cdk.support/lookup-entry]] | `:comparison` |
| `primaryValueDisplayType` | java.lang.String | [[cdk.support/lookup-entry]] | `:primary-value-display-type` |
| `primaryValueFontConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:primary-value-font-configuration` |
| `progressBar` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:progress-bar` |
| `secondaryValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-value` |
| `secondaryValueFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-value-font-configuration` |
| `sparkline` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sparkline` |
| `trendArrows` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TrendArrowOptionsProperty | [[cdk.support/lookup-entry]] | `:trend-arrows` |
| `visualLayoutOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$KPIVisualLayoutOptionsProperty | [[cdk.support/lookup-entry]] | `:visual-layout-options` |
"
  [^CfnAnalysis$KPIOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :comparison)]
    (. builder comparison data))
  (when-let [data (lookup-entry config id :primary-value-display-type)]
    (. builder primaryValueDisplayType data))
  (when-let [data (lookup-entry config id :primary-value-font-configuration)]
    (. builder primaryValueFontConfiguration data))
  (when-let [data (lookup-entry config id :progress-bar)]
    (. builder progressBar data))
  (when-let [data (lookup-entry config id :secondary-value)]
    (. builder secondaryValue data))
  (when-let [data (lookup-entry config id :secondary-value-font-configuration)]
    (. builder secondaryValueFontConfiguration data))
  (when-let [data (lookup-entry config id :sparkline)]
    (. builder sparkline data))
  (when-let [data (lookup-entry config id :trend-arrows)]
    (. builder trendArrows data))
  (when-let [data (lookup-entry config id :visual-layout-options)]
    (. builder visualLayoutOptions data))
  (.build builder))


(defn cfn-analysis-kpi-options-property-builder
  "Creates a  `CfnAnalysis$KPIOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-kpi-options-property-builder (new CfnAnalysis$KPIOptionsProperty$Builder) id config))


(defn build-cfn-analysis-kpi-primary-value-conditional-formatting-property-builder
  "The build-cfn-analysis-kpi-primary-value-conditional-formatting-property-builder function updates a CfnAnalysis$KPIPrimaryValueConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$KPIPrimaryValueConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingIconProperty | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnAnalysis$KPIPrimaryValueConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-analysis-kpi-primary-value-conditional-formatting-property-builder
  "Creates a  `CfnAnalysis$KPIPrimaryValueConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-kpi-primary-value-conditional-formatting-property-builder (new CfnAnalysis$KPIPrimaryValueConditionalFormattingProperty$Builder) id config))


(defn build-cfn-analysis-kpi-progress-bar-conditional-formatting-property-builder
  "The build-cfn-analysis-kpi-progress-bar-conditional-formatting-property-builder function updates a CfnAnalysis$KPIProgressBarConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$KPIProgressBarConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `foregroundColor` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:foreground-color` |
"
  [^CfnAnalysis$KPIProgressBarConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :foreground-color)]
    (. builder foregroundColor data))
  (.build builder))


(defn cfn-analysis-kpi-progress-bar-conditional-formatting-property-builder
  "Creates a  `CfnAnalysis$KPIProgressBarConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-kpi-progress-bar-conditional-formatting-property-builder (new CfnAnalysis$KPIProgressBarConditionalFormattingProperty$Builder) id config))


(defn build-cfn-analysis-kpi-sort-configuration-property-builder
  "The build-cfn-analysis-kpi-sort-configuration-property-builder function updates a CfnAnalysis$KPISortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$KPISortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `trendGroupSort` | java.util.List | [[cdk.support/lookup-entry]] | `:trend-group-sort` |
"
  [^CfnAnalysis$KPISortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :trend-group-sort)]
    (. builder trendGroupSort data))
  (.build builder))


(defn cfn-analysis-kpi-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$KPISortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-kpi-sort-configuration-property-builder (new CfnAnalysis$KPISortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-kpi-sparkline-options-property-builder
  "The build-cfn-analysis-kpi-sparkline-options-property-builder function updates a CfnAnalysis$KPISparklineOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$KPISparklineOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `tooltipVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-visibility` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$KPISparklineOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :tooltip-visibility)]
    (. builder tooltipVisibility data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-kpi-sparkline-options-property-builder
  "Creates a  `CfnAnalysis$KPISparklineOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-kpi-sparkline-options-property-builder (new CfnAnalysis$KPISparklineOptionsProperty$Builder) id config))


(defn build-cfn-analysis-kpi-visual-layout-options-property-builder
  "The build-cfn-analysis-kpi-visual-layout-options-property-builder function updates a CfnAnalysis$KPIVisualLayoutOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$KPIVisualLayoutOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `standardLayout` | software.amazon.awscdk.services.quicksight.CfnAnalysis$KPIVisualStandardLayoutProperty | [[cdk.support/lookup-entry]] | `:standard-layout` |
"
  [^CfnAnalysis$KPIVisualLayoutOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :standard-layout)]
    (. builder standardLayout data))
  (.build builder))


(defn cfn-analysis-kpi-visual-layout-options-property-builder
  "Creates a  `CfnAnalysis$KPIVisualLayoutOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-kpi-visual-layout-options-property-builder (new CfnAnalysis$KPIVisualLayoutOptionsProperty$Builder) id config))


(defn build-cfn-analysis-kpi-visual-property-builder
  "The build-cfn-analysis-kpi-visual-property-builder function updates a CfnAnalysis$KPIVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$KPIVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `conditionalFormatting` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$KPIVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :conditional-formatting)]
    (. builder conditionalFormatting data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-kpi-visual-property-builder
  "Creates a  `CfnAnalysis$KPIVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-kpi-visual-property-builder (new CfnAnalysis$KPIVisualProperty$Builder) id config))


(defn build-cfn-analysis-kpi-visual-standard-layout-property-builder
  "The build-cfn-analysis-kpi-visual-standard-layout-property-builder function updates a CfnAnalysis$KPIVisualStandardLayoutProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$KPIVisualStandardLayoutProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnAnalysis$KPIVisualStandardLayoutProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-analysis-kpi-visual-standard-layout-property-builder
  "Creates a  `CfnAnalysis$KPIVisualStandardLayoutProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-kpi-visual-standard-layout-property-builder (new CfnAnalysis$KPIVisualStandardLayoutProperty$Builder) id config))


(defn build-cfn-analysis-label-options-property-builder
  "The build-cfn-analysis-label-options-property-builder function updates a CfnAnalysis$LabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$LabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-label-options-property-builder
  "Creates a  `CfnAnalysis$LabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-label-options-property-builder (new CfnAnalysis$LabelOptionsProperty$Builder) id config))


(defn build-cfn-analysis-layout-configuration-property-builder
  "The build-cfn-analysis-layout-configuration-property-builder function updates a CfnAnalysis$LayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeFormLayout` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FreeFormLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:free-form-layout` |
| `gridLayout` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GridLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:grid-layout` |
| `sectionBasedLayout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:section-based-layout` |
"
  [^CfnAnalysis$LayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :free-form-layout)]
    (. builder freeFormLayout data))
  (when-let [data (lookup-entry config id :grid-layout)]
    (. builder gridLayout data))
  (when-let [data (lookup-entry config id :section-based-layout)]
    (. builder sectionBasedLayout data))
  (.build builder))


(defn cfn-analysis-layout-configuration-property-builder
  "Creates a  `CfnAnalysis$LayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-layout-configuration-property-builder (new CfnAnalysis$LayoutConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-layout-property-builder
  "The build-cfn-analysis-layout-property-builder function updates a CfnAnalysis$LayoutProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LayoutProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configuration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:configuration` |
"
  [^CfnAnalysis$LayoutProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :configuration)]
    (. builder configuration data))
  (.build builder))


(defn cfn-analysis-layout-property-builder
  "Creates a  `CfnAnalysis$LayoutProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-layout-property-builder (new CfnAnalysis$LayoutProperty$Builder) id config))


(defn build-cfn-analysis-legend-options-property-builder
  "The build-cfn-analysis-legend-options-property-builder function updates a CfnAnalysis$LegendOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LegendOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |
"
  [^CfnAnalysis$LegendOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :height)]
    (. builder height data))
  (when-let [data (lookup-entry config id :position)]
    (. builder position data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (when-let [data (lookup-entry config id :width)]
    (. builder width data))
  (.build builder))


(defn cfn-analysis-legend-options-property-builder
  "Creates a  `CfnAnalysis$LegendOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-legend-options-property-builder (new CfnAnalysis$LegendOptionsProperty$Builder) id config))


(defn build-cfn-analysis-line-chart-aggregated-field-wells-property-builder
  "The build-cfn-analysis-line-chart-aggregated-field-wells-property-builder function updates a CfnAnalysis$LineChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LineChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `smallMultiples` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$LineChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :small-multiples)]
    (. builder smallMultiples data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-line-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$LineChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-line-chart-aggregated-field-wells-property-builder (new CfnAnalysis$LineChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-line-chart-configuration-property-builder
  "The build-cfn-analysis-line-chart-configuration-property-builder function updates a CfnAnalysis$LineChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LineChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contributionAnalysisDefaults` | java.util.List | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `defaultSeriesSettings` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LineChartDefaultSeriesSettingsProperty | [[cdk.support/lookup-entry]] | `:default-series-settings` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `forecastConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:forecast-configurations` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LineSeriesAxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `secondaryYAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LineSeriesAxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:secondary-y-axis-display-options` |
| `secondaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:secondary-y-axis-label-options` |
| `series` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:series` |
| `smallMultiplesOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |
"
  [^CfnAnalysis$LineChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
    (. builder contributionAnalysisDefaults data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :default-series-settings)]
    (. builder defaultSeriesSettings data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :forecast-configurations)]
    (. builder forecastConfigurations data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
    (. builder primaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
    (. builder primaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :reference-lines)]
    (. builder referenceLines data))
  (when-let [data (lookup-entry config id :secondary-y-axis-display-options)]
    (. builder secondaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :secondary-y-axis-label-options)]
    (. builder secondaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :series)]
    (. builder series data))
  (when-let [data (lookup-entry config id :small-multiples-options)]
    (. builder smallMultiplesOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (when-let [data (lookup-entry config id :x-axis-display-options)]
    (. builder xAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :x-axis-label-options)]
    (. builder xAxisLabelOptions data))
  (.build builder))


(defn cfn-analysis-line-chart-configuration-property-builder
  "Creates a  `CfnAnalysis$LineChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-line-chart-configuration-property-builder (new CfnAnalysis$LineChartConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-line-chart-default-series-settings-property-builder
  "The build-cfn-analysis-line-chart-default-series-settings-property-builder function updates a CfnAnalysis$LineChartDefaultSeriesSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LineChartDefaultSeriesSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `lineStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-style-settings` |
| `markerStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:marker-style-settings` |
"
  [^CfnAnalysis$LineChartDefaultSeriesSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-binding)]
    (. builder axisBinding data))
  (when-let [data (lookup-entry config id :line-style-settings)]
    (. builder lineStyleSettings data))
  (when-let [data (lookup-entry config id :marker-style-settings)]
    (. builder markerStyleSettings data))
  (.build builder))


(defn cfn-analysis-line-chart-default-series-settings-property-builder
  "Creates a  `CfnAnalysis$LineChartDefaultSeriesSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-line-chart-default-series-settings-property-builder (new CfnAnalysis$LineChartDefaultSeriesSettingsProperty$Builder) id config))


(defn build-cfn-analysis-line-chart-field-wells-property-builder
  "The build-cfn-analysis-line-chart-field-wells-property-builder function updates a CfnAnalysis$LineChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LineChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-chart-aggregated-field-wells` |
"
  [^CfnAnalysis$LineChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :line-chart-aggregated-field-wells)]
    (. builder lineChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-line-chart-field-wells-property-builder
  "Creates a  `CfnAnalysis$LineChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-line-chart-field-wells-property-builder (new CfnAnalysis$LineChartFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-line-chart-line-style-settings-property-builder
  "The build-cfn-analysis-line-chart-line-style-settings-property-builder function updates a CfnAnalysis$LineChartLineStyleSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LineChartLineStyleSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineInterpolation` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-interpolation` |
| `lineStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-style` |
| `lineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-visibility` |
| `lineWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-width` |
"
  [^CfnAnalysis$LineChartLineStyleSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :line-interpolation)]
    (. builder lineInterpolation data))
  (when-let [data (lookup-entry config id :line-style)]
    (. builder lineStyle data))
  (when-let [data (lookup-entry config id :line-visibility)]
    (. builder lineVisibility data))
  (when-let [data (lookup-entry config id :line-width)]
    (. builder lineWidth data))
  (.build builder))


(defn cfn-analysis-line-chart-line-style-settings-property-builder
  "Creates a  `CfnAnalysis$LineChartLineStyleSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-line-chart-line-style-settings-property-builder (new CfnAnalysis$LineChartLineStyleSettingsProperty$Builder) id config))


(defn build-cfn-analysis-line-chart-marker-style-settings-property-builder
  "The build-cfn-analysis-line-chart-marker-style-settings-property-builder function updates a CfnAnalysis$LineChartMarkerStyleSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LineChartMarkerStyleSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `markerColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-color` |
| `markerShape` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-shape` |
| `markerSize` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-size` |
| `markerVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-visibility` |
"
  [^CfnAnalysis$LineChartMarkerStyleSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :marker-color)]
    (. builder markerColor data))
  (when-let [data (lookup-entry config id :marker-shape)]
    (. builder markerShape data))
  (when-let [data (lookup-entry config id :marker-size)]
    (. builder markerSize data))
  (when-let [data (lookup-entry config id :marker-visibility)]
    (. builder markerVisibility data))
  (.build builder))


(defn cfn-analysis-line-chart-marker-style-settings-property-builder
  "Creates a  `CfnAnalysis$LineChartMarkerStyleSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-line-chart-marker-style-settings-property-builder (new CfnAnalysis$LineChartMarkerStyleSettingsProperty$Builder) id config))


(defn build-cfn-analysis-line-chart-series-settings-property-builder
  "The build-cfn-analysis-line-chart-series-settings-property-builder function updates a CfnAnalysis$LineChartSeriesSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LineChartSeriesSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-style-settings` |
| `markerStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:marker-style-settings` |
"
  [^CfnAnalysis$LineChartSeriesSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :line-style-settings)]
    (. builder lineStyleSettings data))
  (when-let [data (lookup-entry config id :marker-style-settings)]
    (. builder markerStyleSettings data))
  (.build builder))


(defn cfn-analysis-line-chart-series-settings-property-builder
  "Creates a  `CfnAnalysis$LineChartSeriesSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-line-chart-series-settings-property-builder (new CfnAnalysis$LineChartSeriesSettingsProperty$Builder) id config))


(defn build-cfn-analysis-line-chart-sort-configuration-property-builder
  "The build-cfn-analysis-line-chart-sort-configuration-property-builder function updates a CfnAnalysis$LineChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LineChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit-configuration` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:color-items-limit-configuration` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |
"
  [^CfnAnalysis$LineChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit-configuration)]
    (. builder categoryItemsLimitConfiguration data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :color-items-limit-configuration)]
    (. builder colorItemsLimitConfiguration data))
  (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
    (. builder smallMultiplesLimitConfiguration data))
  (when-let [data (lookup-entry config id :small-multiples-sort)]
    (. builder smallMultiplesSort data))
  (.build builder))


(defn cfn-analysis-line-chart-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$LineChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-line-chart-sort-configuration-property-builder (new CfnAnalysis$LineChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-line-chart-visual-property-builder
  "The build-cfn-analysis-line-chart-visual-property-builder function updates a CfnAnalysis$LineChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LineChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LineChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$LineChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-line-chart-visual-property-builder
  "Creates a  `CfnAnalysis$LineChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-line-chart-visual-property-builder (new CfnAnalysis$LineChartVisualProperty$Builder) id config))


(defn build-cfn-analysis-line-series-axis-display-options-property-builder
  "The build-cfn-analysis-line-series-axis-display-options-property-builder function updates a CfnAnalysis$LineSeriesAxisDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LineSeriesAxisDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:axis-options` |
| `missingDataConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:missing-data-configurations` |
"
  [^CfnAnalysis$LineSeriesAxisDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-options)]
    (. builder axisOptions data))
  (when-let [data (lookup-entry config id :missing-data-configurations)]
    (. builder missingDataConfigurations data))
  (.build builder))


(defn cfn-analysis-line-series-axis-display-options-property-builder
  "Creates a  `CfnAnalysis$LineSeriesAxisDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-line-series-axis-display-options-property-builder (new CfnAnalysis$LineSeriesAxisDisplayOptionsProperty$Builder) id config))


(defn build-cfn-analysis-list-control-display-options-property-builder
  "The build-cfn-analysis-list-control-display-options-property-builder function updates a CfnAnalysis$ListControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ListControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `searchOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ListControlSearchOptionsProperty | [[cdk.support/lookup-entry]] | `:search-options` |
| `selectAllOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ListControlSelectAllOptionsProperty | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `titleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnAnalysis$ListControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :search-options)]
    (. builder searchOptions data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-analysis-list-control-display-options-property-builder
  "Creates a  `CfnAnalysis$ListControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-list-control-display-options-property-builder (new CfnAnalysis$ListControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-analysis-list-control-search-options-property-builder
  "The build-cfn-analysis-list-control-search-options-property-builder function updates a CfnAnalysis$ListControlSearchOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ListControlSearchOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$ListControlSearchOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-list-control-search-options-property-builder
  "Creates a  `CfnAnalysis$ListControlSearchOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-list-control-search-options-property-builder (new CfnAnalysis$ListControlSearchOptionsProperty$Builder) id config))


(defn build-cfn-analysis-list-control-select-all-options-property-builder
  "The build-cfn-analysis-list-control-select-all-options-property-builder function updates a CfnAnalysis$ListControlSelectAllOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ListControlSelectAllOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$ListControlSelectAllOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-list-control-select-all-options-property-builder
  "Creates a  `CfnAnalysis$ListControlSelectAllOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-list-control-select-all-options-property-builder (new CfnAnalysis$ListControlSelectAllOptionsProperty$Builder) id config))


(defn build-cfn-analysis-loading-animation-property-builder
  "The build-cfn-analysis-loading-animation-property-builder function updates a CfnAnalysis$LoadingAnimationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LoadingAnimationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$LoadingAnimationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-loading-animation-property-builder
  "Creates a  `CfnAnalysis$LoadingAnimationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-loading-animation-property-builder (new CfnAnalysis$LoadingAnimationProperty$Builder) id config))


(defn build-cfn-analysis-local-navigation-configuration-property-builder
  "The build-cfn-analysis-local-navigation-configuration-property-builder function updates a CfnAnalysis$LocalNavigationConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LocalNavigationConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetSheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:target-sheet-id` |
"
  [^CfnAnalysis$LocalNavigationConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :target-sheet-id)]
    (. builder targetSheetId data))
  (.build builder))


(defn cfn-analysis-local-navigation-configuration-property-builder
  "Creates a  `CfnAnalysis$LocalNavigationConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-local-navigation-configuration-property-builder (new CfnAnalysis$LocalNavigationConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-long-format-text-property-builder
  "The build-cfn-analysis-long-format-text-property-builder function updates a CfnAnalysis$LongFormatTextProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$LongFormatTextProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `plainText` | java.lang.String | [[cdk.support/lookup-entry]] | `:plain-text` |
| `richText` | java.lang.String | [[cdk.support/lookup-entry]] | `:rich-text` |
"
  [^CfnAnalysis$LongFormatTextProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :plain-text)]
    (. builder plainText data))
  (when-let [data (lookup-entry config id :rich-text)]
    (. builder richText data))
  (.build builder))


(defn cfn-analysis-long-format-text-property-builder
  "Creates a  `CfnAnalysis$LongFormatTextProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-long-format-text-property-builder (new CfnAnalysis$LongFormatTextProperty$Builder) id config))


(defn build-cfn-analysis-mapped-data-set-parameter-property-builder
  "The build-cfn-analysis-mapped-data-set-parameter-property-builder function updates a CfnAnalysis$MappedDataSetParameterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$MappedDataSetParameterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `dataSetParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-parameter-name` |
"
  [^CfnAnalysis$MappedDataSetParameterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :data-set-parameter-name)]
    (. builder dataSetParameterName data))
  (.build builder))


(defn cfn-analysis-mapped-data-set-parameter-property-builder
  "Creates a  `CfnAnalysis$MappedDataSetParameterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-mapped-data-set-parameter-property-builder (new CfnAnalysis$MappedDataSetParameterProperty$Builder) id config))


(defn build-cfn-analysis-maximum-label-type-property-builder
  "The build-cfn-analysis-maximum-label-type-property-builder function updates a CfnAnalysis$MaximumLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$MaximumLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$MaximumLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-maximum-label-type-property-builder
  "Creates a  `CfnAnalysis$MaximumLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-maximum-label-type-property-builder (new CfnAnalysis$MaximumLabelTypeProperty$Builder) id config))


(defn build-cfn-analysis-maximum-minimum-computation-property-builder
  "The build-cfn-analysis-maximum-minimum-computation-property-builder function updates a CfnAnalysis$MaximumMinimumComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$MaximumMinimumComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `time` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$MaximumMinimumComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-maximum-minimum-computation-property-builder
  "Creates a  `CfnAnalysis$MaximumMinimumComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-maximum-minimum-computation-property-builder (new CfnAnalysis$MaximumMinimumComputationProperty$Builder) id config))


(defn build-cfn-analysis-measure-field-property-builder
  "The build-cfn-analysis-measure-field-property-builder function updates a CfnAnalysis$MeasureFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$MeasureFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `calculatedMeasureField` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CalculatedMeasureFieldProperty | [[cdk.support/lookup-entry]] | `:calculated-measure-field` |
| `categoricalMeasureField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:categorical-measure-field` |
| `dateMeasureField` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DateMeasureFieldProperty | [[cdk.support/lookup-entry]] | `:date-measure-field` |
| `numericalMeasureField` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumericalMeasureFieldProperty | [[cdk.support/lookup-entry]] | `:numerical-measure-field` |
"
  [^CfnAnalysis$MeasureFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :calculated-measure-field)]
    (. builder calculatedMeasureField data))
  (when-let [data (lookup-entry config id :categorical-measure-field)]
    (. builder categoricalMeasureField data))
  (when-let [data (lookup-entry config id :date-measure-field)]
    (. builder dateMeasureField data))
  (when-let [data (lookup-entry config id :numerical-measure-field)]
    (. builder numericalMeasureField data))
  (.build builder))


(defn cfn-analysis-measure-field-property-builder
  "Creates a  `CfnAnalysis$MeasureFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-measure-field-property-builder (new CfnAnalysis$MeasureFieldProperty$Builder) id config))


(defn build-cfn-analysis-metric-comparison-computation-property-builder
  "The build-cfn-analysis-metric-comparison-computation-property-builder function updates a CfnAnalysis$MetricComparisonComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$MetricComparisonComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `fromValue` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:from-value` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `targetValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target-value` |
| `time` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |
"
  [^CfnAnalysis$MetricComparisonComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :from-value)]
    (. builder fromValue data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :target-value)]
    (. builder targetValue data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (.build builder))


(defn cfn-analysis-metric-comparison-computation-property-builder
  "Creates a  `CfnAnalysis$MetricComparisonComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-metric-comparison-computation-property-builder (new CfnAnalysis$MetricComparisonComputationProperty$Builder) id config))


(defn build-cfn-analysis-minimum-label-type-property-builder
  "The build-cfn-analysis-minimum-label-type-property-builder function updates a CfnAnalysis$MinimumLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$MinimumLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$MinimumLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-minimum-label-type-property-builder
  "Creates a  `CfnAnalysis$MinimumLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-minimum-label-type-property-builder (new CfnAnalysis$MinimumLabelTypeProperty$Builder) id config))


(defn build-cfn-analysis-missing-data-configuration-property-builder
  "The build-cfn-analysis-missing-data-configuration-property-builder function updates a CfnAnalysis$MissingDataConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$MissingDataConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treatmentOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:treatment-option` |
"
  [^CfnAnalysis$MissingDataConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :treatment-option)]
    (. builder treatmentOption data))
  (.build builder))


(defn cfn-analysis-missing-data-configuration-property-builder
  "Creates a  `CfnAnalysis$MissingDataConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-missing-data-configuration-property-builder (new CfnAnalysis$MissingDataConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-negative-value-configuration-property-builder
  "The build-cfn-analysis-negative-value-configuration-property-builder function updates a CfnAnalysis$NegativeValueConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$NegativeValueConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayMode` | java.lang.String | [[cdk.support/lookup-entry]] | `:display-mode` |
"
  [^CfnAnalysis$NegativeValueConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-mode)]
    (. builder displayMode data))
  (.build builder))


(defn cfn-analysis-negative-value-configuration-property-builder
  "Creates a  `CfnAnalysis$NegativeValueConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-negative-value-configuration-property-builder (new CfnAnalysis$NegativeValueConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-null-value-format-configuration-property-builder
  "The build-cfn-analysis-null-value-format-configuration-property-builder function updates a CfnAnalysis$NullValueFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$NullValueFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `nullString` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-string` |
"
  [^CfnAnalysis$NullValueFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :null-string)]
    (. builder nullString data))
  (.build builder))


(defn cfn-analysis-null-value-format-configuration-property-builder
  "Creates a  `CfnAnalysis$NullValueFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-null-value-format-configuration-property-builder (new CfnAnalysis$NullValueFormatConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-number-display-format-configuration-property-builder
  "The build-cfn-analysis-number-display-format-configuration-property-builder function updates a CfnAnalysis$NumberDisplayFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$NumberDisplayFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NegativeValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numberScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:number-scale` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumericSeparatorConfigurationProperty | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |
"
  [^CfnAnalysis$NumberDisplayFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :decimal-places-configuration)]
    (. builder decimalPlacesConfiguration data))
  (when-let [data (lookup-entry config id :negative-value-configuration)]
    (. builder negativeValueConfiguration data))
  (when-let [data (lookup-entry config id :null-value-format-configuration)]
    (. builder nullValueFormatConfiguration data))
  (when-let [data (lookup-entry config id :number-scale)]
    (. builder numberScale data))
  (when-let [data (lookup-entry config id :prefix)]
    (. builder prefix data))
  (when-let [data (lookup-entry config id :separator-configuration)]
    (. builder separatorConfiguration data))
  (when-let [data (lookup-entry config id :suffix)]
    (. builder suffix data))
  (.build builder))


(defn cfn-analysis-number-display-format-configuration-property-builder
  "Creates a  `CfnAnalysis$NumberDisplayFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-number-display-format-configuration-property-builder (new CfnAnalysis$NumberDisplayFormatConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-number-format-configuration-property-builder
  "The build-cfn-analysis-number-format-configuration-property-builder function updates a CfnAnalysis$NumberFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$NumberFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
"
  [^CfnAnalysis$NumberFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (.build builder))


(defn cfn-analysis-number-format-configuration-property-builder
  "Creates a  `CfnAnalysis$NumberFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-number-format-configuration-property-builder (new CfnAnalysis$NumberFormatConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-numeric-axis-options-property-builder
  "The build-cfn-analysis-numeric-axis-options-property-builder function updates a CfnAnalysis$NumericAxisOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$NumericAxisOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `range` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range` |
| `scale` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scale` |
"
  [^CfnAnalysis$NumericAxisOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :range)]
    (. builder range data))
  (when-let [data (lookup-entry config id :scale)]
    (. builder scale data))
  (.build builder))


(defn cfn-analysis-numeric-axis-options-property-builder
  "Creates a  `CfnAnalysis$NumericAxisOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-numeric-axis-options-property-builder (new CfnAnalysis$NumericAxisOptionsProperty$Builder) id config))


(defn build-cfn-analysis-numeric-equality-drill-down-filter-property-builder
  "The build-cfn-analysis-numeric-equality-drill-down-filter-property-builder function updates a CfnAnalysis$NumericEqualityDrillDownFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$NumericEqualityDrillDownFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$NumericEqualityDrillDownFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-numeric-equality-drill-down-filter-property-builder
  "Creates a  `CfnAnalysis$NumericEqualityDrillDownFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-numeric-equality-drill-down-filter-property-builder (new CfnAnalysis$NumericEqualityDrillDownFilterProperty$Builder) id config))


(defn build-cfn-analysis-numeric-equality-filter-property-builder
  "The build-cfn-analysis-numeric-equality-filter-property-builder function updates a CfnAnalysis$NumericEqualityFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$NumericEqualityFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$NumericEqualityFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :match-operator)]
    (. builder matchOperator data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-numeric-equality-filter-property-builder
  "Creates a  `CfnAnalysis$NumericEqualityFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-numeric-equality-filter-property-builder (new CfnAnalysis$NumericEqualityFilterProperty$Builder) id config))


(defn build-cfn-analysis-numeric-format-configuration-property-builder
  "The build-cfn-analysis-numeric-format-configuration-property-builder function updates a CfnAnalysis$NumericFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$NumericFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `currencyDisplayFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:currency-display-format-configuration` |
| `numberDisplayFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumberDisplayFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:number-display-format-configuration` |
| `percentageDisplayFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:percentage-display-format-configuration` |
"
  [^CfnAnalysis$NumericFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :currency-display-format-configuration)]
    (. builder currencyDisplayFormatConfiguration data))
  (when-let [data (lookup-entry config id :number-display-format-configuration)]
    (. builder numberDisplayFormatConfiguration data))
  (when-let [data (lookup-entry config id :percentage-display-format-configuration)]
    (. builder percentageDisplayFormatConfiguration data))
  (.build builder))


(defn cfn-analysis-numeric-format-configuration-property-builder
  "Creates a  `CfnAnalysis$NumericFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-numeric-format-configuration-property-builder (new CfnAnalysis$NumericFormatConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-numeric-range-filter-property-builder
  "The build-cfn-analysis-numeric-range-filter-property-builder function updates a CfnAnalysis$NumericRangeFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$NumericRangeFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `includeMaximum` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:include-maximum` |
| `includeMinimum` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:include-minimum` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `rangeMaximum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-maximum` |
| `rangeMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-minimum` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
"
  [^CfnAnalysis$NumericRangeFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :include-maximum)]
    (. builder includeMaximum data))
  (when-let [data (lookup-entry config id :include-minimum)]
    (. builder includeMinimum data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :range-maximum)]
    (. builder rangeMaximum data))
  (when-let [data (lookup-entry config id :range-minimum)]
    (. builder rangeMinimum data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (.build builder))


(defn cfn-analysis-numeric-range-filter-property-builder
  "Creates a  `CfnAnalysis$NumericRangeFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-numeric-range-filter-property-builder (new CfnAnalysis$NumericRangeFilterProperty$Builder) id config))


(defn build-cfn-analysis-numeric-range-filter-value-property-builder
  "The build-cfn-analysis-numeric-range-filter-value-property-builder function updates a CfnAnalysis$NumericRangeFilterValueProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$NumericRangeFilterValueProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameter` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter` |
| `staticValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:static-value` |
"
  [^CfnAnalysis$NumericRangeFilterValueProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :parameter)]
    (. builder parameter data))
  (when-let [data (lookup-entry config id :static-value)]
    (. builder staticValue data))
  (.build builder))


(defn cfn-analysis-numeric-range-filter-value-property-builder
  "Creates a  `CfnAnalysis$NumericRangeFilterValueProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-numeric-range-filter-value-property-builder (new CfnAnalysis$NumericRangeFilterValueProperty$Builder) id config))


(defn build-cfn-analysis-numeric-separator-configuration-property-builder
  "The build-cfn-analysis-numeric-separator-configuration-property-builder function updates a CfnAnalysis$NumericSeparatorConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$NumericSeparatorConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalSeparator` | java.lang.String | [[cdk.support/lookup-entry]] | `:decimal-separator` |
| `thousandsSeparator` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:thousands-separator` |
"
  [^CfnAnalysis$NumericSeparatorConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :decimal-separator)]
    (. builder decimalSeparator data))
  (when-let [data (lookup-entry config id :thousands-separator)]
    (. builder thousandsSeparator data))
  (.build builder))


(defn cfn-analysis-numeric-separator-configuration-property-builder
  "Creates a  `CfnAnalysis$NumericSeparatorConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-numeric-separator-configuration-property-builder (new CfnAnalysis$NumericSeparatorConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-numerical-aggregation-function-property-builder
  "The build-cfn-analysis-numerical-aggregation-function-property-builder function updates a CfnAnalysis$NumericalAggregationFunctionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$NumericalAggregationFunctionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentileAggregation` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PercentileAggregationProperty | [[cdk.support/lookup-entry]] | `:percentile-aggregation` |
| `simpleNumericalAggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-numerical-aggregation` |
"
  [^CfnAnalysis$NumericalAggregationFunctionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :percentile-aggregation)]
    (. builder percentileAggregation data))
  (when-let [data (lookup-entry config id :simple-numerical-aggregation)]
    (. builder simpleNumericalAggregation data))
  (.build builder))


(defn cfn-analysis-numerical-aggregation-function-property-builder
  "Creates a  `CfnAnalysis$NumericalAggregationFunctionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-numerical-aggregation-function-property-builder (new CfnAnalysis$NumericalAggregationFunctionProperty$Builder) id config))


(defn build-cfn-analysis-numerical-dimension-field-property-builder
  "The build-cfn-analysis-numerical-dimension-field-property-builder function updates a CfnAnalysis$NumericalDimensionFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$NumericalDimensionFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumberFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnAnalysis$NumericalDimensionFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-analysis-numerical-dimension-field-property-builder
  "Creates a  `CfnAnalysis$NumericalDimensionFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-numerical-dimension-field-property-builder (new CfnAnalysis$NumericalDimensionFieldProperty$Builder) id config))


(defn build-cfn-analysis-numerical-measure-field-property-builder
  "The build-cfn-analysis-numerical-measure-field-property-builder function updates a CfnAnalysis$NumericalMeasureFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$NumericalMeasureFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumericalAggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumberFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
"
  [^CfnAnalysis$NumericalMeasureFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (.build builder))


(defn cfn-analysis-numerical-measure-field-property-builder
  "Creates a  `CfnAnalysis$NumericalMeasureFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-numerical-measure-field-property-builder (new CfnAnalysis$NumericalMeasureFieldProperty$Builder) id config))


(defn build-cfn-analysis-pagination-configuration-property-builder
  "The build-cfn-analysis-pagination-configuration-property-builder function updates a CfnAnalysis$PaginationConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PaginationConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pageNumber` | java.lang.Number | [[cdk.support/lookup-entry]] | `:page-number` |
| `pageSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:page-size` |
"
  [^CfnAnalysis$PaginationConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :page-number)]
    (. builder pageNumber data))
  (when-let [data (lookup-entry config id :page-size)]
    (. builder pageSize data))
  (.build builder))


(defn cfn-analysis-pagination-configuration-property-builder
  "Creates a  `CfnAnalysis$PaginationConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pagination-configuration-property-builder (new CfnAnalysis$PaginationConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-panel-configuration-property-builder
  "The build-cfn-analysis-panel-configuration-property-builder function updates a CfnAnalysis$PanelConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PanelConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-color` |
| `backgroundVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-visibility` |
| `borderColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-color` |
| `borderStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-style` |
| `borderThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-thickness` |
| `borderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-visibility` |
| `gutterSpacing` | java.lang.String | [[cdk.support/lookup-entry]] | `:gutter-spacing` |
| `gutterVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:gutter-visibility` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PanelTitleOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnAnalysis$PanelConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-color)]
    (. builder backgroundColor data))
  (when-let [data (lookup-entry config id :background-visibility)]
    (. builder backgroundVisibility data))
  (when-let [data (lookup-entry config id :border-color)]
    (. builder borderColor data))
  (when-let [data (lookup-entry config id :border-style)]
    (. builder borderStyle data))
  (when-let [data (lookup-entry config id :border-thickness)]
    (. builder borderThickness data))
  (when-let [data (lookup-entry config id :border-visibility)]
    (. builder borderVisibility data))
  (when-let [data (lookup-entry config id :gutter-spacing)]
    (. builder gutterSpacing data))
  (when-let [data (lookup-entry config id :gutter-visibility)]
    (. builder gutterVisibility data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-analysis-panel-configuration-property-builder
  "Creates a  `CfnAnalysis$PanelConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-panel-configuration-property-builder (new CfnAnalysis$PanelConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-panel-title-options-property-builder
  "The build-cfn-analysis-panel-title-options-property-builder function updates a CfnAnalysis$PanelTitleOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PanelTitleOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `horizontalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-text-alignment` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$PanelTitleOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (when-let [data (lookup-entry config id :horizontal-text-alignment)]
    (. builder horizontalTextAlignment data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-panel-title-options-property-builder
  "Creates a  `CfnAnalysis$PanelTitleOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-panel-title-options-property-builder (new CfnAnalysis$PanelTitleOptionsProperty$Builder) id config))


(defn build-cfn-analysis-parameter-control-property-builder
  "The build-cfn-analysis-parameter-control-property-builder function updates a CfnAnalysis$ParameterControlProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ParameterControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimePicker` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ParameterDateTimePickerControlProperty | [[cdk.support/lookup-entry]] | `:date-time-picker` |
| `dropdown` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ParameterDropDownControlProperty | [[cdk.support/lookup-entry]] | `:dropdown` |
| `list` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:list` |
| `slider` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:slider` |
| `textArea` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-area` |
| `textField` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ParameterTextFieldControlProperty | [[cdk.support/lookup-entry]] | `:text-field` |
"
  [^CfnAnalysis$ParameterControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-picker)]
    (. builder dateTimePicker data))
  (when-let [data (lookup-entry config id :dropdown)]
    (. builder dropdown data))
  (when-let [data (lookup-entry config id :list)]
    (. builder list data))
  (when-let [data (lookup-entry config id :slider)]
    (. builder slider data))
  (when-let [data (lookup-entry config id :text-area)]
    (. builder textArea data))
  (when-let [data (lookup-entry config id :text-field)]
    (. builder textField data))
  (.build builder))


(defn cfn-analysis-parameter-control-property-builder
  "Creates a  `CfnAnalysis$ParameterControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-parameter-control-property-builder (new CfnAnalysis$ParameterControlProperty$Builder) id config))


(defn build-cfn-analysis-parameter-date-time-picker-control-property-builder
  "The build-cfn-analysis-parameter-date-time-picker-control-property-builder function updates a CfnAnalysis$ParameterDateTimePickerControlProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ParameterDateTimePickerControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnAnalysis$ParameterDateTimePickerControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-analysis-parameter-date-time-picker-control-property-builder
  "Creates a  `CfnAnalysis$ParameterDateTimePickerControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-parameter-date-time-picker-control-property-builder (new CfnAnalysis$ParameterDateTimePickerControlProperty$Builder) id config))


(defn build-cfn-analysis-parameter-declaration-property-builder
  "The build-cfn-analysis-parameter-declaration-property-builder function updates a CfnAnalysis$ParameterDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ParameterDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeParameterDeclaration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DateTimeParameterDeclarationProperty | [[cdk.support/lookup-entry]] | `:date-time-parameter-declaration` |
| `decimalParameterDeclaration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DecimalParameterDeclarationProperty | [[cdk.support/lookup-entry]] | `:decimal-parameter-declaration` |
| `integerParameterDeclaration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:integer-parameter-declaration` |
| `stringParameterDeclaration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:string-parameter-declaration` |
"
  [^CfnAnalysis$ParameterDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-parameter-declaration)]
    (. builder dateTimeParameterDeclaration data))
  (when-let [data (lookup-entry config id :decimal-parameter-declaration)]
    (. builder decimalParameterDeclaration data))
  (when-let [data (lookup-entry config id :integer-parameter-declaration)]
    (. builder integerParameterDeclaration data))
  (when-let [data (lookup-entry config id :string-parameter-declaration)]
    (. builder stringParameterDeclaration data))
  (.build builder))


(defn cfn-analysis-parameter-declaration-property-builder
  "Creates a  `CfnAnalysis$ParameterDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-parameter-declaration-property-builder (new CfnAnalysis$ParameterDeclarationProperty$Builder) id config))


(defn build-cfn-analysis-parameter-drop-down-control-property-builder
  "The build-cfn-analysis-parameter-drop-down-control-property-builder function updates a CfnAnalysis$ParameterDropDownControlProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ParameterDropDownControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `selectableValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnAnalysis$ParameterDropDownControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cascading-control-configuration)]
    (. builder cascadingControlConfiguration data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-analysis-parameter-drop-down-control-property-builder
  "Creates a  `CfnAnalysis$ParameterDropDownControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-parameter-drop-down-control-property-builder (new CfnAnalysis$ParameterDropDownControlProperty$Builder) id config))


(defn build-cfn-analysis-parameter-list-control-property-builder
  "The build-cfn-analysis-parameter-list-control-property-builder function updates a CfnAnalysis$ParameterListControlProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ParameterListControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ListControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ParameterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnAnalysis$ParameterListControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cascading-control-configuration)]
    (. builder cascadingControlConfiguration data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-analysis-parameter-list-control-property-builder
  "Creates a  `CfnAnalysis$ParameterListControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-parameter-list-control-property-builder (new CfnAnalysis$ParameterListControlProperty$Builder) id config))


(defn build-cfn-analysis-parameter-selectable-values-property-builder
  "The build-cfn-analysis-parameter-selectable-values-property-builder function updates a CfnAnalysis$ParameterSelectableValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ParameterSelectableValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `linkToDataSetColumn` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:link-to-data-set-column` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$ParameterSelectableValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :link-to-data-set-column)]
    (. builder linkToDataSetColumn data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-parameter-selectable-values-property-builder
  "Creates a  `CfnAnalysis$ParameterSelectableValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-parameter-selectable-values-property-builder (new CfnAnalysis$ParameterSelectableValuesProperty$Builder) id config))


(defn build-cfn-analysis-parameter-slider-control-property-builder
  "The build-cfn-analysis-parameter-slider-control-property-builder function updates a CfnAnalysis$ParameterSliderControlProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ParameterSliderControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SliderControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnAnalysis$ParameterSliderControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :maximum-value)]
    (. builder maximumValue data))
  (when-let [data (lookup-entry config id :minimum-value)]
    (. builder minimumValue data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :step-size)]
    (. builder stepSize data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-analysis-parameter-slider-control-property-builder
  "Creates a  `CfnAnalysis$ParameterSliderControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-parameter-slider-control-property-builder (new CfnAnalysis$ParameterSliderControlProperty$Builder) id config))


(defn build-cfn-analysis-parameter-text-area-control-property-builder
  "The build-cfn-analysis-parameter-text-area-control-property-builder function updates a CfnAnalysis$ParameterTextAreaControlProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ParameterTextAreaControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TextAreaControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnAnalysis$ParameterTextAreaControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :delimiter)]
    (. builder delimiter data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-analysis-parameter-text-area-control-property-builder
  "Creates a  `CfnAnalysis$ParameterTextAreaControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-parameter-text-area-control-property-builder (new CfnAnalysis$ParameterTextAreaControlProperty$Builder) id config))


(defn build-cfn-analysis-parameter-text-field-control-property-builder
  "The build-cfn-analysis-parameter-text-field-control-property-builder function updates a CfnAnalysis$ParameterTextFieldControlProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ParameterTextFieldControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnAnalysis$ParameterTextFieldControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-analysis-parameter-text-field-control-property-builder
  "Creates a  `CfnAnalysis$ParameterTextFieldControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-parameter-text-field-control-property-builder (new CfnAnalysis$ParameterTextFieldControlProperty$Builder) id config))


(defn build-cfn-analysis-parameters-property-builder
  "The build-cfn-analysis-parameters-property-builder function updates a CfnAnalysis$ParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:date-time-parameters` |
| `decimalParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-parameters` |
| `integerParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:integer-parameters` |
| `stringParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:string-parameters` |
"
  [^CfnAnalysis$ParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-parameters)]
    (. builder dateTimeParameters data))
  (when-let [data (lookup-entry config id :decimal-parameters)]
    (. builder decimalParameters data))
  (when-let [data (lookup-entry config id :integer-parameters)]
    (. builder integerParameters data))
  (when-let [data (lookup-entry config id :string-parameters)]
    (. builder stringParameters data))
  (.build builder))


(defn cfn-analysis-parameters-property-builder
  "Creates a  `CfnAnalysis$ParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-parameters-property-builder (new CfnAnalysis$ParametersProperty$Builder) id config))


(defn build-cfn-analysis-percent-visible-range-property-builder
  "The build-cfn-analysis-percent-visible-range-property-builder function updates a CfnAnalysis$PercentVisibleRangeProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PercentVisibleRangeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `from` | java.lang.Number | [[cdk.support/lookup-entry]] | `:from` |
| `to` | java.lang.Number | [[cdk.support/lookup-entry]] | `:to` |
"
  [^CfnAnalysis$PercentVisibleRangeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :from)]
    (. builder from data))
  (when-let [data (lookup-entry config id :to)]
    (. builder to data))
  (.build builder))


(defn cfn-analysis-percent-visible-range-property-builder
  "Creates a  `CfnAnalysis$PercentVisibleRangeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-percent-visible-range-property-builder (new CfnAnalysis$PercentVisibleRangeProperty$Builder) id config))


(defn build-cfn-analysis-percentage-display-format-configuration-property-builder
  "The build-cfn-analysis-percentage-display-format-configuration-property-builder function updates a CfnAnalysis$PercentageDisplayFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PercentageDisplayFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DecimalPlacesConfigurationProperty | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |
"
  [^CfnAnalysis$PercentageDisplayFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :decimal-places-configuration)]
    (. builder decimalPlacesConfiguration data))
  (when-let [data (lookup-entry config id :negative-value-configuration)]
    (. builder negativeValueConfiguration data))
  (when-let [data (lookup-entry config id :null-value-format-configuration)]
    (. builder nullValueFormatConfiguration data))
  (when-let [data (lookup-entry config id :prefix)]
    (. builder prefix data))
  (when-let [data (lookup-entry config id :separator-configuration)]
    (. builder separatorConfiguration data))
  (when-let [data (lookup-entry config id :suffix)]
    (. builder suffix data))
  (.build builder))


(defn cfn-analysis-percentage-display-format-configuration-property-builder
  "Creates a  `CfnAnalysis$PercentageDisplayFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-percentage-display-format-configuration-property-builder (new CfnAnalysis$PercentageDisplayFormatConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-percentile-aggregation-property-builder
  "The build-cfn-analysis-percentile-aggregation-property-builder function updates a CfnAnalysis$PercentileAggregationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PercentileAggregationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentileValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:percentile-value` |
"
  [^CfnAnalysis$PercentileAggregationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :percentile-value)]
    (. builder percentileValue data))
  (.build builder))


(defn cfn-analysis-percentile-aggregation-property-builder
  "Creates a  `CfnAnalysis$PercentileAggregationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-percentile-aggregation-property-builder (new CfnAnalysis$PercentileAggregationProperty$Builder) id config))


(defn build-cfn-analysis-period-over-period-computation-property-builder
  "The build-cfn-analysis-period-over-period-computation-property-builder function updates a CfnAnalysis$PeriodOverPeriodComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PeriodOverPeriodComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `time` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$PeriodOverPeriodComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-period-over-period-computation-property-builder
  "Creates a  `CfnAnalysis$PeriodOverPeriodComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-period-over-period-computation-property-builder (new CfnAnalysis$PeriodOverPeriodComputationProperty$Builder) id config))


(defn build-cfn-analysis-period-to-date-computation-property-builder
  "The build-cfn-analysis-period-to-date-computation-property-builder function updates a CfnAnalysis$PeriodToDateComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PeriodToDateComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodTimeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:period-time-granularity` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$PeriodToDateComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :period-time-granularity)]
    (. builder periodTimeGranularity data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-period-to-date-computation-property-builder
  "Creates a  `CfnAnalysis$PeriodToDateComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-period-to-date-computation-property-builder (new CfnAnalysis$PeriodToDateComputationProperty$Builder) id config))


(defn build-cfn-analysis-pie-chart-aggregated-field-wells-property-builder
  "The build-cfn-analysis-pie-chart-aggregated-field-wells-property-builder function updates a CfnAnalysis$PieChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PieChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `smallMultiples` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$PieChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :small-multiples)]
    (. builder smallMultiples data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-pie-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$PieChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pie-chart-aggregated-field-wells-property-builder (new CfnAnalysis$PieChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-pie-chart-configuration-property-builder
  "The build-cfn-analysis-pie-chart-configuration-property-builder function updates a CfnAnalysis$PieChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PieChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `contributionAnalysisDefaults` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `donutOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:donut-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PieChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `smallMultiplesOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PieChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnAnalysis$PieChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
    (. builder contributionAnalysisDefaults data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :donut-options)]
    (. builder donutOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :small-multiples-options)]
    (. builder smallMultiplesOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :value-label-options)]
    (. builder valueLabelOptions data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-analysis-pie-chart-configuration-property-builder
  "Creates a  `CfnAnalysis$PieChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pie-chart-configuration-property-builder (new CfnAnalysis$PieChartConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-pie-chart-field-wells-property-builder
  "The build-cfn-analysis-pie-chart-field-wells-property-builder function updates a CfnAnalysis$PieChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PieChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pieChartAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PieChartAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:pie-chart-aggregated-field-wells` |
"
  [^CfnAnalysis$PieChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :pie-chart-aggregated-field-wells)]
    (. builder pieChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-pie-chart-field-wells-property-builder
  "Creates a  `CfnAnalysis$PieChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pie-chart-field-wells-property-builder (new CfnAnalysis$PieChartFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-pie-chart-sort-configuration-property-builder
  "The build-cfn-analysis-pie-chart-sort-configuration-property-builder function updates a CfnAnalysis$PieChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PieChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |
"
  [^CfnAnalysis$PieChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
    (. builder smallMultiplesLimitConfiguration data))
  (when-let [data (lookup-entry config id :small-multiples-sort)]
    (. builder smallMultiplesSort data))
  (.build builder))


(defn cfn-analysis-pie-chart-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$PieChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pie-chart-sort-configuration-property-builder (new CfnAnalysis$PieChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-pie-chart-visual-property-builder
  "The build-cfn-analysis-pie-chart-visual-property-builder function updates a CfnAnalysis$PieChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PieChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PieChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$PieChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-pie-chart-visual-property-builder
  "Creates a  `CfnAnalysis$PieChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pie-chart-visual-property-builder (new CfnAnalysis$PieChartVisualProperty$Builder) id config))


(defn build-cfn-analysis-pivot-field-sort-options-property-builder
  "The build-cfn-analysis-pivot-field-sort-options-property-builder function updates a CfnAnalysis$PivotFieldSortOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotFieldSortOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `sortBy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-by` |
"
  [^CfnAnalysis$PivotFieldSortOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :sort-by)]
    (. builder sortBy data))
  (.build builder))


(defn cfn-analysis-pivot-field-sort-options-property-builder
  "Creates a  `CfnAnalysis$PivotFieldSortOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-field-sort-options-property-builder (new CfnAnalysis$PivotFieldSortOptionsProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-aggregated-field-wells-property-builder
  "The build-cfn-analysis-pivot-table-aggregated-field-wells-property-builder function updates a CfnAnalysis$PivotTableAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `rows` | java.util.List | [[cdk.support/lookup-entry]] | `:rows` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$PivotTableAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (when-let [data (lookup-entry config id :rows)]
    (. builder rows data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-pivot-table-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$PivotTableAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-aggregated-field-wells-property-builder (new CfnAnalysis$PivotTableAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-cell-conditional-formatting-property-builder
  "The build-cfn-analysis-pivot-table-cell-conditional-formatting-property-builder function updates a CfnAnalysis$PivotTableCellConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableCellConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `scope` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scope` |
| `scopes` | java.util.List | [[cdk.support/lookup-entry]] | `:scopes` |
| `textFormat` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TextConditionalFormatProperty | [[cdk.support/lookup-entry]] | `:text-format` |
"
  [^CfnAnalysis$PivotTableCellConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :scope)]
    (. builder scope data))
  (when-let [data (lookup-entry config id :scopes)]
    (. builder scopes data))
  (when-let [data (lookup-entry config id :text-format)]
    (. builder textFormat data))
  (.build builder))


(defn cfn-analysis-pivot-table-cell-conditional-formatting-property-builder
  "Creates a  `CfnAnalysis$PivotTableCellConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-cell-conditional-formatting-property-builder (new CfnAnalysis$PivotTableCellConditionalFormattingProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-conditional-formatting-option-property-builder
  "The build-cfn-analysis-pivot-table-conditional-formatting-option-property-builder function updates a CfnAnalysis$PivotTableConditionalFormattingOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableConditionalFormattingOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cell` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cell` |
"
  [^CfnAnalysis$PivotTableConditionalFormattingOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cell)]
    (. builder cell data))
  (.build builder))


(defn cfn-analysis-pivot-table-conditional-formatting-option-property-builder
  "Creates a  `CfnAnalysis$PivotTableConditionalFormattingOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-conditional-formatting-option-property-builder (new CfnAnalysis$PivotTableConditionalFormattingOptionProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-conditional-formatting-property-builder
  "The build-cfn-analysis-pivot-table-conditional-formatting-property-builder function updates a CfnAnalysis$PivotTableConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |
"
  [^CfnAnalysis$PivotTableConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :conditional-formatting-options)]
    (. builder conditionalFormattingOptions data))
  (.build builder))


(defn cfn-analysis-pivot-table-conditional-formatting-property-builder
  "Creates a  `CfnAnalysis$PivotTableConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-conditional-formatting-property-builder (new CfnAnalysis$PivotTableConditionalFormattingProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-conditional-formatting-scope-property-builder
  "The build-cfn-analysis-pivot-table-conditional-formatting-scope-property-builder function updates a CfnAnalysis$PivotTableConditionalFormattingScopeProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableConditionalFormattingScopeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `role` | java.lang.String | [[cdk.support/lookup-entry]] | `:role` |
"
  [^CfnAnalysis$PivotTableConditionalFormattingScopeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :role)]
    (. builder role data))
  (.build builder))


(defn cfn-analysis-pivot-table-conditional-formatting-scope-property-builder
  "Creates a  `CfnAnalysis$PivotTableConditionalFormattingScopeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-conditional-formatting-scope-property-builder (new CfnAnalysis$PivotTableConditionalFormattingScopeProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-configuration-property-builder
  "The build-cfn-analysis-pivot-table-configuration-property-builder function updates a CfnAnalysis$PivotTableConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PivotTableFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `paginatedReportOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PivotTablePaginatedReportOptionsProperty | [[cdk.support/lookup-entry]] | `:paginated-report-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tableOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PivotTableOptionsProperty | [[cdk.support/lookup-entry]] | `:table-options` |
| `totalOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PivotTableTotalOptionsProperty | [[cdk.support/lookup-entry]] | `:total-options` |
"
  [^CfnAnalysis$PivotTableConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-options)]
    (. builder fieldOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :paginated-report-options)]
    (. builder paginatedReportOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :table-options)]
    (. builder tableOptions data))
  (when-let [data (lookup-entry config id :total-options)]
    (. builder totalOptions data))
  (.build builder))


(defn cfn-analysis-pivot-table-configuration-property-builder
  "Creates a  `CfnAnalysis$PivotTableConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-configuration-property-builder (new CfnAnalysis$PivotTableConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-data-path-option-property-builder
  "The build-cfn-analysis-pivot-table-data-path-option-property-builder function updates a CfnAnalysis$PivotTableDataPathOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableDataPathOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathList` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-path-list` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |
"
  [^CfnAnalysis$PivotTableDataPathOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-path-list)]
    (. builder dataPathList data))
  (when-let [data (lookup-entry config id :width)]
    (. builder width data))
  (.build builder))


(defn cfn-analysis-pivot-table-data-path-option-property-builder
  "Creates a  `CfnAnalysis$PivotTableDataPathOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-data-path-option-property-builder (new CfnAnalysis$PivotTableDataPathOptionProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-field-collapse-state-option-property-builder
  "The build-cfn-analysis-pivot-table-field-collapse-state-option-property-builder function updates a CfnAnalysis$PivotTableFieldCollapseStateOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableFieldCollapseStateOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `state` | java.lang.String | [[cdk.support/lookup-entry]] | `:state` |
| `target` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target` |
"
  [^CfnAnalysis$PivotTableFieldCollapseStateOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :state)]
    (. builder state data))
  (when-let [data (lookup-entry config id :target)]
    (. builder target data))
  (.build builder))


(defn cfn-analysis-pivot-table-field-collapse-state-option-property-builder
  "Creates a  `CfnAnalysis$PivotTableFieldCollapseStateOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-field-collapse-state-option-property-builder (new CfnAnalysis$PivotTableFieldCollapseStateOptionProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-field-collapse-state-target-property-builder
  "The build-cfn-analysis-pivot-table-field-collapse-state-target-property-builder function updates a CfnAnalysis$PivotTableFieldCollapseStateTargetProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableFieldCollapseStateTargetProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldDataPathValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-data-path-values` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
"
  [^CfnAnalysis$PivotTableFieldCollapseStateTargetProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-data-path-values)]
    (. builder fieldDataPathValues data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (.build builder))


(defn cfn-analysis-pivot-table-field-collapse-state-target-property-builder
  "Creates a  `CfnAnalysis$PivotTableFieldCollapseStateTargetProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-field-collapse-state-target-property-builder (new CfnAnalysis$PivotTableFieldCollapseStateTargetProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-field-option-property-builder
  "The build-cfn-analysis-pivot-table-field-option-property-builder function updates a CfnAnalysis$PivotTableFieldOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableFieldOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$PivotTableFieldOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-pivot-table-field-option-property-builder
  "Creates a  `CfnAnalysis$PivotTableFieldOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-field-option-property-builder (new CfnAnalysis$PivotTableFieldOptionProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-field-options-property-builder
  "The build-cfn-analysis-pivot-table-field-options-property-builder function updates a CfnAnalysis$PivotTableFieldOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableFieldOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `collapseStateOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:collapse-state-options` |
| `dataPathOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:data-path-options` |
| `selectedFieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-field-options` |
"
  [^CfnAnalysis$PivotTableFieldOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :collapse-state-options)]
    (. builder collapseStateOptions data))
  (when-let [data (lookup-entry config id :data-path-options)]
    (. builder dataPathOptions data))
  (when-let [data (lookup-entry config id :selected-field-options)]
    (. builder selectedFieldOptions data))
  (.build builder))


(defn cfn-analysis-pivot-table-field-options-property-builder
  "Creates a  `CfnAnalysis$PivotTableFieldOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-field-options-property-builder (new CfnAnalysis$PivotTableFieldOptionsProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-field-subtotal-options-property-builder
  "The build-cfn-analysis-pivot-table-field-subtotal-options-property-builder function updates a CfnAnalysis$PivotTableFieldSubtotalOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableFieldSubtotalOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
"
  [^CfnAnalysis$PivotTableFieldSubtotalOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (.build builder))


(defn cfn-analysis-pivot-table-field-subtotal-options-property-builder
  "Creates a  `CfnAnalysis$PivotTableFieldSubtotalOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-field-subtotal-options-property-builder (new CfnAnalysis$PivotTableFieldSubtotalOptionsProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-field-wells-property-builder
  "The build-cfn-analysis-pivot-table-field-wells-property-builder function updates a CfnAnalysis$PivotTableFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pivotTableAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PivotTableAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:pivot-table-aggregated-field-wells` |
"
  [^CfnAnalysis$PivotTableFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :pivot-table-aggregated-field-wells)]
    (. builder pivotTableAggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-pivot-table-field-wells-property-builder
  "Creates a  `CfnAnalysis$PivotTableFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-field-wells-property-builder (new CfnAnalysis$PivotTableFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-options-property-builder
  "The build-cfn-analysis-pivot-table-options-property-builder function updates a CfnAnalysis$PivotTableOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:cell-style` |
| `collapsedRowDimensionsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:collapsed-row-dimensions-visibility` |
| `columnHeaderStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:column-header-style` |
| `columnNamesVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-names-visibility` |
| `defaultCellWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:default-cell-width` |
| `metricPlacement` | java.lang.String | [[cdk.support/lookup-entry]] | `:metric-placement` |
| `rowAlternateColorOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$RowAlternateColorOptionsProperty | [[cdk.support/lookup-entry]] | `:row-alternate-color-options` |
| `rowFieldNamesStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:row-field-names-style` |
| `rowHeaderStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-header-style` |
| `rowsLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rows-label-options` |
| `rowsLayout` | java.lang.String | [[cdk.support/lookup-entry]] | `:rows-layout` |
| `singleMetricVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:single-metric-visibility` |
| `toggleButtonsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:toggle-buttons-visibility` |
"
  [^CfnAnalysis$PivotTableOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cell-style)]
    (. builder cellStyle data))
  (when-let [data (lookup-entry config id :collapsed-row-dimensions-visibility)]
    (. builder collapsedRowDimensionsVisibility data))
  (when-let [data (lookup-entry config id :column-header-style)]
    (. builder columnHeaderStyle data))
  (when-let [data (lookup-entry config id :column-names-visibility)]
    (. builder columnNamesVisibility data))
  (when-let [data (lookup-entry config id :default-cell-width)]
    (. builder defaultCellWidth data))
  (when-let [data (lookup-entry config id :metric-placement)]
    (. builder metricPlacement data))
  (when-let [data (lookup-entry config id :row-alternate-color-options)]
    (. builder rowAlternateColorOptions data))
  (when-let [data (lookup-entry config id :row-field-names-style)]
    (. builder rowFieldNamesStyle data))
  (when-let [data (lookup-entry config id :row-header-style)]
    (. builder rowHeaderStyle data))
  (when-let [data (lookup-entry config id :rows-label-options)]
    (. builder rowsLabelOptions data))
  (when-let [data (lookup-entry config id :rows-layout)]
    (. builder rowsLayout data))
  (when-let [data (lookup-entry config id :single-metric-visibility)]
    (. builder singleMetricVisibility data))
  (when-let [data (lookup-entry config id :toggle-buttons-visibility)]
    (. builder toggleButtonsVisibility data))
  (.build builder))


(defn cfn-analysis-pivot-table-options-property-builder
  "Creates a  `CfnAnalysis$PivotTableOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-options-property-builder (new CfnAnalysis$PivotTableOptionsProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-paginated-report-options-property-builder
  "The build-cfn-analysis-pivot-table-paginated-report-options-property-builder function updates a CfnAnalysis$PivotTablePaginatedReportOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTablePaginatedReportOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `overflowColumnHeaderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:overflow-column-header-visibility` |
| `verticalOverflowVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-overflow-visibility` |
"
  [^CfnAnalysis$PivotTablePaginatedReportOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :overflow-column-header-visibility)]
    (. builder overflowColumnHeaderVisibility data))
  (when-let [data (lookup-entry config id :vertical-overflow-visibility)]
    (. builder verticalOverflowVisibility data))
  (.build builder))


(defn cfn-analysis-pivot-table-paginated-report-options-property-builder
  "Creates a  `CfnAnalysis$PivotTablePaginatedReportOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-paginated-report-options-property-builder (new CfnAnalysis$PivotTablePaginatedReportOptionsProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-rows-label-options-property-builder
  "The build-cfn-analysis-pivot-table-rows-label-options-property-builder function updates a CfnAnalysis$PivotTableRowsLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableRowsLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$PivotTableRowsLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-pivot-table-rows-label-options-property-builder
  "Creates a  `CfnAnalysis$PivotTableRowsLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-rows-label-options-property-builder (new CfnAnalysis$PivotTableRowsLabelOptionsProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-sort-by-property-builder
  "The build-cfn-analysis-pivot-table-sort-by-property-builder function updates a CfnAnalysis$PivotTableSortByProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableSortByProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `dataPath` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataPathSortProperty | [[cdk.support/lookup-entry]] | `:data-path` |
| `field` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FieldSortProperty | [[cdk.support/lookup-entry]] | `:field` |
"
  [^CfnAnalysis$PivotTableSortByProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :data-path)]
    (. builder dataPath data))
  (when-let [data (lookup-entry config id :field)]
    (. builder field data))
  (.build builder))


(defn cfn-analysis-pivot-table-sort-by-property-builder
  "Creates a  `CfnAnalysis$PivotTableSortByProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-sort-by-property-builder (new CfnAnalysis$PivotTableSortByProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-sort-configuration-property-builder
  "The build-cfn-analysis-pivot-table-sort-configuration-property-builder function updates a CfnAnalysis$PivotTableSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldSortOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-sort-options` |
"
  [^CfnAnalysis$PivotTableSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-sort-options)]
    (. builder fieldSortOptions data))
  (.build builder))


(defn cfn-analysis-pivot-table-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$PivotTableSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-sort-configuration-property-builder (new CfnAnalysis$PivotTableSortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-total-options-property-builder
  "The build-cfn-analysis-pivot-table-total-options-property-builder function updates a CfnAnalysis$PivotTableTotalOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableTotalOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnSubtotalOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-subtotal-options` |
| `columnTotalOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-total-options` |
| `rowSubtotalOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-subtotal-options` |
| `rowTotalOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PivotTotalOptionsProperty | [[cdk.support/lookup-entry]] | `:row-total-options` |
"
  [^CfnAnalysis$PivotTableTotalOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-subtotal-options)]
    (. builder columnSubtotalOptions data))
  (when-let [data (lookup-entry config id :column-total-options)]
    (. builder columnTotalOptions data))
  (when-let [data (lookup-entry config id :row-subtotal-options)]
    (. builder rowSubtotalOptions data))
  (when-let [data (lookup-entry config id :row-total-options)]
    (. builder rowTotalOptions data))
  (.build builder))


(defn cfn-analysis-pivot-table-total-options-property-builder
  "Creates a  `CfnAnalysis$PivotTableTotalOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-total-options-property-builder (new CfnAnalysis$PivotTableTotalOptionsProperty$Builder) id config))


(defn build-cfn-analysis-pivot-table-visual-property-builder
  "The build-cfn-analysis-pivot-table-visual-property-builder function updates a CfnAnalysis$PivotTableVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTableVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$PivotTableVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :conditional-formatting)]
    (. builder conditionalFormatting data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-pivot-table-visual-property-builder
  "Creates a  `CfnAnalysis$PivotTableVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-table-visual-property-builder (new CfnAnalysis$PivotTableVisualProperty$Builder) id config))


(defn build-cfn-analysis-pivot-total-options-property-builder
  "The build-cfn-analysis-pivot-total-options-property-builder function updates a CfnAnalysis$PivotTotalOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PivotTotalOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `metricHeaderCellStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:metric-header-cell-style` |
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scrollStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:scroll-status` |
| `totalAggregationOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:total-aggregation-options` |
| `totalCellStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `valueCellStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-cell-style` |
"
  [^CfnAnalysis$PivotTotalOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :metric-header-cell-style)]
    (. builder metricHeaderCellStyle data))
  (when-let [data (lookup-entry config id :placement)]
    (. builder placement data))
  (when-let [data (lookup-entry config id :scroll-status)]
    (. builder scrollStatus data))
  (when-let [data (lookup-entry config id :total-aggregation-options)]
    (. builder totalAggregationOptions data))
  (when-let [data (lookup-entry config id :total-cell-style)]
    (. builder totalCellStyle data))
  (when-let [data (lookup-entry config id :totals-visibility)]
    (. builder totalsVisibility data))
  (when-let [data (lookup-entry config id :value-cell-style)]
    (. builder valueCellStyle data))
  (.build builder))


(defn cfn-analysis-pivot-total-options-property-builder
  "Creates a  `CfnAnalysis$PivotTotalOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-pivot-total-options-property-builder (new CfnAnalysis$PivotTotalOptionsProperty$Builder) id config))


(defn build-cfn-analysis-predefined-hierarchy-property-builder
  "The build-cfn-analysis-predefined-hierarchy-property-builder function updates a CfnAnalysis$PredefinedHierarchyProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$PredefinedHierarchyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:columns` |
| `drillDownFilters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnAnalysis$PredefinedHierarchyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (when-let [data (lookup-entry config id :drill-down-filters)]
    (. builder drillDownFilters data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-analysis-predefined-hierarchy-property-builder
  "Creates a  `CfnAnalysis$PredefinedHierarchyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-predefined-hierarchy-property-builder (new CfnAnalysis$PredefinedHierarchyProperty$Builder) id config))


(defn build-cfn-analysis-progress-bar-options-property-builder
  "The build-cfn-analysis-progress-bar-options-property-builder function updates a CfnAnalysis$ProgressBarOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ProgressBarOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$ProgressBarOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-progress-bar-options-property-builder
  "Creates a  `CfnAnalysis$ProgressBarOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-progress-bar-options-property-builder (new CfnAnalysis$ProgressBarOptionsProperty$Builder) id config))


(defn build-cfn-analysis-props-builder
  "The build-cfn-analysis-props-builder function updates a CfnAnalysisProps$Builder instance using the provided configuration.
  The function takes the CfnAnalysisProps$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `analysisId` | java.lang.String | [[cdk.support/lookup-entry]] | `:analysis-id` |
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `definition` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AnalysisDefinitionProperty | [[cdk.support/lookup-entry]] | `:definition` |
| `errors` | java.util.List | [[cdk.support/lookup-entry]] | `:errors` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameters` |
| `permissions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:permissions` |
| `sheets` | java.util.List | [[cdk.support/lookup-entry]] | `:sheets` |
| `sourceEntity` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-entity` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `themeArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:theme-arn` |
| `validationStrategy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:validation-strategy` |
"
  [^CfnAnalysisProps$Builder builder id config]
  (when-let [data (lookup-entry config id :analysis-id)]
    (. builder analysisId data))
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :definition)]
    (. builder definition data))
  (when-let [data (lookup-entry config id :errors)]
    (. builder errors data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :parameters)]
    (. builder parameters data))
  (when-let [data (lookup-entry config id :permissions)]
    (. builder permissions data))
  (when-let [data (lookup-entry config id :sheets)]
    (. builder sheets data))
  (when-let [data (lookup-entry config id :source-entity)]
    (. builder sourceEntity data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (when-let [data (lookup-entry config id :tags)]
    (. builder tags data))
  (when-let [data (lookup-entry config id :theme-arn)]
    (. builder themeArn data))
  (when-let [data (lookup-entry config id :validation-strategy)]
    (. builder validationStrategy data))
  (.build builder))


(defn cfn-analysis-props-builder
  "Creates a  `CfnAnalysisProps$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-props-builder (new CfnAnalysisProps$Builder) id config))


(defn build-cfn-analysis-radar-chart-aggregated-field-wells-property-builder
  "The build-cfn-analysis-radar-chart-aggregated-field-wells-property-builder function updates a CfnAnalysis$RadarChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$RadarChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `color` | java.util.List | [[cdk.support/lookup-entry]] | `:color` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$RadarChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-radar-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$RadarChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-radar-chart-aggregated-field-wells-property-builder (new CfnAnalysis$RadarChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-radar-chart-area-style-settings-property-builder
  "The build-cfn-analysis-radar-chart-area-style-settings-property-builder function updates a CfnAnalysis$RadarChartAreaStyleSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$RadarChartAreaStyleSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$RadarChartAreaStyleSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-radar-chart-area-style-settings-property-builder
  "Creates a  `CfnAnalysis$RadarChartAreaStyleSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-radar-chart-area-style-settings-property-builder (new CfnAnalysis$RadarChartAreaStyleSettingsProperty$Builder) id config))


(defn build-cfn-analysis-radar-chart-configuration-property-builder
  "The build-cfn-analysis-radar-chart-configuration-property-builder function updates a CfnAnalysis$RadarChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$RadarChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `alternateBandColorsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-colors-visibility` |
| `alternateBandEvenColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-even-color` |
| `alternateBandOddColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-odd-color` |
| `axesRangeScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:axes-range-scale` |
| `baseSeriesSettings` | software.amazon.awscdk.services.quicksight.CfnAnalysis$RadarChartSeriesSettingsProperty | [[cdk.support/lookup-entry]] | `:base-series-settings` |
| `categoryAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-axis` |
| `colorLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `shape` | java.lang.String | [[cdk.support/lookup-entry]] | `:shape` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `startAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:start-angle` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnAnalysis$RadarChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :alternate-band-colors-visibility)]
    (. builder alternateBandColorsVisibility data))
  (when-let [data (lookup-entry config id :alternate-band-even-color)]
    (. builder alternateBandEvenColor data))
  (when-let [data (lookup-entry config id :alternate-band-odd-color)]
    (. builder alternateBandOddColor data))
  (when-let [data (lookup-entry config id :axes-range-scale)]
    (. builder axesRangeScale data))
  (when-let [data (lookup-entry config id :base-series-settings)]
    (. builder baseSeriesSettings data))
  (when-let [data (lookup-entry config id :category-axis)]
    (. builder categoryAxis data))
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :color-axis)]
    (. builder colorAxis data))
  (when-let [data (lookup-entry config id :color-label-options)]
    (. builder colorLabelOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :shape)]
    (. builder shape data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :start-angle)]
    (. builder startAngle data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-analysis-radar-chart-configuration-property-builder
  "Creates a  `CfnAnalysis$RadarChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-radar-chart-configuration-property-builder (new CfnAnalysis$RadarChartConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-radar-chart-field-wells-property-builder
  "The build-cfn-analysis-radar-chart-field-wells-property-builder function updates a CfnAnalysis$RadarChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$RadarChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `radarChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:radar-chart-aggregated-field-wells` |
"
  [^CfnAnalysis$RadarChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :radar-chart-aggregated-field-wells)]
    (. builder radarChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-radar-chart-field-wells-property-builder
  "Creates a  `CfnAnalysis$RadarChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-radar-chart-field-wells-property-builder (new CfnAnalysis$RadarChartFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-radar-chart-series-settings-property-builder
  "The build-cfn-analysis-radar-chart-series-settings-property-builder function updates a CfnAnalysis$RadarChartSeriesSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$RadarChartSeriesSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `areaStyleSettings` | software.amazon.awscdk.services.quicksight.CfnAnalysis$RadarChartAreaStyleSettingsProperty | [[cdk.support/lookup-entry]] | `:area-style-settings` |
"
  [^CfnAnalysis$RadarChartSeriesSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :area-style-settings)]
    (. builder areaStyleSettings data))
  (.build builder))


(defn cfn-analysis-radar-chart-series-settings-property-builder
  "Creates a  `CfnAnalysis$RadarChartSeriesSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-radar-chart-series-settings-property-builder (new CfnAnalysis$RadarChartSeriesSettingsProperty$Builder) id config))


(defn build-cfn-analysis-radar-chart-sort-configuration-property-builder
  "The build-cfn-analysis-radar-chart-sort-configuration-property-builder function updates a CfnAnalysis$RadarChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$RadarChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | java.util.List | [[cdk.support/lookup-entry]] | `:color-sort` |
"
  [^CfnAnalysis$RadarChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :color-items-limit)]
    (. builder colorItemsLimit data))
  (when-let [data (lookup-entry config id :color-sort)]
    (. builder colorSort data))
  (.build builder))


(defn cfn-analysis-radar-chart-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$RadarChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-radar-chart-sort-configuration-property-builder (new CfnAnalysis$RadarChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-radar-chart-visual-property-builder
  "The build-cfn-analysis-radar-chart-visual-property-builder function updates a CfnAnalysis$RadarChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$RadarChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$RadarChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-radar-chart-visual-property-builder
  "Creates a  `CfnAnalysis$RadarChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-radar-chart-visual-property-builder (new CfnAnalysis$RadarChartVisualProperty$Builder) id config))


(defn build-cfn-analysis-range-ends-label-type-property-builder
  "The build-cfn-analysis-range-ends-label-type-property-builder function updates a CfnAnalysis$RangeEndsLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$RangeEndsLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$RangeEndsLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-range-ends-label-type-property-builder
  "Creates a  `CfnAnalysis$RangeEndsLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-range-ends-label-type-property-builder (new CfnAnalysis$RangeEndsLabelTypeProperty$Builder) id config))


(defn build-cfn-analysis-reference-line-custom-label-configuration-property-builder
  "The build-cfn-analysis-reference-line-custom-label-configuration-property-builder function updates a CfnAnalysis$ReferenceLineCustomLabelConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ReferenceLineCustomLabelConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
"
  [^CfnAnalysis$ReferenceLineCustomLabelConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (.build builder))


(defn cfn-analysis-reference-line-custom-label-configuration-property-builder
  "Creates a  `CfnAnalysis$ReferenceLineCustomLabelConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-reference-line-custom-label-configuration-property-builder (new CfnAnalysis$ReferenceLineCustomLabelConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-reference-line-data-configuration-property-builder
  "The build-cfn-analysis-reference-line-data-configuration-property-builder function updates a CfnAnalysis$ReferenceLineDataConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ReferenceLineDataConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `dynamicConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-configuration` |
| `seriesType` | java.lang.String | [[cdk.support/lookup-entry]] | `:series-type` |
| `staticConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ReferenceLineStaticDataConfigurationProperty | [[cdk.support/lookup-entry]] | `:static-configuration` |
"
  [^CfnAnalysis$ReferenceLineDataConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-binding)]
    (. builder axisBinding data))
  (when-let [data (lookup-entry config id :dynamic-configuration)]
    (. builder dynamicConfiguration data))
  (when-let [data (lookup-entry config id :series-type)]
    (. builder seriesType data))
  (when-let [data (lookup-entry config id :static-configuration)]
    (. builder staticConfiguration data))
  (.build builder))


(defn cfn-analysis-reference-line-data-configuration-property-builder
  "Creates a  `CfnAnalysis$ReferenceLineDataConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-reference-line-data-configuration-property-builder (new CfnAnalysis$ReferenceLineDataConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-reference-line-dynamic-data-configuration-property-builder
  "The build-cfn-analysis-reference-line-dynamic-data-configuration-property-builder function updates a CfnAnalysis$ReferenceLineDynamicDataConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ReferenceLineDynamicDataConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `calculation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:calculation` |
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `measureAggregationFunction` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:measure-aggregation-function` |
"
  [^CfnAnalysis$ReferenceLineDynamicDataConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :calculation)]
    (. builder calculation data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :measure-aggregation-function)]
    (. builder measureAggregationFunction data))
  (.build builder))


(defn cfn-analysis-reference-line-dynamic-data-configuration-property-builder
  "Creates a  `CfnAnalysis$ReferenceLineDynamicDataConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-reference-line-dynamic-data-configuration-property-builder (new CfnAnalysis$ReferenceLineDynamicDataConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-reference-line-label-configuration-property-builder
  "The build-cfn-analysis-reference-line-label-configuration-property-builder function updates a CfnAnalysis$ReferenceLineLabelConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ReferenceLineLabelConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabelConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-label-configuration` |
| `fontColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-color` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `horizontalPosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-position` |
| `valueLabelConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ReferenceLineValueLabelConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-label-configuration` |
| `verticalPosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-position` |
"
  [^CfnAnalysis$ReferenceLineLabelConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label-configuration)]
    (. builder customLabelConfiguration data))
  (when-let [data (lookup-entry config id :font-color)]
    (. builder fontColor data))
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (when-let [data (lookup-entry config id :horizontal-position)]
    (. builder horizontalPosition data))
  (when-let [data (lookup-entry config id :value-label-configuration)]
    (. builder valueLabelConfiguration data))
  (when-let [data (lookup-entry config id :vertical-position)]
    (. builder verticalPosition data))
  (.build builder))


(defn cfn-analysis-reference-line-label-configuration-property-builder
  "Creates a  `CfnAnalysis$ReferenceLineLabelConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-reference-line-label-configuration-property-builder (new CfnAnalysis$ReferenceLineLabelConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-reference-line-property-builder
  "The build-cfn-analysis-reference-line-property-builder function updates a CfnAnalysis$ReferenceLineProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ReferenceLineProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ReferenceLineDataConfigurationProperty | [[cdk.support/lookup-entry]] | `:data-configuration` |
| `labelConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ReferenceLineLabelConfigurationProperty | [[cdk.support/lookup-entry]] | `:label-configuration` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `styleConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ReferenceLineStyleConfigurationProperty | [[cdk.support/lookup-entry]] | `:style-configuration` |
"
  [^CfnAnalysis$ReferenceLineProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-configuration)]
    (. builder dataConfiguration data))
  (when-let [data (lookup-entry config id :label-configuration)]
    (. builder labelConfiguration data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (when-let [data (lookup-entry config id :style-configuration)]
    (. builder styleConfiguration data))
  (.build builder))


(defn cfn-analysis-reference-line-property-builder
  "Creates a  `CfnAnalysis$ReferenceLineProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-reference-line-property-builder (new CfnAnalysis$ReferenceLineProperty$Builder) id config))


(defn build-cfn-analysis-reference-line-static-data-configuration-property-builder
  "The build-cfn-analysis-reference-line-static-data-configuration-property-builder function updates a CfnAnalysis$ReferenceLineStaticDataConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ReferenceLineStaticDataConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$ReferenceLineStaticDataConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-reference-line-static-data-configuration-property-builder
  "Creates a  `CfnAnalysis$ReferenceLineStaticDataConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-reference-line-static-data-configuration-property-builder (new CfnAnalysis$ReferenceLineStaticDataConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-reference-line-style-configuration-property-builder
  "The build-cfn-analysis-reference-line-style-configuration-property-builder function updates a CfnAnalysis$ReferenceLineStyleConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ReferenceLineStyleConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `pattern` | java.lang.String | [[cdk.support/lookup-entry]] | `:pattern` |
"
  [^CfnAnalysis$ReferenceLineStyleConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :pattern)]
    (. builder pattern data))
  (.build builder))


(defn cfn-analysis-reference-line-style-configuration-property-builder
  "Creates a  `CfnAnalysis$ReferenceLineStyleConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-reference-line-style-configuration-property-builder (new CfnAnalysis$ReferenceLineStyleConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-reference-line-value-label-configuration-property-builder
  "The build-cfn-analysis-reference-line-value-label-configuration-property-builder function updates a CfnAnalysis$ReferenceLineValueLabelConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ReferenceLineValueLabelConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `relativePosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative-position` |
"
  [^CfnAnalysis$ReferenceLineValueLabelConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (when-let [data (lookup-entry config id :relative-position)]
    (. builder relativePosition data))
  (.build builder))


(defn cfn-analysis-reference-line-value-label-configuration-property-builder
  "Creates a  `CfnAnalysis$ReferenceLineValueLabelConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-reference-line-value-label-configuration-property-builder (new CfnAnalysis$ReferenceLineValueLabelConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-relative-date-time-control-display-options-property-builder
  "The build-cfn-analysis-relative-date-time-control-display-options-property-builder function updates a CfnAnalysis$RelativeDateTimeControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$RelativeDateTimeControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnAnalysis$RelativeDateTimeControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-format)]
    (. builder dateTimeFormat data))
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-analysis-relative-date-time-control-display-options-property-builder
  "Creates a  `CfnAnalysis$RelativeDateTimeControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-relative-date-time-control-display-options-property-builder (new CfnAnalysis$RelativeDateTimeControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-analysis-relative-dates-filter-property-builder
  "The build-cfn-analysis-relative-dates-filter-property-builder function updates a CfnAnalysis$RelativeDatesFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$RelativeDatesFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `anchorDateConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:anchor-date-configuration` |
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `excludePeriodConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ExcludePeriodConfigurationProperty | [[cdk.support/lookup-entry]] | `:exclude-period-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `minimumGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:minimum-granularity` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `relativeDateType` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative-date-type` |
| `relativeDateValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:relative-date-value` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnAnalysis$RelativeDatesFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :anchor-date-configuration)]
    (. builder anchorDateConfiguration data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :exclude-period-configuration)]
    (. builder excludePeriodConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :minimum-granularity)]
    (. builder minimumGranularity data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (when-let [data (lookup-entry config id :relative-date-type)]
    (. builder relativeDateType data))
  (when-let [data (lookup-entry config id :relative-date-value)]
    (. builder relativeDateValue data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-analysis-relative-dates-filter-property-builder
  "Creates a  `CfnAnalysis$RelativeDatesFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-relative-dates-filter-property-builder (new CfnAnalysis$RelativeDatesFilterProperty$Builder) id config))


(defn build-cfn-analysis-resource-permission-property-builder
  "The build-cfn-analysis-resource-permission-property-builder function updates a CfnAnalysis$ResourcePermissionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ResourcePermissionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `principal` | java.lang.String | [[cdk.support/lookup-entry]] | `:principal` |
| `resource` | java.lang.String | [[cdk.support/lookup-entry]] | `:resource` |
"
  [^CfnAnalysis$ResourcePermissionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :principal)]
    (. builder principal data))
  (when-let [data (lookup-entry config id :resource)]
    (. builder resource data))
  (.build builder))


(defn cfn-analysis-resource-permission-property-builder
  "Creates a  `CfnAnalysis$ResourcePermissionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-resource-permission-property-builder (new CfnAnalysis$ResourcePermissionProperty$Builder) id config))


(defn build-cfn-analysis-rolling-date-configuration-property-builder
  "The build-cfn-analysis-rolling-date-configuration-property-builder function updates a CfnAnalysis$RollingDateConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$RollingDateConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
"
  [^CfnAnalysis$RollingDateConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (.build builder))


(defn cfn-analysis-rolling-date-configuration-property-builder
  "Creates a  `CfnAnalysis$RollingDateConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-rolling-date-configuration-property-builder (new CfnAnalysis$RollingDateConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-row-alternate-color-options-property-builder
  "The build-cfn-analysis-row-alternate-color-options-property-builder function updates a CfnAnalysis$RowAlternateColorOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$RowAlternateColorOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `rowAlternateColors` | java.util.List | [[cdk.support/lookup-entry]] | `:row-alternate-colors` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `usePrimaryBackgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:use-primary-background-color` |
"
  [^CfnAnalysis$RowAlternateColorOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :row-alternate-colors)]
    (. builder rowAlternateColors data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (when-let [data (lookup-entry config id :use-primary-background-color)]
    (. builder usePrimaryBackgroundColor data))
  (.build builder))


(defn cfn-analysis-row-alternate-color-options-property-builder
  "Creates a  `CfnAnalysis$RowAlternateColorOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-row-alternate-color-options-property-builder (new CfnAnalysis$RowAlternateColorOptionsProperty$Builder) id config))


(defn build-cfn-analysis-same-sheet-target-visual-configuration-property-builder
  "The build-cfn-analysis-same-sheet-target-visual-configuration-property-builder function updates a CfnAnalysis$SameSheetTargetVisualConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SameSheetTargetVisualConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetVisualOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:target-visual-options` |
| `targetVisuals` | java.util.List | [[cdk.support/lookup-entry]] | `:target-visuals` |
"
  [^CfnAnalysis$SameSheetTargetVisualConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :target-visual-options)]
    (. builder targetVisualOptions data))
  (when-let [data (lookup-entry config id :target-visuals)]
    (. builder targetVisuals data))
  (.build builder))


(defn cfn-analysis-same-sheet-target-visual-configuration-property-builder
  "Creates a  `CfnAnalysis$SameSheetTargetVisualConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-same-sheet-target-visual-configuration-property-builder (new CfnAnalysis$SameSheetTargetVisualConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-sankey-diagram-aggregated-field-wells-property-builder
  "The build-cfn-analysis-sankey-diagram-aggregated-field-wells-property-builder function updates a CfnAnalysis$SankeyDiagramAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SankeyDiagramAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destination` | java.util.List | [[cdk.support/lookup-entry]] | `:destination` |
| `source` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source` |
| `weight` | java.util.List | [[cdk.support/lookup-entry]] | `:weight` |
"
  [^CfnAnalysis$SankeyDiagramAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :destination)]
    (. builder destination data))
  (when-let [data (lookup-entry config id :source)]
    (. builder source data))
  (when-let [data (lookup-entry config id :weight)]
    (. builder weight data))
  (.build builder))


(defn cfn-analysis-sankey-diagram-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$SankeyDiagramAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-sankey-diagram-aggregated-field-wells-property-builder (new CfnAnalysis$SankeyDiagramAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-sankey-diagram-chart-configuration-property-builder
  "The build-cfn-analysis-sankey-diagram-chart-configuration-property-builder function updates a CfnAnalysis$SankeyDiagramChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SankeyDiagramChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SankeyDiagramFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SankeyDiagramSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
"
  [^CfnAnalysis$SankeyDiagramChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (.build builder))


(defn cfn-analysis-sankey-diagram-chart-configuration-property-builder
  "Creates a  `CfnAnalysis$SankeyDiagramChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-sankey-diagram-chart-configuration-property-builder (new CfnAnalysis$SankeyDiagramChartConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-sankey-diagram-field-wells-property-builder
  "The build-cfn-analysis-sankey-diagram-field-wells-property-builder function updates a CfnAnalysis$SankeyDiagramFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SankeyDiagramFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sankeyDiagramAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SankeyDiagramAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:sankey-diagram-aggregated-field-wells` |
"
  [^CfnAnalysis$SankeyDiagramFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :sankey-diagram-aggregated-field-wells)]
    (. builder sankeyDiagramAggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-sankey-diagram-field-wells-property-builder
  "Creates a  `CfnAnalysis$SankeyDiagramFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-sankey-diagram-field-wells-property-builder (new CfnAnalysis$SankeyDiagramFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-sankey-diagram-sort-configuration-property-builder
  "The build-cfn-analysis-sankey-diagram-sort-configuration-property-builder function updates a CfnAnalysis$SankeyDiagramSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SankeyDiagramSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destinationItemsLimit` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:destination-items-limit` |
| `sourceItemsLimit` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:source-items-limit` |
| `weightSort` | java.util.List | [[cdk.support/lookup-entry]] | `:weight-sort` |
"
  [^CfnAnalysis$SankeyDiagramSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :destination-items-limit)]
    (. builder destinationItemsLimit data))
  (when-let [data (lookup-entry config id :source-items-limit)]
    (. builder sourceItemsLimit data))
  (when-let [data (lookup-entry config id :weight-sort)]
    (. builder weightSort data))
  (.build builder))


(defn cfn-analysis-sankey-diagram-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$SankeyDiagramSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-sankey-diagram-sort-configuration-property-builder (new CfnAnalysis$SankeyDiagramSortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-sankey-diagram-visual-property-builder
  "The build-cfn-analysis-sankey-diagram-visual-property-builder function updates a CfnAnalysis$SankeyDiagramVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SankeyDiagramVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SankeyDiagramChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$SankeyDiagramVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-sankey-diagram-visual-property-builder
  "Creates a  `CfnAnalysis$SankeyDiagramVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-sankey-diagram-visual-property-builder (new CfnAnalysis$SankeyDiagramVisualProperty$Builder) id config))


(defn build-cfn-analysis-scatter-plot-categorically-aggregated-field-wells-property-builder
  "The build-cfn-analysis-scatter-plot-categorically-aggregated-field-wells-property-builder function updates a CfnAnalysis$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `label` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label` |
| `size` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:size` |
| `xAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:y-axis` |
"
  [^CfnAnalysis$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :label)]
    (. builder label data))
  (when-let [data (lookup-entry config id :size)]
    (. builder size data))
  (when-let [data (lookup-entry config id :x-axis)]
    (. builder xAxis data))
  (when-let [data (lookup-entry config id :y-axis)]
    (. builder yAxis data))
  (.build builder))


(defn cfn-analysis-scatter-plot-categorically-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-scatter-plot-categorically-aggregated-field-wells-property-builder (new CfnAnalysis$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-scatter-plot-configuration-property-builder
  "The build-cfn-analysis-scatter-plot-configuration-property-builder function updates a CfnAnalysis$ScatterPlotConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ScatterPlotConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |
| `yAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:y-axis-display-options` |
| `yAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:y-axis-label-options` |
"
  [^CfnAnalysis$ScatterPlotConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (when-let [data (lookup-entry config id :x-axis-display-options)]
    (. builder xAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :x-axis-label-options)]
    (. builder xAxisLabelOptions data))
  (when-let [data (lookup-entry config id :y-axis-display-options)]
    (. builder yAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :y-axis-label-options)]
    (. builder yAxisLabelOptions data))
  (.build builder))


(defn cfn-analysis-scatter-plot-configuration-property-builder
  "Creates a  `CfnAnalysis$ScatterPlotConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-scatter-plot-configuration-property-builder (new CfnAnalysis$ScatterPlotConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-scatter-plot-field-wells-property-builder
  "The build-cfn-analysis-scatter-plot-field-wells-property-builder function updates a CfnAnalysis$ScatterPlotFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ScatterPlotFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `scatterPlotCategoricallyAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scatter-plot-categorically-aggregated-field-wells` |
| `scatterPlotUnaggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scatter-plot-unaggregated-field-wells` |
"
  [^CfnAnalysis$ScatterPlotFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :scatter-plot-categorically-aggregated-field-wells)]
    (. builder scatterPlotCategoricallyAggregatedFieldWells data))
  (when-let [data (lookup-entry config id :scatter-plot-unaggregated-field-wells)]
    (. builder scatterPlotUnaggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-scatter-plot-field-wells-property-builder
  "Creates a  `CfnAnalysis$ScatterPlotFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-scatter-plot-field-wells-property-builder (new CfnAnalysis$ScatterPlotFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-scatter-plot-unaggregated-field-wells-property-builder
  "The build-cfn-analysis-scatter-plot-unaggregated-field-wells-property-builder function updates a CfnAnalysis$ScatterPlotUnaggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ScatterPlotUnaggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `label` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label` |
| `size` | java.util.List | [[cdk.support/lookup-entry]] | `:size` |
| `xAxis` | java.util.List | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | java.util.List | [[cdk.support/lookup-entry]] | `:y-axis` |
"
  [^CfnAnalysis$ScatterPlotUnaggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :label)]
    (. builder label data))
  (when-let [data (lookup-entry config id :size)]
    (. builder size data))
  (when-let [data (lookup-entry config id :x-axis)]
    (. builder xAxis data))
  (when-let [data (lookup-entry config id :y-axis)]
    (. builder yAxis data))
  (.build builder))


(defn cfn-analysis-scatter-plot-unaggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$ScatterPlotUnaggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-scatter-plot-unaggregated-field-wells-property-builder (new CfnAnalysis$ScatterPlotUnaggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-scatter-plot-visual-property-builder
  "The build-cfn-analysis-scatter-plot-visual-property-builder function updates a CfnAnalysis$ScatterPlotVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ScatterPlotVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ScatterPlotConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$ScatterPlotVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-scatter-plot-visual-property-builder
  "Creates a  `CfnAnalysis$ScatterPlotVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-scatter-plot-visual-property-builder (new CfnAnalysis$ScatterPlotVisualProperty$Builder) id config))


(defn build-cfn-analysis-scroll-bar-options-property-builder
  "The build-cfn-analysis-scroll-bar-options-property-builder function updates a CfnAnalysis$ScrollBarOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ScrollBarOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `visibleRange` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visible-range` |
"
  [^CfnAnalysis$ScrollBarOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (when-let [data (lookup-entry config id :visible-range)]
    (. builder visibleRange data))
  (.build builder))


(defn cfn-analysis-scroll-bar-options-property-builder
  "Creates a  `CfnAnalysis$ScrollBarOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-scroll-bar-options-property-builder (new CfnAnalysis$ScrollBarOptionsProperty$Builder) id config))


(defn build-cfn-analysis-secondary-value-options-property-builder
  "The build-cfn-analysis-secondary-value-options-property-builder function updates a CfnAnalysis$SecondaryValueOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SecondaryValueOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$SecondaryValueOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-secondary-value-options-property-builder
  "Creates a  `CfnAnalysis$SecondaryValueOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-secondary-value-options-property-builder (new CfnAnalysis$SecondaryValueOptionsProperty$Builder) id config))


(defn build-cfn-analysis-section-after-page-break-property-builder
  "The build-cfn-analysis-section-after-page-break-property-builder function updates a CfnAnalysis$SectionAfterPageBreakProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SectionAfterPageBreakProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
"
  [^CfnAnalysis$SectionAfterPageBreakProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (.build builder))


(defn cfn-analysis-section-after-page-break-property-builder
  "Creates a  `CfnAnalysis$SectionAfterPageBreakProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-section-after-page-break-property-builder (new CfnAnalysis$SectionAfterPageBreakProperty$Builder) id config))


(defn build-cfn-analysis-section-based-layout-canvas-size-options-property-builder
  "The build-cfn-analysis-section-based-layout-canvas-size-options-property-builder function updates a CfnAnalysis$SectionBasedLayoutCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SectionBasedLayoutCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paperCanvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SectionBasedLayoutPaperCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:paper-canvas-size-options` |
"
  [^CfnAnalysis$SectionBasedLayoutCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :paper-canvas-size-options)]
    (. builder paperCanvasSizeOptions data))
  (.build builder))


(defn cfn-analysis-section-based-layout-canvas-size-options-property-builder
  "Creates a  `CfnAnalysis$SectionBasedLayoutCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-section-based-layout-canvas-size-options-property-builder (new CfnAnalysis$SectionBasedLayoutCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-analysis-section-based-layout-configuration-property-builder
  "The build-cfn-analysis-section-based-layout-configuration-property-builder function updates a CfnAnalysis$SectionBasedLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SectionBasedLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bodySections` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:body-sections` |
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `footerSections` | java.util.List | [[cdk.support/lookup-entry]] | `:footer-sections` |
| `headerSections` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:header-sections` |
"
  [^CfnAnalysis$SectionBasedLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :body-sections)]
    (. builder bodySections data))
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (when-let [data (lookup-entry config id :footer-sections)]
    (. builder footerSections data))
  (when-let [data (lookup-entry config id :header-sections)]
    (. builder headerSections data))
  (.build builder))


(defn cfn-analysis-section-based-layout-configuration-property-builder
  "Creates a  `CfnAnalysis$SectionBasedLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-section-based-layout-configuration-property-builder (new CfnAnalysis$SectionBasedLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-section-based-layout-paper-canvas-size-options-property-builder
  "The build-cfn-analysis-section-based-layout-paper-canvas-size-options-property-builder function updates a CfnAnalysis$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paperMargin` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SpacingProperty | [[cdk.support/lookup-entry]] | `:paper-margin` |
| `paperOrientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:paper-orientation` |
| `paperSize` | java.lang.String | [[cdk.support/lookup-entry]] | `:paper-size` |
"
  [^CfnAnalysis$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :paper-margin)]
    (. builder paperMargin data))
  (when-let [data (lookup-entry config id :paper-orientation)]
    (. builder paperOrientation data))
  (when-let [data (lookup-entry config id :paper-size)]
    (. builder paperSize data))
  (.build builder))


(defn cfn-analysis-section-based-layout-paper-canvas-size-options-property-builder
  "Creates a  `CfnAnalysis$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-section-based-layout-paper-canvas-size-options-property-builder (new CfnAnalysis$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-analysis-section-layout-configuration-property-builder
  "The build-cfn-analysis-section-layout-configuration-property-builder function updates a CfnAnalysis$SectionLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SectionLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeFormLayout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:free-form-layout` |
"
  [^CfnAnalysis$SectionLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :free-form-layout)]
    (. builder freeFormLayout data))
  (.build builder))


(defn cfn-analysis-section-layout-configuration-property-builder
  "Creates a  `CfnAnalysis$SectionLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-section-layout-configuration-property-builder (new CfnAnalysis$SectionLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-section-page-break-configuration-property-builder
  "The build-cfn-analysis-section-page-break-configuration-property-builder function updates a CfnAnalysis$SectionPageBreakConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SectionPageBreakConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `after` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:after` |
"
  [^CfnAnalysis$SectionPageBreakConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :after)]
    (. builder after data))
  (.build builder))


(defn cfn-analysis-section-page-break-configuration-property-builder
  "Creates a  `CfnAnalysis$SectionPageBreakConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-section-page-break-configuration-property-builder (new CfnAnalysis$SectionPageBreakConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-section-style-property-builder
  "The build-cfn-analysis-section-style-property-builder function updates a CfnAnalysis$SectionStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SectionStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `padding` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SpacingProperty | [[cdk.support/lookup-entry]] | `:padding` |
"
  [^CfnAnalysis$SectionStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :height)]
    (. builder height data))
  (when-let [data (lookup-entry config id :padding)]
    (. builder padding data))
  (.build builder))


(defn cfn-analysis-section-style-property-builder
  "Creates a  `CfnAnalysis$SectionStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-section-style-property-builder (new CfnAnalysis$SectionStyleProperty$Builder) id config))


(defn build-cfn-analysis-selected-sheets-filter-scope-configuration-property-builder
  "The build-cfn-analysis-selected-sheets-filter-scope-configuration-property-builder function updates a CfnAnalysis$SelectedSheetsFilterScopeConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SelectedSheetsFilterScopeConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sheetVisualScopingConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:sheet-visual-scoping-configurations` |
"
  [^CfnAnalysis$SelectedSheetsFilterScopeConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :sheet-visual-scoping-configurations)]
    (. builder sheetVisualScopingConfigurations data))
  (.build builder))


(defn cfn-analysis-selected-sheets-filter-scope-configuration-property-builder
  "Creates a  `CfnAnalysis$SelectedSheetsFilterScopeConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-selected-sheets-filter-scope-configuration-property-builder (new CfnAnalysis$SelectedSheetsFilterScopeConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-series-item-property-builder
  "The build-cfn-analysis-series-item-property-builder function updates a CfnAnalysis$SeriesItemProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SeriesItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataFieldSeriesItem` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-field-series-item` |
| `fieldSeriesItem` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-series-item` |
"
  [^CfnAnalysis$SeriesItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-field-series-item)]
    (. builder dataFieldSeriesItem data))
  (when-let [data (lookup-entry config id :field-series-item)]
    (. builder fieldSeriesItem data))
  (.build builder))


(defn cfn-analysis-series-item-property-builder
  "Creates a  `CfnAnalysis$SeriesItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-series-item-property-builder (new CfnAnalysis$SeriesItemProperty$Builder) id config))


(defn build-cfn-analysis-set-parameter-value-configuration-property-builder
  "The build-cfn-analysis-set-parameter-value-configuration-property-builder function updates a CfnAnalysis$SetParameterValueConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SetParameterValueConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destinationParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:destination-parameter-name` |
| `value` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DestinationParameterValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$SetParameterValueConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :destination-parameter-name)]
    (. builder destinationParameterName data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-set-parameter-value-configuration-property-builder
  "Creates a  `CfnAnalysis$SetParameterValueConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-set-parameter-value-configuration-property-builder (new CfnAnalysis$SetParameterValueConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-shape-conditional-format-property-builder
  "The build-cfn-analysis-shape-conditional-format-property-builder function updates a CfnAnalysis$ShapeConditionalFormatProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ShapeConditionalFormatProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:background-color` |
"
  [^CfnAnalysis$ShapeConditionalFormatProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-color)]
    (. builder backgroundColor data))
  (.build builder))


(defn cfn-analysis-shape-conditional-format-property-builder
  "Creates a  `CfnAnalysis$ShapeConditionalFormatProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-shape-conditional-format-property-builder (new CfnAnalysis$ShapeConditionalFormatProperty$Builder) id config))


(defn build-cfn-analysis-sheet-control-info-icon-label-options-property-builder
  "The build-cfn-analysis-sheet-control-info-icon-label-options-property-builder function updates a CfnAnalysis$SheetControlInfoIconLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SheetControlInfoIconLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconText` | java.lang.String | [[cdk.support/lookup-entry]] | `:info-icon-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$SheetControlInfoIconLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-text)]
    (. builder infoIconText data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-sheet-control-info-icon-label-options-property-builder
  "Creates a  `CfnAnalysis$SheetControlInfoIconLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-sheet-control-info-icon-label-options-property-builder (new CfnAnalysis$SheetControlInfoIconLabelOptionsProperty$Builder) id config))


(defn build-cfn-analysis-sheet-control-layout-configuration-property-builder
  "The build-cfn-analysis-sheet-control-layout-configuration-property-builder function updates a CfnAnalysis$SheetControlLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SheetControlLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `gridLayout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:grid-layout` |
"
  [^CfnAnalysis$SheetControlLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :grid-layout)]
    (. builder gridLayout data))
  (.build builder))


(defn cfn-analysis-sheet-control-layout-configuration-property-builder
  "Creates a  `CfnAnalysis$SheetControlLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-sheet-control-layout-configuration-property-builder (new CfnAnalysis$SheetControlLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-sheet-control-layout-property-builder
  "The build-cfn-analysis-sheet-control-layout-property-builder function updates a CfnAnalysis$SheetControlLayoutProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SheetControlLayoutProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configuration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SheetControlLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:configuration` |
"
  [^CfnAnalysis$SheetControlLayoutProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :configuration)]
    (. builder configuration data))
  (.build builder))


(defn cfn-analysis-sheet-control-layout-property-builder
  "Creates a  `CfnAnalysis$SheetControlLayoutProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-sheet-control-layout-property-builder (new CfnAnalysis$SheetControlLayoutProperty$Builder) id config))


(defn build-cfn-analysis-sheet-definition-property-builder
  "The build-cfn-analysis-sheet-definition-property-builder function updates a CfnAnalysis$SheetDefinitionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SheetDefinitionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-type` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `filterControls` | java.util.List | [[cdk.support/lookup-entry]] | `:filter-controls` |
| `layouts` | java.util.List | [[cdk.support/lookup-entry]] | `:layouts` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterControls` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameter-controls` |
| `sheetControlLayouts` | java.util.List | [[cdk.support/lookup-entry]] | `:sheet-control-layouts` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |
| `textBoxes` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-boxes` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `visuals` | java.util.List | [[cdk.support/lookup-entry]] | `:visuals` |
"
  [^CfnAnalysis$SheetDefinitionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :content-type)]
    (. builder contentType data))
  (when-let [data (lookup-entry config id :description)]
    (. builder description data))
  (when-let [data (lookup-entry config id :filter-controls)]
    (. builder filterControls data))
  (when-let [data (lookup-entry config id :layouts)]
    (. builder layouts data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :parameter-controls)]
    (. builder parameterControls data))
  (when-let [data (lookup-entry config id :sheet-control-layouts)]
    (. builder sheetControlLayouts data))
  (when-let [data (lookup-entry config id :sheet-id)]
    (. builder sheetId data))
  (when-let [data (lookup-entry config id :text-boxes)]
    (. builder textBoxes data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visuals)]
    (. builder visuals data))
  (.build builder))


(defn cfn-analysis-sheet-definition-property-builder
  "Creates a  `CfnAnalysis$SheetDefinitionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-sheet-definition-property-builder (new CfnAnalysis$SheetDefinitionProperty$Builder) id config))


(defn build-cfn-analysis-sheet-element-configuration-overrides-property-builder
  "The build-cfn-analysis-sheet-element-configuration-overrides-property-builder function updates a CfnAnalysis$SheetElementConfigurationOverridesProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SheetElementConfigurationOverridesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$SheetElementConfigurationOverridesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-sheet-element-configuration-overrides-property-builder
  "Creates a  `CfnAnalysis$SheetElementConfigurationOverridesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-sheet-element-configuration-overrides-property-builder (new CfnAnalysis$SheetElementConfigurationOverridesProperty$Builder) id config))


(defn build-cfn-analysis-sheet-element-rendering-rule-property-builder
  "The build-cfn-analysis-sheet-element-rendering-rule-property-builder function updates a CfnAnalysis$SheetElementRenderingRuleProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SheetElementRenderingRuleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configurationOverrides` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SheetElementConfigurationOverridesProperty | [[cdk.support/lookup-entry]] | `:configuration-overrides` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
"
  [^CfnAnalysis$SheetElementRenderingRuleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :configuration-overrides)]
    (. builder configurationOverrides data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (.build builder))


(defn cfn-analysis-sheet-element-rendering-rule-property-builder
  "Creates a  `CfnAnalysis$SheetElementRenderingRuleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-sheet-element-rendering-rule-property-builder (new CfnAnalysis$SheetElementRenderingRuleProperty$Builder) id config))


(defn build-cfn-analysis-sheet-property-builder
  "The build-cfn-analysis-sheet-property-builder function updates a CfnAnalysis$SheetProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SheetProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |
"
  [^CfnAnalysis$SheetProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :sheet-id)]
    (. builder sheetId data))
  (.build builder))


(defn cfn-analysis-sheet-property-builder
  "Creates a  `CfnAnalysis$SheetProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-sheet-property-builder (new CfnAnalysis$SheetProperty$Builder) id config))


(defn build-cfn-analysis-sheet-text-box-property-builder
  "The build-cfn-analysis-sheet-text-box-property-builder function updates a CfnAnalysis$SheetTextBoxProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SheetTextBoxProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | java.lang.String | [[cdk.support/lookup-entry]] | `:content` |
| `sheetTextBoxId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-text-box-id` |
"
  [^CfnAnalysis$SheetTextBoxProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :content)]
    (. builder content data))
  (when-let [data (lookup-entry config id :sheet-text-box-id)]
    (. builder sheetTextBoxId data))
  (.build builder))


(defn cfn-analysis-sheet-text-box-property-builder
  "Creates a  `CfnAnalysis$SheetTextBoxProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-sheet-text-box-property-builder (new CfnAnalysis$SheetTextBoxProperty$Builder) id config))


(defn build-cfn-analysis-sheet-visual-scoping-configuration-property-builder
  "The build-cfn-analysis-sheet-visual-scoping-configuration-property-builder function updates a CfnAnalysis$SheetVisualScopingConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SheetVisualScopingConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `scope` | java.lang.String | [[cdk.support/lookup-entry]] | `:scope` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |
| `visualIds` | java.util.List | [[cdk.support/lookup-entry]] | `:visual-ids` |
"
  [^CfnAnalysis$SheetVisualScopingConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :scope)]
    (. builder scope data))
  (when-let [data (lookup-entry config id :sheet-id)]
    (. builder sheetId data))
  (when-let [data (lookup-entry config id :visual-ids)]
    (. builder visualIds data))
  (.build builder))


(defn cfn-analysis-sheet-visual-scoping-configuration-property-builder
  "Creates a  `CfnAnalysis$SheetVisualScopingConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-sheet-visual-scoping-configuration-property-builder (new CfnAnalysis$SheetVisualScopingConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-short-format-text-property-builder
  "The build-cfn-analysis-short-format-text-property-builder function updates a CfnAnalysis$ShortFormatTextProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ShortFormatTextProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `plainText` | java.lang.String | [[cdk.support/lookup-entry]] | `:plain-text` |
| `richText` | java.lang.String | [[cdk.support/lookup-entry]] | `:rich-text` |
"
  [^CfnAnalysis$ShortFormatTextProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :plain-text)]
    (. builder plainText data))
  (when-let [data (lookup-entry config id :rich-text)]
    (. builder richText data))
  (.build builder))


(defn cfn-analysis-short-format-text-property-builder
  "Creates a  `CfnAnalysis$ShortFormatTextProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-short-format-text-property-builder (new CfnAnalysis$ShortFormatTextProperty$Builder) id config))


(defn build-cfn-analysis-simple-cluster-marker-property-builder
  "The build-cfn-analysis-simple-cluster-marker-property-builder function updates a CfnAnalysis$SimpleClusterMarkerProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SimpleClusterMarkerProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
"
  [^CfnAnalysis$SimpleClusterMarkerProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (.build builder))


(defn cfn-analysis-simple-cluster-marker-property-builder
  "Creates a  `CfnAnalysis$SimpleClusterMarkerProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-simple-cluster-marker-property-builder (new CfnAnalysis$SimpleClusterMarkerProperty$Builder) id config))


(defn build-cfn-analysis-slider-control-display-options-property-builder
  "The build-cfn-analysis-slider-control-display-options-property-builder function updates a CfnAnalysis$SliderControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SliderControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnAnalysis$SliderControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-analysis-slider-control-display-options-property-builder
  "Creates a  `CfnAnalysis$SliderControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-slider-control-display-options-property-builder (new CfnAnalysis$SliderControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-analysis-small-multiples-axis-properties-property-builder
  "The build-cfn-analysis-small-multiples-axis-properties-property-builder function updates a CfnAnalysis$SmallMultiplesAxisPropertiesProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SmallMultiplesAxisPropertiesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scale` | java.lang.String | [[cdk.support/lookup-entry]] | `:scale` |
"
  [^CfnAnalysis$SmallMultiplesAxisPropertiesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :placement)]
    (. builder placement data))
  (when-let [data (lookup-entry config id :scale)]
    (. builder scale data))
  (.build builder))


(defn cfn-analysis-small-multiples-axis-properties-property-builder
  "Creates a  `CfnAnalysis$SmallMultiplesAxisPropertiesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-small-multiples-axis-properties-property-builder (new CfnAnalysis$SmallMultiplesAxisPropertiesProperty$Builder) id config))


(defn build-cfn-analysis-small-multiples-options-property-builder
  "The build-cfn-analysis-small-multiples-options-property-builder function updates a CfnAnalysis$SmallMultiplesOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SmallMultiplesOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `maxVisibleColumns` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max-visible-columns` |
| `maxVisibleRows` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max-visible-rows` |
| `panelConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:panel-configuration` |
| `xAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SmallMultiplesAxisPropertiesProperty | [[cdk.support/lookup-entry]] | `:y-axis` |
"
  [^CfnAnalysis$SmallMultiplesOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :max-visible-columns)]
    (. builder maxVisibleColumns data))
  (when-let [data (lookup-entry config id :max-visible-rows)]
    (. builder maxVisibleRows data))
  (when-let [data (lookup-entry config id :panel-configuration)]
    (. builder panelConfiguration data))
  (when-let [data (lookup-entry config id :x-axis)]
    (. builder xAxis data))
  (when-let [data (lookup-entry config id :y-axis)]
    (. builder yAxis data))
  (.build builder))


(defn cfn-analysis-small-multiples-options-property-builder
  "Creates a  `CfnAnalysis$SmallMultiplesOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-small-multiples-options-property-builder (new CfnAnalysis$SmallMultiplesOptionsProperty$Builder) id config))


(defn build-cfn-analysis-spacing-property-builder
  "The build-cfn-analysis-spacing-property-builder function updates a CfnAnalysis$SpacingProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SpacingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bottom` | java.lang.String | [[cdk.support/lookup-entry]] | `:bottom` |
| `left` | java.lang.String | [[cdk.support/lookup-entry]] | `:left` |
| `right` | java.lang.String | [[cdk.support/lookup-entry]] | `:right` |
| `top` | java.lang.String | [[cdk.support/lookup-entry]] | `:top` |
"
  [^CfnAnalysis$SpacingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bottom)]
    (. builder bottom data))
  (when-let [data (lookup-entry config id :left)]
    (. builder left data))
  (when-let [data (lookup-entry config id :right)]
    (. builder right data))
  (when-let [data (lookup-entry config id :top)]
    (. builder top data))
  (.build builder))


(defn cfn-analysis-spacing-property-builder
  "Creates a  `CfnAnalysis$SpacingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-spacing-property-builder (new CfnAnalysis$SpacingProperty$Builder) id config))


(defn build-cfn-analysis-string-default-values-property-builder
  "The build-cfn-analysis-string-default-values-property-builder function updates a CfnAnalysis$StringDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$StringDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |
"
  [^CfnAnalysis$StringDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :dynamic-value)]
    (. builder dynamicValue data))
  (when-let [data (lookup-entry config id :static-values)]
    (. builder staticValues data))
  (.build builder))


(defn cfn-analysis-string-default-values-property-builder
  "Creates a  `CfnAnalysis$StringDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-string-default-values-property-builder (new CfnAnalysis$StringDefaultValuesProperty$Builder) id config))


(defn build-cfn-analysis-string-format-configuration-property-builder
  "The build-cfn-analysis-string-format-configuration-property-builder function updates a CfnAnalysis$StringFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$StringFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numericFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-format-configuration` |
"
  [^CfnAnalysis$StringFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :null-value-format-configuration)]
    (. builder nullValueFormatConfiguration data))
  (when-let [data (lookup-entry config id :numeric-format-configuration)]
    (. builder numericFormatConfiguration data))
  (.build builder))


(defn cfn-analysis-string-format-configuration-property-builder
  "Creates a  `CfnAnalysis$StringFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-string-format-configuration-property-builder (new CfnAnalysis$StringFormatConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-string-parameter-declaration-property-builder
  "The build-cfn-analysis-string-parameter-declaration-property-builder function updates a CfnAnalysis$StringParameterDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$StringParameterDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.services.quicksight.CfnAnalysis$StringDefaultValuesProperty | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.services.quicksight.CfnAnalysis$StringValueWhenUnsetConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-when-unset` |
"
  [^CfnAnalysis$StringParameterDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-values)]
    (. builder defaultValues data))
  (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
    (. builder mappedDataSetParameters data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :parameter-value-type)]
    (. builder parameterValueType data))
  (when-let [data (lookup-entry config id :value-when-unset)]
    (. builder valueWhenUnset data))
  (.build builder))


(defn cfn-analysis-string-parameter-declaration-property-builder
  "Creates a  `CfnAnalysis$StringParameterDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-string-parameter-declaration-property-builder (new CfnAnalysis$StringParameterDeclarationProperty$Builder) id config))


(defn build-cfn-analysis-string-parameter-property-builder
  "The build-cfn-analysis-string-parameter-property-builder function updates a CfnAnalysis$StringParameterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$StringParameterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$StringParameterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-string-parameter-property-builder
  "Creates a  `CfnAnalysis$StringParameterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-string-parameter-property-builder (new CfnAnalysis$StringParameterProperty$Builder) id config))


(defn build-cfn-analysis-string-value-when-unset-configuration-property-builder
  "The build-cfn-analysis-string-value-when-unset-configuration-property-builder function updates a CfnAnalysis$StringValueWhenUnsetConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$StringValueWhenUnsetConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |
"
  [^CfnAnalysis$StringValueWhenUnsetConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-value)]
    (. builder customValue data))
  (when-let [data (lookup-entry config id :value-when-unset-option)]
    (. builder valueWhenUnsetOption data))
  (.build builder))


(defn cfn-analysis-string-value-when-unset-configuration-property-builder
  "Creates a  `CfnAnalysis$StringValueWhenUnsetConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-string-value-when-unset-configuration-property-builder (new CfnAnalysis$StringValueWhenUnsetConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-subtotal-options-property-builder
  "The build-cfn-analysis-subtotal-options-property-builder function updates a CfnAnalysis$SubtotalOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$SubtotalOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldLevel` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-level` |
| `fieldLevelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-level-options` |
| `metricHeaderCellStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:metric-header-cell-style` |
| `styleTargets` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style-targets` |
| `totalCellStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `valueCellStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-cell-style` |
"
  [^CfnAnalysis$SubtotalOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :field-level)]
    (. builder fieldLevel data))
  (when-let [data (lookup-entry config id :field-level-options)]
    (. builder fieldLevelOptions data))
  (when-let [data (lookup-entry config id :metric-header-cell-style)]
    (. builder metricHeaderCellStyle data))
  (when-let [data (lookup-entry config id :style-targets)]
    (. builder styleTargets data))
  (when-let [data (lookup-entry config id :total-cell-style)]
    (. builder totalCellStyle data))
  (when-let [data (lookup-entry config id :totals-visibility)]
    (. builder totalsVisibility data))
  (when-let [data (lookup-entry config id :value-cell-style)]
    (. builder valueCellStyle data))
  (.build builder))


(defn cfn-analysis-subtotal-options-property-builder
  "Creates a  `CfnAnalysis$SubtotalOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-subtotal-options-property-builder (new CfnAnalysis$SubtotalOptionsProperty$Builder) id config))


(defn build-cfn-analysis-table-aggregated-field-wells-property-builder
  "The build-cfn-analysis-table-aggregated-field-wells-property-builder function updates a CfnAnalysis$TableAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-by` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$TableAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :group-by)]
    (. builder groupBy data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-table-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$TableAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-aggregated-field-wells-property-builder (new CfnAnalysis$TableAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-table-border-options-property-builder
  "The build-cfn-analysis-table-border-options-property-builder function updates a CfnAnalysis$TableBorderOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableBorderOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `style` | java.lang.String | [[cdk.support/lookup-entry]] | `:style` |
| `thickness` | java.lang.Number | [[cdk.support/lookup-entry]] | `:thickness` |
"
  [^CfnAnalysis$TableBorderOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :style)]
    (. builder style data))
  (when-let [data (lookup-entry config id :thickness)]
    (. builder thickness data))
  (.build builder))


(defn cfn-analysis-table-border-options-property-builder
  "Creates a  `CfnAnalysis$TableBorderOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-border-options-property-builder (new CfnAnalysis$TableBorderOptionsProperty$Builder) id config))


(defn build-cfn-analysis-table-cell-conditional-formatting-property-builder
  "The build-cfn-analysis-table-cell-conditional-formatting-property-builder function updates a CfnAnalysis$TableCellConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableCellConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `textFormat` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TextConditionalFormatProperty | [[cdk.support/lookup-entry]] | `:text-format` |
"
  [^CfnAnalysis$TableCellConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :text-format)]
    (. builder textFormat data))
  (.build builder))


(defn cfn-analysis-table-cell-conditional-formatting-property-builder
  "Creates a  `CfnAnalysis$TableCellConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-cell-conditional-formatting-property-builder (new CfnAnalysis$TableCellConditionalFormattingProperty$Builder) id config))


(defn build-cfn-analysis-table-cell-image-sizing-configuration-property-builder
  "The build-cfn-analysis-table-cell-image-sizing-configuration-property-builder function updates a CfnAnalysis$TableCellImageSizingConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableCellImageSizingConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `tableCellImageScalingConfiguration` | java.lang.String | [[cdk.support/lookup-entry]] | `:table-cell-image-scaling-configuration` |
"
  [^CfnAnalysis$TableCellImageSizingConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :table-cell-image-scaling-configuration)]
    (. builder tableCellImageScalingConfiguration data))
  (.build builder))


(defn cfn-analysis-table-cell-image-sizing-configuration-property-builder
  "Creates a  `CfnAnalysis$TableCellImageSizingConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-cell-image-sizing-configuration-property-builder (new CfnAnalysis$TableCellImageSizingConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-table-cell-style-property-builder
  "The build-cfn-analysis-table-cell-style-property-builder function updates a CfnAnalysis$TableCellStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableCellStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-color` |
| `border` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GlobalTableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:border` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `height` | java.lang.Number | [[cdk.support/lookup-entry]] | `:height` |
| `horizontalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-text-alignment` |
| `textWrap` | java.lang.String | [[cdk.support/lookup-entry]] | `:text-wrap` |
| `verticalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-text-alignment` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$TableCellStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-color)]
    (. builder backgroundColor data))
  (when-let [data (lookup-entry config id :border)]
    (. builder border data))
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (when-let [data (lookup-entry config id :height)]
    (. builder height data))
  (when-let [data (lookup-entry config id :horizontal-text-alignment)]
    (. builder horizontalTextAlignment data))
  (when-let [data (lookup-entry config id :text-wrap)]
    (. builder textWrap data))
  (when-let [data (lookup-entry config id :vertical-text-alignment)]
    (. builder verticalTextAlignment data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-table-cell-style-property-builder
  "Creates a  `CfnAnalysis$TableCellStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-cell-style-property-builder (new CfnAnalysis$TableCellStyleProperty$Builder) id config))


(defn build-cfn-analysis-table-conditional-formatting-option-property-builder
  "The build-cfn-analysis-table-conditional-formatting-option-property-builder function updates a CfnAnalysis$TableConditionalFormattingOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableConditionalFormattingOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cell` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cell` |
| `row` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row` |
"
  [^CfnAnalysis$TableConditionalFormattingOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cell)]
    (. builder cell data))
  (when-let [data (lookup-entry config id :row)]
    (. builder row data))
  (.build builder))


(defn cfn-analysis-table-conditional-formatting-option-property-builder
  "Creates a  `CfnAnalysis$TableConditionalFormattingOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-conditional-formatting-option-property-builder (new CfnAnalysis$TableConditionalFormattingOptionProperty$Builder) id config))


(defn build-cfn-analysis-table-conditional-formatting-property-builder
  "The build-cfn-analysis-table-conditional-formatting-property-builder function updates a CfnAnalysis$TableConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |
"
  [^CfnAnalysis$TableConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :conditional-formatting-options)]
    (. builder conditionalFormattingOptions data))
  (.build builder))


(defn cfn-analysis-table-conditional-formatting-property-builder
  "Creates a  `CfnAnalysis$TableConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-conditional-formatting-property-builder (new CfnAnalysis$TableConditionalFormattingProperty$Builder) id config))


(defn build-cfn-analysis-table-configuration-property-builder
  "The build-cfn-analysis-table-configuration-property-builder function updates a CfnAnalysis$TableConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableFieldOptionsProperty | [[cdk.support/lookup-entry]] | `:field-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `paginatedReportOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TablePaginatedReportOptionsProperty | [[cdk.support/lookup-entry]] | `:paginated-report-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tableInlineVisualizations` | java.util.List | [[cdk.support/lookup-entry]] | `:table-inline-visualizations` |
| `tableOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:table-options` |
| `totalOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TotalOptionsProperty | [[cdk.support/lookup-entry]] | `:total-options` |
"
  [^CfnAnalysis$TableConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-options)]
    (. builder fieldOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :paginated-report-options)]
    (. builder paginatedReportOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :table-inline-visualizations)]
    (. builder tableInlineVisualizations data))
  (when-let [data (lookup-entry config id :table-options)]
    (. builder tableOptions data))
  (when-let [data (lookup-entry config id :total-options)]
    (. builder totalOptions data))
  (.build builder))


(defn cfn-analysis-table-configuration-property-builder
  "Creates a  `CfnAnalysis$TableConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-configuration-property-builder (new CfnAnalysis$TableConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-table-field-custom-icon-content-property-builder
  "The build-cfn-analysis-table-field-custom-icon-content-property-builder function updates a CfnAnalysis$TableFieldCustomIconContentProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableFieldCustomIconContentProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon` |
"
  [^CfnAnalysis$TableFieldCustomIconContentProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (.build builder))


(defn cfn-analysis-table-field-custom-icon-content-property-builder
  "Creates a  `CfnAnalysis$TableFieldCustomIconContentProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-field-custom-icon-content-property-builder (new CfnAnalysis$TableFieldCustomIconContentProperty$Builder) id config))


(defn build-cfn-analysis-table-field-custom-text-content-property-builder
  "The build-cfn-analysis-table-field-custom-text-content-property-builder function updates a CfnAnalysis$TableFieldCustomTextContentProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableFieldCustomTextContentProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `value` | java.lang.String | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$TableFieldCustomTextContentProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-table-field-custom-text-content-property-builder
  "Creates a  `CfnAnalysis$TableFieldCustomTextContentProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-field-custom-text-content-property-builder (new CfnAnalysis$TableFieldCustomTextContentProperty$Builder) id config))


(defn build-cfn-analysis-table-field-image-configuration-property-builder
  "The build-cfn-analysis-table-field-image-configuration-property-builder function updates a CfnAnalysis$TableFieldImageConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableFieldImageConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sizingOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellImageSizingConfigurationProperty | [[cdk.support/lookup-entry]] | `:sizing-options` |
"
  [^CfnAnalysis$TableFieldImageConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :sizing-options)]
    (. builder sizingOptions data))
  (.build builder))


(defn cfn-analysis-table-field-image-configuration-property-builder
  "Creates a  `CfnAnalysis$TableFieldImageConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-field-image-configuration-property-builder (new CfnAnalysis$TableFieldImageConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-table-field-link-configuration-property-builder
  "The build-cfn-analysis-table-field-link-configuration-property-builder function updates a CfnAnalysis$TableFieldLinkConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableFieldLinkConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableFieldLinkContentConfigurationProperty | [[cdk.support/lookup-entry]] | `:content` |
| `target` | java.lang.String | [[cdk.support/lookup-entry]] | `:target` |
"
  [^CfnAnalysis$TableFieldLinkConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :content)]
    (. builder content data))
  (when-let [data (lookup-entry config id :target)]
    (. builder target data))
  (.build builder))


(defn cfn-analysis-table-field-link-configuration-property-builder
  "Creates a  `CfnAnalysis$TableFieldLinkConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-field-link-configuration-property-builder (new CfnAnalysis$TableFieldLinkConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-table-field-link-content-configuration-property-builder
  "The build-cfn-analysis-table-field-link-content-configuration-property-builder function updates a CfnAnalysis$TableFieldLinkContentConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableFieldLinkContentConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customIconContent` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-icon-content` |
| `customTextContent` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-text-content` |
"
  [^CfnAnalysis$TableFieldLinkContentConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-icon-content)]
    (. builder customIconContent data))
  (when-let [data (lookup-entry config id :custom-text-content)]
    (. builder customTextContent data))
  (.build builder))


(defn cfn-analysis-table-field-link-content-configuration-property-builder
  "Creates a  `CfnAnalysis$TableFieldLinkContentConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-field-link-content-configuration-property-builder (new CfnAnalysis$TableFieldLinkContentConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-table-field-option-property-builder
  "The build-cfn-analysis-table-field-option-property-builder function updates a CfnAnalysis$TableFieldOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableFieldOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `urlStyling` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:url-styling` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |
"
  [^CfnAnalysis$TableFieldOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :url-styling)]
    (. builder urlStyling data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (when-let [data (lookup-entry config id :width)]
    (. builder width data))
  (.build builder))


(defn cfn-analysis-table-field-option-property-builder
  "Creates a  `CfnAnalysis$TableFieldOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-field-option-property-builder (new CfnAnalysis$TableFieldOptionProperty$Builder) id config))


(defn build-cfn-analysis-table-field-options-property-builder
  "The build-cfn-analysis-table-field-options-property-builder function updates a CfnAnalysis$TableFieldOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableFieldOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `order` | java.util.List | [[cdk.support/lookup-entry]] | `:order` |
| `pinnedFieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:pinned-field-options` |
| `selectedFieldOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:selected-field-options` |
"
  [^CfnAnalysis$TableFieldOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :order)]
    (. builder order data))
  (when-let [data (lookup-entry config id :pinned-field-options)]
    (. builder pinnedFieldOptions data))
  (when-let [data (lookup-entry config id :selected-field-options)]
    (. builder selectedFieldOptions data))
  (.build builder))


(defn cfn-analysis-table-field-options-property-builder
  "Creates a  `CfnAnalysis$TableFieldOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-field-options-property-builder (new CfnAnalysis$TableFieldOptionsProperty$Builder) id config))


(defn build-cfn-analysis-table-field-url-configuration-property-builder
  "The build-cfn-analysis-table-field-url-configuration-property-builder function updates a CfnAnalysis$TableFieldURLConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableFieldURLConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `imageConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableFieldImageConfigurationProperty | [[cdk.support/lookup-entry]] | `:image-configuration` |
| `linkConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:link-configuration` |
"
  [^CfnAnalysis$TableFieldURLConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :image-configuration)]
    (. builder imageConfiguration data))
  (when-let [data (lookup-entry config id :link-configuration)]
    (. builder linkConfiguration data))
  (.build builder))


(defn cfn-analysis-table-field-url-configuration-property-builder
  "Creates a  `CfnAnalysis$TableFieldURLConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-field-url-configuration-property-builder (new CfnAnalysis$TableFieldURLConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-table-field-wells-property-builder
  "The build-cfn-analysis-table-field-wells-property-builder function updates a CfnAnalysis$TableFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `tableAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:table-aggregated-field-wells` |
| `tableUnaggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:table-unaggregated-field-wells` |
"
  [^CfnAnalysis$TableFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :table-aggregated-field-wells)]
    (. builder tableAggregatedFieldWells data))
  (when-let [data (lookup-entry config id :table-unaggregated-field-wells)]
    (. builder tableUnaggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-table-field-wells-property-builder
  "Creates a  `CfnAnalysis$TableFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-field-wells-property-builder (new CfnAnalysis$TableFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-table-inline-visualization-property-builder
  "The build-cfn-analysis-table-inline-visualization-property-builder function updates a CfnAnalysis$TableInlineVisualizationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableInlineVisualizationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataBars` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataBarsOptionsProperty | [[cdk.support/lookup-entry]] | `:data-bars` |
"
  [^CfnAnalysis$TableInlineVisualizationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-bars)]
    (. builder dataBars data))
  (.build builder))


(defn cfn-analysis-table-inline-visualization-property-builder
  "Creates a  `CfnAnalysis$TableInlineVisualizationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-inline-visualization-property-builder (new CfnAnalysis$TableInlineVisualizationProperty$Builder) id config))


(defn build-cfn-analysis-table-options-property-builder
  "The build-cfn-analysis-table-options-property-builder function updates a CfnAnalysis$TableOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:cell-style` |
| `headerStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:header-style` |
| `orientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:orientation` |
| `rowAlternateColorOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-alternate-color-options` |
"
  [^CfnAnalysis$TableOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cell-style)]
    (. builder cellStyle data))
  (when-let [data (lookup-entry config id :header-style)]
    (. builder headerStyle data))
  (when-let [data (lookup-entry config id :orientation)]
    (. builder orientation data))
  (when-let [data (lookup-entry config id :row-alternate-color-options)]
    (. builder rowAlternateColorOptions data))
  (.build builder))


(defn cfn-analysis-table-options-property-builder
  "Creates a  `CfnAnalysis$TableOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-options-property-builder (new CfnAnalysis$TableOptionsProperty$Builder) id config))


(defn build-cfn-analysis-table-paginated-report-options-property-builder
  "The build-cfn-analysis-table-paginated-report-options-property-builder function updates a CfnAnalysis$TablePaginatedReportOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TablePaginatedReportOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `overflowColumnHeaderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:overflow-column-header-visibility` |
| `verticalOverflowVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-overflow-visibility` |
"
  [^CfnAnalysis$TablePaginatedReportOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :overflow-column-header-visibility)]
    (. builder overflowColumnHeaderVisibility data))
  (when-let [data (lookup-entry config id :vertical-overflow-visibility)]
    (. builder verticalOverflowVisibility data))
  (.build builder))


(defn cfn-analysis-table-paginated-report-options-property-builder
  "Creates a  `CfnAnalysis$TablePaginatedReportOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-paginated-report-options-property-builder (new CfnAnalysis$TablePaginatedReportOptionsProperty$Builder) id config))


(defn build-cfn-analysis-table-pinned-field-options-property-builder
  "The build-cfn-analysis-table-pinned-field-options-property-builder function updates a CfnAnalysis$TablePinnedFieldOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TablePinnedFieldOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pinnedLeftFields` | java.util.List | [[cdk.support/lookup-entry]] | `:pinned-left-fields` |
"
  [^CfnAnalysis$TablePinnedFieldOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :pinned-left-fields)]
    (. builder pinnedLeftFields data))
  (.build builder))


(defn cfn-analysis-table-pinned-field-options-property-builder
  "Creates a  `CfnAnalysis$TablePinnedFieldOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-pinned-field-options-property-builder (new CfnAnalysis$TablePinnedFieldOptionsProperty$Builder) id config))


(defn build-cfn-analysis-table-row-conditional-formatting-property-builder
  "The build-cfn-analysis-table-row-conditional-formatting-property-builder function updates a CfnAnalysis$TableRowConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableRowConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:background-color` |
| `textColor` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnAnalysis$TableRowConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-color)]
    (. builder backgroundColor data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-analysis-table-row-conditional-formatting-property-builder
  "Creates a  `CfnAnalysis$TableRowConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-row-conditional-formatting-property-builder (new CfnAnalysis$TableRowConditionalFormattingProperty$Builder) id config))


(defn build-cfn-analysis-table-side-border-options-property-builder
  "The build-cfn-analysis-table-side-border-options-property-builder function updates a CfnAnalysis$TableSideBorderOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableSideBorderOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bottom` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bottom` |
| `innerHorizontal` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:inner-horizontal` |
| `innerVertical` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:inner-vertical` |
| `left` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:left` |
| `right` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:right` |
| `top` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:top` |
"
  [^CfnAnalysis$TableSideBorderOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bottom)]
    (. builder bottom data))
  (when-let [data (lookup-entry config id :inner-horizontal)]
    (. builder innerHorizontal data))
  (when-let [data (lookup-entry config id :inner-vertical)]
    (. builder innerVertical data))
  (when-let [data (lookup-entry config id :left)]
    (. builder left data))
  (when-let [data (lookup-entry config id :right)]
    (. builder right data))
  (when-let [data (lookup-entry config id :top)]
    (. builder top data))
  (.build builder))


(defn cfn-analysis-table-side-border-options-property-builder
  "Creates a  `CfnAnalysis$TableSideBorderOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-side-border-options-property-builder (new CfnAnalysis$TableSideBorderOptionsProperty$Builder) id config))


(defn build-cfn-analysis-table-sort-configuration-property-builder
  "The build-cfn-analysis-table-sort-configuration-property-builder function updates a CfnAnalysis$TableSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paginationConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:pagination-configuration` |
| `rowSort` | java.util.List | [[cdk.support/lookup-entry]] | `:row-sort` |
"
  [^CfnAnalysis$TableSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :pagination-configuration)]
    (. builder paginationConfiguration data))
  (when-let [data (lookup-entry config id :row-sort)]
    (. builder rowSort data))
  (.build builder))


(defn cfn-analysis-table-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$TableSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-sort-configuration-property-builder (new CfnAnalysis$TableSortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-table-style-target-property-builder
  "The build-cfn-analysis-table-style-target-property-builder function updates a CfnAnalysis$TableStyleTargetProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableStyleTargetProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellType` | java.lang.String | [[cdk.support/lookup-entry]] | `:cell-type` |
"
  [^CfnAnalysis$TableStyleTargetProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cell-type)]
    (. builder cellType data))
  (.build builder))


(defn cfn-analysis-table-style-target-property-builder
  "Creates a  `CfnAnalysis$TableStyleTargetProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-style-target-property-builder (new CfnAnalysis$TableStyleTargetProperty$Builder) id config))


(defn build-cfn-analysis-table-unaggregated-field-wells-property-builder
  "The build-cfn-analysis-table-unaggregated-field-wells-property-builder function updates a CfnAnalysis$TableUnaggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableUnaggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$TableUnaggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-table-unaggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$TableUnaggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-unaggregated-field-wells-property-builder (new CfnAnalysis$TableUnaggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-table-visual-property-builder
  "The build-cfn-analysis-table-visual-property-builder function updates a CfnAnalysis$TableVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TableVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$TableVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :conditional-formatting)]
    (. builder conditionalFormatting data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-table-visual-property-builder
  "Creates a  `CfnAnalysis$TableVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-table-visual-property-builder (new CfnAnalysis$TableVisualProperty$Builder) id config))


(defn build-cfn-analysis-text-area-control-display-options-property-builder
  "The build-cfn-analysis-text-area-control-display-options-property-builder function updates a CfnAnalysis$TextAreaControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TextAreaControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `placeholderOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TextControlPlaceholderOptionsProperty | [[cdk.support/lookup-entry]] | `:placeholder-options` |
| `titleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnAnalysis$TextAreaControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :placeholder-options)]
    (. builder placeholderOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-analysis-text-area-control-display-options-property-builder
  "Creates a  `CfnAnalysis$TextAreaControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-text-area-control-display-options-property-builder (new CfnAnalysis$TextAreaControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-analysis-text-conditional-format-property-builder
  "The build-cfn-analysis-text-conditional-format-property-builder function updates a CfnAnalysis$TextConditionalFormatProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TextConditionalFormatProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:background-color` |
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnAnalysis$TextConditionalFormatProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-color)]
    (. builder backgroundColor data))
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-analysis-text-conditional-format-property-builder
  "Creates a  `CfnAnalysis$TextConditionalFormatProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-text-conditional-format-property-builder (new CfnAnalysis$TextConditionalFormatProperty$Builder) id config))


(defn build-cfn-analysis-text-control-placeholder-options-property-builder
  "The build-cfn-analysis-text-control-placeholder-options-property-builder function updates a CfnAnalysis$TextControlPlaceholderOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TextControlPlaceholderOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$TextControlPlaceholderOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-text-control-placeholder-options-property-builder
  "Creates a  `CfnAnalysis$TextControlPlaceholderOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-text-control-placeholder-options-property-builder (new CfnAnalysis$TextControlPlaceholderOptionsProperty$Builder) id config))


(defn build-cfn-analysis-text-field-control-display-options-property-builder
  "The build-cfn-analysis-text-field-control-display-options-property-builder function updates a CfnAnalysis$TextFieldControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TextFieldControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `placeholderOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:placeholder-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnAnalysis$TextFieldControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :placeholder-options)]
    (. builder placeholderOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-analysis-text-field-control-display-options-property-builder
  "Creates a  `CfnAnalysis$TextFieldControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-text-field-control-display-options-property-builder (new CfnAnalysis$TextFieldControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-analysis-thousand-separator-options-property-builder
  "The build-cfn-analysis-thousand-separator-options-property-builder function updates a CfnAnalysis$ThousandSeparatorOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ThousandSeparatorOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `symbol` | java.lang.String | [[cdk.support/lookup-entry]] | `:symbol` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$ThousandSeparatorOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :symbol)]
    (. builder symbol data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-thousand-separator-options-property-builder
  "Creates a  `CfnAnalysis$ThousandSeparatorOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-thousand-separator-options-property-builder (new CfnAnalysis$ThousandSeparatorOptionsProperty$Builder) id config))


(defn build-cfn-analysis-time-based-forecast-properties-property-builder
  "The build-cfn-analysis-time-based-forecast-properties-property-builder function updates a CfnAnalysis$TimeBasedForecastPropertiesProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TimeBasedForecastPropertiesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lowerBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:lower-boundary` |
| `periodsBackward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-backward` |
| `periodsForward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-forward` |
| `predictionInterval` | java.lang.Number | [[cdk.support/lookup-entry]] | `:prediction-interval` |
| `seasonality` | java.lang.Number | [[cdk.support/lookup-entry]] | `:seasonality` |
| `upperBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:upper-boundary` |
"
  [^CfnAnalysis$TimeBasedForecastPropertiesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :lower-boundary)]
    (. builder lowerBoundary data))
  (when-let [data (lookup-entry config id :periods-backward)]
    (. builder periodsBackward data))
  (when-let [data (lookup-entry config id :periods-forward)]
    (. builder periodsForward data))
  (when-let [data (lookup-entry config id :prediction-interval)]
    (. builder predictionInterval data))
  (when-let [data (lookup-entry config id :seasonality)]
    (. builder seasonality data))
  (when-let [data (lookup-entry config id :upper-boundary)]
    (. builder upperBoundary data))
  (.build builder))


(defn cfn-analysis-time-based-forecast-properties-property-builder
  "Creates a  `CfnAnalysis$TimeBasedForecastPropertiesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-time-based-forecast-properties-property-builder (new CfnAnalysis$TimeBasedForecastPropertiesProperty$Builder) id config))


(defn build-cfn-analysis-time-equality-filter-property-builder
  "The build-cfn-analysis-time-equality-filter-property-builder function updates a CfnAnalysis$TimeEqualityFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TimeEqualityFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `rollingDate` | software.amazon.awscdk.services.quicksight.CfnAnalysis$RollingDateConfigurationProperty | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
| `value` | java.lang.String | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$TimeEqualityFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (when-let [data (lookup-entry config id :rolling-date)]
    (. builder rollingDate data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-time-equality-filter-property-builder
  "Creates a  `CfnAnalysis$TimeEqualityFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-time-equality-filter-property-builder (new CfnAnalysis$TimeEqualityFilterProperty$Builder) id config))


(defn build-cfn-analysis-time-range-drill-down-filter-property-builder
  "The build-cfn-analysis-time-range-drill-down-filter-property-builder function updates a CfnAnalysis$TimeRangeDrillDownFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TimeRangeDrillDownFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `rangeMaximum` | java.lang.String | [[cdk.support/lookup-entry]] | `:range-maximum` |
| `rangeMinimum` | java.lang.String | [[cdk.support/lookup-entry]] | `:range-minimum` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnAnalysis$TimeRangeDrillDownFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :range-maximum)]
    (. builder rangeMaximum data))
  (when-let [data (lookup-entry config id :range-minimum)]
    (. builder rangeMinimum data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-analysis-time-range-drill-down-filter-property-builder
  "Creates a  `CfnAnalysis$TimeRangeDrillDownFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-time-range-drill-down-filter-property-builder (new CfnAnalysis$TimeRangeDrillDownFilterProperty$Builder) id config))


(defn build-cfn-analysis-time-range-filter-property-builder
  "The build-cfn-analysis-time-range-filter-property-builder function updates a CfnAnalysis$TimeRangeFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TimeRangeFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `excludePeriodConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:exclude-period-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `includeMaximum` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:include-maximum` |
| `includeMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-minimum` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `rangeMaximumValue` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TimeRangeFilterValueProperty | [[cdk.support/lookup-entry]] | `:range-maximum-value` |
| `rangeMinimumValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-minimum-value` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnAnalysis$TimeRangeFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :exclude-period-configuration)]
    (. builder excludePeriodConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :include-maximum)]
    (. builder includeMaximum data))
  (when-let [data (lookup-entry config id :include-minimum)]
    (. builder includeMinimum data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :range-maximum-value)]
    (. builder rangeMaximumValue data))
  (when-let [data (lookup-entry config id :range-minimum-value)]
    (. builder rangeMinimumValue data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-analysis-time-range-filter-property-builder
  "Creates a  `CfnAnalysis$TimeRangeFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-time-range-filter-property-builder (new CfnAnalysis$TimeRangeFilterProperty$Builder) id config))


(defn build-cfn-analysis-time-range-filter-value-property-builder
  "The build-cfn-analysis-time-range-filter-value-property-builder function updates a CfnAnalysis$TimeRangeFilterValueProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TimeRangeFilterValueProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameter` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter` |
| `rollingDate` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `staticValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:static-value` |
"
  [^CfnAnalysis$TimeRangeFilterValueProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :parameter)]
    (. builder parameter data))
  (when-let [data (lookup-entry config id :rolling-date)]
    (. builder rollingDate data))
  (when-let [data (lookup-entry config id :static-value)]
    (. builder staticValue data))
  (.build builder))


(defn cfn-analysis-time-range-filter-value-property-builder
  "Creates a  `CfnAnalysis$TimeRangeFilterValueProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-time-range-filter-value-property-builder (new CfnAnalysis$TimeRangeFilterValueProperty$Builder) id config))


(defn build-cfn-analysis-tooltip-item-property-builder
  "The build-cfn-analysis-tooltip-item-property-builder function updates a CfnAnalysis$TooltipItemProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TooltipItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnTooltipItem` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnTooltipItemProperty | [[cdk.support/lookup-entry]] | `:column-tooltip-item` |
| `fieldTooltipItem` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-tooltip-item` |
"
  [^CfnAnalysis$TooltipItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-tooltip-item)]
    (. builder columnTooltipItem data))
  (when-let [data (lookup-entry config id :field-tooltip-item)]
    (. builder fieldTooltipItem data))
  (.build builder))


(defn cfn-analysis-tooltip-item-property-builder
  "Creates a  `CfnAnalysis$TooltipItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-tooltip-item-property-builder (new CfnAnalysis$TooltipItemProperty$Builder) id config))


(defn build-cfn-analysis-tooltip-options-property-builder
  "The build-cfn-analysis-tooltip-options-property-builder function updates a CfnAnalysis$TooltipOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TooltipOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldBasedTooltip` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FieldBasedTooltipProperty | [[cdk.support/lookup-entry]] | `:field-based-tooltip` |
| `selectedTooltipType` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-tooltip-type` |
| `tooltipVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-visibility` |
"
  [^CfnAnalysis$TooltipOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-based-tooltip)]
    (. builder fieldBasedTooltip data))
  (when-let [data (lookup-entry config id :selected-tooltip-type)]
    (. builder selectedTooltipType data))
  (when-let [data (lookup-entry config id :tooltip-visibility)]
    (. builder tooltipVisibility data))
  (.build builder))


(defn cfn-analysis-tooltip-options-property-builder
  "Creates a  `CfnAnalysis$TooltipOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-tooltip-options-property-builder (new CfnAnalysis$TooltipOptionsProperty$Builder) id config))


(defn build-cfn-analysis-top-bottom-filter-property-builder
  "The build-cfn-analysis-top-bottom-filter-property-builder function updates a CfnAnalysis$TopBottomFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TopBottomFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationSortConfigurations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:aggregation-sort-configurations` |
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `limit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:limit` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnAnalysis$TopBottomFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-sort-configurations)]
    (. builder aggregationSortConfigurations data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :limit)]
    (. builder limit data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-analysis-top-bottom-filter-property-builder
  "Creates a  `CfnAnalysis$TopBottomFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-top-bottom-filter-property-builder (new CfnAnalysis$TopBottomFilterProperty$Builder) id config))


(defn build-cfn-analysis-top-bottom-movers-computation-property-builder
  "The build-cfn-analysis-top-bottom-movers-computation-property-builder function updates a CfnAnalysis$TopBottomMoversComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TopBottomMoversComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `moverSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:mover-size` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `sortOrder` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-order` |
| `time` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$TopBottomMoversComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :mover-size)]
    (. builder moverSize data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :sort-order)]
    (. builder sortOrder data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-top-bottom-movers-computation-property-builder
  "Creates a  `CfnAnalysis$TopBottomMoversComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-top-bottom-movers-computation-property-builder (new CfnAnalysis$TopBottomMoversComputationProperty$Builder) id config))


(defn build-cfn-analysis-top-bottom-ranked-computation-property-builder
  "The build-cfn-analysis-top-bottom-ranked-computation-property-builder function updates a CfnAnalysis$TopBottomRankedComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TopBottomRankedComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `resultSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:result-size` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$TopBottomRankedComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :result-size)]
    (. builder resultSize data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-top-bottom-ranked-computation-property-builder
  "Creates a  `CfnAnalysis$TopBottomRankedComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-top-bottom-ranked-computation-property-builder (new CfnAnalysis$TopBottomRankedComputationProperty$Builder) id config))


(defn build-cfn-analysis-total-aggregation-computation-property-builder
  "The build-cfn-analysis-total-aggregation-computation-property-builder function updates a CfnAnalysis$TotalAggregationComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TotalAggregationComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `value` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$TotalAggregationComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-total-aggregation-computation-property-builder
  "Creates a  `CfnAnalysis$TotalAggregationComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-total-aggregation-computation-property-builder (new CfnAnalysis$TotalAggregationComputationProperty$Builder) id config))


(defn build-cfn-analysis-total-aggregation-function-property-builder
  "The build-cfn-analysis-total-aggregation-function-property-builder function updates a CfnAnalysis$TotalAggregationFunctionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TotalAggregationFunctionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleTotalAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-total-aggregation-function` |
"
  [^CfnAnalysis$TotalAggregationFunctionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :simple-total-aggregation-function)]
    (. builder simpleTotalAggregationFunction data))
  (.build builder))


(defn cfn-analysis-total-aggregation-function-property-builder
  "Creates a  `CfnAnalysis$TotalAggregationFunctionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-total-aggregation-function-property-builder (new CfnAnalysis$TotalAggregationFunctionProperty$Builder) id config))


(defn build-cfn-analysis-total-aggregation-option-property-builder
  "The build-cfn-analysis-total-aggregation-option-property-builder function updates a CfnAnalysis$TotalAggregationOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TotalAggregationOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `totalAggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-aggregation-function` |
"
  [^CfnAnalysis$TotalAggregationOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :total-aggregation-function)]
    (. builder totalAggregationFunction data))
  (.build builder))


(defn cfn-analysis-total-aggregation-option-property-builder
  "Creates a  `CfnAnalysis$TotalAggregationOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-total-aggregation-option-property-builder (new CfnAnalysis$TotalAggregationOptionProperty$Builder) id config))


(defn build-cfn-analysis-total-options-property-builder
  "The build-cfn-analysis-total-options-property-builder function updates a CfnAnalysis$TotalOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TotalOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scrollStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:scroll-status` |
| `totalAggregationOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:total-aggregation-options` |
| `totalCellStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
"
  [^CfnAnalysis$TotalOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :placement)]
    (. builder placement data))
  (when-let [data (lookup-entry config id :scroll-status)]
    (. builder scrollStatus data))
  (when-let [data (lookup-entry config id :total-aggregation-options)]
    (. builder totalAggregationOptions data))
  (when-let [data (lookup-entry config id :total-cell-style)]
    (. builder totalCellStyle data))
  (when-let [data (lookup-entry config id :totals-visibility)]
    (. builder totalsVisibility data))
  (.build builder))


(defn cfn-analysis-total-options-property-builder
  "Creates a  `CfnAnalysis$TotalOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-total-options-property-builder (new CfnAnalysis$TotalOptionsProperty$Builder) id config))


(defn build-cfn-analysis-tree-map-aggregated-field-wells-property-builder
  "The build-cfn-analysis-tree-map-aggregated-field-wells-property-builder function updates a CfnAnalysis$TreeMapAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TreeMapAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `groups` | java.util.List | [[cdk.support/lookup-entry]] | `:groups` |
| `sizes` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sizes` |
"
  [^CfnAnalysis$TreeMapAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :groups)]
    (. builder groups data))
  (when-let [data (lookup-entry config id :sizes)]
    (. builder sizes data))
  (.build builder))


(defn cfn-analysis-tree-map-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$TreeMapAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-tree-map-aggregated-field-wells-property-builder (new CfnAnalysis$TreeMapAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-tree-map-configuration-property-builder
  "The build-cfn-analysis-tree-map-configuration-property-builder function updates a CfnAnalysis$TreeMapConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TreeMapConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `colorScale` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColorScaleProperty | [[cdk.support/lookup-entry]] | `:color-scale` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TreeMapFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `groupLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-label-options` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `sizeLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:size-label-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TreeMapSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
"
  [^CfnAnalysis$TreeMapConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color-label-options)]
    (. builder colorLabelOptions data))
  (when-let [data (lookup-entry config id :color-scale)]
    (. builder colorScale data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :group-label-options)]
    (. builder groupLabelOptions data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :size-label-options)]
    (. builder sizeLabelOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (.build builder))


(defn cfn-analysis-tree-map-configuration-property-builder
  "Creates a  `CfnAnalysis$TreeMapConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-tree-map-configuration-property-builder (new CfnAnalysis$TreeMapConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-tree-map-field-wells-property-builder
  "The build-cfn-analysis-tree-map-field-wells-property-builder function updates a CfnAnalysis$TreeMapFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TreeMapFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treeMapAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tree-map-aggregated-field-wells` |
"
  [^CfnAnalysis$TreeMapFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :tree-map-aggregated-field-wells)]
    (. builder treeMapAggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-tree-map-field-wells-property-builder
  "Creates a  `CfnAnalysis$TreeMapFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-tree-map-field-wells-property-builder (new CfnAnalysis$TreeMapFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-tree-map-sort-configuration-property-builder
  "The build-cfn-analysis-tree-map-sort-configuration-property-builder function updates a CfnAnalysis$TreeMapSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TreeMapSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treeMapGroupItemsLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tree-map-group-items-limit-configuration` |
| `treeMapSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tree-map-sort` |
"
  [^CfnAnalysis$TreeMapSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :tree-map-group-items-limit-configuration)]
    (. builder treeMapGroupItemsLimitConfiguration data))
  (when-let [data (lookup-entry config id :tree-map-sort)]
    (. builder treeMapSort data))
  (.build builder))


(defn cfn-analysis-tree-map-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$TreeMapSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-tree-map-sort-configuration-property-builder (new CfnAnalysis$TreeMapSortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-tree-map-visual-property-builder
  "The build-cfn-analysis-tree-map-visual-property-builder function updates a CfnAnalysis$TreeMapVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TreeMapVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$TreeMapVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-tree-map-visual-property-builder
  "Creates a  `CfnAnalysis$TreeMapVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-tree-map-visual-property-builder (new CfnAnalysis$TreeMapVisualProperty$Builder) id config))


(defn build-cfn-analysis-trend-arrow-options-property-builder
  "The build-cfn-analysis-trend-arrow-options-property-builder function updates a CfnAnalysis$TrendArrowOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$TrendArrowOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$TrendArrowOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-trend-arrow-options-property-builder
  "Creates a  `CfnAnalysis$TrendArrowOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-trend-arrow-options-property-builder (new CfnAnalysis$TrendArrowOptionsProperty$Builder) id config))


(defn build-cfn-analysis-unaggregated-field-property-builder
  "The build-cfn-analysis-unaggregated-field-property-builder function updates a CfnAnalysis$UnaggregatedFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$UnaggregatedFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
"
  [^CfnAnalysis$UnaggregatedFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (.build builder))


(defn cfn-analysis-unaggregated-field-property-builder
  "Creates a  `CfnAnalysis$UnaggregatedFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-unaggregated-field-property-builder (new CfnAnalysis$UnaggregatedFieldProperty$Builder) id config))


(defn build-cfn-analysis-unique-values-computation-property-builder
  "The build-cfn-analysis-unique-values-computation-property-builder function updates a CfnAnalysis$UniqueValuesComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$UniqueValuesComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
"
  [^CfnAnalysis$UniqueValuesComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (.build builder))


(defn cfn-analysis-unique-values-computation-property-builder
  "Creates a  `CfnAnalysis$UniqueValuesComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-unique-values-computation-property-builder (new CfnAnalysis$UniqueValuesComputationProperty$Builder) id config))


(defn build-cfn-analysis-validation-strategy-property-builder
  "The build-cfn-analysis-validation-strategy-property-builder function updates a CfnAnalysis$ValidationStrategyProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$ValidationStrategyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `mode` | java.lang.String | [[cdk.support/lookup-entry]] | `:mode` |
"
  [^CfnAnalysis$ValidationStrategyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :mode)]
    (. builder mode data))
  (.build builder))


(defn cfn-analysis-validation-strategy-property-builder
  "Creates a  `CfnAnalysis$ValidationStrategyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-validation-strategy-property-builder (new CfnAnalysis$ValidationStrategyProperty$Builder) id config))


(defn build-cfn-analysis-visible-range-options-property-builder
  "The build-cfn-analysis-visible-range-options-property-builder function updates a CfnAnalysis$VisibleRangeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$VisibleRangeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentRange` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:percent-range` |
"
  [^CfnAnalysis$VisibleRangeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :percent-range)]
    (. builder percentRange data))
  (.build builder))


(defn cfn-analysis-visible-range-options-property-builder
  "Creates a  `CfnAnalysis$VisibleRangeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-visible-range-options-property-builder (new CfnAnalysis$VisibleRangeOptionsProperty$Builder) id config))


(defn build-cfn-analysis-visual-custom-action-operation-property-builder
  "The build-cfn-analysis-visual-custom-action-operation-property-builder function updates a CfnAnalysis$VisualCustomActionOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$VisualCustomActionOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `filterOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-operation` |
| `navigationOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:navigation-operation` |
| `setParametersOperation` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CustomActionSetParametersOperationProperty | [[cdk.support/lookup-entry]] | `:set-parameters-operation` |
| `urlOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:url-operation` |
"
  [^CfnAnalysis$VisualCustomActionOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :filter-operation)]
    (. builder filterOperation data))
  (when-let [data (lookup-entry config id :navigation-operation)]
    (. builder navigationOperation data))
  (when-let [data (lookup-entry config id :set-parameters-operation)]
    (. builder setParametersOperation data))
  (when-let [data (lookup-entry config id :url-operation)]
    (. builder urlOperation data))
  (.build builder))


(defn cfn-analysis-visual-custom-action-operation-property-builder
  "Creates a  `CfnAnalysis$VisualCustomActionOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-visual-custom-action-operation-property-builder (new CfnAnalysis$VisualCustomActionOperationProperty$Builder) id config))


(defn build-cfn-analysis-visual-custom-action-property-builder
  "The build-cfn-analysis-visual-custom-action-property-builder function updates a CfnAnalysis$VisualCustomActionProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$VisualCustomActionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actionOperations` | java.util.List | [[cdk.support/lookup-entry]] | `:action-operations` |
| `customActionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-action-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `trigger` | java.lang.String | [[cdk.support/lookup-entry]] | `:trigger` |
"
  [^CfnAnalysis$VisualCustomActionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :action-operations)]
    (. builder actionOperations data))
  (when-let [data (lookup-entry config id :custom-action-id)]
    (. builder customActionId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (when-let [data (lookup-entry config id :trigger)]
    (. builder trigger data))
  (.build builder))


(defn cfn-analysis-visual-custom-action-property-builder
  "Creates a  `CfnAnalysis$VisualCustomActionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-visual-custom-action-property-builder (new CfnAnalysis$VisualCustomActionProperty$Builder) id config))


(defn build-cfn-analysis-visual-palette-property-builder
  "The build-cfn-analysis-visual-palette-property-builder function updates a CfnAnalysis$VisualPaletteProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$VisualPaletteProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `chartColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:chart-color` |
| `colorMap` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-map` |
"
  [^CfnAnalysis$VisualPaletteProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :chart-color)]
    (. builder chartColor data))
  (when-let [data (lookup-entry config id :color-map)]
    (. builder colorMap data))
  (.build builder))


(defn cfn-analysis-visual-palette-property-builder
  "Creates a  `CfnAnalysis$VisualPaletteProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-visual-palette-property-builder (new CfnAnalysis$VisualPaletteProperty$Builder) id config))


(defn build-cfn-analysis-visual-property-builder
  "The build-cfn-analysis-visual-property-builder function updates a CfnAnalysis$VisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$VisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bar-chart-visual` |
| `boxPlotVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:box-plot-visual` |
| `comboChartVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ComboChartVisualProperty | [[cdk.support/lookup-entry]] | `:combo-chart-visual` |
| `customContentVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-content-visual` |
| `emptyVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$EmptyVisualProperty | [[cdk.support/lookup-entry]] | `:empty-visual` |
| `filledMapVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilledMapVisualProperty | [[cdk.support/lookup-entry]] | `:filled-map-visual` |
| `funnelChartVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FunnelChartVisualProperty | [[cdk.support/lookup-entry]] | `:funnel-chart-visual` |
| `gaugeChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:gauge-chart-visual` |
| `geospatialMapVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:geospatial-map-visual` |
| `heatMapVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$HeatMapVisualProperty | [[cdk.support/lookup-entry]] | `:heat-map-visual` |
| `histogramVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:histogram-visual` |
| `insightVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:insight-visual` |
| `kpiVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:kpi-visual` |
| `lineChartVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LineChartVisualProperty | [[cdk.support/lookup-entry]] | `:line-chart-visual` |
| `pieChartVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PieChartVisualProperty | [[cdk.support/lookup-entry]] | `:pie-chart-visual` |
| `pivotTableVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:pivot-table-visual` |
| `radarChartVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$RadarChartVisualProperty | [[cdk.support/lookup-entry]] | `:radar-chart-visual` |
| `sankeyDiagramVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sankey-diagram-visual` |
| `scatterPlotVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scatter-plot-visual` |
| `tableVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:table-visual` |
| `treeMapVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TreeMapVisualProperty | [[cdk.support/lookup-entry]] | `:tree-map-visual` |
| `waterfallVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:waterfall-visual` |
| `wordCloudVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:word-cloud-visual` |
"
  [^CfnAnalysis$VisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bar-chart-visual)]
    (. builder barChartVisual data))
  (when-let [data (lookup-entry config id :box-plot-visual)]
    (. builder boxPlotVisual data))
  (when-let [data (lookup-entry config id :combo-chart-visual)]
    (. builder comboChartVisual data))
  (when-let [data (lookup-entry config id :custom-content-visual)]
    (. builder customContentVisual data))
  (when-let [data (lookup-entry config id :empty-visual)]
    (. builder emptyVisual data))
  (when-let [data (lookup-entry config id :filled-map-visual)]
    (. builder filledMapVisual data))
  (when-let [data (lookup-entry config id :funnel-chart-visual)]
    (. builder funnelChartVisual data))
  (when-let [data (lookup-entry config id :gauge-chart-visual)]
    (. builder gaugeChartVisual data))
  (when-let [data (lookup-entry config id :geospatial-map-visual)]
    (. builder geospatialMapVisual data))
  (when-let [data (lookup-entry config id :heat-map-visual)]
    (. builder heatMapVisual data))
  (when-let [data (lookup-entry config id :histogram-visual)]
    (. builder histogramVisual data))
  (when-let [data (lookup-entry config id :insight-visual)]
    (. builder insightVisual data))
  (when-let [data (lookup-entry config id :kpi-visual)]
    (. builder kpiVisual data))
  (when-let [data (lookup-entry config id :line-chart-visual)]
    (. builder lineChartVisual data))
  (when-let [data (lookup-entry config id :pie-chart-visual)]
    (. builder pieChartVisual data))
  (when-let [data (lookup-entry config id :pivot-table-visual)]
    (. builder pivotTableVisual data))
  (when-let [data (lookup-entry config id :radar-chart-visual)]
    (. builder radarChartVisual data))
  (when-let [data (lookup-entry config id :sankey-diagram-visual)]
    (. builder sankeyDiagramVisual data))
  (when-let [data (lookup-entry config id :scatter-plot-visual)]
    (. builder scatterPlotVisual data))
  (when-let [data (lookup-entry config id :table-visual)]
    (. builder tableVisual data))
  (when-let [data (lookup-entry config id :tree-map-visual)]
    (. builder treeMapVisual data))
  (when-let [data (lookup-entry config id :waterfall-visual)]
    (. builder waterfallVisual data))
  (when-let [data (lookup-entry config id :word-cloud-visual)]
    (. builder wordCloudVisual data))
  (.build builder))


(defn cfn-analysis-visual-property-builder
  "Creates a  `CfnAnalysis$VisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-visual-property-builder (new CfnAnalysis$VisualProperty$Builder) id config))


(defn build-cfn-analysis-visual-subtitle-label-options-property-builder
  "The build-cfn-analysis-visual-subtitle-label-options-property-builder function updates a CfnAnalysis$VisualSubtitleLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$VisualSubtitleLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatText` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$VisualSubtitleLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :format-text)]
    (. builder formatText data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-visual-subtitle-label-options-property-builder
  "Creates a  `CfnAnalysis$VisualSubtitleLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-visual-subtitle-label-options-property-builder (new CfnAnalysis$VisualSubtitleLabelOptionsProperty$Builder) id config))


(defn build-cfn-analysis-visual-title-label-options-property-builder
  "The build-cfn-analysis-visual-title-label-options-property-builder function updates a CfnAnalysis$VisualTitleLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$VisualTitleLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatText` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ShortFormatTextProperty | [[cdk.support/lookup-entry]] | `:format-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnAnalysis$VisualTitleLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :format-text)]
    (. builder formatText data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-analysis-visual-title-label-options-property-builder
  "Creates a  `CfnAnalysis$VisualTitleLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-visual-title-label-options-property-builder (new CfnAnalysis$VisualTitleLabelOptionsProperty$Builder) id config))


(defn build-cfn-analysis-waterfall-chart-aggregated-field-wells-property-builder
  "The build-cfn-analysis-waterfall-chart-aggregated-field-wells-property-builder function updates a CfnAnalysis$WaterfallChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$WaterfallChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `breakdowns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:breakdowns` |
| `categories` | java.util.List | [[cdk.support/lookup-entry]] | `:categories` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnAnalysis$WaterfallChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :breakdowns)]
    (. builder breakdowns data))
  (when-let [data (lookup-entry config id :categories)]
    (. builder categories data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-analysis-waterfall-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$WaterfallChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-waterfall-chart-aggregated-field-wells-property-builder (new CfnAnalysis$WaterfallChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-waterfall-chart-color-configuration-property-builder
  "The build-cfn-analysis-waterfall-chart-color-configuration-property-builder function updates a CfnAnalysis$WaterfallChartColorConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$WaterfallChartColorConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupColorConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$WaterfallChartGroupColorConfigurationProperty | [[cdk.support/lookup-entry]] | `:group-color-configuration` |
"
  [^CfnAnalysis$WaterfallChartColorConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :group-color-configuration)]
    (. builder groupColorConfiguration data))
  (.build builder))


(defn cfn-analysis-waterfall-chart-color-configuration-property-builder
  "Creates a  `CfnAnalysis$WaterfallChartColorConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-waterfall-chart-color-configuration-property-builder (new CfnAnalysis$WaterfallChartColorConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-waterfall-chart-configuration-property-builder
  "The build-cfn-analysis-waterfall-chart-configuration-property-builder function updates a CfnAnalysis$WaterfallChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$WaterfallChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis-display-options` |
| `categoryAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis-label-options` |
| `colorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-configuration` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `waterfallChartOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$WaterfallChartOptionsProperty | [[cdk.support/lookup-entry]] | `:waterfall-chart-options` |
"
  [^CfnAnalysis$WaterfallChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-axis-display-options)]
    (. builder categoryAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :category-axis-label-options)]
    (. builder categoryAxisLabelOptions data))
  (when-let [data (lookup-entry config id :color-configuration)]
    (. builder colorConfiguration data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
    (. builder primaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
    (. builder primaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (when-let [data (lookup-entry config id :waterfall-chart-options)]
    (. builder waterfallChartOptions data))
  (.build builder))


(defn cfn-analysis-waterfall-chart-configuration-property-builder
  "Creates a  `CfnAnalysis$WaterfallChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-waterfall-chart-configuration-property-builder (new CfnAnalysis$WaterfallChartConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-waterfall-chart-field-wells-property-builder
  "The build-cfn-analysis-waterfall-chart-field-wells-property-builder function updates a CfnAnalysis$WaterfallChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$WaterfallChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `waterfallChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:waterfall-chart-aggregated-field-wells` |
"
  [^CfnAnalysis$WaterfallChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :waterfall-chart-aggregated-field-wells)]
    (. builder waterfallChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-waterfall-chart-field-wells-property-builder
  "Creates a  `CfnAnalysis$WaterfallChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-waterfall-chart-field-wells-property-builder (new CfnAnalysis$WaterfallChartFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-waterfall-chart-group-color-configuration-property-builder
  "The build-cfn-analysis-waterfall-chart-group-color-configuration-property-builder function updates a CfnAnalysis$WaterfallChartGroupColorConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$WaterfallChartGroupColorConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `negativeBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:negative-bar-color` |
| `positiveBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:positive-bar-color` |
| `totalBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:total-bar-color` |
"
  [^CfnAnalysis$WaterfallChartGroupColorConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :negative-bar-color)]
    (. builder negativeBarColor data))
  (when-let [data (lookup-entry config id :positive-bar-color)]
    (. builder positiveBarColor data))
  (when-let [data (lookup-entry config id :total-bar-color)]
    (. builder totalBarColor data))
  (.build builder))


(defn cfn-analysis-waterfall-chart-group-color-configuration-property-builder
  "Creates a  `CfnAnalysis$WaterfallChartGroupColorConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-waterfall-chart-group-color-configuration-property-builder (new CfnAnalysis$WaterfallChartGroupColorConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-waterfall-chart-options-property-builder
  "The build-cfn-analysis-waterfall-chart-options-property-builder function updates a CfnAnalysis$WaterfallChartOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$WaterfallChartOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `totalBarLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:total-bar-label` |
"
  [^CfnAnalysis$WaterfallChartOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :total-bar-label)]
    (. builder totalBarLabel data))
  (.build builder))


(defn cfn-analysis-waterfall-chart-options-property-builder
  "Creates a  `CfnAnalysis$WaterfallChartOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-waterfall-chart-options-property-builder (new CfnAnalysis$WaterfallChartOptionsProperty$Builder) id config))


(defn build-cfn-analysis-waterfall-chart-sort-configuration-property-builder
  "The build-cfn-analysis-waterfall-chart-sort-configuration-property-builder function updates a CfnAnalysis$WaterfallChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$WaterfallChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `breakdownItemsLimit` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:breakdown-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
"
  [^CfnAnalysis$WaterfallChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :breakdown-items-limit)]
    (. builder breakdownItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (.build builder))


(defn cfn-analysis-waterfall-chart-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$WaterfallChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-waterfall-chart-sort-configuration-property-builder (new CfnAnalysis$WaterfallChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-waterfall-visual-property-builder
  "The build-cfn-analysis-waterfall-visual-property-builder function updates a CfnAnalysis$WaterfallVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$WaterfallVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$WaterfallChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$WaterfallVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-waterfall-visual-property-builder
  "Creates a  `CfnAnalysis$WaterfallVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-waterfall-visual-property-builder (new CfnAnalysis$WaterfallVisualProperty$Builder) id config))


(defn build-cfn-analysis-what-if-point-scenario-property-builder
  "The build-cfn-analysis-what-if-point-scenario-property-builder function updates a CfnAnalysis$WhatIfPointScenarioProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$WhatIfPointScenarioProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `date` | java.lang.String | [[cdk.support/lookup-entry]] | `:date` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$WhatIfPointScenarioProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date)]
    (. builder date data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-what-if-point-scenario-property-builder
  "Creates a  `CfnAnalysis$WhatIfPointScenarioProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-what-if-point-scenario-property-builder (new CfnAnalysis$WhatIfPointScenarioProperty$Builder) id config))


(defn build-cfn-analysis-what-if-range-scenario-property-builder
  "The build-cfn-analysis-what-if-range-scenario-property-builder function updates a CfnAnalysis$WhatIfRangeScenarioProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$WhatIfRangeScenarioProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `endDate` | java.lang.String | [[cdk.support/lookup-entry]] | `:end-date` |
| `startDate` | java.lang.String | [[cdk.support/lookup-entry]] | `:start-date` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnAnalysis$WhatIfRangeScenarioProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :end-date)]
    (. builder endDate data))
  (when-let [data (lookup-entry config id :start-date)]
    (. builder startDate data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-analysis-what-if-range-scenario-property-builder
  "Creates a  `CfnAnalysis$WhatIfRangeScenarioProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-what-if-range-scenario-property-builder (new CfnAnalysis$WhatIfRangeScenarioProperty$Builder) id config))


(defn build-cfn-analysis-word-cloud-aggregated-field-wells-property-builder
  "The build-cfn-analysis-word-cloud-aggregated-field-wells-property-builder function updates a CfnAnalysis$WordCloudAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$WordCloudAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | java.util.List | [[cdk.support/lookup-entry]] | `:group-by` |
| `size` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:size` |
"
  [^CfnAnalysis$WordCloudAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :group-by)]
    (. builder groupBy data))
  (when-let [data (lookup-entry config id :size)]
    (. builder size data))
  (.build builder))


(defn cfn-analysis-word-cloud-aggregated-field-wells-property-builder
  "Creates a  `CfnAnalysis$WordCloudAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-word-cloud-aggregated-field-wells-property-builder (new CfnAnalysis$WordCloudAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-word-cloud-chart-configuration-property-builder
  "The build-cfn-analysis-word-cloud-chart-configuration-property-builder function updates a CfnAnalysis$WordCloudChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$WordCloudChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$WordCloudSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `wordCloudOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$WordCloudOptionsProperty | [[cdk.support/lookup-entry]] | `:word-cloud-options` |
"
  [^CfnAnalysis$WordCloudChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :word-cloud-options)]
    (. builder wordCloudOptions data))
  (.build builder))


(defn cfn-analysis-word-cloud-chart-configuration-property-builder
  "Creates a  `CfnAnalysis$WordCloudChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-word-cloud-chart-configuration-property-builder (new CfnAnalysis$WordCloudChartConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-word-cloud-field-wells-property-builder
  "The build-cfn-analysis-word-cloud-field-wells-property-builder function updates a CfnAnalysis$WordCloudFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$WordCloudFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `wordCloudAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:word-cloud-aggregated-field-wells` |
"
  [^CfnAnalysis$WordCloudFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :word-cloud-aggregated-field-wells)]
    (. builder wordCloudAggregatedFieldWells data))
  (.build builder))


(defn cfn-analysis-word-cloud-field-wells-property-builder
  "Creates a  `CfnAnalysis$WordCloudFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-word-cloud-field-wells-property-builder (new CfnAnalysis$WordCloudFieldWellsProperty$Builder) id config))


(defn build-cfn-analysis-word-cloud-options-property-builder
  "The build-cfn-analysis-word-cloud-options-property-builder function updates a CfnAnalysis$WordCloudOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$WordCloudOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cloudLayout` | java.lang.String | [[cdk.support/lookup-entry]] | `:cloud-layout` |
| `maximumStringLength` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-string-length` |
| `wordCasing` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-casing` |
| `wordOrientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-orientation` |
| `wordPadding` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-padding` |
| `wordScaling` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-scaling` |
"
  [^CfnAnalysis$WordCloudOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cloud-layout)]
    (. builder cloudLayout data))
  (when-let [data (lookup-entry config id :maximum-string-length)]
    (. builder maximumStringLength data))
  (when-let [data (lookup-entry config id :word-casing)]
    (. builder wordCasing data))
  (when-let [data (lookup-entry config id :word-orientation)]
    (. builder wordOrientation data))
  (when-let [data (lookup-entry config id :word-padding)]
    (. builder wordPadding data))
  (when-let [data (lookup-entry config id :word-scaling)]
    (. builder wordScaling data))
  (.build builder))


(defn cfn-analysis-word-cloud-options-property-builder
  "Creates a  `CfnAnalysis$WordCloudOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-word-cloud-options-property-builder (new CfnAnalysis$WordCloudOptionsProperty$Builder) id config))


(defn build-cfn-analysis-word-cloud-sort-configuration-property-builder
  "The build-cfn-analysis-word-cloud-sort-configuration-property-builder function updates a CfnAnalysis$WordCloudSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$WordCloudSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
"
  [^CfnAnalysis$WordCloudSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (.build builder))


(defn cfn-analysis-word-cloud-sort-configuration-property-builder
  "Creates a  `CfnAnalysis$WordCloudSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-word-cloud-sort-configuration-property-builder (new CfnAnalysis$WordCloudSortConfigurationProperty$Builder) id config))


(defn build-cfn-analysis-word-cloud-visual-property-builder
  "The build-cfn-analysis-word-cloud-visual-property-builder function updates a CfnAnalysis$WordCloudVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnAnalysis$WordCloudVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnAnalysis$WordCloudVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-analysis-word-cloud-visual-property-builder
  "Creates a  `CfnAnalysis$WordCloudVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-analysis-word-cloud-visual-property-builder (new CfnAnalysis$WordCloudVisualProperty$Builder) id config))


(defn build-cfn-dashboard-ad-hoc-filtering-option-property-builder
  "The build-cfn-dashboard-ad-hoc-filtering-option-property-builder function updates a CfnDashboard$AdHocFilteringOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AdHocFilteringOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |
"
  [^CfnDashboard$AdHocFilteringOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :availability-status)]
    (. builder availabilityStatus data))
  (.build builder))


(defn cfn-dashboard-ad-hoc-filtering-option-property-builder
  "Creates a  `CfnDashboard$AdHocFilteringOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-ad-hoc-filtering-option-property-builder (new CfnDashboard$AdHocFilteringOptionProperty$Builder) id config))


(defn build-cfn-dashboard-aggregation-function-property-builder
  "The build-cfn-dashboard-aggregation-function-property-builder function updates a CfnDashboard$AggregationFunctionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AggregationFunctionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `attributeAggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:attribute-aggregation-function` |
| `categoricalAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:categorical-aggregation-function` |
| `dateAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-aggregation-function` |
| `numericalAggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numerical-aggregation-function` |
"
  [^CfnDashboard$AggregationFunctionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :attribute-aggregation-function)]
    (. builder attributeAggregationFunction data))
  (when-let [data (lookup-entry config id :categorical-aggregation-function)]
    (. builder categoricalAggregationFunction data))
  (when-let [data (lookup-entry config id :date-aggregation-function)]
    (. builder dateAggregationFunction data))
  (when-let [data (lookup-entry config id :numerical-aggregation-function)]
    (. builder numericalAggregationFunction data))
  (.build builder))


(defn cfn-dashboard-aggregation-function-property-builder
  "Creates a  `CfnDashboard$AggregationFunctionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-aggregation-function-property-builder (new CfnDashboard$AggregationFunctionProperty$Builder) id config))


(defn build-cfn-dashboard-aggregation-sort-configuration-property-builder
  "The build-cfn-dashboard-aggregation-sort-configuration-property-builder function updates a CfnDashboard$AggregationSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AggregationSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnDashboard$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `sortDirection` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-direction` |
"
  [^CfnDashboard$AggregationSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :sort-direction)]
    (. builder sortDirection data))
  (.build builder))


(defn cfn-dashboard-aggregation-sort-configuration-property-builder
  "Creates a  `CfnDashboard$AggregationSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-aggregation-sort-configuration-property-builder (new CfnDashboard$AggregationSortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-analysis-defaults-property-builder
  "The build-cfn-dashboard-analysis-defaults-property-builder function updates a CfnDashboard$AnalysisDefaultsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AnalysisDefaultsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultNewSheetConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultNewSheetConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-new-sheet-configuration` |
"
  [^CfnDashboard$AnalysisDefaultsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-new-sheet-configuration)]
    (. builder defaultNewSheetConfiguration data))
  (.build builder))


(defn cfn-dashboard-analysis-defaults-property-builder
  "Creates a  `CfnDashboard$AnalysisDefaultsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-analysis-defaults-property-builder (new CfnDashboard$AnalysisDefaultsProperty$Builder) id config))


(defn build-cfn-dashboard-anchor-date-configuration-property-builder
  "The build-cfn-dashboard-anchor-date-configuration-property-builder function updates a CfnDashboard$AnchorDateConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AnchorDateConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `anchorOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:anchor-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
"
  [^CfnDashboard$AnchorDateConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :anchor-option)]
    (. builder anchorOption data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (.build builder))


(defn cfn-dashboard-anchor-date-configuration-property-builder
  "Creates a  `CfnDashboard$AnchorDateConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-anchor-date-configuration-property-builder (new CfnDashboard$AnchorDateConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-arc-axis-configuration-property-builder
  "The build-cfn-dashboard-arc-axis-configuration-property-builder function updates a CfnDashboard$ArcAxisConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ArcAxisConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `range` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range` |
| `reserveRange` | java.lang.Number | [[cdk.support/lookup-entry]] | `:reserve-range` |
"
  [^CfnDashboard$ArcAxisConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :range)]
    (. builder range data))
  (when-let [data (lookup-entry config id :reserve-range)]
    (. builder reserveRange data))
  (.build builder))


(defn cfn-dashboard-arc-axis-configuration-property-builder
  "Creates a  `CfnDashboard$ArcAxisConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-arc-axis-configuration-property-builder (new CfnDashboard$ArcAxisConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-arc-axis-display-range-property-builder
  "The build-cfn-dashboard-arc-axis-display-range-property-builder function updates a CfnDashboard$ArcAxisDisplayRangeProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ArcAxisDisplayRangeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `max` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max` |
| `min` | java.lang.Number | [[cdk.support/lookup-entry]] | `:min` |
"
  [^CfnDashboard$ArcAxisDisplayRangeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :max)]
    (. builder max data))
  (when-let [data (lookup-entry config id :min)]
    (. builder min data))
  (.build builder))


(defn cfn-dashboard-arc-axis-display-range-property-builder
  "Creates a  `CfnDashboard$ArcAxisDisplayRangeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-arc-axis-display-range-property-builder (new CfnDashboard$ArcAxisDisplayRangeProperty$Builder) id config))


(defn build-cfn-dashboard-arc-configuration-property-builder
  "The build-cfn-dashboard-arc-configuration-property-builder function updates a CfnDashboard$ArcConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ArcConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:arc-angle` |
| `arcThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:arc-thickness` |
"
  [^CfnDashboard$ArcConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arc-angle)]
    (. builder arcAngle data))
  (when-let [data (lookup-entry config id :arc-thickness)]
    (. builder arcThickness data))
  (.build builder))


(defn cfn-dashboard-arc-configuration-property-builder
  "Creates a  `CfnDashboard$ArcConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-arc-configuration-property-builder (new CfnDashboard$ArcConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-arc-options-property-builder
  "The build-cfn-dashboard-arc-options-property-builder function updates a CfnDashboard$ArcOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ArcOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:arc-thickness` |
"
  [^CfnDashboard$ArcOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arc-thickness)]
    (. builder arcThickness data))
  (.build builder))


(defn cfn-dashboard-arc-options-property-builder
  "Creates a  `CfnDashboard$ArcOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-arc-options-property-builder (new CfnDashboard$ArcOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-asset-options-property-builder
  "The build-cfn-dashboard-asset-options-property-builder function updates a CfnDashboard$AssetOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AssetOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `timezone` | java.lang.String | [[cdk.support/lookup-entry]] | `:timezone` |
| `weekStart` | java.lang.String | [[cdk.support/lookup-entry]] | `:week-start` |
"
  [^CfnDashboard$AssetOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :timezone)]
    (. builder timezone data))
  (when-let [data (lookup-entry config id :week-start)]
    (. builder weekStart data))
  (.build builder))


(defn cfn-dashboard-asset-options-property-builder
  "Creates a  `CfnDashboard$AssetOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-asset-options-property-builder (new CfnDashboard$AssetOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-attribute-aggregation-function-property-builder
  "The build-cfn-dashboard-attribute-aggregation-function-property-builder function updates a CfnDashboard$AttributeAggregationFunctionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AttributeAggregationFunctionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleAttributeAggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-attribute-aggregation` |
| `valueForMultipleValues` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-for-multiple-values` |
"
  [^CfnDashboard$AttributeAggregationFunctionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :simple-attribute-aggregation)]
    (. builder simpleAttributeAggregation data))
  (when-let [data (lookup-entry config id :value-for-multiple-values)]
    (. builder valueForMultipleValues data))
  (.build builder))


(defn cfn-dashboard-attribute-aggregation-function-property-builder
  "Creates a  `CfnDashboard$AttributeAggregationFunctionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-attribute-aggregation-function-property-builder (new CfnDashboard$AttributeAggregationFunctionProperty$Builder) id config))


(defn build-cfn-dashboard-axis-data-options-property-builder
  "The build-cfn-dashboard-axis-data-options-property-builder function updates a CfnDashboard$AxisDataOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AxisDataOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateAxisOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-axis-options` |
| `numericAxisOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumericAxisOptionsProperty | [[cdk.support/lookup-entry]] | `:numeric-axis-options` |
"
  [^CfnDashboard$AxisDataOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-axis-options)]
    (. builder dateAxisOptions data))
  (when-let [data (lookup-entry config id :numeric-axis-options)]
    (. builder numericAxisOptions data))
  (.build builder))


(defn cfn-dashboard-axis-data-options-property-builder
  "Creates a  `CfnDashboard$AxisDataOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-axis-data-options-property-builder (new CfnDashboard$AxisDataOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-axis-display-min-max-range-property-builder
  "The build-cfn-dashboard-axis-display-min-max-range-property-builder function updates a CfnDashboard$AxisDisplayMinMaxRangeProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AxisDisplayMinMaxRangeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `maximum` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum` |
| `minimum` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum` |
"
  [^CfnDashboard$AxisDisplayMinMaxRangeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :maximum)]
    (. builder maximum data))
  (when-let [data (lookup-entry config id :minimum)]
    (. builder minimum data))
  (.build builder))


(defn cfn-dashboard-axis-display-min-max-range-property-builder
  "Creates a  `CfnDashboard$AxisDisplayMinMaxRangeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-axis-display-min-max-range-property-builder (new CfnDashboard$AxisDisplayMinMaxRangeProperty$Builder) id config))


(defn build-cfn-dashboard-axis-display-options-property-builder
  "The build-cfn-dashboard-axis-display-options-property-builder function updates a CfnDashboard$AxisDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AxisDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisLineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-line-visibility` |
| `axisOffset` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-offset` |
| `dataOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-options` |
| `gridLineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:grid-line-visibility` |
| `scrollbarOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scrollbar-options` |
| `tickLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tick-label-options` |
"
  [^CfnDashboard$AxisDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-line-visibility)]
    (. builder axisLineVisibility data))
  (when-let [data (lookup-entry config id :axis-offset)]
    (. builder axisOffset data))
  (when-let [data (lookup-entry config id :data-options)]
    (. builder dataOptions data))
  (when-let [data (lookup-entry config id :grid-line-visibility)]
    (. builder gridLineVisibility data))
  (when-let [data (lookup-entry config id :scrollbar-options)]
    (. builder scrollbarOptions data))
  (when-let [data (lookup-entry config id :tick-label-options)]
    (. builder tickLabelOptions data))
  (.build builder))


(defn cfn-dashboard-axis-display-options-property-builder
  "Creates a  `CfnDashboard$AxisDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-axis-display-options-property-builder (new CfnDashboard$AxisDisplayOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-axis-display-range-property-builder
  "The build-cfn-dashboard-axis-display-range-property-builder function updates a CfnDashboard$AxisDisplayRangeProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AxisDisplayRangeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataDriven` | java.lang.Object | [[cdk.support/lookup-entry]] | `:data-driven` |
| `minMax` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:min-max` |
"
  [^CfnDashboard$AxisDisplayRangeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-driven)]
    (. builder dataDriven data))
  (when-let [data (lookup-entry config id :min-max)]
    (. builder minMax data))
  (.build builder))


(defn cfn-dashboard-axis-display-range-property-builder
  "Creates a  `CfnDashboard$AxisDisplayRangeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-axis-display-range-property-builder (new CfnDashboard$AxisDisplayRangeProperty$Builder) id config))


(defn build-cfn-dashboard-axis-label-options-property-builder
  "The build-cfn-dashboard-axis-label-options-property-builder function updates a CfnDashboard$AxisLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AxisLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `applyTo` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisLabelReferenceOptionsProperty | [[cdk.support/lookup-entry]] | `:apply-to` |
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |
"
  [^CfnDashboard$AxisLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :apply-to)]
    (. builder applyTo data))
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (.build builder))


(defn cfn-dashboard-axis-label-options-property-builder
  "Creates a  `CfnDashboard$AxisLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-axis-label-options-property-builder (new CfnDashboard$AxisLabelOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-axis-label-reference-options-property-builder
  "The build-cfn-dashboard-axis-label-reference-options-property-builder function updates a CfnDashboard$AxisLabelReferenceOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AxisLabelReferenceOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
"
  [^CfnDashboard$AxisLabelReferenceOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (.build builder))


(defn cfn-dashboard-axis-label-reference-options-property-builder
  "Creates a  `CfnDashboard$AxisLabelReferenceOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-axis-label-reference-options-property-builder (new CfnDashboard$AxisLabelReferenceOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-axis-linear-scale-property-builder
  "The build-cfn-dashboard-axis-linear-scale-property-builder function updates a CfnDashboard$AxisLinearScaleProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AxisLinearScaleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `stepCount` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-count` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
"
  [^CfnDashboard$AxisLinearScaleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :step-count)]
    (. builder stepCount data))
  (when-let [data (lookup-entry config id :step-size)]
    (. builder stepSize data))
  (.build builder))


(defn cfn-dashboard-axis-linear-scale-property-builder
  "Creates a  `CfnDashboard$AxisLinearScaleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-axis-linear-scale-property-builder (new CfnDashboard$AxisLinearScaleProperty$Builder) id config))


(defn build-cfn-dashboard-axis-logarithmic-scale-property-builder
  "The build-cfn-dashboard-axis-logarithmic-scale-property-builder function updates a CfnDashboard$AxisLogarithmicScaleProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AxisLogarithmicScaleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `base` | java.lang.Number | [[cdk.support/lookup-entry]] | `:base` |
"
  [^CfnDashboard$AxisLogarithmicScaleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :base)]
    (. builder base data))
  (.build builder))


(defn cfn-dashboard-axis-logarithmic-scale-property-builder
  "Creates a  `CfnDashboard$AxisLogarithmicScaleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-axis-logarithmic-scale-property-builder (new CfnDashboard$AxisLogarithmicScaleProperty$Builder) id config))


(defn build-cfn-dashboard-axis-scale-property-builder
  "The build-cfn-dashboard-axis-scale-property-builder function updates a CfnDashboard$AxisScaleProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AxisScaleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `linear` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisLinearScaleProperty | [[cdk.support/lookup-entry]] | `:linear` |
| `logarithmic` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:logarithmic` |
"
  [^CfnDashboard$AxisScaleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :linear)]
    (. builder linear data))
  (when-let [data (lookup-entry config id :logarithmic)]
    (. builder logarithmic data))
  (.build builder))


(defn cfn-dashboard-axis-scale-property-builder
  "Creates a  `CfnDashboard$AxisScaleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-axis-scale-property-builder (new CfnDashboard$AxisScaleProperty$Builder) id config))


(defn build-cfn-dashboard-axis-tick-label-options-property-builder
  "The build-cfn-dashboard-axis-tick-label-options-property-builder function updates a CfnDashboard$AxisTickLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$AxisTickLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `labelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label-options` |
| `rotationAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:rotation-angle` |
"
  [^CfnDashboard$AxisTickLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :label-options)]
    (. builder labelOptions data))
  (when-let [data (lookup-entry config id :rotation-angle)]
    (. builder rotationAngle data))
  (.build builder))


(defn cfn-dashboard-axis-tick-label-options-property-builder
  "Creates a  `CfnDashboard$AxisTickLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-axis-tick-label-options-property-builder (new CfnDashboard$AxisTickLabelOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-bar-chart-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-bar-chart-aggregated-field-wells-property-builder function updates a CfnDashboard$BarChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$BarChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `smallMultiples` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$BarChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :small-multiples)]
    (. builder smallMultiples data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-bar-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$BarChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-bar-chart-aggregated-field-wells-property-builder (new CfnDashboard$BarChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-bar-chart-configuration-property-builder
  "The build-cfn-dashboard-bar-chart-configuration-property-builder function updates a CfnDashboard$BarChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$BarChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barsArrangement` | java.lang.String | [[cdk.support/lookup-entry]] | `:bars-arrangement` |
| `categoryAxis` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `contributionAnalysisDefaults` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `orientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:orientation` |
| `referenceLines` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `smallMultiplesOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$SmallMultiplesOptionsProperty | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-axis` |
| `valueLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnDashboard$BarChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bars-arrangement)]
    (. builder barsArrangement data))
  (when-let [data (lookup-entry config id :category-axis)]
    (. builder categoryAxis data))
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :color-label-options)]
    (. builder colorLabelOptions data))
  (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
    (. builder contributionAnalysisDefaults data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :orientation)]
    (. builder orientation data))
  (when-let [data (lookup-entry config id :reference-lines)]
    (. builder referenceLines data))
  (when-let [data (lookup-entry config id :small-multiples-options)]
    (. builder smallMultiplesOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :value-axis)]
    (. builder valueAxis data))
  (when-let [data (lookup-entry config id :value-label-options)]
    (. builder valueLabelOptions data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-dashboard-bar-chart-configuration-property-builder
  "Creates a  `CfnDashboard$BarChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-bar-chart-configuration-property-builder (new CfnDashboard$BarChartConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-bar-chart-field-wells-property-builder
  "The build-cfn-dashboard-bar-chart-field-wells-property-builder function updates a CfnDashboard$BarChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$BarChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bar-chart-aggregated-field-wells` |
"
  [^CfnDashboard$BarChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bar-chart-aggregated-field-wells)]
    (. builder barChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-bar-chart-field-wells-property-builder
  "Creates a  `CfnDashboard$BarChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-bar-chart-field-wells-property-builder (new CfnDashboard$BarChartFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-bar-chart-sort-configuration-property-builder
  "The build-cfn-dashboard-bar-chart-sort-configuration-property-builder function updates a CfnDashboard$BarChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$BarChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-sort` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |
"
  [^CfnDashboard$BarChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :color-items-limit)]
    (. builder colorItemsLimit data))
  (when-let [data (lookup-entry config id :color-sort)]
    (. builder colorSort data))
  (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
    (. builder smallMultiplesLimitConfiguration data))
  (when-let [data (lookup-entry config id :small-multiples-sort)]
    (. builder smallMultiplesSort data))
  (.build builder))


(defn cfn-dashboard-bar-chart-sort-configuration-property-builder
  "Creates a  `CfnDashboard$BarChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-bar-chart-sort-configuration-property-builder (new CfnDashboard$BarChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-bar-chart-visual-property-builder
  "The build-cfn-dashboard-bar-chart-visual-property-builder function updates a CfnDashboard$BarChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$BarChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$BarChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-bar-chart-visual-property-builder
  "Creates a  `CfnDashboard$BarChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-bar-chart-visual-property-builder (new CfnDashboard$BarChartVisualProperty$Builder) id config))


(defn build-cfn-dashboard-bin-count-options-property-builder
  "The build-cfn-dashboard-bin-count-options-property-builder function updates a CfnDashboard$BinCountOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$BinCountOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$BinCountOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-bin-count-options-property-builder
  "Creates a  `CfnDashboard$BinCountOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-bin-count-options-property-builder (new CfnDashboard$BinCountOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-bin-width-options-property-builder
  "The build-cfn-dashboard-bin-width-options-property-builder function updates a CfnDashboard$BinWidthOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$BinWidthOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binCountLimit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:bin-count-limit` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$BinWidthOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bin-count-limit)]
    (. builder binCountLimit data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-bin-width-options-property-builder
  "Creates a  `CfnDashboard$BinWidthOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-bin-width-options-property-builder (new CfnDashboard$BinWidthOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-body-section-configuration-property-builder
  "The build-cfn-dashboard-body-section-configuration-property-builder function updates a CfnDashboard$BodySectionConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$BodySectionConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | software.amazon.awscdk.services.quicksight.CfnDashboard$BodySectionContentProperty | [[cdk.support/lookup-entry]] | `:content` |
| `pageBreakConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$SectionPageBreakConfigurationProperty | [[cdk.support/lookup-entry]] | `:page-break-configuration` |
| `sectionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:section-id` |
| `style` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style` |
"
  [^CfnDashboard$BodySectionConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :content)]
    (. builder content data))
  (when-let [data (lookup-entry config id :page-break-configuration)]
    (. builder pageBreakConfiguration data))
  (when-let [data (lookup-entry config id :section-id)]
    (. builder sectionId data))
  (when-let [data (lookup-entry config id :style)]
    (. builder style data))
  (.build builder))


(defn cfn-dashboard-body-section-configuration-property-builder
  "Creates a  `CfnDashboard$BodySectionConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-body-section-configuration-property-builder (new CfnDashboard$BodySectionConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-body-section-content-property-builder
  "The build-cfn-dashboard-body-section-content-property-builder function updates a CfnDashboard$BodySectionContentProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$BodySectionContentProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `layout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:layout` |
"
  [^CfnDashboard$BodySectionContentProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :layout)]
    (. builder layout data))
  (.build builder))


(defn cfn-dashboard-body-section-content-property-builder
  "Creates a  `CfnDashboard$BodySectionContentProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-body-section-content-property-builder (new CfnDashboard$BodySectionContentProperty$Builder) id config))


(defn build-cfn-dashboard-box-plot-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-box-plot-aggregated-field-wells-property-builder function updates a CfnDashboard$BoxPlotAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$BoxPlotAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | java.util.List | [[cdk.support/lookup-entry]] | `:group-by` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$BoxPlotAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :group-by)]
    (. builder groupBy data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-box-plot-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$BoxPlotAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-box-plot-aggregated-field-wells-property-builder (new CfnDashboard$BoxPlotAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-box-plot-chart-configuration-property-builder
  "The build-cfn-dashboard-box-plot-chart-configuration-property-builder function updates a CfnDashboard$BoxPlotChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$BoxPlotChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `boxPlotOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$BoxPlotOptionsProperty | [[cdk.support/lookup-entry]] | `:box-plot-options` |
| `categoryAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnDashboard$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnDashboard$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnDashboard$BoxPlotChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :box-plot-options)]
    (. builder boxPlotOptions data))
  (when-let [data (lookup-entry config id :category-axis)]
    (. builder categoryAxis data))
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
    (. builder primaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
    (. builder primaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :reference-lines)]
    (. builder referenceLines data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-dashboard-box-plot-chart-configuration-property-builder
  "Creates a  `CfnDashboard$BoxPlotChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-box-plot-chart-configuration-property-builder (new CfnDashboard$BoxPlotChartConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-box-plot-field-wells-property-builder
  "The build-cfn-dashboard-box-plot-field-wells-property-builder function updates a CfnDashboard$BoxPlotFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$BoxPlotFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `boxPlotAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$BoxPlotAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:box-plot-aggregated-field-wells` |
"
  [^CfnDashboard$BoxPlotFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :box-plot-aggregated-field-wells)]
    (. builder boxPlotAggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-box-plot-field-wells-property-builder
  "Creates a  `CfnDashboard$BoxPlotFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-box-plot-field-wells-property-builder (new CfnDashboard$BoxPlotFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-box-plot-options-property-builder
  "The build-cfn-dashboard-box-plot-options-property-builder function updates a CfnDashboard$BoxPlotOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$BoxPlotOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `allDataPointsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:all-data-points-visibility` |
| `outlierVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:outlier-visibility` |
| `styleOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$BoxPlotStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:style-options` |
"
  [^CfnDashboard$BoxPlotOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :all-data-points-visibility)]
    (. builder allDataPointsVisibility data))
  (when-let [data (lookup-entry config id :outlier-visibility)]
    (. builder outlierVisibility data))
  (when-let [data (lookup-entry config id :style-options)]
    (. builder styleOptions data))
  (.build builder))


(defn cfn-dashboard-box-plot-options-property-builder
  "Creates a  `CfnDashboard$BoxPlotOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-box-plot-options-property-builder (new CfnDashboard$BoxPlotOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-box-plot-sort-configuration-property-builder
  "The build-cfn-dashboard-box-plot-sort-configuration-property-builder function updates a CfnDashboard$BoxPlotSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$BoxPlotSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `paginationConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:pagination-configuration` |
"
  [^CfnDashboard$BoxPlotSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :pagination-configuration)]
    (. builder paginationConfiguration data))
  (.build builder))


(defn cfn-dashboard-box-plot-sort-configuration-property-builder
  "Creates a  `CfnDashboard$BoxPlotSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-box-plot-sort-configuration-property-builder (new CfnDashboard$BoxPlotSortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-box-plot-style-options-property-builder
  "The build-cfn-dashboard-box-plot-style-options-property-builder function updates a CfnDashboard$BoxPlotStyleOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$BoxPlotStyleOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fillStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:fill-style` |
"
  [^CfnDashboard$BoxPlotStyleOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :fill-style)]
    (. builder fillStyle data))
  (.build builder))


(defn cfn-dashboard-box-plot-style-options-property-builder
  "Creates a  `CfnDashboard$BoxPlotStyleOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-box-plot-style-options-property-builder (new CfnDashboard$BoxPlotStyleOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-box-plot-visual-property-builder
  "The build-cfn-dashboard-box-plot-visual-property-builder function updates a CfnDashboard$BoxPlotVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$BoxPlotVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$BoxPlotChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$BoxPlotVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-box-plot-visual-property-builder
  "Creates a  `CfnDashboard$BoxPlotVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-box-plot-visual-property-builder (new CfnDashboard$BoxPlotVisualProperty$Builder) id config))


(defn build-cfn-dashboard-builder
  "The build-cfn-dashboard-builder function updates a CfnDashboard$Builder instance using the provided configuration.
  The function takes the CfnDashboard$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `dashboardId` | java.lang.String | [[cdk.support/lookup-entry]] | `:dashboard-id` |
| `dashboardPublishOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dashboard-publish-options` |
| `definition` | software.amazon.awscdk.services.quicksight.CfnDashboard$DashboardVersionDefinitionProperty | [[cdk.support/lookup-entry]] | `:definition` |
| `linkEntities` | java.util.List | [[cdk.support/lookup-entry]] | `:link-entities` |
| `linkSharingConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:link-sharing-configuration` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameters` | software.amazon.awscdk.services.quicksight.CfnDashboard$ParametersProperty | [[cdk.support/lookup-entry]] | `:parameters` |
| `permissions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:permissions` |
| `sourceEntity` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-entity` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `themeArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:theme-arn` |
| `validationStrategy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:validation-strategy` |
| `versionDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:version-description` |
"
  [^CfnDashboard$Builder builder id config]
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :dashboard-id)]
    (. builder dashboardId data))
  (when-let [data (lookup-entry config id :dashboard-publish-options)]
    (. builder dashboardPublishOptions data))
  (when-let [data (lookup-entry config id :definition)]
    (. builder definition data))
  (when-let [data (lookup-entry config id :link-entities)]
    (. builder linkEntities data))
  (when-let [data (lookup-entry config id :link-sharing-configuration)]
    (. builder linkSharingConfiguration data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :parameters)]
    (. builder parameters data))
  (when-let [data (lookup-entry config id :permissions)]
    (. builder permissions data))
  (when-let [data (lookup-entry config id :source-entity)]
    (. builder sourceEntity data))
  (when-let [data (lookup-entry config id :tags)]
    (. builder tags data))
  (when-let [data (lookup-entry config id :theme-arn)]
    (. builder themeArn data))
  (when-let [data (lookup-entry config id :validation-strategy)]
    (. builder validationStrategy data))
  (when-let [data (lookup-entry config id :version-description)]
    (. builder versionDescription data))
  (.build builder))


(defn cfn-dashboard-builder
  "Creates a  `CfnDashboard$Builder` instance using a scope and ID, applies the data configuration, then builds it.  Takes the following arguments: 
| Argument | DataType | Description |
|---|---|---|
| scope | software.constructs.Construct | The parent scope construct of the object being built. |
| id | String or Keyword or Symbol | Value to use as both the ID of the object being build and the namespace when looking up configuration values. |
| config | map | Data configuration |"
  [^software.constructs.Construct scope id config]
  (build-cfn-dashboard-builder (CfnDashboard$Builder/create scope (name id)) id config))


(defn build-cfn-dashboard-calculated-field-property-builder
  "The build-cfn-dashboard-calculated-field-property-builder function updates a CfnDashboard$CalculatedFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CalculatedFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
"
  [^CfnDashboard$CalculatedFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (.build builder))


(defn cfn-dashboard-calculated-field-property-builder
  "Creates a  `CfnDashboard$CalculatedFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-calculated-field-property-builder (new CfnDashboard$CalculatedFieldProperty$Builder) id config))


(defn build-cfn-dashboard-calculated-measure-field-property-builder
  "The build-cfn-dashboard-calculated-measure-field-property-builder function updates a CfnDashboard$CalculatedMeasureFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CalculatedMeasureFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
"
  [^CfnDashboard$CalculatedMeasureFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (.build builder))


(defn cfn-dashboard-calculated-measure-field-property-builder
  "Creates a  `CfnDashboard$CalculatedMeasureFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-calculated-measure-field-property-builder (new CfnDashboard$CalculatedMeasureFieldProperty$Builder) id config))


(defn build-cfn-dashboard-cascading-control-configuration-property-builder
  "The build-cfn-dashboard-cascading-control-configuration-property-builder function updates a CfnDashboard$CascadingControlConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CascadingControlConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sourceControls` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-controls` |
"
  [^CfnDashboard$CascadingControlConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :source-controls)]
    (. builder sourceControls data))
  (.build builder))


(defn cfn-dashboard-cascading-control-configuration-property-builder
  "Creates a  `CfnDashboard$CascadingControlConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-cascading-control-configuration-property-builder (new CfnDashboard$CascadingControlConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-cascading-control-source-property-builder
  "The build-cfn-dashboard-cascading-control-source-property-builder function updates a CfnDashboard$CascadingControlSourceProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CascadingControlSourceProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnToMatch` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column-to-match` |
| `sourceSheetControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-sheet-control-id` |
"
  [^CfnDashboard$CascadingControlSourceProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-to-match)]
    (. builder columnToMatch data))
  (when-let [data (lookup-entry config id :source-sheet-control-id)]
    (. builder sourceSheetControlId data))
  (.build builder))


(defn cfn-dashboard-cascading-control-source-property-builder
  "Creates a  `CfnDashboard$CascadingControlSourceProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-cascading-control-source-property-builder (new CfnDashboard$CascadingControlSourceProperty$Builder) id config))


(defn build-cfn-dashboard-categorical-dimension-field-property-builder
  "The build-cfn-dashboard-categorical-dimension-field-property-builder function updates a CfnDashboard$CategoricalDimensionFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CategoricalDimensionFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$StringFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnDashboard$CategoricalDimensionFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-dashboard-categorical-dimension-field-property-builder
  "Creates a  `CfnDashboard$CategoricalDimensionFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-categorical-dimension-field-property-builder (new CfnDashboard$CategoricalDimensionFieldProperty$Builder) id config))


(defn build-cfn-dashboard-categorical-measure-field-property-builder
  "The build-cfn-dashboard-categorical-measure-field-property-builder function updates a CfnDashboard$CategoricalMeasureFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CategoricalMeasureFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$StringFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
"
  [^CfnDashboard$CategoricalMeasureFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (.build builder))


(defn cfn-dashboard-categorical-measure-field-property-builder
  "Creates a  `CfnDashboard$CategoricalMeasureFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-categorical-measure-field-property-builder (new CfnDashboard$CategoricalMeasureFieldProperty$Builder) id config))


(defn build-cfn-dashboard-category-drill-down-filter-property-builder
  "The build-cfn-dashboard-category-drill-down-filter-property-builder function updates a CfnDashboard$CategoryDrillDownFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CategoryDrillDownFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
"
  [^CfnDashboard$CategoryDrillDownFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-values)]
    (. builder categoryValues data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (.build builder))


(defn cfn-dashboard-category-drill-down-filter-property-builder
  "Creates a  `CfnDashboard$CategoryDrillDownFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-category-drill-down-filter-property-builder (new CfnDashboard$CategoryDrillDownFilterProperty$Builder) id config))


(defn build-cfn-dashboard-category-filter-configuration-property-builder
  "The build-cfn-dashboard-category-filter-configuration-property-builder function updates a CfnDashboard$CategoryFilterConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CategoryFilterConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customFilterConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$CustomFilterConfigurationProperty | [[cdk.support/lookup-entry]] | `:custom-filter-configuration` |
| `customFilterListConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$CustomFilterListConfigurationProperty | [[cdk.support/lookup-entry]] | `:custom-filter-list-configuration` |
| `filterListConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-list-configuration` |
"
  [^CfnDashboard$CategoryFilterConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-filter-configuration)]
    (. builder customFilterConfiguration data))
  (when-let [data (lookup-entry config id :custom-filter-list-configuration)]
    (. builder customFilterListConfiguration data))
  (when-let [data (lookup-entry config id :filter-list-configuration)]
    (. builder filterListConfiguration data))
  (.build builder))


(defn cfn-dashboard-category-filter-configuration-property-builder
  "Creates a  `CfnDashboard$CategoryFilterConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-category-filter-configuration-property-builder (new CfnDashboard$CategoryFilterConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-category-filter-property-builder
  "The build-cfn-dashboard-category-filter-property-builder function updates a CfnDashboard$CategoryFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CategoryFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `configuration` | software.amazon.awscdk.services.quicksight.CfnDashboard$CategoryFilterConfigurationProperty | [[cdk.support/lookup-entry]] | `:configuration` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
"
  [^CfnDashboard$CategoryFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :configuration)]
    (. builder configuration data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (.build builder))


(defn cfn-dashboard-category-filter-property-builder
  "Creates a  `CfnDashboard$CategoryFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-category-filter-property-builder (new CfnDashboard$CategoryFilterProperty$Builder) id config))


(defn build-cfn-dashboard-chart-axis-label-options-property-builder
  "The build-cfn-dashboard-chart-axis-label-options-property-builder function updates a CfnDashboard$ChartAxisLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ChartAxisLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisLabelOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:axis-label-options` |
| `sortIconVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-icon-visibility` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$ChartAxisLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-label-options)]
    (. builder axisLabelOptions data))
  (when-let [data (lookup-entry config id :sort-icon-visibility)]
    (. builder sortIconVisibility data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-chart-axis-label-options-property-builder
  "Creates a  `CfnDashboard$ChartAxisLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-chart-axis-label-options-property-builder (new CfnDashboard$ChartAxisLabelOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-cluster-marker-configuration-property-builder
  "The build-cfn-dashboard-cluster-marker-configuration-property-builder function updates a CfnDashboard$ClusterMarkerConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ClusterMarkerConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `clusterMarker` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cluster-marker` |
"
  [^CfnDashboard$ClusterMarkerConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cluster-marker)]
    (. builder clusterMarker data))
  (.build builder))


(defn cfn-dashboard-cluster-marker-configuration-property-builder
  "Creates a  `CfnDashboard$ClusterMarkerConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-cluster-marker-configuration-property-builder (new CfnDashboard$ClusterMarkerConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-cluster-marker-property-builder
  "The build-cfn-dashboard-cluster-marker-property-builder function updates a CfnDashboard$ClusterMarkerProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ClusterMarkerProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleClusterMarker` | software.amazon.awscdk.services.quicksight.CfnDashboard$SimpleClusterMarkerProperty | [[cdk.support/lookup-entry]] | `:simple-cluster-marker` |
"
  [^CfnDashboard$ClusterMarkerProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :simple-cluster-marker)]
    (. builder simpleClusterMarker data))
  (.build builder))


(defn cfn-dashboard-cluster-marker-property-builder
  "Creates a  `CfnDashboard$ClusterMarkerProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-cluster-marker-property-builder (new CfnDashboard$ClusterMarkerProperty$Builder) id config))


(defn build-cfn-dashboard-color-scale-property-builder
  "The build-cfn-dashboard-color-scale-property-builder function updates a CfnDashboard$ColorScaleProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ColorScaleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorFillType` | java.lang.String | [[cdk.support/lookup-entry]] | `:color-fill-type` |
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `nullValueColor` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataColorProperty | [[cdk.support/lookup-entry]] | `:null-value-color` |
"
  [^CfnDashboard$ColorScaleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color-fill-type)]
    (. builder colorFillType data))
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :null-value-color)]
    (. builder nullValueColor data))
  (.build builder))


(defn cfn-dashboard-color-scale-property-builder
  "Creates a  `CfnDashboard$ColorScaleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-color-scale-property-builder (new CfnDashboard$ColorScaleProperty$Builder) id config))


(defn build-cfn-dashboard-colors-configuration-property-builder
  "The build-cfn-dashboard-colors-configuration-property-builder function updates a CfnDashboard$ColorsConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ColorsConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customColors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-colors` |
"
  [^CfnDashboard$ColorsConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-colors)]
    (. builder customColors data))
  (.build builder))


(defn cfn-dashboard-colors-configuration-property-builder
  "Creates a  `CfnDashboard$ColorsConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-colors-configuration-property-builder (new CfnDashboard$ColorsConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-column-configuration-property-builder
  "The build-cfn-dashboard-column-configuration-property-builder function updates a CfnDashboard$ColumnConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ColumnConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorsConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors-configuration` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `role` | java.lang.String | [[cdk.support/lookup-entry]] | `:role` |
"
  [^CfnDashboard$ColumnConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :colors-configuration)]
    (. builder colorsConfiguration data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (when-let [data (lookup-entry config id :role)]
    (. builder role data))
  (.build builder))


(defn cfn-dashboard-column-configuration-property-builder
  "Creates a  `CfnDashboard$ColumnConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-column-configuration-property-builder (new CfnDashboard$ColumnConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-column-hierarchy-property-builder
  "The build-cfn-dashboard-column-hierarchy-property-builder function updates a CfnDashboard$ColumnHierarchyProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ColumnHierarchyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeHierarchy` | software.amazon.awscdk.services.quicksight.CfnDashboard$DateTimeHierarchyProperty | [[cdk.support/lookup-entry]] | `:date-time-hierarchy` |
| `explicitHierarchy` | software.amazon.awscdk.services.quicksight.CfnDashboard$ExplicitHierarchyProperty | [[cdk.support/lookup-entry]] | `:explicit-hierarchy` |
| `predefinedHierarchy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:predefined-hierarchy` |
"
  [^CfnDashboard$ColumnHierarchyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-hierarchy)]
    (. builder dateTimeHierarchy data))
  (when-let [data (lookup-entry config id :explicit-hierarchy)]
    (. builder explicitHierarchy data))
  (when-let [data (lookup-entry config id :predefined-hierarchy)]
    (. builder predefinedHierarchy data))
  (.build builder))


(defn cfn-dashboard-column-hierarchy-property-builder
  "Creates a  `CfnDashboard$ColumnHierarchyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-column-hierarchy-property-builder (new CfnDashboard$ColumnHierarchyProperty$Builder) id config))


(defn build-cfn-dashboard-column-identifier-property-builder
  "The build-cfn-dashboard-column-identifier-property-builder function updates a CfnDashboard$ColumnIdentifierProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ColumnIdentifierProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
"
  [^CfnDashboard$ColumnIdentifierProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-name)]
    (. builder columnName data))
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (.build builder))


(defn cfn-dashboard-column-identifier-property-builder
  "Creates a  `CfnDashboard$ColumnIdentifierProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-column-identifier-property-builder (new CfnDashboard$ColumnIdentifierProperty$Builder) id config))


(defn build-cfn-dashboard-column-sort-property-builder
  "The build-cfn-dashboard-column-sort-property-builder function updates a CfnDashboard$ColumnSortProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ColumnSortProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnDashboard$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `sortBy` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:sort-by` |
"
  [^CfnDashboard$ColumnSortProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :direction)]
    (. builder direction data))
  (when-let [data (lookup-entry config id :sort-by)]
    (. builder sortBy data))
  (.build builder))


(defn cfn-dashboard-column-sort-property-builder
  "Creates a  `CfnDashboard$ColumnSortProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-column-sort-property-builder (new CfnDashboard$ColumnSortProperty$Builder) id config))


(defn build-cfn-dashboard-column-tooltip-item-property-builder
  "The build-cfn-dashboard-column-tooltip-item-property-builder function updates a CfnDashboard$ColumnTooltipItemProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ColumnTooltipItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregation` | software.amazon.awscdk.services.quicksight.CfnDashboard$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation` |
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `label` | java.lang.String | [[cdk.support/lookup-entry]] | `:label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$ColumnTooltipItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation)]
    (. builder aggregation data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :label)]
    (. builder label data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-column-tooltip-item-property-builder
  "Creates a  `CfnDashboard$ColumnTooltipItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-column-tooltip-item-property-builder (new CfnDashboard$ColumnTooltipItemProperty$Builder) id config))


(defn build-cfn-dashboard-combo-chart-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-combo-chart-aggregated-field-wells-property-builder function updates a CfnDashboard$ComboChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ComboChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barValues` | java.util.List | [[cdk.support/lookup-entry]] | `:bar-values` |
| `category` | java.util.List | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
| `lineValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-values` |
"
  [^CfnDashboard$ComboChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bar-values)]
    (. builder barValues data))
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :line-values)]
    (. builder lineValues data))
  (.build builder))


(defn cfn-dashboard-combo-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$ComboChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-combo-chart-aggregated-field-wells-property-builder (new CfnDashboard$ComboChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-combo-chart-configuration-property-builder
  "The build-cfn-dashboard-combo-chart-configuration-property-builder function updates a CfnDashboard$ComboChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ComboChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barDataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bar-data-labels` |
| `barsArrangement` | java.lang.String | [[cdk.support/lookup-entry]] | `:bars-arrangement` |
| `categoryAxis` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$ComboChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnDashboard$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `lineDataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-data-labels` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | java.util.List | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `secondaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-y-axis-display-options` |
| `secondaryYAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-y-axis-label-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ComboChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnDashboard$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnDashboard$ComboChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bar-data-labels)]
    (. builder barDataLabels data))
  (when-let [data (lookup-entry config id :bars-arrangement)]
    (. builder barsArrangement data))
  (when-let [data (lookup-entry config id :category-axis)]
    (. builder categoryAxis data))
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :color-label-options)]
    (. builder colorLabelOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :line-data-labels)]
    (. builder lineDataLabels data))
  (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
    (. builder primaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
    (. builder primaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :reference-lines)]
    (. builder referenceLines data))
  (when-let [data (lookup-entry config id :secondary-y-axis-display-options)]
    (. builder secondaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :secondary-y-axis-label-options)]
    (. builder secondaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-dashboard-combo-chart-configuration-property-builder
  "Creates a  `CfnDashboard$ComboChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-combo-chart-configuration-property-builder (new CfnDashboard$ComboChartConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-combo-chart-field-wells-property-builder
  "The build-cfn-dashboard-combo-chart-field-wells-property-builder function updates a CfnDashboard$ComboChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ComboChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comboChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:combo-chart-aggregated-field-wells` |
"
  [^CfnDashboard$ComboChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :combo-chart-aggregated-field-wells)]
    (. builder comboChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-combo-chart-field-wells-property-builder
  "Creates a  `CfnDashboard$ComboChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-combo-chart-field-wells-property-builder (new CfnDashboard$ComboChartFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-combo-chart-sort-configuration-property-builder
  "The build-cfn-dashboard-combo-chart-sort-configuration-property-builder function updates a CfnDashboard$ComboChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ComboChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-sort` |
"
  [^CfnDashboard$ComboChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :color-items-limit)]
    (. builder colorItemsLimit data))
  (when-let [data (lookup-entry config id :color-sort)]
    (. builder colorSort data))
  (.build builder))


(defn cfn-dashboard-combo-chart-sort-configuration-property-builder
  "Creates a  `CfnDashboard$ComboChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-combo-chart-sort-configuration-property-builder (new CfnDashboard$ComboChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-combo-chart-visual-property-builder
  "The build-cfn-dashboard-combo-chart-visual-property-builder function updates a CfnDashboard$ComboChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ComboChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$ComboChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-combo-chart-visual-property-builder
  "Creates a  `CfnDashboard$ComboChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-combo-chart-visual-property-builder (new CfnDashboard$ComboChartVisualProperty$Builder) id config))


(defn build-cfn-dashboard-comparison-configuration-property-builder
  "The build-cfn-dashboard-comparison-configuration-property-builder function updates a CfnDashboard$ComparisonConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ComparisonConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comparisonFormat` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:comparison-format` |
| `comparisonMethod` | java.lang.String | [[cdk.support/lookup-entry]] | `:comparison-method` |
"
  [^CfnDashboard$ComparisonConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :comparison-format)]
    (. builder comparisonFormat data))
  (when-let [data (lookup-entry config id :comparison-method)]
    (. builder comparisonMethod data))
  (.build builder))


(defn cfn-dashboard-comparison-configuration-property-builder
  "Creates a  `CfnDashboard$ComparisonConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-comparison-configuration-property-builder (new CfnDashboard$ComparisonConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-comparison-format-configuration-property-builder
  "The build-cfn-dashboard-comparison-format-configuration-property-builder function updates a CfnDashboard$ComparisonFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ComparisonFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `numberDisplayFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumberDisplayFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:number-display-format-configuration` |
| `percentageDisplayFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:percentage-display-format-configuration` |
"
  [^CfnDashboard$ComparisonFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :number-display-format-configuration)]
    (. builder numberDisplayFormatConfiguration data))
  (when-let [data (lookup-entry config id :percentage-display-format-configuration)]
    (. builder percentageDisplayFormatConfiguration data))
  (.build builder))


(defn cfn-dashboard-comparison-format-configuration-property-builder
  "Creates a  `CfnDashboard$ComparisonFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-comparison-format-configuration-property-builder (new CfnDashboard$ComparisonFormatConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-computation-property-builder
  "The build-cfn-dashboard-computation-property-builder function updates a CfnDashboard$ComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `forecast` | software.amazon.awscdk.services.quicksight.CfnDashboard$ForecastComputationProperty | [[cdk.support/lookup-entry]] | `:forecast` |
| `growthRate` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:growth-rate` |
| `maximumMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:maximum-minimum` |
| `metricComparison` | software.amazon.awscdk.services.quicksight.CfnDashboard$MetricComparisonComputationProperty | [[cdk.support/lookup-entry]] | `:metric-comparison` |
| `periodOverPeriod` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:period-over-period` |
| `periodToDate` | software.amazon.awscdk.services.quicksight.CfnDashboard$PeriodToDateComputationProperty | [[cdk.support/lookup-entry]] | `:period-to-date` |
| `topBottomMovers` | software.amazon.awscdk.services.quicksight.CfnDashboard$TopBottomMoversComputationProperty | [[cdk.support/lookup-entry]] | `:top-bottom-movers` |
| `topBottomRanked` | software.amazon.awscdk.services.quicksight.CfnDashboard$TopBottomRankedComputationProperty | [[cdk.support/lookup-entry]] | `:top-bottom-ranked` |
| `totalAggregation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-aggregation` |
| `uniqueValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:unique-values` |
"
  [^CfnDashboard$ComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :forecast)]
    (. builder forecast data))
  (when-let [data (lookup-entry config id :growth-rate)]
    (. builder growthRate data))
  (when-let [data (lookup-entry config id :maximum-minimum)]
    (. builder maximumMinimum data))
  (when-let [data (lookup-entry config id :metric-comparison)]
    (. builder metricComparison data))
  (when-let [data (lookup-entry config id :period-over-period)]
    (. builder periodOverPeriod data))
  (when-let [data (lookup-entry config id :period-to-date)]
    (. builder periodToDate data))
  (when-let [data (lookup-entry config id :top-bottom-movers)]
    (. builder topBottomMovers data))
  (when-let [data (lookup-entry config id :top-bottom-ranked)]
    (. builder topBottomRanked data))
  (when-let [data (lookup-entry config id :total-aggregation)]
    (. builder totalAggregation data))
  (when-let [data (lookup-entry config id :unique-values)]
    (. builder uniqueValues data))
  (.build builder))


(defn cfn-dashboard-computation-property-builder
  "Creates a  `CfnDashboard$ComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-computation-property-builder (new CfnDashboard$ComputationProperty$Builder) id config))


(defn build-cfn-dashboard-conditional-formatting-color-property-builder
  "The build-cfn-dashboard-conditional-formatting-color-property-builder function updates a CfnDashboard$ConditionalFormattingColorProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ConditionalFormattingColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `gradient` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:gradient` |
| `solid` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingSolidColorProperty | [[cdk.support/lookup-entry]] | `:solid` |
"
  [^CfnDashboard$ConditionalFormattingColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :gradient)]
    (. builder gradient data))
  (when-let [data (lookup-entry config id :solid)]
    (. builder solid data))
  (.build builder))


(defn cfn-dashboard-conditional-formatting-color-property-builder
  "Creates a  `CfnDashboard$ConditionalFormattingColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-conditional-formatting-color-property-builder (new CfnDashboard$ConditionalFormattingColorProperty$Builder) id config))


(defn build-cfn-dashboard-conditional-formatting-custom-icon-condition-property-builder
  "The build-cfn-dashboard-conditional-formatting-custom-icon-condition-property-builder function updates a CfnDashboard$ConditionalFormattingCustomIconConditionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ConditionalFormattingCustomIconConditionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `displayConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingIconDisplayConfigurationProperty | [[cdk.support/lookup-entry]] | `:display-configuration` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `iconOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingCustomIconOptionsProperty | [[cdk.support/lookup-entry]] | `:icon-options` |
"
  [^CfnDashboard$ConditionalFormattingCustomIconConditionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :display-configuration)]
    (. builder displayConfiguration data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (when-let [data (lookup-entry config id :icon-options)]
    (. builder iconOptions data))
  (.build builder))


(defn cfn-dashboard-conditional-formatting-custom-icon-condition-property-builder
  "Creates a  `CfnDashboard$ConditionalFormattingCustomIconConditionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-conditional-formatting-custom-icon-condition-property-builder (new CfnDashboard$ConditionalFormattingCustomIconConditionProperty$Builder) id config))


(defn build-cfn-dashboard-conditional-formatting-custom-icon-options-property-builder
  "The build-cfn-dashboard-conditional-formatting-custom-icon-options-property-builder function updates a CfnDashboard$ConditionalFormattingCustomIconOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ConditionalFormattingCustomIconOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon` |
| `unicodeIcon` | java.lang.String | [[cdk.support/lookup-entry]] | `:unicode-icon` |
"
  [^CfnDashboard$ConditionalFormattingCustomIconOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :unicode-icon)]
    (. builder unicodeIcon data))
  (.build builder))


(defn cfn-dashboard-conditional-formatting-custom-icon-options-property-builder
  "Creates a  `CfnDashboard$ConditionalFormattingCustomIconOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-conditional-formatting-custom-icon-options-property-builder (new CfnDashboard$ConditionalFormattingCustomIconOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-conditional-formatting-gradient-color-property-builder
  "The build-cfn-dashboard-conditional-formatting-gradient-color-property-builder function updates a CfnDashboard$ConditionalFormattingGradientColorProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ConditionalFormattingGradientColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | software.amazon.awscdk.services.quicksight.CfnDashboard$GradientColorProperty | [[cdk.support/lookup-entry]] | `:color` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
"
  [^CfnDashboard$ConditionalFormattingGradientColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (.build builder))


(defn cfn-dashboard-conditional-formatting-gradient-color-property-builder
  "Creates a  `CfnDashboard$ConditionalFormattingGradientColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-conditional-formatting-gradient-color-property-builder (new CfnDashboard$ConditionalFormattingGradientColorProperty$Builder) id config))


(defn build-cfn-dashboard-conditional-formatting-icon-display-configuration-property-builder
  "The build-cfn-dashboard-conditional-formatting-icon-display-configuration-property-builder function updates a CfnDashboard$ConditionalFormattingIconDisplayConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ConditionalFormattingIconDisplayConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `iconDisplayOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon-display-option` |
"
  [^CfnDashboard$ConditionalFormattingIconDisplayConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon-display-option)]
    (. builder iconDisplayOption data))
  (.build builder))


(defn cfn-dashboard-conditional-formatting-icon-display-configuration-property-builder
  "Creates a  `CfnDashboard$ConditionalFormattingIconDisplayConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-conditional-formatting-icon-display-configuration-property-builder (new CfnDashboard$ConditionalFormattingIconDisplayConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-conditional-formatting-icon-property-builder
  "The build-cfn-dashboard-conditional-formatting-icon-property-builder function updates a CfnDashboard$ConditionalFormattingIconProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ConditionalFormattingIconProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customCondition` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingCustomIconConditionProperty | [[cdk.support/lookup-entry]] | `:custom-condition` |
| `iconSet` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon-set` |
"
  [^CfnDashboard$ConditionalFormattingIconProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-condition)]
    (. builder customCondition data))
  (when-let [data (lookup-entry config id :icon-set)]
    (. builder iconSet data))
  (.build builder))


(defn cfn-dashboard-conditional-formatting-icon-property-builder
  "Creates a  `CfnDashboard$ConditionalFormattingIconProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-conditional-formatting-icon-property-builder (new CfnDashboard$ConditionalFormattingIconProperty$Builder) id config))


(defn build-cfn-dashboard-conditional-formatting-icon-set-property-builder
  "The build-cfn-dashboard-conditional-formatting-icon-set-property-builder function updates a CfnDashboard$ConditionalFormattingIconSetProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ConditionalFormattingIconSetProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `iconSetType` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon-set-type` |
"
  [^CfnDashboard$ConditionalFormattingIconSetProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (when-let [data (lookup-entry config id :icon-set-type)]
    (. builder iconSetType data))
  (.build builder))


(defn cfn-dashboard-conditional-formatting-icon-set-property-builder
  "Creates a  `CfnDashboard$ConditionalFormattingIconSetProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-conditional-formatting-icon-set-property-builder (new CfnDashboard$ConditionalFormattingIconSetProperty$Builder) id config))


(defn build-cfn-dashboard-conditional-formatting-solid-color-property-builder
  "The build-cfn-dashboard-conditional-formatting-solid-color-property-builder function updates a CfnDashboard$ConditionalFormattingSolidColorProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ConditionalFormattingSolidColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
"
  [^CfnDashboard$ConditionalFormattingSolidColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (.build builder))


(defn cfn-dashboard-conditional-formatting-solid-color-property-builder
  "Creates a  `CfnDashboard$ConditionalFormattingSolidColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-conditional-formatting-solid-color-property-builder (new CfnDashboard$ConditionalFormattingSolidColorProperty$Builder) id config))


(defn build-cfn-dashboard-contribution-analysis-default-property-builder
  "The build-cfn-dashboard-contribution-analysis-default-property-builder function updates a CfnDashboard$ContributionAnalysisDefaultProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ContributionAnalysisDefaultProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contributorDimensions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:contributor-dimensions` |
| `measureFieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-field-id` |
"
  [^CfnDashboard$ContributionAnalysisDefaultProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :contributor-dimensions)]
    (. builder contributorDimensions data))
  (when-let [data (lookup-entry config id :measure-field-id)]
    (. builder measureFieldId data))
  (.build builder))


(defn cfn-dashboard-contribution-analysis-default-property-builder
  "Creates a  `CfnDashboard$ContributionAnalysisDefaultProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-contribution-analysis-default-property-builder (new CfnDashboard$ContributionAnalysisDefaultProperty$Builder) id config))


(defn build-cfn-dashboard-currency-display-format-configuration-property-builder
  "The build-cfn-dashboard-currency-display-format-configuration-property-builder function updates a CfnDashboard$CurrencyDisplayFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CurrencyDisplayFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NegativeValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numberScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:number-scale` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |
| `symbol` | java.lang.String | [[cdk.support/lookup-entry]] | `:symbol` |
"
  [^CfnDashboard$CurrencyDisplayFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :decimal-places-configuration)]
    (. builder decimalPlacesConfiguration data))
  (when-let [data (lookup-entry config id :negative-value-configuration)]
    (. builder negativeValueConfiguration data))
  (when-let [data (lookup-entry config id :null-value-format-configuration)]
    (. builder nullValueFormatConfiguration data))
  (when-let [data (lookup-entry config id :number-scale)]
    (. builder numberScale data))
  (when-let [data (lookup-entry config id :prefix)]
    (. builder prefix data))
  (when-let [data (lookup-entry config id :separator-configuration)]
    (. builder separatorConfiguration data))
  (when-let [data (lookup-entry config id :suffix)]
    (. builder suffix data))
  (when-let [data (lookup-entry config id :symbol)]
    (. builder symbol data))
  (.build builder))


(defn cfn-dashboard-currency-display-format-configuration-property-builder
  "Creates a  `CfnDashboard$CurrencyDisplayFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-currency-display-format-configuration-property-builder (new CfnDashboard$CurrencyDisplayFormatConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-custom-action-filter-operation-property-builder
  "The build-cfn-dashboard-custom-action-filter-operation-property-builder function updates a CfnDashboard$CustomActionFilterOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CustomActionFilterOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `selectedFieldsConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-fields-configuration` |
| `targetVisualsConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target-visuals-configuration` |
"
  [^CfnDashboard$CustomActionFilterOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :selected-fields-configuration)]
    (. builder selectedFieldsConfiguration data))
  (when-let [data (lookup-entry config id :target-visuals-configuration)]
    (. builder targetVisualsConfiguration data))
  (.build builder))


(defn cfn-dashboard-custom-action-filter-operation-property-builder
  "Creates a  `CfnDashboard$CustomActionFilterOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-custom-action-filter-operation-property-builder (new CfnDashboard$CustomActionFilterOperationProperty$Builder) id config))


(defn build-cfn-dashboard-custom-action-navigation-operation-property-builder
  "The build-cfn-dashboard-custom-action-navigation-operation-property-builder function updates a CfnDashboard$CustomActionNavigationOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CustomActionNavigationOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `localNavigationConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:local-navigation-configuration` |
"
  [^CfnDashboard$CustomActionNavigationOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :local-navigation-configuration)]
    (. builder localNavigationConfiguration data))
  (.build builder))


(defn cfn-dashboard-custom-action-navigation-operation-property-builder
  "Creates a  `CfnDashboard$CustomActionNavigationOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-custom-action-navigation-operation-property-builder (new CfnDashboard$CustomActionNavigationOperationProperty$Builder) id config))


(defn build-cfn-dashboard-custom-action-set-parameters-operation-property-builder
  "The build-cfn-dashboard-custom-action-set-parameters-operation-property-builder function updates a CfnDashboard$CustomActionSetParametersOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CustomActionSetParametersOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameterValueConfigurations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameter-value-configurations` |
"
  [^CfnDashboard$CustomActionSetParametersOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :parameter-value-configurations)]
    (. builder parameterValueConfigurations data))
  (.build builder))


(defn cfn-dashboard-custom-action-set-parameters-operation-property-builder
  "Creates a  `CfnDashboard$CustomActionSetParametersOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-custom-action-set-parameters-operation-property-builder (new CfnDashboard$CustomActionSetParametersOperationProperty$Builder) id config))


(defn build-cfn-dashboard-custom-action-url-operation-property-builder
  "The build-cfn-dashboard-custom-action-url-operation-property-builder function updates a CfnDashboard$CustomActionURLOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CustomActionURLOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `urlTarget` | java.lang.String | [[cdk.support/lookup-entry]] | `:url-target` |
| `urlTemplate` | java.lang.String | [[cdk.support/lookup-entry]] | `:url-template` |
"
  [^CfnDashboard$CustomActionURLOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :url-target)]
    (. builder urlTarget data))
  (when-let [data (lookup-entry config id :url-template)]
    (. builder urlTemplate data))
  (.build builder))


(defn cfn-dashboard-custom-action-url-operation-property-builder
  "Creates a  `CfnDashboard$CustomActionURLOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-custom-action-url-operation-property-builder (new CfnDashboard$CustomActionURLOperationProperty$Builder) id config))


(defn build-cfn-dashboard-custom-color-property-builder
  "The build-cfn-dashboard-custom-color-property-builder function updates a CfnDashboard$CustomColorProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CustomColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `specialValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:special-value` |
"
  [^CfnDashboard$CustomColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :field-value)]
    (. builder fieldValue data))
  (when-let [data (lookup-entry config id :special-value)]
    (. builder specialValue data))
  (.build builder))


(defn cfn-dashboard-custom-color-property-builder
  "Creates a  `CfnDashboard$CustomColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-custom-color-property-builder (new CfnDashboard$CustomColorProperty$Builder) id config))


(defn build-cfn-dashboard-custom-content-configuration-property-builder
  "The build-cfn-dashboard-custom-content-configuration-property-builder function updates a CfnDashboard$CustomContentConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CustomContentConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-type` |
| `contentUrl` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-url` |
| `imageScaling` | java.lang.String | [[cdk.support/lookup-entry]] | `:image-scaling` |
"
  [^CfnDashboard$CustomContentConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :content-type)]
    (. builder contentType data))
  (when-let [data (lookup-entry config id :content-url)]
    (. builder contentUrl data))
  (when-let [data (lookup-entry config id :image-scaling)]
    (. builder imageScaling data))
  (.build builder))


(defn cfn-dashboard-custom-content-configuration-property-builder
  "Creates a  `CfnDashboard$CustomContentConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-custom-content-configuration-property-builder (new CfnDashboard$CustomContentConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-custom-content-visual-property-builder
  "The build-cfn-dashboard-custom-content-visual-property-builder function updates a CfnDashboard$CustomContentVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CustomContentVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$CustomContentConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$CustomContentVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-custom-content-visual-property-builder
  "Creates a  `CfnDashboard$CustomContentVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-custom-content-visual-property-builder (new CfnDashboard$CustomContentVisualProperty$Builder) id config))


(defn build-cfn-dashboard-custom-filter-configuration-property-builder
  "The build-cfn-dashboard-custom-filter-configuration-property-builder function updates a CfnDashboard$CustomFilterConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CustomFilterConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-value` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
"
  [^CfnDashboard$CustomFilterConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-value)]
    (. builder categoryValue data))
  (when-let [data (lookup-entry config id :match-operator)]
    (. builder matchOperator data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (.build builder))


(defn cfn-dashboard-custom-filter-configuration-property-builder
  "Creates a  `CfnDashboard$CustomFilterConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-custom-filter-configuration-property-builder (new CfnDashboard$CustomFilterConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-custom-filter-list-configuration-property-builder
  "The build-cfn-dashboard-custom-filter-list-configuration-property-builder function updates a CfnDashboard$CustomFilterListConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CustomFilterListConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
"
  [^CfnDashboard$CustomFilterListConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-values)]
    (. builder categoryValues data))
  (when-let [data (lookup-entry config id :match-operator)]
    (. builder matchOperator data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (.build builder))


(defn cfn-dashboard-custom-filter-list-configuration-property-builder
  "Creates a  `CfnDashboard$CustomFilterListConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-custom-filter-list-configuration-property-builder (new CfnDashboard$CustomFilterListConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-custom-narrative-options-property-builder
  "The build-cfn-dashboard-custom-narrative-options-property-builder function updates a CfnDashboard$CustomNarrativeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CustomNarrativeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `narrative` | java.lang.String | [[cdk.support/lookup-entry]] | `:narrative` |
"
  [^CfnDashboard$CustomNarrativeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :narrative)]
    (. builder narrative data))
  (.build builder))


(defn cfn-dashboard-custom-narrative-options-property-builder
  "Creates a  `CfnDashboard$CustomNarrativeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-custom-narrative-options-property-builder (new CfnDashboard$CustomNarrativeOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-custom-parameter-values-property-builder
  "The build-cfn-dashboard-custom-parameter-values-property-builder function updates a CfnDashboard$CustomParameterValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CustomParameterValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeValues` | java.util.List | [[cdk.support/lookup-entry]] | `:date-time-values` |
| `decimalValues` | java.util.List | [[cdk.support/lookup-entry]] | `:decimal-values` |
| `integerValues` | java.util.List | [[cdk.support/lookup-entry]] | `:integer-values` |
| `stringValues` | java.util.List | [[cdk.support/lookup-entry]] | `:string-values` |
"
  [^CfnDashboard$CustomParameterValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-values)]
    (. builder dateTimeValues data))
  (when-let [data (lookup-entry config id :decimal-values)]
    (. builder decimalValues data))
  (when-let [data (lookup-entry config id :integer-values)]
    (. builder integerValues data))
  (when-let [data (lookup-entry config id :string-values)]
    (. builder stringValues data))
  (.build builder))


(defn cfn-dashboard-custom-parameter-values-property-builder
  "Creates a  `CfnDashboard$CustomParameterValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-custom-parameter-values-property-builder (new CfnDashboard$CustomParameterValuesProperty$Builder) id config))


(defn build-cfn-dashboard-custom-values-configuration-property-builder
  "The build-cfn-dashboard-custom-values-configuration-property-builder function updates a CfnDashboard$CustomValuesConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$CustomValuesConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValues` | software.amazon.awscdk.services.quicksight.CfnDashboard$CustomParameterValuesProperty | [[cdk.support/lookup-entry]] | `:custom-values` |
| `includeNullValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-null-value` |
"
  [^CfnDashboard$CustomValuesConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-values)]
    (. builder customValues data))
  (when-let [data (lookup-entry config id :include-null-value)]
    (. builder includeNullValue data))
  (.build builder))


(defn cfn-dashboard-custom-values-configuration-property-builder
  "Creates a  `CfnDashboard$CustomValuesConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-custom-values-configuration-property-builder (new CfnDashboard$CustomValuesConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-dashboard-error-property-builder
  "The build-cfn-dashboard-dashboard-error-property-builder function updates a CfnDashboard$DashboardErrorProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DashboardErrorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `message` | java.lang.String | [[cdk.support/lookup-entry]] | `:message` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `violatedEntities` | java.util.List | [[cdk.support/lookup-entry]] | `:violated-entities` |
"
  [^CfnDashboard$DashboardErrorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :message)]
    (. builder message data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :violated-entities)]
    (. builder violatedEntities data))
  (.build builder))


(defn cfn-dashboard-dashboard-error-property-builder
  "Creates a  `CfnDashboard$DashboardErrorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-dashboard-error-property-builder (new CfnDashboard$DashboardErrorProperty$Builder) id config))


(defn build-cfn-dashboard-dashboard-publish-options-property-builder
  "The build-cfn-dashboard-dashboard-publish-options-property-builder function updates a CfnDashboard$DashboardPublishOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DashboardPublishOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `adHocFilteringOption` | software.amazon.awscdk.services.quicksight.CfnDashboard$AdHocFilteringOptionProperty | [[cdk.support/lookup-entry]] | `:ad-hoc-filtering-option` |
| `dataPointDrillUpDownOption` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataPointDrillUpDownOptionProperty | [[cdk.support/lookup-entry]] | `:data-point-drill-up-down-option` |
| `dataPointMenuLabelOption` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataPointMenuLabelOptionProperty | [[cdk.support/lookup-entry]] | `:data-point-menu-label-option` |
| `dataPointTooltipOption` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-point-tooltip-option` |
| `exportToCsvOption` | software.amazon.awscdk.services.quicksight.CfnDashboard$ExportToCSVOptionProperty | [[cdk.support/lookup-entry]] | `:export-to-csv-option` |
| `exportWithHiddenFieldsOption` | software.amazon.awscdk.services.quicksight.CfnDashboard$ExportWithHiddenFieldsOptionProperty | [[cdk.support/lookup-entry]] | `:export-with-hidden-fields-option` |
| `sheetControlsOption` | software.amazon.awscdk.services.quicksight.CfnDashboard$SheetControlsOptionProperty | [[cdk.support/lookup-entry]] | `:sheet-controls-option` |
| `sheetLayoutElementMaximizationOption` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sheet-layout-element-maximization-option` |
| `visualAxisSortOption` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-axis-sort-option` |
| `visualMenuOption` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-menu-option` |
| `visualPublishOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-publish-options` |
"
  [^CfnDashboard$DashboardPublishOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :ad-hoc-filtering-option)]
    (. builder adHocFilteringOption data))
  (when-let [data (lookup-entry config id :data-point-drill-up-down-option)]
    (. builder dataPointDrillUpDownOption data))
  (when-let [data (lookup-entry config id :data-point-menu-label-option)]
    (. builder dataPointMenuLabelOption data))
  (when-let [data (lookup-entry config id :data-point-tooltip-option)]
    (. builder dataPointTooltipOption data))
  (when-let [data (lookup-entry config id :export-to-csv-option)]
    (. builder exportToCsvOption data))
  (when-let [data (lookup-entry config id :export-with-hidden-fields-option)]
    (. builder exportWithHiddenFieldsOption data))
  (when-let [data (lookup-entry config id :sheet-controls-option)]
    (. builder sheetControlsOption data))
  (when-let [data (lookup-entry config id :sheet-layout-element-maximization-option)]
    (. builder sheetLayoutElementMaximizationOption data))
  (when-let [data (lookup-entry config id :visual-axis-sort-option)]
    (. builder visualAxisSortOption data))
  (when-let [data (lookup-entry config id :visual-menu-option)]
    (. builder visualMenuOption data))
  (when-let [data (lookup-entry config id :visual-publish-options)]
    (. builder visualPublishOptions data))
  (.build builder))


(defn cfn-dashboard-dashboard-publish-options-property-builder
  "Creates a  `CfnDashboard$DashboardPublishOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-dashboard-publish-options-property-builder (new CfnDashboard$DashboardPublishOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-dashboard-source-entity-property-builder
  "The build-cfn-dashboard-dashboard-source-entity-property-builder function updates a CfnDashboard$DashboardSourceEntityProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DashboardSourceEntityProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sourceTemplate` | software.amazon.awscdk.services.quicksight.CfnDashboard$DashboardSourceTemplateProperty | [[cdk.support/lookup-entry]] | `:source-template` |
"
  [^CfnDashboard$DashboardSourceEntityProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :source-template)]
    (. builder sourceTemplate data))
  (.build builder))


(defn cfn-dashboard-dashboard-source-entity-property-builder
  "Creates a  `CfnDashboard$DashboardSourceEntityProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-dashboard-source-entity-property-builder (new CfnDashboard$DashboardSourceEntityProperty$Builder) id config))


(defn build-cfn-dashboard-dashboard-source-template-property-builder
  "The build-cfn-dashboard-dashboard-source-template-property-builder function updates a CfnDashboard$DashboardSourceTemplateProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DashboardSourceTemplateProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arn` | java.lang.String | [[cdk.support/lookup-entry]] | `:arn` |
| `dataSetReferences` | java.util.List | [[cdk.support/lookup-entry]] | `:data-set-references` |
"
  [^CfnDashboard$DashboardSourceTemplateProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arn)]
    (. builder arn data))
  (when-let [data (lookup-entry config id :data-set-references)]
    (. builder dataSetReferences data))
  (.build builder))


(defn cfn-dashboard-dashboard-source-template-property-builder
  "Creates a  `CfnDashboard$DashboardSourceTemplateProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-dashboard-source-template-property-builder (new CfnDashboard$DashboardSourceTemplateProperty$Builder) id config))


(defn build-cfn-dashboard-dashboard-version-definition-property-builder
  "The build-cfn-dashboard-dashboard-version-definition-property-builder function updates a CfnDashboard$DashboardVersionDefinitionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DashboardVersionDefinitionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `analysisDefaults` | software.amazon.awscdk.services.quicksight.CfnDashboard$AnalysisDefaultsProperty | [[cdk.support/lookup-entry]] | `:analysis-defaults` |
| `calculatedFields` | java.util.List | [[cdk.support/lookup-entry]] | `:calculated-fields` |
| `columnConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:column-configurations` |
| `dataSetIdentifierDeclarations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-set-identifier-declarations` |
| `filterGroups` | java.util.List | [[cdk.support/lookup-entry]] | `:filter-groups` |
| `options` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:options` |
| `parameterDeclarations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameter-declarations` |
| `sheets` | java.util.List | [[cdk.support/lookup-entry]] | `:sheets` |
"
  [^CfnDashboard$DashboardVersionDefinitionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :analysis-defaults)]
    (. builder analysisDefaults data))
  (when-let [data (lookup-entry config id :calculated-fields)]
    (. builder calculatedFields data))
  (when-let [data (lookup-entry config id :column-configurations)]
    (. builder columnConfigurations data))
  (when-let [data (lookup-entry config id :data-set-identifier-declarations)]
    (. builder dataSetIdentifierDeclarations data))
  (when-let [data (lookup-entry config id :filter-groups)]
    (. builder filterGroups data))
  (when-let [data (lookup-entry config id :options)]
    (. builder options data))
  (when-let [data (lookup-entry config id :parameter-declarations)]
    (. builder parameterDeclarations data))
  (when-let [data (lookup-entry config id :sheets)]
    (. builder sheets data))
  (.build builder))


(defn cfn-dashboard-dashboard-version-definition-property-builder
  "Creates a  `CfnDashboard$DashboardVersionDefinitionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-dashboard-version-definition-property-builder (new CfnDashboard$DashboardVersionDefinitionProperty$Builder) id config))


(defn build-cfn-dashboard-dashboard-version-property-builder
  "The build-cfn-dashboard-dashboard-version-property-builder function updates a CfnDashboard$DashboardVersionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DashboardVersionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arn` | java.lang.String | [[cdk.support/lookup-entry]] | `:arn` |
| `createdTime` | java.lang.String | [[cdk.support/lookup-entry]] | `:created-time` |
| `dataSetArns` | java.util.List | [[cdk.support/lookup-entry]] | `:data-set-arns` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `errors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:errors` |
| `sheets` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sheets` |
| `sourceEntityArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-entity-arn` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `themeArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:theme-arn` |
| `versionNumber` | java.lang.Number | [[cdk.support/lookup-entry]] | `:version-number` |
"
  [^CfnDashboard$DashboardVersionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arn)]
    (. builder arn data))
  (when-let [data (lookup-entry config id :created-time)]
    (. builder createdTime data))
  (when-let [data (lookup-entry config id :data-set-arns)]
    (. builder dataSetArns data))
  (when-let [data (lookup-entry config id :description)]
    (. builder description data))
  (when-let [data (lookup-entry config id :errors)]
    (. builder errors data))
  (when-let [data (lookup-entry config id :sheets)]
    (. builder sheets data))
  (when-let [data (lookup-entry config id :source-entity-arn)]
    (. builder sourceEntityArn data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (when-let [data (lookup-entry config id :theme-arn)]
    (. builder themeArn data))
  (when-let [data (lookup-entry config id :version-number)]
    (. builder versionNumber data))
  (.build builder))


(defn cfn-dashboard-dashboard-version-property-builder
  "Creates a  `CfnDashboard$DashboardVersionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-dashboard-version-property-builder (new CfnDashboard$DashboardVersionProperty$Builder) id config))


(defn build-cfn-dashboard-dashboard-visual-publish-options-property-builder
  "The build-cfn-dashboard-dashboard-visual-publish-options-property-builder function updates a CfnDashboard$DashboardVisualPublishOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DashboardVisualPublishOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `exportHiddenFieldsOption` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:export-hidden-fields-option` |
"
  [^CfnDashboard$DashboardVisualPublishOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :export-hidden-fields-option)]
    (. builder exportHiddenFieldsOption data))
  (.build builder))


(defn cfn-dashboard-dashboard-visual-publish-options-property-builder
  "Creates a  `CfnDashboard$DashboardVisualPublishOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-dashboard-visual-publish-options-property-builder (new CfnDashboard$DashboardVisualPublishOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-data-bars-options-property-builder
  "The build-cfn-dashboard-data-bars-options-property-builder function updates a CfnDashboard$DataBarsOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DataBarsOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `negativeColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:negative-color` |
| `positiveColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:positive-color` |
"
  [^CfnDashboard$DataBarsOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :negative-color)]
    (. builder negativeColor data))
  (when-let [data (lookup-entry config id :positive-color)]
    (. builder positiveColor data))
  (.build builder))


(defn cfn-dashboard-data-bars-options-property-builder
  "Creates a  `CfnDashboard$DataBarsOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-data-bars-options-property-builder (new CfnDashboard$DataBarsOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-data-color-property-builder
  "The build-cfn-dashboard-data-color-property-builder function updates a CfnDashboard$DataColorProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DataColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `dataValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:data-value` |
"
  [^CfnDashboard$DataColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :data-value)]
    (. builder dataValue data))
  (.build builder))


(defn cfn-dashboard-data-color-property-builder
  "Creates a  `CfnDashboard$DataColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-data-color-property-builder (new CfnDashboard$DataColorProperty$Builder) id config))


(defn build-cfn-dashboard-data-field-series-item-property-builder
  "The build-cfn-dashboard-data-field-series-item-property-builder function updates a CfnDashboard$DataFieldSeriesItemProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DataFieldSeriesItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `settings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:settings` |
"
  [^CfnDashboard$DataFieldSeriesItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-binding)]
    (. builder axisBinding data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :field-value)]
    (. builder fieldValue data))
  (when-let [data (lookup-entry config id :settings)]
    (. builder settings data))
  (.build builder))


(defn cfn-dashboard-data-field-series-item-property-builder
  "Creates a  `CfnDashboard$DataFieldSeriesItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-data-field-series-item-property-builder (new CfnDashboard$DataFieldSeriesItemProperty$Builder) id config))


(defn build-cfn-dashboard-data-label-options-property-builder
  "The build-cfn-dashboard-data-label-options-property-builder function updates a CfnDashboard$DataLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DataLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-label-visibility` |
| `dataLabelTypes` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-label-types` |
| `labelColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-color` |
| `labelContent` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-content` |
| `labelFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label-font-configuration` |
| `measureLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-label-visibility` |
| `overlap` | java.lang.String | [[cdk.support/lookup-entry]] | `:overlap` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$DataLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-label-visibility)]
    (. builder categoryLabelVisibility data))
  (when-let [data (lookup-entry config id :data-label-types)]
    (. builder dataLabelTypes data))
  (when-let [data (lookup-entry config id :label-color)]
    (. builder labelColor data))
  (when-let [data (lookup-entry config id :label-content)]
    (. builder labelContent data))
  (when-let [data (lookup-entry config id :label-font-configuration)]
    (. builder labelFontConfiguration data))
  (when-let [data (lookup-entry config id :measure-label-visibility)]
    (. builder measureLabelVisibility data))
  (when-let [data (lookup-entry config id :overlap)]
    (. builder overlap data))
  (when-let [data (lookup-entry config id :position)]
    (. builder position data))
  (when-let [data (lookup-entry config id :totals-visibility)]
    (. builder totalsVisibility data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-data-label-options-property-builder
  "Creates a  `CfnDashboard$DataLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-data-label-options-property-builder (new CfnDashboard$DataLabelOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-data-label-type-property-builder
  "The build-cfn-dashboard-data-label-type-property-builder function updates a CfnDashboard$DataLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DataLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathLabelType` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataPathLabelTypeProperty | [[cdk.support/lookup-entry]] | `:data-path-label-type` |
| `fieldLabelType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-label-type` |
| `maximumLabelType` | software.amazon.awscdk.services.quicksight.CfnDashboard$MaximumLabelTypeProperty | [[cdk.support/lookup-entry]] | `:maximum-label-type` |
| `minimumLabelType` | software.amazon.awscdk.services.quicksight.CfnDashboard$MinimumLabelTypeProperty | [[cdk.support/lookup-entry]] | `:minimum-label-type` |
| `rangeEndsLabelType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-ends-label-type` |
"
  [^CfnDashboard$DataLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-path-label-type)]
    (. builder dataPathLabelType data))
  (when-let [data (lookup-entry config id :field-label-type)]
    (. builder fieldLabelType data))
  (when-let [data (lookup-entry config id :maximum-label-type)]
    (. builder maximumLabelType data))
  (when-let [data (lookup-entry config id :minimum-label-type)]
    (. builder minimumLabelType data))
  (when-let [data (lookup-entry config id :range-ends-label-type)]
    (. builder rangeEndsLabelType data))
  (.build builder))


(defn cfn-dashboard-data-label-type-property-builder
  "Creates a  `CfnDashboard$DataLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-data-label-type-property-builder (new CfnDashboard$DataLabelTypeProperty$Builder) id config))


(defn build-cfn-dashboard-data-path-color-property-builder
  "The build-cfn-dashboard-data-path-color-property-builder function updates a CfnDashboard$DataPathColorProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DataPathColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `element` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:element` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnDashboard$DataPathColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :element)]
    (. builder element data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-dashboard-data-path-color-property-builder
  "Creates a  `CfnDashboard$DataPathColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-data-path-color-property-builder (new CfnDashboard$DataPathColorProperty$Builder) id config))


(defn build-cfn-dashboard-data-path-label-type-property-builder
  "The build-cfn-dashboard-data-path-label-type-property-builder function updates a CfnDashboard$DataPathLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DataPathLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$DataPathLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :field-value)]
    (. builder fieldValue data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-data-path-label-type-property-builder
  "Creates a  `CfnDashboard$DataPathLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-data-path-label-type-property-builder (new CfnDashboard$DataPathLabelTypeProperty$Builder) id config))


(defn build-cfn-dashboard-data-path-sort-property-builder
  "The build-cfn-dashboard-data-path-sort-property-builder function updates a CfnDashboard$DataPathSortProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DataPathSortProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `sortPaths` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-paths` |
"
  [^CfnDashboard$DataPathSortProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :direction)]
    (. builder direction data))
  (when-let [data (lookup-entry config id :sort-paths)]
    (. builder sortPaths data))
  (.build builder))


(defn cfn-dashboard-data-path-sort-property-builder
  "Creates a  `CfnDashboard$DataPathSortProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-data-path-sort-property-builder (new CfnDashboard$DataPathSortProperty$Builder) id config))


(defn build-cfn-dashboard-data-path-type-property-builder
  "The build-cfn-dashboard-data-path-type-property-builder function updates a CfnDashboard$DataPathTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DataPathTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pivotTableDataPathType` | java.lang.String | [[cdk.support/lookup-entry]] | `:pivot-table-data-path-type` |
"
  [^CfnDashboard$DataPathTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :pivot-table-data-path-type)]
    (. builder pivotTableDataPathType data))
  (.build builder))


(defn cfn-dashboard-data-path-type-property-builder
  "Creates a  `CfnDashboard$DataPathTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-data-path-type-property-builder (new CfnDashboard$DataPathTypeProperty$Builder) id config))


(defn build-cfn-dashboard-data-path-value-property-builder
  "The build-cfn-dashboard-data-path-value-property-builder function updates a CfnDashboard$DataPathValueProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DataPathValueProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathType` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataPathTypeProperty | [[cdk.support/lookup-entry]] | `:data-path-type` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
"
  [^CfnDashboard$DataPathValueProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-path-type)]
    (. builder dataPathType data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :field-value)]
    (. builder fieldValue data))
  (.build builder))


(defn cfn-dashboard-data-path-value-property-builder
  "Creates a  `CfnDashboard$DataPathValueProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-data-path-value-property-builder (new CfnDashboard$DataPathValueProperty$Builder) id config))


(defn build-cfn-dashboard-data-point-drill-up-down-option-property-builder
  "The build-cfn-dashboard-data-point-drill-up-down-option-property-builder function updates a CfnDashboard$DataPointDrillUpDownOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DataPointDrillUpDownOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |
"
  [^CfnDashboard$DataPointDrillUpDownOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :availability-status)]
    (. builder availabilityStatus data))
  (.build builder))


(defn cfn-dashboard-data-point-drill-up-down-option-property-builder
  "Creates a  `CfnDashboard$DataPointDrillUpDownOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-data-point-drill-up-down-option-property-builder (new CfnDashboard$DataPointDrillUpDownOptionProperty$Builder) id config))


(defn build-cfn-dashboard-data-point-menu-label-option-property-builder
  "The build-cfn-dashboard-data-point-menu-label-option-property-builder function updates a CfnDashboard$DataPointMenuLabelOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DataPointMenuLabelOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |
"
  [^CfnDashboard$DataPointMenuLabelOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :availability-status)]
    (. builder availabilityStatus data))
  (.build builder))


(defn cfn-dashboard-data-point-menu-label-option-property-builder
  "Creates a  `CfnDashboard$DataPointMenuLabelOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-data-point-menu-label-option-property-builder (new CfnDashboard$DataPointMenuLabelOptionProperty$Builder) id config))


(defn build-cfn-dashboard-data-point-tooltip-option-property-builder
  "The build-cfn-dashboard-data-point-tooltip-option-property-builder function updates a CfnDashboard$DataPointTooltipOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DataPointTooltipOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |
"
  [^CfnDashboard$DataPointTooltipOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :availability-status)]
    (. builder availabilityStatus data))
  (.build builder))


(defn cfn-dashboard-data-point-tooltip-option-property-builder
  "Creates a  `CfnDashboard$DataPointTooltipOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-data-point-tooltip-option-property-builder (new CfnDashboard$DataPointTooltipOptionProperty$Builder) id config))


(defn build-cfn-dashboard-data-set-identifier-declaration-property-builder
  "The build-cfn-dashboard-data-set-identifier-declaration-property-builder function updates a CfnDashboard$DataSetIdentifierDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DataSetIdentifierDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-arn` |
| `identifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:identifier` |
"
  [^CfnDashboard$DataSetIdentifierDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-set-arn)]
    (. builder dataSetArn data))
  (when-let [data (lookup-entry config id :identifier)]
    (. builder identifier data))
  (.build builder))


(defn cfn-dashboard-data-set-identifier-declaration-property-builder
  "Creates a  `CfnDashboard$DataSetIdentifierDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-data-set-identifier-declaration-property-builder (new CfnDashboard$DataSetIdentifierDeclarationProperty$Builder) id config))


(defn build-cfn-dashboard-data-set-reference-property-builder
  "The build-cfn-dashboard-data-set-reference-property-builder function updates a CfnDashboard$DataSetReferenceProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DataSetReferenceProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-arn` |
| `dataSetPlaceholder` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-placeholder` |
"
  [^CfnDashboard$DataSetReferenceProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-set-arn)]
    (. builder dataSetArn data))
  (when-let [data (lookup-entry config id :data-set-placeholder)]
    (. builder dataSetPlaceholder data))
  (.build builder))


(defn cfn-dashboard-data-set-reference-property-builder
  "Creates a  `CfnDashboard$DataSetReferenceProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-data-set-reference-property-builder (new CfnDashboard$DataSetReferenceProperty$Builder) id config))


(defn build-cfn-dashboard-date-axis-options-property-builder
  "The build-cfn-dashboard-date-axis-options-property-builder function updates a CfnDashboard$DateAxisOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DateAxisOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `missingDateVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:missing-date-visibility` |
"
  [^CfnDashboard$DateAxisOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :missing-date-visibility)]
    (. builder missingDateVisibility data))
  (.build builder))


(defn cfn-dashboard-date-axis-options-property-builder
  "Creates a  `CfnDashboard$DateAxisOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-date-axis-options-property-builder (new CfnDashboard$DateAxisOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-date-dimension-field-property-builder
  "The build-cfn-dashboard-date-dimension-field-property-builder function updates a CfnDashboard$DateDimensionFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DateDimensionFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `dateGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-granularity` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnDashboard$DateDimensionFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :date-granularity)]
    (. builder dateGranularity data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-dashboard-date-dimension-field-property-builder
  "Creates a  `CfnDashboard$DateDimensionFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-date-dimension-field-property-builder (new CfnDashboard$DateDimensionFieldProperty$Builder) id config))


(defn build-cfn-dashboard-date-measure-field-property-builder
  "The build-cfn-dashboard-date-measure-field-property-builder function updates a CfnDashboard$DateMeasureFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DateMeasureFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
"
  [^CfnDashboard$DateMeasureFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (.build builder))


(defn cfn-dashboard-date-measure-field-property-builder
  "Creates a  `CfnDashboard$DateMeasureFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-date-measure-field-property-builder (new CfnDashboard$DateMeasureFieldProperty$Builder) id config))


(defn build-cfn-dashboard-date-time-default-values-property-builder
  "The build-cfn-dashboard-date-time-default-values-property-builder function updates a CfnDashboard$DateTimeDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DateTimeDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$DynamicDefaultValueProperty | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `rollingDate` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |
"
  [^CfnDashboard$DateTimeDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :dynamic-value)]
    (. builder dynamicValue data))
  (when-let [data (lookup-entry config id :rolling-date)]
    (. builder rollingDate data))
  (when-let [data (lookup-entry config id :static-values)]
    (. builder staticValues data))
  (.build builder))


(defn cfn-dashboard-date-time-default-values-property-builder
  "Creates a  `CfnDashboard$DateTimeDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-date-time-default-values-property-builder (new CfnDashboard$DateTimeDefaultValuesProperty$Builder) id config))


(defn build-cfn-dashboard-date-time-format-configuration-property-builder
  "The build-cfn-dashboard-date-time-format-configuration-property-builder function updates a CfnDashboard$DateTimeFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DateTimeFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numericFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-format-configuration` |
"
  [^CfnDashboard$DateTimeFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-format)]
    (. builder dateTimeFormat data))
  (when-let [data (lookup-entry config id :null-value-format-configuration)]
    (. builder nullValueFormatConfiguration data))
  (when-let [data (lookup-entry config id :numeric-format-configuration)]
    (. builder numericFormatConfiguration data))
  (.build builder))


(defn cfn-dashboard-date-time-format-configuration-property-builder
  "Creates a  `CfnDashboard$DateTimeFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-date-time-format-configuration-property-builder (new CfnDashboard$DateTimeFormatConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-date-time-hierarchy-property-builder
  "The build-cfn-dashboard-date-time-hierarchy-property-builder function updates a CfnDashboard$DateTimeHierarchyProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DateTimeHierarchyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `drillDownFilters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnDashboard$DateTimeHierarchyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :drill-down-filters)]
    (. builder drillDownFilters data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-dashboard-date-time-hierarchy-property-builder
  "Creates a  `CfnDashboard$DateTimeHierarchyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-date-time-hierarchy-property-builder (new CfnDashboard$DateTimeHierarchyProperty$Builder) id config))


(defn build-cfn-dashboard-date-time-parameter-declaration-property-builder
  "The build-cfn-dashboard-date-time-parameter-declaration-property-builder function updates a CfnDashboard$DateTimeParameterDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DateTimeParameterDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
| `valueWhenUnset` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-when-unset` |
"
  [^CfnDashboard$DateTimeParameterDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-values)]
    (. builder defaultValues data))
  (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
    (. builder mappedDataSetParameters data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (when-let [data (lookup-entry config id :value-when-unset)]
    (. builder valueWhenUnset data))
  (.build builder))


(defn cfn-dashboard-date-time-parameter-declaration-property-builder
  "Creates a  `CfnDashboard$DateTimeParameterDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-date-time-parameter-declaration-property-builder (new CfnDashboard$DateTimeParameterDeclarationProperty$Builder) id config))


(defn build-cfn-dashboard-date-time-parameter-property-builder
  "The build-cfn-dashboard-date-time-parameter-property-builder function updates a CfnDashboard$DateTimeParameterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DateTimeParameterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$DateTimeParameterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-date-time-parameter-property-builder
  "Creates a  `CfnDashboard$DateTimeParameterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-date-time-parameter-property-builder (new CfnDashboard$DateTimeParameterProperty$Builder) id config))


(defn build-cfn-dashboard-date-time-picker-control-display-options-property-builder
  "The build-cfn-dashboard-date-time-picker-control-display-options-property-builder function updates a CfnDashboard$DateTimePickerControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DateTimePickerControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnDashboard$DateTimePickerControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-format)]
    (. builder dateTimeFormat data))
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-dashboard-date-time-picker-control-display-options-property-builder
  "Creates a  `CfnDashboard$DateTimePickerControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-date-time-picker-control-display-options-property-builder (new CfnDashboard$DateTimePickerControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-date-time-value-when-unset-configuration-property-builder
  "The build-cfn-dashboard-date-time-value-when-unset-configuration-property-builder function updates a CfnDashboard$DateTimeValueWhenUnsetConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DateTimeValueWhenUnsetConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |
"
  [^CfnDashboard$DateTimeValueWhenUnsetConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-value)]
    (. builder customValue data))
  (when-let [data (lookup-entry config id :value-when-unset-option)]
    (. builder valueWhenUnsetOption data))
  (.build builder))


(defn cfn-dashboard-date-time-value-when-unset-configuration-property-builder
  "Creates a  `CfnDashboard$DateTimeValueWhenUnsetConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-date-time-value-when-unset-configuration-property-builder (new CfnDashboard$DateTimeValueWhenUnsetConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-decimal-default-values-property-builder
  "The build-cfn-dashboard-decimal-default-values-property-builder function updates a CfnDashboard$DecimalDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DecimalDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$DynamicDefaultValueProperty | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |
"
  [^CfnDashboard$DecimalDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :dynamic-value)]
    (. builder dynamicValue data))
  (when-let [data (lookup-entry config id :static-values)]
    (. builder staticValues data))
  (.build builder))


(defn cfn-dashboard-decimal-default-values-property-builder
  "Creates a  `CfnDashboard$DecimalDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-decimal-default-values-property-builder (new CfnDashboard$DecimalDefaultValuesProperty$Builder) id config))


(defn build-cfn-dashboard-decimal-parameter-declaration-property-builder
  "The build-cfn-dashboard-decimal-parameter-declaration-property-builder function updates a CfnDashboard$DecimalParameterDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DecimalParameterDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.services.quicksight.CfnDashboard$DecimalValueWhenUnsetConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-when-unset` |
"
  [^CfnDashboard$DecimalParameterDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-values)]
    (. builder defaultValues data))
  (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
    (. builder mappedDataSetParameters data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :parameter-value-type)]
    (. builder parameterValueType data))
  (when-let [data (lookup-entry config id :value-when-unset)]
    (. builder valueWhenUnset data))
  (.build builder))


(defn cfn-dashboard-decimal-parameter-declaration-property-builder
  "Creates a  `CfnDashboard$DecimalParameterDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-decimal-parameter-declaration-property-builder (new CfnDashboard$DecimalParameterDeclarationProperty$Builder) id config))


(defn build-cfn-dashboard-decimal-parameter-property-builder
  "The build-cfn-dashboard-decimal-parameter-property-builder function updates a CfnDashboard$DecimalParameterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DecimalParameterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$DecimalParameterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-decimal-parameter-property-builder
  "Creates a  `CfnDashboard$DecimalParameterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-decimal-parameter-property-builder (new CfnDashboard$DecimalParameterProperty$Builder) id config))


(defn build-cfn-dashboard-decimal-places-configuration-property-builder
  "The build-cfn-dashboard-decimal-places-configuration-property-builder function updates a CfnDashboard$DecimalPlacesConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DecimalPlacesConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlaces` | java.lang.Number | [[cdk.support/lookup-entry]] | `:decimal-places` |
"
  [^CfnDashboard$DecimalPlacesConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :decimal-places)]
    (. builder decimalPlaces data))
  (.build builder))


(defn cfn-dashboard-decimal-places-configuration-property-builder
  "Creates a  `CfnDashboard$DecimalPlacesConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-decimal-places-configuration-property-builder (new CfnDashboard$DecimalPlacesConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-decimal-value-when-unset-configuration-property-builder
  "The build-cfn-dashboard-decimal-value-when-unset-configuration-property-builder function updates a CfnDashboard$DecimalValueWhenUnsetConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DecimalValueWhenUnsetConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |
"
  [^CfnDashboard$DecimalValueWhenUnsetConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-value)]
    (. builder customValue data))
  (when-let [data (lookup-entry config id :value-when-unset-option)]
    (. builder valueWhenUnsetOption data))
  (.build builder))


(defn cfn-dashboard-decimal-value-when-unset-configuration-property-builder
  "Creates a  `CfnDashboard$DecimalValueWhenUnsetConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-decimal-value-when-unset-configuration-property-builder (new CfnDashboard$DecimalValueWhenUnsetConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-default-date-time-picker-control-options-property-builder
  "The build-cfn-dashboard-default-date-time-picker-control-options-property-builder function updates a CfnDashboard$DefaultDateTimePickerControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DefaultDateTimePickerControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnDashboard$DefaultDateTimePickerControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-dashboard-default-date-time-picker-control-options-property-builder
  "Creates a  `CfnDashboard$DefaultDateTimePickerControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-default-date-time-picker-control-options-property-builder (new CfnDashboard$DefaultDateTimePickerControlOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-default-filter-control-configuration-property-builder
  "The build-cfn-dashboard-default-filter-control-configuration-property-builder function updates a CfnDashboard$DefaultFilterControlConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DefaultFilterControlConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `controlOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:control-options` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnDashboard$DefaultFilterControlConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :control-options)]
    (. builder controlOptions data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-dashboard-default-filter-control-configuration-property-builder
  "Creates a  `CfnDashboard$DefaultFilterControlConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-default-filter-control-configuration-property-builder (new CfnDashboard$DefaultFilterControlConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-default-filter-control-options-property-builder
  "The build-cfn-dashboard-default-filter-control-options-property-builder function updates a CfnDashboard$DefaultFilterControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DefaultFilterControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultDateTimePickerOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultDateTimePickerControlOptionsProperty | [[cdk.support/lookup-entry]] | `:default-date-time-picker-options` |
| `defaultDropdownOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-dropdown-options` |
| `defaultListOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-list-options` |
| `defaultRelativeDateTimeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-relative-date-time-options` |
| `defaultSliderOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-slider-options` |
| `defaultTextAreaOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-text-area-options` |
| `defaultTextFieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-text-field-options` |
"
  [^CfnDashboard$DefaultFilterControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-date-time-picker-options)]
    (. builder defaultDateTimePickerOptions data))
  (when-let [data (lookup-entry config id :default-dropdown-options)]
    (. builder defaultDropdownOptions data))
  (when-let [data (lookup-entry config id :default-list-options)]
    (. builder defaultListOptions data))
  (when-let [data (lookup-entry config id :default-relative-date-time-options)]
    (. builder defaultRelativeDateTimeOptions data))
  (when-let [data (lookup-entry config id :default-slider-options)]
    (. builder defaultSliderOptions data))
  (when-let [data (lookup-entry config id :default-text-area-options)]
    (. builder defaultTextAreaOptions data))
  (when-let [data (lookup-entry config id :default-text-field-options)]
    (. builder defaultTextFieldOptions data))
  (.build builder))


(defn cfn-dashboard-default-filter-control-options-property-builder
  "Creates a  `CfnDashboard$DefaultFilterControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-default-filter-control-options-property-builder (new CfnDashboard$DefaultFilterControlOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-default-filter-drop-down-control-options-property-builder
  "The build-cfn-dashboard-default-filter-drop-down-control-options-property-builder function updates a CfnDashboard$DefaultFilterDropDownControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DefaultFilterDropDownControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$DropDownControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnDashboard$DefaultFilterDropDownControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-dashboard-default-filter-drop-down-control-options-property-builder
  "Creates a  `CfnDashboard$DefaultFilterDropDownControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-default-filter-drop-down-control-options-property-builder (new CfnDashboard$DefaultFilterDropDownControlOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-default-filter-list-control-options-property-builder
  "The build-cfn-dashboard-default-filter-list-control-options-property-builder function updates a CfnDashboard$DefaultFilterListControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DefaultFilterListControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnDashboard$DefaultFilterListControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-dashboard-default-filter-list-control-options-property-builder
  "Creates a  `CfnDashboard$DefaultFilterListControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-default-filter-list-control-options-property-builder (new CfnDashboard$DefaultFilterListControlOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-default-free-form-layout-configuration-property-builder
  "The build-cfn-dashboard-default-free-form-layout-configuration-property-builder function updates a CfnDashboard$DefaultFreeFormLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DefaultFreeFormLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$FreeFormLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
"
  [^CfnDashboard$DefaultFreeFormLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (.build builder))


(defn cfn-dashboard-default-free-form-layout-configuration-property-builder
  "Creates a  `CfnDashboard$DefaultFreeFormLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-default-free-form-layout-configuration-property-builder (new CfnDashboard$DefaultFreeFormLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-default-grid-layout-configuration-property-builder
  "The build-cfn-dashboard-default-grid-layout-configuration-property-builder function updates a CfnDashboard$DefaultGridLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DefaultGridLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$GridLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
"
  [^CfnDashboard$DefaultGridLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (.build builder))


(defn cfn-dashboard-default-grid-layout-configuration-property-builder
  "Creates a  `CfnDashboard$DefaultGridLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-default-grid-layout-configuration-property-builder (new CfnDashboard$DefaultGridLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-default-interactive-layout-configuration-property-builder
  "The build-cfn-dashboard-default-interactive-layout-configuration-property-builder function updates a CfnDashboard$DefaultInteractiveLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DefaultInteractiveLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeForm` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultFreeFormLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:free-form` |
| `grid` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultGridLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:grid` |
"
  [^CfnDashboard$DefaultInteractiveLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :free-form)]
    (. builder freeForm data))
  (when-let [data (lookup-entry config id :grid)]
    (. builder grid data))
  (.build builder))


(defn cfn-dashboard-default-interactive-layout-configuration-property-builder
  "Creates a  `CfnDashboard$DefaultInteractiveLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-default-interactive-layout-configuration-property-builder (new CfnDashboard$DefaultInteractiveLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-default-new-sheet-configuration-property-builder
  "The build-cfn-dashboard-default-new-sheet-configuration-property-builder function updates a CfnDashboard$DefaultNewSheetConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DefaultNewSheetConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `interactiveLayoutConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:interactive-layout-configuration` |
| `paginatedLayoutConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultPaginatedLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:paginated-layout-configuration` |
| `sheetContentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-content-type` |
"
  [^CfnDashboard$DefaultNewSheetConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :interactive-layout-configuration)]
    (. builder interactiveLayoutConfiguration data))
  (when-let [data (lookup-entry config id :paginated-layout-configuration)]
    (. builder paginatedLayoutConfiguration data))
  (when-let [data (lookup-entry config id :sheet-content-type)]
    (. builder sheetContentType data))
  (.build builder))


(defn cfn-dashboard-default-new-sheet-configuration-property-builder
  "Creates a  `CfnDashboard$DefaultNewSheetConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-default-new-sheet-configuration-property-builder (new CfnDashboard$DefaultNewSheetConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-default-paginated-layout-configuration-property-builder
  "The build-cfn-dashboard-default-paginated-layout-configuration-property-builder function updates a CfnDashboard$DefaultPaginatedLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DefaultPaginatedLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sectionBased` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultSectionBasedLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:section-based` |
"
  [^CfnDashboard$DefaultPaginatedLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :section-based)]
    (. builder sectionBased data))
  (.build builder))


(defn cfn-dashboard-default-paginated-layout-configuration-property-builder
  "Creates a  `CfnDashboard$DefaultPaginatedLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-default-paginated-layout-configuration-property-builder (new CfnDashboard$DefaultPaginatedLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-default-relative-date-time-control-options-property-builder
  "The build-cfn-dashboard-default-relative-date-time-control-options-property-builder function updates a CfnDashboard$DefaultRelativeDateTimeControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DefaultRelativeDateTimeControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
"
  [^CfnDashboard$DefaultRelativeDateTimeControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (.build builder))


(defn cfn-dashboard-default-relative-date-time-control-options-property-builder
  "Creates a  `CfnDashboard$DefaultRelativeDateTimeControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-default-relative-date-time-control-options-property-builder (new CfnDashboard$DefaultRelativeDateTimeControlOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-default-section-based-layout-configuration-property-builder
  "The build-cfn-dashboard-default-section-based-layout-configuration-property-builder function updates a CfnDashboard$DefaultSectionBasedLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DefaultSectionBasedLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
"
  [^CfnDashboard$DefaultSectionBasedLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (.build builder))


(defn cfn-dashboard-default-section-based-layout-configuration-property-builder
  "Creates a  `CfnDashboard$DefaultSectionBasedLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-default-section-based-layout-configuration-property-builder (new CfnDashboard$DefaultSectionBasedLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-default-slider-control-options-property-builder
  "The build-cfn-dashboard-default-slider-control-options-property-builder function updates a CfnDashboard$DefaultSliderControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DefaultSliderControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnDashboard$DefaultSliderControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :maximum-value)]
    (. builder maximumValue data))
  (when-let [data (lookup-entry config id :minimum-value)]
    (. builder minimumValue data))
  (when-let [data (lookup-entry config id :step-size)]
    (. builder stepSize data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-dashboard-default-slider-control-options-property-builder
  "Creates a  `CfnDashboard$DefaultSliderControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-default-slider-control-options-property-builder (new CfnDashboard$DefaultSliderControlOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-default-text-area-control-options-property-builder
  "The build-cfn-dashboard-default-text-area-control-options-property-builder function updates a CfnDashboard$DefaultTextAreaControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DefaultTextAreaControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
"
  [^CfnDashboard$DefaultTextAreaControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :delimiter)]
    (. builder delimiter data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (.build builder))


(defn cfn-dashboard-default-text-area-control-options-property-builder
  "Creates a  `CfnDashboard$DefaultTextAreaControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-default-text-area-control-options-property-builder (new CfnDashboard$DefaultTextAreaControlOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-default-text-field-control-options-property-builder
  "The build-cfn-dashboard-default-text-field-control-options-property-builder function updates a CfnDashboard$DefaultTextFieldControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DefaultTextFieldControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$TextFieldControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
"
  [^CfnDashboard$DefaultTextFieldControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (.build builder))


(defn cfn-dashboard-default-text-field-control-options-property-builder
  "Creates a  `CfnDashboard$DefaultTextFieldControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-default-text-field-control-options-property-builder (new CfnDashboard$DefaultTextFieldControlOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-destination-parameter-value-configuration-property-builder
  "The build-cfn-dashboard-destination-parameter-value-configuration-property-builder function updates a CfnDashboard$DestinationParameterValueConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DestinationParameterValueConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValuesConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-values-configuration` |
| `selectAllValueOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-value-options` |
| `sourceColumn` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:source-column` |
| `sourceField` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-field` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
"
  [^CfnDashboard$DestinationParameterValueConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-values-configuration)]
    (. builder customValuesConfiguration data))
  (when-let [data (lookup-entry config id :select-all-value-options)]
    (. builder selectAllValueOptions data))
  (when-let [data (lookup-entry config id :source-column)]
    (. builder sourceColumn data))
  (when-let [data (lookup-entry config id :source-field)]
    (. builder sourceField data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (.build builder))


(defn cfn-dashboard-destination-parameter-value-configuration-property-builder
  "Creates a  `CfnDashboard$DestinationParameterValueConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-destination-parameter-value-configuration-property-builder (new CfnDashboard$DestinationParameterValueConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-dimension-field-property-builder
  "The build-cfn-dashboard-dimension-field-property-builder function updates a CfnDashboard$DimensionFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DimensionFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoricalDimensionField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:categorical-dimension-field` |
| `dateDimensionField` | software.amazon.awscdk.services.quicksight.CfnDashboard$DateDimensionFieldProperty | [[cdk.support/lookup-entry]] | `:date-dimension-field` |
| `numericalDimensionField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numerical-dimension-field` |
"
  [^CfnDashboard$DimensionFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :categorical-dimension-field)]
    (. builder categoricalDimensionField data))
  (when-let [data (lookup-entry config id :date-dimension-field)]
    (. builder dateDimensionField data))
  (when-let [data (lookup-entry config id :numerical-dimension-field)]
    (. builder numericalDimensionField data))
  (.build builder))


(defn cfn-dashboard-dimension-field-property-builder
  "Creates a  `CfnDashboard$DimensionFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-dimension-field-property-builder (new CfnDashboard$DimensionFieldProperty$Builder) id config))


(defn build-cfn-dashboard-donut-center-options-property-builder
  "The build-cfn-dashboard-donut-center-options-property-builder function updates a CfnDashboard$DonutCenterOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DonutCenterOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `labelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-visibility` |
"
  [^CfnDashboard$DonutCenterOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :label-visibility)]
    (. builder labelVisibility data))
  (.build builder))


(defn cfn-dashboard-donut-center-options-property-builder
  "Creates a  `CfnDashboard$DonutCenterOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-donut-center-options-property-builder (new CfnDashboard$DonutCenterOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-donut-options-property-builder
  "The build-cfn-dashboard-donut-options-property-builder function updates a CfnDashboard$DonutOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DonutOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:arc-options` |
| `donutCenterOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:donut-center-options` |
"
  [^CfnDashboard$DonutOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arc-options)]
    (. builder arcOptions data))
  (when-let [data (lookup-entry config id :donut-center-options)]
    (. builder donutCenterOptions data))
  (.build builder))


(defn cfn-dashboard-donut-options-property-builder
  "Creates a  `CfnDashboard$DonutOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-donut-options-property-builder (new CfnDashboard$DonutOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-drill-down-filter-property-builder
  "The build-cfn-dashboard-drill-down-filter-property-builder function updates a CfnDashboard$DrillDownFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DrillDownFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryFilter` | software.amazon.awscdk.services.quicksight.CfnDashboard$CategoryDrillDownFilterProperty | [[cdk.support/lookup-entry]] | `:category-filter` |
| `numericEqualityFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-equality-filter` |
| `timeRangeFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time-range-filter` |
"
  [^CfnDashboard$DrillDownFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-filter)]
    (. builder categoryFilter data))
  (when-let [data (lookup-entry config id :numeric-equality-filter)]
    (. builder numericEqualityFilter data))
  (when-let [data (lookup-entry config id :time-range-filter)]
    (. builder timeRangeFilter data))
  (.build builder))


(defn cfn-dashboard-drill-down-filter-property-builder
  "Creates a  `CfnDashboard$DrillDownFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-drill-down-filter-property-builder (new CfnDashboard$DrillDownFilterProperty$Builder) id config))


(defn build-cfn-dashboard-drop-down-control-display-options-property-builder
  "The build-cfn-dashboard-drop-down-control-display-options-property-builder function updates a CfnDashboard$DropDownControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DropDownControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `selectAllOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnDashboard$DropDownControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-dashboard-drop-down-control-display-options-property-builder
  "Creates a  `CfnDashboard$DropDownControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-drop-down-control-display-options-property-builder (new CfnDashboard$DropDownControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-dynamic-default-value-property-builder
  "The build-cfn-dashboard-dynamic-default-value-property-builder function updates a CfnDashboard$DynamicDefaultValueProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$DynamicDefaultValueProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValueColumn` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:default-value-column` |
| `groupNameColumn` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-name-column` |
| `userNameColumn` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:user-name-column` |
"
  [^CfnDashboard$DynamicDefaultValueProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-value-column)]
    (. builder defaultValueColumn data))
  (when-let [data (lookup-entry config id :group-name-column)]
    (. builder groupNameColumn data))
  (when-let [data (lookup-entry config id :user-name-column)]
    (. builder userNameColumn data))
  (.build builder))


(defn cfn-dashboard-dynamic-default-value-property-builder
  "Creates a  `CfnDashboard$DynamicDefaultValueProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-dynamic-default-value-property-builder (new CfnDashboard$DynamicDefaultValueProperty$Builder) id config))


(defn build-cfn-dashboard-empty-visual-property-builder
  "The build-cfn-dashboard-empty-visual-property-builder function updates a CfnDashboard$EmptyVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$EmptyVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$EmptyVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-empty-visual-property-builder
  "Creates a  `CfnDashboard$EmptyVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-empty-visual-property-builder (new CfnDashboard$EmptyVisualProperty$Builder) id config))


(defn build-cfn-dashboard-entity-property-builder
  "The build-cfn-dashboard-entity-property-builder function updates a CfnDashboard$EntityProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$EntityProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `path` | java.lang.String | [[cdk.support/lookup-entry]] | `:path` |
"
  [^CfnDashboard$EntityProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :path)]
    (. builder path data))
  (.build builder))


(defn cfn-dashboard-entity-property-builder
  "Creates a  `CfnDashboard$EntityProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-entity-property-builder (new CfnDashboard$EntityProperty$Builder) id config))


(defn build-cfn-dashboard-exclude-period-configuration-property-builder
  "The build-cfn-dashboard-exclude-period-configuration-property-builder function updates a CfnDashboard$ExcludePeriodConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ExcludePeriodConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `amount` | java.lang.Number | [[cdk.support/lookup-entry]] | `:amount` |
| `granularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:granularity` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
"
  [^CfnDashboard$ExcludePeriodConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :amount)]
    (. builder amount data))
  (when-let [data (lookup-entry config id :granularity)]
    (. builder granularity data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (.build builder))


(defn cfn-dashboard-exclude-period-configuration-property-builder
  "Creates a  `CfnDashboard$ExcludePeriodConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-exclude-period-configuration-property-builder (new CfnDashboard$ExcludePeriodConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-explicit-hierarchy-property-builder
  "The build-cfn-dashboard-explicit-hierarchy-property-builder function updates a CfnDashboard$ExplicitHierarchyProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ExplicitHierarchyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `drillDownFilters` | java.util.List | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnDashboard$ExplicitHierarchyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (when-let [data (lookup-entry config id :drill-down-filters)]
    (. builder drillDownFilters data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-dashboard-explicit-hierarchy-property-builder
  "Creates a  `CfnDashboard$ExplicitHierarchyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-explicit-hierarchy-property-builder (new CfnDashboard$ExplicitHierarchyProperty$Builder) id config))


(defn build-cfn-dashboard-export-hidden-fields-option-property-builder
  "The build-cfn-dashboard-export-hidden-fields-option-property-builder function updates a CfnDashboard$ExportHiddenFieldsOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ExportHiddenFieldsOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |
"
  [^CfnDashboard$ExportHiddenFieldsOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :availability-status)]
    (. builder availabilityStatus data))
  (.build builder))


(defn cfn-dashboard-export-hidden-fields-option-property-builder
  "Creates a  `CfnDashboard$ExportHiddenFieldsOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-export-hidden-fields-option-property-builder (new CfnDashboard$ExportHiddenFieldsOptionProperty$Builder) id config))


(defn build-cfn-dashboard-export-to-csv-option-property-builder
  "The build-cfn-dashboard-export-to-csv-option-property-builder function updates a CfnDashboard$ExportToCSVOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ExportToCSVOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |
"
  [^CfnDashboard$ExportToCSVOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :availability-status)]
    (. builder availabilityStatus data))
  (.build builder))


(defn cfn-dashboard-export-to-csv-option-property-builder
  "Creates a  `CfnDashboard$ExportToCSVOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-export-to-csv-option-property-builder (new CfnDashboard$ExportToCSVOptionProperty$Builder) id config))


(defn build-cfn-dashboard-export-with-hidden-fields-option-property-builder
  "The build-cfn-dashboard-export-with-hidden-fields-option-property-builder function updates a CfnDashboard$ExportWithHiddenFieldsOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ExportWithHiddenFieldsOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |
"
  [^CfnDashboard$ExportWithHiddenFieldsOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :availability-status)]
    (. builder availabilityStatus data))
  (.build builder))


(defn cfn-dashboard-export-with-hidden-fields-option-property-builder
  "Creates a  `CfnDashboard$ExportWithHiddenFieldsOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-export-with-hidden-fields-option-property-builder (new CfnDashboard$ExportWithHiddenFieldsOptionProperty$Builder) id config))


(defn build-cfn-dashboard-field-based-tooltip-property-builder
  "The build-cfn-dashboard-field-based-tooltip-property-builder function updates a CfnDashboard$FieldBasedTooltipProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FieldBasedTooltipProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-visibility` |
| `tooltipFields` | java.util.List | [[cdk.support/lookup-entry]] | `:tooltip-fields` |
| `tooltipTitleType` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-title-type` |
"
  [^CfnDashboard$FieldBasedTooltipProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-visibility)]
    (. builder aggregationVisibility data))
  (when-let [data (lookup-entry config id :tooltip-fields)]
    (. builder tooltipFields data))
  (when-let [data (lookup-entry config id :tooltip-title-type)]
    (. builder tooltipTitleType data))
  (.build builder))


(defn cfn-dashboard-field-based-tooltip-property-builder
  "Creates a  `CfnDashboard$FieldBasedTooltipProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-field-based-tooltip-property-builder (new CfnDashboard$FieldBasedTooltipProperty$Builder) id config))


(defn build-cfn-dashboard-field-label-type-property-builder
  "The build-cfn-dashboard-field-label-type-property-builder function updates a CfnDashboard$FieldLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FieldLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$FieldLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-field-label-type-property-builder
  "Creates a  `CfnDashboard$FieldLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-field-label-type-property-builder (new CfnDashboard$FieldLabelTypeProperty$Builder) id config))


(defn build-cfn-dashboard-field-series-item-property-builder
  "The build-cfn-dashboard-field-series-item-property-builder function updates a CfnDashboard$FieldSeriesItemProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FieldSeriesItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `settings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:settings` |
"
  [^CfnDashboard$FieldSeriesItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-binding)]
    (. builder axisBinding data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :settings)]
    (. builder settings data))
  (.build builder))


(defn cfn-dashboard-field-series-item-property-builder
  "Creates a  `CfnDashboard$FieldSeriesItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-field-series-item-property-builder (new CfnDashboard$FieldSeriesItemProperty$Builder) id config))


(defn build-cfn-dashboard-field-sort-options-property-builder
  "The build-cfn-dashboard-field-sort-options-property-builder function updates a CfnDashboard$FieldSortOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FieldSortOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-sort` |
| `fieldSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-sort` |
"
  [^CfnDashboard$FieldSortOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-sort)]
    (. builder columnSort data))
  (when-let [data (lookup-entry config id :field-sort)]
    (. builder fieldSort data))
  (.build builder))


(defn cfn-dashboard-field-sort-options-property-builder
  "Creates a  `CfnDashboard$FieldSortOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-field-sort-options-property-builder (new CfnDashboard$FieldSortOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-field-sort-property-builder
  "The build-cfn-dashboard-field-sort-property-builder function updates a CfnDashboard$FieldSortProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FieldSortProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
"
  [^CfnDashboard$FieldSortProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :direction)]
    (. builder direction data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (.build builder))


(defn cfn-dashboard-field-sort-property-builder
  "Creates a  `CfnDashboard$FieldSortProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-field-sort-property-builder (new CfnDashboard$FieldSortProperty$Builder) id config))


(defn build-cfn-dashboard-field-tooltip-item-property-builder
  "The build-cfn-dashboard-field-tooltip-item-property-builder function updates a CfnDashboard$FieldTooltipItemProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FieldTooltipItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `label` | java.lang.String | [[cdk.support/lookup-entry]] | `:label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$FieldTooltipItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :label)]
    (. builder label data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-field-tooltip-item-property-builder
  "Creates a  `CfnDashboard$FieldTooltipItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-field-tooltip-item-property-builder (new CfnDashboard$FieldTooltipItemProperty$Builder) id config))


(defn build-cfn-dashboard-filled-map-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-filled-map-aggregated-field-wells-property-builder function updates a CfnDashboard$FilledMapAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilledMapAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `geospatial` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:geospatial` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$FilledMapAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :geospatial)]
    (. builder geospatial data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-filled-map-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$FilledMapAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filled-map-aggregated-field-wells-property-builder (new CfnDashboard$FilledMapAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-filled-map-conditional-formatting-option-property-builder
  "The build-cfn-dashboard-filled-map-conditional-formatting-option-property-builder function updates a CfnDashboard$FilledMapConditionalFormattingOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilledMapConditionalFormattingOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `shape` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:shape` |
"
  [^CfnDashboard$FilledMapConditionalFormattingOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :shape)]
    (. builder shape data))
  (.build builder))


(defn cfn-dashboard-filled-map-conditional-formatting-option-property-builder
  "Creates a  `CfnDashboard$FilledMapConditionalFormattingOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filled-map-conditional-formatting-option-property-builder (new CfnDashboard$FilledMapConditionalFormattingOptionProperty$Builder) id config))


(defn build-cfn-dashboard-filled-map-conditional-formatting-property-builder
  "The build-cfn-dashboard-filled-map-conditional-formatting-property-builder function updates a CfnDashboard$FilledMapConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilledMapConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |
"
  [^CfnDashboard$FilledMapConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :conditional-formatting-options)]
    (. builder conditionalFormattingOptions data))
  (.build builder))


(defn cfn-dashboard-filled-map-conditional-formatting-property-builder
  "Creates a  `CfnDashboard$FilledMapConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filled-map-conditional-formatting-property-builder (new CfnDashboard$FilledMapConditionalFormattingProperty$Builder) id config))


(defn build-cfn-dashboard-filled-map-configuration-property-builder
  "The build-cfn-dashboard-filled-map-configuration-property-builder function updates a CfnDashboard$FilledMapConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilledMapConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilledMapFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `mapStyleOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$GeospatialMapStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:map-style-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilledMapSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `windowOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:window-options` |
"
  [^CfnDashboard$FilledMapConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :map-style-options)]
    (. builder mapStyleOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :window-options)]
    (. builder windowOptions data))
  (.build builder))


(defn cfn-dashboard-filled-map-configuration-property-builder
  "Creates a  `CfnDashboard$FilledMapConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filled-map-configuration-property-builder (new CfnDashboard$FilledMapConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-filled-map-field-wells-property-builder
  "The build-cfn-dashboard-filled-map-field-wells-property-builder function updates a CfnDashboard$FilledMapFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilledMapFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `filledMapAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filled-map-aggregated-field-wells` |
"
  [^CfnDashboard$FilledMapFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :filled-map-aggregated-field-wells)]
    (. builder filledMapAggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-filled-map-field-wells-property-builder
  "Creates a  `CfnDashboard$FilledMapFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filled-map-field-wells-property-builder (new CfnDashboard$FilledMapFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-filled-map-shape-conditional-formatting-property-builder
  "The build-cfn-dashboard-filled-map-shape-conditional-formatting-property-builder function updates a CfnDashboard$FilledMapShapeConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilledMapShapeConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `format` | software.amazon.awscdk.services.quicksight.CfnDashboard$ShapeConditionalFormatProperty | [[cdk.support/lookup-entry]] | `:format` |
"
  [^CfnDashboard$FilledMapShapeConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format)]
    (. builder format data))
  (.build builder))


(defn cfn-dashboard-filled-map-shape-conditional-formatting-property-builder
  "Creates a  `CfnDashboard$FilledMapShapeConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filled-map-shape-conditional-formatting-property-builder (new CfnDashboard$FilledMapShapeConditionalFormattingProperty$Builder) id config))


(defn build-cfn-dashboard-filled-map-sort-configuration-property-builder
  "The build-cfn-dashboard-filled-map-sort-configuration-property-builder function updates a CfnDashboard$FilledMapSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilledMapSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
"
  [^CfnDashboard$FilledMapSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (.build builder))


(defn cfn-dashboard-filled-map-sort-configuration-property-builder
  "Creates a  `CfnDashboard$FilledMapSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filled-map-sort-configuration-property-builder (new CfnDashboard$FilledMapSortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-filled-map-visual-property-builder
  "The build-cfn-dashboard-filled-map-visual-property-builder function updates a CfnDashboard$FilledMapVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilledMapVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `conditionalFormatting` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$FilledMapVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :conditional-formatting)]
    (. builder conditionalFormatting data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-filled-map-visual-property-builder
  "Creates a  `CfnDashboard$FilledMapVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filled-map-visual-property-builder (new CfnDashboard$FilledMapVisualProperty$Builder) id config))


(defn build-cfn-dashboard-filter-control-property-builder
  "The build-cfn-dashboard-filter-control-property-builder function updates a CfnDashboard$FilterControlProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilterControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `crossSheet` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterCrossSheetControlProperty | [[cdk.support/lookup-entry]] | `:cross-sheet` |
| `dateTimePicker` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterDateTimePickerControlProperty | [[cdk.support/lookup-entry]] | `:date-time-picker` |
| `dropdown` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterDropDownControlProperty | [[cdk.support/lookup-entry]] | `:dropdown` |
| `list` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterListControlProperty | [[cdk.support/lookup-entry]] | `:list` |
| `relativeDateTime` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:relative-date-time` |
| `slider` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterSliderControlProperty | [[cdk.support/lookup-entry]] | `:slider` |
| `textArea` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-area` |
| `textField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-field` |
"
  [^CfnDashboard$FilterControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cross-sheet)]
    (. builder crossSheet data))
  (when-let [data (lookup-entry config id :date-time-picker)]
    (. builder dateTimePicker data))
  (when-let [data (lookup-entry config id :dropdown)]
    (. builder dropdown data))
  (when-let [data (lookup-entry config id :list)]
    (. builder list data))
  (when-let [data (lookup-entry config id :relative-date-time)]
    (. builder relativeDateTime data))
  (when-let [data (lookup-entry config id :slider)]
    (. builder slider data))
  (when-let [data (lookup-entry config id :text-area)]
    (. builder textArea data))
  (when-let [data (lookup-entry config id :text-field)]
    (. builder textField data))
  (.build builder))


(defn cfn-dashboard-filter-control-property-builder
  "Creates a  `CfnDashboard$FilterControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filter-control-property-builder (new CfnDashboard$FilterControlProperty$Builder) id config))


(defn build-cfn-dashboard-filter-cross-sheet-control-property-builder
  "The build-cfn-dashboard-filter-cross-sheet-control-property-builder function updates a CfnDashboard$FilterCrossSheetControlProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilterCrossSheetControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
"
  [^CfnDashboard$FilterCrossSheetControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cascading-control-configuration)]
    (. builder cascadingControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (.build builder))


(defn cfn-dashboard-filter-cross-sheet-control-property-builder
  "Creates a  `CfnDashboard$FilterCrossSheetControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filter-cross-sheet-control-property-builder (new CfnDashboard$FilterCrossSheetControlProperty$Builder) id config))


(defn build-cfn-dashboard-filter-date-time-picker-control-property-builder
  "The build-cfn-dashboard-filter-date-time-picker-control-property-builder function updates a CfnDashboard$FilterDateTimePickerControlProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilterDateTimePickerControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnDashboard$FilterDateTimePickerControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-dashboard-filter-date-time-picker-control-property-builder
  "Creates a  `CfnDashboard$FilterDateTimePickerControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filter-date-time-picker-control-property-builder (new CfnDashboard$FilterDateTimePickerControlProperty$Builder) id config))


(defn build-cfn-dashboard-filter-drop-down-control-property-builder
  "The build-cfn-dashboard-filter-drop-down-control-property-builder function updates a CfnDashboard$FilterDropDownControlProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilterDropDownControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$DropDownControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnDashboard$FilterDropDownControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cascading-control-configuration)]
    (. builder cascadingControlConfiguration data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-dashboard-filter-drop-down-control-property-builder
  "Creates a  `CfnDashboard$FilterDropDownControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filter-drop-down-control-property-builder (new CfnDashboard$FilterDropDownControlProperty$Builder) id config))


(defn build-cfn-dashboard-filter-group-property-builder
  "The build-cfn-dashboard-filter-group-property-builder function updates a CfnDashboard$FilterGroupProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilterGroupProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `crossDataset` | java.lang.String | [[cdk.support/lookup-entry]] | `:cross-dataset` |
| `filterGroupId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-group-id` |
| `filters` | java.util.List | [[cdk.support/lookup-entry]] | `:filters` |
| `scopeConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterScopeConfigurationProperty | [[cdk.support/lookup-entry]] | `:scope-configuration` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
"
  [^CfnDashboard$FilterGroupProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cross-dataset)]
    (. builder crossDataset data))
  (when-let [data (lookup-entry config id :filter-group-id)]
    (. builder filterGroupId data))
  (when-let [data (lookup-entry config id :filters)]
    (. builder filters data))
  (when-let [data (lookup-entry config id :scope-configuration)]
    (. builder scopeConfiguration data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (.build builder))


(defn cfn-dashboard-filter-group-property-builder
  "Creates a  `CfnDashboard$FilterGroupProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filter-group-property-builder (new CfnDashboard$FilterGroupProperty$Builder) id config))


(defn build-cfn-dashboard-filter-list-configuration-property-builder
  "The build-cfn-dashboard-filter-list-configuration-property-builder function updates a CfnDashboard$FilterListConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilterListConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
"
  [^CfnDashboard$FilterListConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-values)]
    (. builder categoryValues data))
  (when-let [data (lookup-entry config id :match-operator)]
    (. builder matchOperator data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (.build builder))


(defn cfn-dashboard-filter-list-configuration-property-builder
  "Creates a  `CfnDashboard$FilterListConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filter-list-configuration-property-builder (new CfnDashboard$FilterListConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-filter-list-control-property-builder
  "The build-cfn-dashboard-filter-list-control-property-builder function updates a CfnDashboard$FilterListControlProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilterListControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnDashboard$FilterListControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cascading-control-configuration)]
    (. builder cascadingControlConfiguration data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-dashboard-filter-list-control-property-builder
  "Creates a  `CfnDashboard$FilterListControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filter-list-control-property-builder (new CfnDashboard$FilterListControlProperty$Builder) id config))


(defn build-cfn-dashboard-filter-operation-selected-fields-configuration-property-builder
  "The build-cfn-dashboard-filter-operation-selected-fields-configuration-property-builder function updates a CfnDashboard$FilterOperationSelectedFieldsConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilterOperationSelectedFieldsConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `selectedColumns` | java.util.List | [[cdk.support/lookup-entry]] | `:selected-columns` |
| `selectedFieldOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-field-options` |
| `selectedFields` | java.util.List | [[cdk.support/lookup-entry]] | `:selected-fields` |
"
  [^CfnDashboard$FilterOperationSelectedFieldsConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :selected-columns)]
    (. builder selectedColumns data))
  (when-let [data (lookup-entry config id :selected-field-options)]
    (. builder selectedFieldOptions data))
  (when-let [data (lookup-entry config id :selected-fields)]
    (. builder selectedFields data))
  (.build builder))


(defn cfn-dashboard-filter-operation-selected-fields-configuration-property-builder
  "Creates a  `CfnDashboard$FilterOperationSelectedFieldsConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filter-operation-selected-fields-configuration-property-builder (new CfnDashboard$FilterOperationSelectedFieldsConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-filter-operation-target-visuals-configuration-property-builder
  "The build-cfn-dashboard-filter-operation-target-visuals-configuration-property-builder function updates a CfnDashboard$FilterOperationTargetVisualsConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilterOperationTargetVisualsConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sameSheetTargetVisualConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:same-sheet-target-visual-configuration` |
"
  [^CfnDashboard$FilterOperationTargetVisualsConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :same-sheet-target-visual-configuration)]
    (. builder sameSheetTargetVisualConfiguration data))
  (.build builder))


(defn cfn-dashboard-filter-operation-target-visuals-configuration-property-builder
  "Creates a  `CfnDashboard$FilterOperationTargetVisualsConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filter-operation-target-visuals-configuration-property-builder (new CfnDashboard$FilterOperationTargetVisualsConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-filter-property-builder
  "The build-cfn-dashboard-filter-property-builder function updates a CfnDashboard$FilterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-filter` |
| `numericEqualityFilter` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumericEqualityFilterProperty | [[cdk.support/lookup-entry]] | `:numeric-equality-filter` |
| `numericRangeFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-range-filter` |
| `relativeDatesFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:relative-dates-filter` |
| `timeEqualityFilter` | software.amazon.awscdk.services.quicksight.CfnDashboard$TimeEqualityFilterProperty | [[cdk.support/lookup-entry]] | `:time-equality-filter` |
| `timeRangeFilter` | software.amazon.awscdk.services.quicksight.CfnDashboard$TimeRangeFilterProperty | [[cdk.support/lookup-entry]] | `:time-range-filter` |
| `topBottomFilter` | software.amazon.awscdk.services.quicksight.CfnDashboard$TopBottomFilterProperty | [[cdk.support/lookup-entry]] | `:top-bottom-filter` |
"
  [^CfnDashboard$FilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-filter)]
    (. builder categoryFilter data))
  (when-let [data (lookup-entry config id :numeric-equality-filter)]
    (. builder numericEqualityFilter data))
  (when-let [data (lookup-entry config id :numeric-range-filter)]
    (. builder numericRangeFilter data))
  (when-let [data (lookup-entry config id :relative-dates-filter)]
    (. builder relativeDatesFilter data))
  (when-let [data (lookup-entry config id :time-equality-filter)]
    (. builder timeEqualityFilter data))
  (when-let [data (lookup-entry config id :time-range-filter)]
    (. builder timeRangeFilter data))
  (when-let [data (lookup-entry config id :top-bottom-filter)]
    (. builder topBottomFilter data))
  (.build builder))


(defn cfn-dashboard-filter-property-builder
  "Creates a  `CfnDashboard$FilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filter-property-builder (new CfnDashboard$FilterProperty$Builder) id config))


(defn build-cfn-dashboard-filter-relative-date-time-control-property-builder
  "The build-cfn-dashboard-filter-relative-date-time-control-property-builder function updates a CfnDashboard$FilterRelativeDateTimeControlProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilterRelativeDateTimeControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$RelativeDateTimeControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnDashboard$FilterRelativeDateTimeControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-dashboard-filter-relative-date-time-control-property-builder
  "Creates a  `CfnDashboard$FilterRelativeDateTimeControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filter-relative-date-time-control-property-builder (new CfnDashboard$FilterRelativeDateTimeControlProperty$Builder) id config))


(defn build-cfn-dashboard-filter-scope-configuration-property-builder
  "The build-cfn-dashboard-filter-scope-configuration-property-builder function updates a CfnDashboard$FilterScopeConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilterScopeConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `allSheets` | java.lang.Object | [[cdk.support/lookup-entry]] | `:all-sheets` |
| `selectedSheets` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-sheets` |
"
  [^CfnDashboard$FilterScopeConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :all-sheets)]
    (. builder allSheets data))
  (when-let [data (lookup-entry config id :selected-sheets)]
    (. builder selectedSheets data))
  (.build builder))


(defn cfn-dashboard-filter-scope-configuration-property-builder
  "Creates a  `CfnDashboard$FilterScopeConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filter-scope-configuration-property-builder (new CfnDashboard$FilterScopeConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-filter-selectable-values-property-builder
  "The build-cfn-dashboard-filter-selectable-values-property-builder function updates a CfnDashboard$FilterSelectableValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilterSelectableValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$FilterSelectableValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-filter-selectable-values-property-builder
  "Creates a  `CfnDashboard$FilterSelectableValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filter-selectable-values-property-builder (new CfnDashboard$FilterSelectableValuesProperty$Builder) id config))


(defn build-cfn-dashboard-filter-slider-control-property-builder
  "The build-cfn-dashboard-filter-slider-control-property-builder function updates a CfnDashboard$FilterSliderControlProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilterSliderControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$SliderControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnDashboard$FilterSliderControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :maximum-value)]
    (. builder maximumValue data))
  (when-let [data (lookup-entry config id :minimum-value)]
    (. builder minimumValue data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :step-size)]
    (. builder stepSize data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-dashboard-filter-slider-control-property-builder
  "Creates a  `CfnDashboard$FilterSliderControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filter-slider-control-property-builder (new CfnDashboard$FilterSliderControlProperty$Builder) id config))


(defn build-cfn-dashboard-filter-text-area-control-property-builder
  "The build-cfn-dashboard-filter-text-area-control-property-builder function updates a CfnDashboard$FilterTextAreaControlProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilterTextAreaControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnDashboard$FilterTextAreaControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :delimiter)]
    (. builder delimiter data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-dashboard-filter-text-area-control-property-builder
  "Creates a  `CfnDashboard$FilterTextAreaControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filter-text-area-control-property-builder (new CfnDashboard$FilterTextAreaControlProperty$Builder) id config))


(defn build-cfn-dashboard-filter-text-field-control-property-builder
  "The build-cfn-dashboard-filter-text-field-control-property-builder function updates a CfnDashboard$FilterTextFieldControlProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FilterTextFieldControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnDashboard$FilterTextFieldControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-dashboard-filter-text-field-control-property-builder
  "Creates a  `CfnDashboard$FilterTextFieldControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-filter-text-field-control-property-builder (new CfnDashboard$FilterTextFieldControlProperty$Builder) id config))


(defn build-cfn-dashboard-font-configuration-property-builder
  "The build-cfn-dashboard-font-configuration-property-builder function updates a CfnDashboard$FontConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FontConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-color` |
| `fontDecoration` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-decoration` |
| `fontSize` | software.amazon.awscdk.services.quicksight.CfnDashboard$FontSizeProperty | [[cdk.support/lookup-entry]] | `:font-size` |
| `fontStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-style` |
| `fontWeight` | software.amazon.awscdk.services.quicksight.CfnDashboard$FontWeightProperty | [[cdk.support/lookup-entry]] | `:font-weight` |
"
  [^CfnDashboard$FontConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :font-color)]
    (. builder fontColor data))
  (when-let [data (lookup-entry config id :font-decoration)]
    (. builder fontDecoration data))
  (when-let [data (lookup-entry config id :font-size)]
    (. builder fontSize data))
  (when-let [data (lookup-entry config id :font-style)]
    (. builder fontStyle data))
  (when-let [data (lookup-entry config id :font-weight)]
    (. builder fontWeight data))
  (.build builder))


(defn cfn-dashboard-font-configuration-property-builder
  "Creates a  `CfnDashboard$FontConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-font-configuration-property-builder (new CfnDashboard$FontConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-font-size-property-builder
  "The build-cfn-dashboard-font-size-property-builder function updates a CfnDashboard$FontSizeProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FontSizeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `relative` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative` |
"
  [^CfnDashboard$FontSizeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :relative)]
    (. builder relative data))
  (.build builder))


(defn cfn-dashboard-font-size-property-builder
  "Creates a  `CfnDashboard$FontSizeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-font-size-property-builder (new CfnDashboard$FontSizeProperty$Builder) id config))


(defn build-cfn-dashboard-font-weight-property-builder
  "The build-cfn-dashboard-font-weight-property-builder function updates a CfnDashboard$FontWeightProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FontWeightProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
"
  [^CfnDashboard$FontWeightProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (.build builder))


(defn cfn-dashboard-font-weight-property-builder
  "Creates a  `CfnDashboard$FontWeightProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-font-weight-property-builder (new CfnDashboard$FontWeightProperty$Builder) id config))


(defn build-cfn-dashboard-forecast-computation-property-builder
  "The build-cfn-dashboard-forecast-computation-property-builder function updates a CfnDashboard$ForecastComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ForecastComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `customSeasonalityValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-seasonality-value` |
| `lowerBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:lower-boundary` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodsBackward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-backward` |
| `periodsForward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-forward` |
| `predictionInterval` | java.lang.Number | [[cdk.support/lookup-entry]] | `:prediction-interval` |
| `seasonality` | java.lang.String | [[cdk.support/lookup-entry]] | `:seasonality` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `upperBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:upper-boundary` |
| `value` | software.amazon.awscdk.services.quicksight.CfnDashboard$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$ForecastComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :custom-seasonality-value)]
    (. builder customSeasonalityValue data))
  (when-let [data (lookup-entry config id :lower-boundary)]
    (. builder lowerBoundary data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :periods-backward)]
    (. builder periodsBackward data))
  (when-let [data (lookup-entry config id :periods-forward)]
    (. builder periodsForward data))
  (when-let [data (lookup-entry config id :prediction-interval)]
    (. builder predictionInterval data))
  (when-let [data (lookup-entry config id :seasonality)]
    (. builder seasonality data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :upper-boundary)]
    (. builder upperBoundary data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-forecast-computation-property-builder
  "Creates a  `CfnDashboard$ForecastComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-forecast-computation-property-builder (new CfnDashboard$ForecastComputationProperty$Builder) id config))


(defn build-cfn-dashboard-forecast-configuration-property-builder
  "The build-cfn-dashboard-forecast-configuration-property-builder function updates a CfnDashboard$ForecastConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ForecastConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `forecastProperties` | software.amazon.awscdk.services.quicksight.CfnDashboard$TimeBasedForecastPropertiesProperty | [[cdk.support/lookup-entry]] | `:forecast-properties` |
| `scenario` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scenario` |
"
  [^CfnDashboard$ForecastConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :forecast-properties)]
    (. builder forecastProperties data))
  (when-let [data (lookup-entry config id :scenario)]
    (. builder scenario data))
  (.build builder))


(defn cfn-dashboard-forecast-configuration-property-builder
  "Creates a  `CfnDashboard$ForecastConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-forecast-configuration-property-builder (new CfnDashboard$ForecastConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-forecast-scenario-property-builder
  "The build-cfn-dashboard-forecast-scenario-property-builder function updates a CfnDashboard$ForecastScenarioProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ForecastScenarioProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `whatIfPointScenario` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:what-if-point-scenario` |
| `whatIfRangeScenario` | software.amazon.awscdk.services.quicksight.CfnDashboard$WhatIfRangeScenarioProperty | [[cdk.support/lookup-entry]] | `:what-if-range-scenario` |
"
  [^CfnDashboard$ForecastScenarioProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :what-if-point-scenario)]
    (. builder whatIfPointScenario data))
  (when-let [data (lookup-entry config id :what-if-range-scenario)]
    (. builder whatIfRangeScenario data))
  (.build builder))


(defn cfn-dashboard-forecast-scenario-property-builder
  "Creates a  `CfnDashboard$ForecastScenarioProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-forecast-scenario-property-builder (new CfnDashboard$ForecastScenarioProperty$Builder) id config))


(defn build-cfn-dashboard-format-configuration-property-builder
  "The build-cfn-dashboard-format-configuration-property-builder function updates a CfnDashboard$FormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-time-format-configuration` |
| `numberFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:number-format-configuration` |
| `stringFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:string-format-configuration` |
"
  [^CfnDashboard$FormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-format-configuration)]
    (. builder dateTimeFormatConfiguration data))
  (when-let [data (lookup-entry config id :number-format-configuration)]
    (. builder numberFormatConfiguration data))
  (when-let [data (lookup-entry config id :string-format-configuration)]
    (. builder stringFormatConfiguration data))
  (.build builder))


(defn cfn-dashboard-format-configuration-property-builder
  "Creates a  `CfnDashboard$FormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-format-configuration-property-builder (new CfnDashboard$FormatConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-free-form-layout-canvas-size-options-property-builder
  "The build-cfn-dashboard-free-form-layout-canvas-size-options-property-builder function updates a CfnDashboard$FreeFormLayoutCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FreeFormLayoutCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `screenCanvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$FreeFormLayoutScreenCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:screen-canvas-size-options` |
"
  [^CfnDashboard$FreeFormLayoutCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :screen-canvas-size-options)]
    (. builder screenCanvasSizeOptions data))
  (.build builder))


(defn cfn-dashboard-free-form-layout-canvas-size-options-property-builder
  "Creates a  `CfnDashboard$FreeFormLayoutCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-free-form-layout-canvas-size-options-property-builder (new CfnDashboard$FreeFormLayoutCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-free-form-layout-configuration-property-builder
  "The build-cfn-dashboard-free-form-layout-configuration-property-builder function updates a CfnDashboard$FreeFormLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FreeFormLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$FreeFormLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `elements` | java.util.List | [[cdk.support/lookup-entry]] | `:elements` |
"
  [^CfnDashboard$FreeFormLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (when-let [data (lookup-entry config id :elements)]
    (. builder elements data))
  (.build builder))


(defn cfn-dashboard-free-form-layout-configuration-property-builder
  "Creates a  `CfnDashboard$FreeFormLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-free-form-layout-configuration-property-builder (new CfnDashboard$FreeFormLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-free-form-layout-element-background-style-property-builder
  "The build-cfn-dashboard-free-form-layout-element-background-style-property-builder function updates a CfnDashboard$FreeFormLayoutElementBackgroundStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FreeFormLayoutElementBackgroundStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$FreeFormLayoutElementBackgroundStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-free-form-layout-element-background-style-property-builder
  "Creates a  `CfnDashboard$FreeFormLayoutElementBackgroundStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-free-form-layout-element-background-style-property-builder (new CfnDashboard$FreeFormLayoutElementBackgroundStyleProperty$Builder) id config))


(defn build-cfn-dashboard-free-form-layout-element-border-style-property-builder
  "The build-cfn-dashboard-free-form-layout-element-border-style-property-builder function updates a CfnDashboard$FreeFormLayoutElementBorderStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FreeFormLayoutElementBorderStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$FreeFormLayoutElementBorderStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-free-form-layout-element-border-style-property-builder
  "Creates a  `CfnDashboard$FreeFormLayoutElementBorderStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-free-form-layout-element-border-style-property-builder (new CfnDashboard$FreeFormLayoutElementBorderStyleProperty$Builder) id config))


(defn build-cfn-dashboard-free-form-layout-element-property-builder
  "The build-cfn-dashboard-free-form-layout-element-property-builder function updates a CfnDashboard$FreeFormLayoutElementProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FreeFormLayoutElementProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:background-style` |
| `borderStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:border-style` |
| `elementId` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-id` |
| `elementType` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-type` |
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `loadingAnimation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:loading-animation` |
| `renderingRules` | java.util.List | [[cdk.support/lookup-entry]] | `:rendering-rules` |
| `selectedBorderStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-border-style` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |
| `xAxisLocation` | java.lang.String | [[cdk.support/lookup-entry]] | `:x-axis-location` |
| `yAxisLocation` | java.lang.String | [[cdk.support/lookup-entry]] | `:y-axis-location` |
"
  [^CfnDashboard$FreeFormLayoutElementProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-style)]
    (. builder backgroundStyle data))
  (when-let [data (lookup-entry config id :border-style)]
    (. builder borderStyle data))
  (when-let [data (lookup-entry config id :element-id)]
    (. builder elementId data))
  (when-let [data (lookup-entry config id :element-type)]
    (. builder elementType data))
  (when-let [data (lookup-entry config id :height)]
    (. builder height data))
  (when-let [data (lookup-entry config id :loading-animation)]
    (. builder loadingAnimation data))
  (when-let [data (lookup-entry config id :rendering-rules)]
    (. builder renderingRules data))
  (when-let [data (lookup-entry config id :selected-border-style)]
    (. builder selectedBorderStyle data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (when-let [data (lookup-entry config id :width)]
    (. builder width data))
  (when-let [data (lookup-entry config id :x-axis-location)]
    (. builder xAxisLocation data))
  (when-let [data (lookup-entry config id :y-axis-location)]
    (. builder yAxisLocation data))
  (.build builder))


(defn cfn-dashboard-free-form-layout-element-property-builder
  "Creates a  `CfnDashboard$FreeFormLayoutElementProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-free-form-layout-element-property-builder (new CfnDashboard$FreeFormLayoutElementProperty$Builder) id config))


(defn build-cfn-dashboard-free-form-layout-screen-canvas-size-options-property-builder
  "The build-cfn-dashboard-free-form-layout-screen-canvas-size-options-property-builder function updates a CfnDashboard$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `optimizedViewPortWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:optimized-view-port-width` |
"
  [^CfnDashboard$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :optimized-view-port-width)]
    (. builder optimizedViewPortWidth data))
  (.build builder))


(defn cfn-dashboard-free-form-layout-screen-canvas-size-options-property-builder
  "Creates a  `CfnDashboard$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-free-form-layout-screen-canvas-size-options-property-builder (new CfnDashboard$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-free-form-section-layout-configuration-property-builder
  "The build-cfn-dashboard-free-form-section-layout-configuration-property-builder function updates a CfnDashboard$FreeFormSectionLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FreeFormSectionLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `elements` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:elements` |
"
  [^CfnDashboard$FreeFormSectionLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :elements)]
    (. builder elements data))
  (.build builder))


(defn cfn-dashboard-free-form-section-layout-configuration-property-builder
  "Creates a  `CfnDashboard$FreeFormSectionLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-free-form-section-layout-configuration-property-builder (new CfnDashboard$FreeFormSectionLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-funnel-chart-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-funnel-chart-aggregated-field-wells-property-builder function updates a CfnDashboard$FunnelChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FunnelChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | java.util.List | [[cdk.support/lookup-entry]] | `:category` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$FunnelChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-funnel-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$FunnelChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-funnel-chart-aggregated-field-wells-property-builder (new CfnDashboard$FunnelChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-funnel-chart-configuration-property-builder
  "The build-cfn-dashboard-funnel-chart-configuration-property-builder function updates a CfnDashboard$FunnelChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FunnelChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `dataLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$FunnelChartDataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-label-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$FunnelChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FunnelChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnDashboard$FunnelChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :data-label-options)]
    (. builder dataLabelOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :value-label-options)]
    (. builder valueLabelOptions data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-dashboard-funnel-chart-configuration-property-builder
  "Creates a  `CfnDashboard$FunnelChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-funnel-chart-configuration-property-builder (new CfnDashboard$FunnelChartConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-funnel-chart-data-label-options-property-builder
  "The build-cfn-dashboard-funnel-chart-data-label-options-property-builder function updates a CfnDashboard$FunnelChartDataLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FunnelChartDataLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-label-visibility` |
| `labelColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-color` |
| `labelFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label-font-configuration` |
| `measureDataLabelStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-data-label-style` |
| `measureLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-label-visibility` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$FunnelChartDataLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-label-visibility)]
    (. builder categoryLabelVisibility data))
  (when-let [data (lookup-entry config id :label-color)]
    (. builder labelColor data))
  (when-let [data (lookup-entry config id :label-font-configuration)]
    (. builder labelFontConfiguration data))
  (when-let [data (lookup-entry config id :measure-data-label-style)]
    (. builder measureDataLabelStyle data))
  (when-let [data (lookup-entry config id :measure-label-visibility)]
    (. builder measureLabelVisibility data))
  (when-let [data (lookup-entry config id :position)]
    (. builder position data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-funnel-chart-data-label-options-property-builder
  "Creates a  `CfnDashboard$FunnelChartDataLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-funnel-chart-data-label-options-property-builder (new CfnDashboard$FunnelChartDataLabelOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-funnel-chart-field-wells-property-builder
  "The build-cfn-dashboard-funnel-chart-field-wells-property-builder function updates a CfnDashboard$FunnelChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FunnelChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `funnelChartAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$FunnelChartAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:funnel-chart-aggregated-field-wells` |
"
  [^CfnDashboard$FunnelChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :funnel-chart-aggregated-field-wells)]
    (. builder funnelChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-funnel-chart-field-wells-property-builder
  "Creates a  `CfnDashboard$FunnelChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-funnel-chart-field-wells-property-builder (new CfnDashboard$FunnelChartFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-funnel-chart-sort-configuration-property-builder
  "The build-cfn-dashboard-funnel-chart-sort-configuration-property-builder function updates a CfnDashboard$FunnelChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FunnelChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
"
  [^CfnDashboard$FunnelChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (.build builder))


(defn cfn-dashboard-funnel-chart-sort-configuration-property-builder
  "Creates a  `CfnDashboard$FunnelChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-funnel-chart-sort-configuration-property-builder (new CfnDashboard$FunnelChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-funnel-chart-visual-property-builder
  "The build-cfn-dashboard-funnel-chart-visual-property-builder function updates a CfnDashboard$FunnelChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$FunnelChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FunnelChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$FunnelChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-funnel-chart-visual-property-builder
  "Creates a  `CfnDashboard$FunnelChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-funnel-chart-visual-property-builder (new CfnDashboard$FunnelChartVisualProperty$Builder) id config))


(defn build-cfn-dashboard-gauge-chart-arc-conditional-formatting-property-builder
  "The build-cfn-dashboard-gauge-chart-arc-conditional-formatting-property-builder function updates a CfnDashboard$GaugeChartArcConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GaugeChartArcConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `foregroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:foreground-color` |
"
  [^CfnDashboard$GaugeChartArcConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :foreground-color)]
    (. builder foregroundColor data))
  (.build builder))


(defn cfn-dashboard-gauge-chart-arc-conditional-formatting-property-builder
  "Creates a  `CfnDashboard$GaugeChartArcConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-gauge-chart-arc-conditional-formatting-property-builder (new CfnDashboard$GaugeChartArcConditionalFormattingProperty$Builder) id config))


(defn build-cfn-dashboard-gauge-chart-conditional-formatting-option-property-builder
  "The build-cfn-dashboard-gauge-chart-conditional-formatting-option-property-builder function updates a CfnDashboard$GaugeChartConditionalFormattingOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GaugeChartConditionalFormattingOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arc` | software.amazon.awscdk.services.quicksight.CfnDashboard$GaugeChartArcConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:arc` |
| `primaryValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$GaugeChartPrimaryValueConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:primary-value` |
"
  [^CfnDashboard$GaugeChartConditionalFormattingOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arc)]
    (. builder arc data))
  (when-let [data (lookup-entry config id :primary-value)]
    (. builder primaryValue data))
  (.build builder))


(defn cfn-dashboard-gauge-chart-conditional-formatting-option-property-builder
  "Creates a  `CfnDashboard$GaugeChartConditionalFormattingOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-gauge-chart-conditional-formatting-option-property-builder (new CfnDashboard$GaugeChartConditionalFormattingOptionProperty$Builder) id config))


(defn build-cfn-dashboard-gauge-chart-conditional-formatting-property-builder
  "The build-cfn-dashboard-gauge-chart-conditional-formatting-property-builder function updates a CfnDashboard$GaugeChartConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GaugeChartConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |
"
  [^CfnDashboard$GaugeChartConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :conditional-formatting-options)]
    (. builder conditionalFormattingOptions data))
  (.build builder))


(defn cfn-dashboard-gauge-chart-conditional-formatting-property-builder
  "Creates a  `CfnDashboard$GaugeChartConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-gauge-chart-conditional-formatting-property-builder (new CfnDashboard$GaugeChartConditionalFormattingProperty$Builder) id config))


(defn build-cfn-dashboard-gauge-chart-configuration-property-builder
  "The build-cfn-dashboard-gauge-chart-configuration-property-builder function updates a CfnDashboard$GaugeChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GaugeChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `gaugeChartOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:gauge-chart-options` |
| `tooltipOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip-options` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnDashboard$GaugeChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :gauge-chart-options)]
    (. builder gaugeChartOptions data))
  (when-let [data (lookup-entry config id :tooltip-options)]
    (. builder tooltipOptions data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-dashboard-gauge-chart-configuration-property-builder
  "Creates a  `CfnDashboard$GaugeChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-gauge-chart-configuration-property-builder (new CfnDashboard$GaugeChartConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-gauge-chart-field-wells-property-builder
  "The build-cfn-dashboard-gauge-chart-field-wells-property-builder function updates a CfnDashboard$GaugeChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GaugeChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetValues` | java.util.List | [[cdk.support/lookup-entry]] | `:target-values` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$GaugeChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :target-values)]
    (. builder targetValues data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-gauge-chart-field-wells-property-builder
  "Creates a  `CfnDashboard$GaugeChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-gauge-chart-field-wells-property-builder (new CfnDashboard$GaugeChartFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-gauge-chart-options-property-builder
  "The build-cfn-dashboard-gauge-chart-options-property-builder function updates a CfnDashboard$GaugeChartOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GaugeChartOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arc` | software.amazon.awscdk.services.quicksight.CfnDashboard$ArcConfigurationProperty | [[cdk.support/lookup-entry]] | `:arc` |
| `arcAxis` | software.amazon.awscdk.services.quicksight.CfnDashboard$ArcAxisConfigurationProperty | [[cdk.support/lookup-entry]] | `:arc-axis` |
| `comparison` | software.amazon.awscdk.services.quicksight.CfnDashboard$ComparisonConfigurationProperty | [[cdk.support/lookup-entry]] | `:comparison` |
| `primaryValueDisplayType` | java.lang.String | [[cdk.support/lookup-entry]] | `:primary-value-display-type` |
| `primaryValueFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-value-font-configuration` |
"
  [^CfnDashboard$GaugeChartOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arc)]
    (. builder arc data))
  (when-let [data (lookup-entry config id :arc-axis)]
    (. builder arcAxis data))
  (when-let [data (lookup-entry config id :comparison)]
    (. builder comparison data))
  (when-let [data (lookup-entry config id :primary-value-display-type)]
    (. builder primaryValueDisplayType data))
  (when-let [data (lookup-entry config id :primary-value-font-configuration)]
    (. builder primaryValueFontConfiguration data))
  (.build builder))


(defn cfn-dashboard-gauge-chart-options-property-builder
  "Creates a  `CfnDashboard$GaugeChartOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-gauge-chart-options-property-builder (new CfnDashboard$GaugeChartOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-gauge-chart-primary-value-conditional-formatting-property-builder
  "The build-cfn-dashboard-gauge-chart-primary-value-conditional-formatting-property-builder function updates a CfnDashboard$GaugeChartPrimaryValueConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GaugeChartPrimaryValueConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnDashboard$GaugeChartPrimaryValueConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-dashboard-gauge-chart-primary-value-conditional-formatting-property-builder
  "Creates a  `CfnDashboard$GaugeChartPrimaryValueConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-gauge-chart-primary-value-conditional-formatting-property-builder (new CfnDashboard$GaugeChartPrimaryValueConditionalFormattingProperty$Builder) id config))


(defn build-cfn-dashboard-gauge-chart-visual-property-builder
  "The build-cfn-dashboard-gauge-chart-visual-property-builder function updates a CfnDashboard$GaugeChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GaugeChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$GaugeChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :conditional-formatting)]
    (. builder conditionalFormatting data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-gauge-chart-visual-property-builder
  "Creates a  `CfnDashboard$GaugeChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-gauge-chart-visual-property-builder (new CfnDashboard$GaugeChartVisualProperty$Builder) id config))


(defn build-cfn-dashboard-geospatial-coordinate-bounds-property-builder
  "The build-cfn-dashboard-geospatial-coordinate-bounds-property-builder function updates a CfnDashboard$GeospatialCoordinateBoundsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GeospatialCoordinateBoundsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `east` | java.lang.Number | [[cdk.support/lookup-entry]] | `:east` |
| `north` | java.lang.Number | [[cdk.support/lookup-entry]] | `:north` |
| `south` | java.lang.Number | [[cdk.support/lookup-entry]] | `:south` |
| `west` | java.lang.Number | [[cdk.support/lookup-entry]] | `:west` |
"
  [^CfnDashboard$GeospatialCoordinateBoundsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :east)]
    (. builder east data))
  (when-let [data (lookup-entry config id :north)]
    (. builder north data))
  (when-let [data (lookup-entry config id :south)]
    (. builder south data))
  (when-let [data (lookup-entry config id :west)]
    (. builder west data))
  (.build builder))


(defn cfn-dashboard-geospatial-coordinate-bounds-property-builder
  "Creates a  `CfnDashboard$GeospatialCoordinateBoundsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-geospatial-coordinate-bounds-property-builder (new CfnDashboard$GeospatialCoordinateBoundsProperty$Builder) id config))


(defn build-cfn-dashboard-geospatial-heatmap-color-scale-property-builder
  "The build-cfn-dashboard-geospatial-heatmap-color-scale-property-builder function updates a CfnDashboard$GeospatialHeatmapColorScaleProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GeospatialHeatmapColorScaleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
"
  [^CfnDashboard$GeospatialHeatmapColorScaleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (.build builder))


(defn cfn-dashboard-geospatial-heatmap-color-scale-property-builder
  "Creates a  `CfnDashboard$GeospatialHeatmapColorScaleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-geospatial-heatmap-color-scale-property-builder (new CfnDashboard$GeospatialHeatmapColorScaleProperty$Builder) id config))


(defn build-cfn-dashboard-geospatial-heatmap-configuration-property-builder
  "The build-cfn-dashboard-geospatial-heatmap-configuration-property-builder function updates a CfnDashboard$GeospatialHeatmapConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GeospatialHeatmapConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatmapColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heatmap-color` |
"
  [^CfnDashboard$GeospatialHeatmapConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :heatmap-color)]
    (. builder heatmapColor data))
  (.build builder))


(defn cfn-dashboard-geospatial-heatmap-configuration-property-builder
  "Creates a  `CfnDashboard$GeospatialHeatmapConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-geospatial-heatmap-configuration-property-builder (new CfnDashboard$GeospatialHeatmapConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-geospatial-heatmap-data-color-property-builder
  "The build-cfn-dashboard-geospatial-heatmap-data-color-property-builder function updates a CfnDashboard$GeospatialHeatmapDataColorProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GeospatialHeatmapDataColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
"
  [^CfnDashboard$GeospatialHeatmapDataColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (.build builder))


(defn cfn-dashboard-geospatial-heatmap-data-color-property-builder
  "Creates a  `CfnDashboard$GeospatialHeatmapDataColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-geospatial-heatmap-data-color-property-builder (new CfnDashboard$GeospatialHeatmapDataColorProperty$Builder) id config))


(defn build-cfn-dashboard-geospatial-map-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-geospatial-map-aggregated-field-wells-property-builder function updates a CfnDashboard$GeospatialMapAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GeospatialMapAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
| `geospatial` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:geospatial` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$GeospatialMapAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :geospatial)]
    (. builder geospatial data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-geospatial-map-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$GeospatialMapAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-geospatial-map-aggregated-field-wells-property-builder (new CfnDashboard$GeospatialMapAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-geospatial-map-configuration-property-builder
  "The build-cfn-dashboard-geospatial-map-configuration-property-builder function updates a CfnDashboard$GeospatialMapConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GeospatialMapConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnDashboard$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `mapStyleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:map-style-options` |
| `pointStyleOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$GeospatialPointStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:point-style-options` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `windowOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:window-options` |
"
  [^CfnDashboard$GeospatialMapConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :map-style-options)]
    (. builder mapStyleOptions data))
  (when-let [data (lookup-entry config id :point-style-options)]
    (. builder pointStyleOptions data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (when-let [data (lookup-entry config id :window-options)]
    (. builder windowOptions data))
  (.build builder))


(defn cfn-dashboard-geospatial-map-configuration-property-builder
  "Creates a  `CfnDashboard$GeospatialMapConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-geospatial-map-configuration-property-builder (new CfnDashboard$GeospatialMapConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-geospatial-map-field-wells-property-builder
  "The build-cfn-dashboard-geospatial-map-field-wells-property-builder function updates a CfnDashboard$GeospatialMapFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GeospatialMapFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `geospatialMapAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:geospatial-map-aggregated-field-wells` |
"
  [^CfnDashboard$GeospatialMapFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :geospatial-map-aggregated-field-wells)]
    (. builder geospatialMapAggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-geospatial-map-field-wells-property-builder
  "Creates a  `CfnDashboard$GeospatialMapFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-geospatial-map-field-wells-property-builder (new CfnDashboard$GeospatialMapFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-geospatial-map-style-options-property-builder
  "The build-cfn-dashboard-geospatial-map-style-options-property-builder function updates a CfnDashboard$GeospatialMapStyleOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GeospatialMapStyleOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `baseMapStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:base-map-style` |
"
  [^CfnDashboard$GeospatialMapStyleOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :base-map-style)]
    (. builder baseMapStyle data))
  (.build builder))


(defn cfn-dashboard-geospatial-map-style-options-property-builder
  "Creates a  `CfnDashboard$GeospatialMapStyleOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-geospatial-map-style-options-property-builder (new CfnDashboard$GeospatialMapStyleOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-geospatial-map-visual-property-builder
  "The build-cfn-dashboard-geospatial-map-visual-property-builder function updates a CfnDashboard$GeospatialMapVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GeospatialMapVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$GeospatialMapVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-geospatial-map-visual-property-builder
  "Creates a  `CfnDashboard$GeospatialMapVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-geospatial-map-visual-property-builder (new CfnDashboard$GeospatialMapVisualProperty$Builder) id config))


(defn build-cfn-dashboard-geospatial-point-style-options-property-builder
  "The build-cfn-dashboard-geospatial-point-style-options-property-builder function updates a CfnDashboard$GeospatialPointStyleOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GeospatialPointStyleOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `clusterMarkerConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ClusterMarkerConfigurationProperty | [[cdk.support/lookup-entry]] | `:cluster-marker-configuration` |
| `heatmapConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$GeospatialHeatmapConfigurationProperty | [[cdk.support/lookup-entry]] | `:heatmap-configuration` |
| `selectedPointStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-point-style` |
"
  [^CfnDashboard$GeospatialPointStyleOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cluster-marker-configuration)]
    (. builder clusterMarkerConfiguration data))
  (when-let [data (lookup-entry config id :heatmap-configuration)]
    (. builder heatmapConfiguration data))
  (when-let [data (lookup-entry config id :selected-point-style)]
    (. builder selectedPointStyle data))
  (.build builder))


(defn cfn-dashboard-geospatial-point-style-options-property-builder
  "Creates a  `CfnDashboard$GeospatialPointStyleOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-geospatial-point-style-options-property-builder (new CfnDashboard$GeospatialPointStyleOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-geospatial-window-options-property-builder
  "The build-cfn-dashboard-geospatial-window-options-property-builder function updates a CfnDashboard$GeospatialWindowOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GeospatialWindowOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bounds` | software.amazon.awscdk.services.quicksight.CfnDashboard$GeospatialCoordinateBoundsProperty | [[cdk.support/lookup-entry]] | `:bounds` |
| `mapZoomMode` | java.lang.String | [[cdk.support/lookup-entry]] | `:map-zoom-mode` |
"
  [^CfnDashboard$GeospatialWindowOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bounds)]
    (. builder bounds data))
  (when-let [data (lookup-entry config id :map-zoom-mode)]
    (. builder mapZoomMode data))
  (.build builder))


(defn cfn-dashboard-geospatial-window-options-property-builder
  "Creates a  `CfnDashboard$GeospatialWindowOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-geospatial-window-options-property-builder (new CfnDashboard$GeospatialWindowOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-global-table-border-options-property-builder
  "The build-cfn-dashboard-global-table-border-options-property-builder function updates a CfnDashboard$GlobalTableBorderOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GlobalTableBorderOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sideSpecificBorder` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:side-specific-border` |
| `uniformBorder` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:uniform-border` |
"
  [^CfnDashboard$GlobalTableBorderOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :side-specific-border)]
    (. builder sideSpecificBorder data))
  (when-let [data (lookup-entry config id :uniform-border)]
    (. builder uniformBorder data))
  (.build builder))


(defn cfn-dashboard-global-table-border-options-property-builder
  "Creates a  `CfnDashboard$GlobalTableBorderOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-global-table-border-options-property-builder (new CfnDashboard$GlobalTableBorderOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-gradient-color-property-builder
  "The build-cfn-dashboard-gradient-color-property-builder function updates a CfnDashboard$GradientColorProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GradientColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `stops` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:stops` |
"
  [^CfnDashboard$GradientColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :stops)]
    (. builder stops data))
  (.build builder))


(defn cfn-dashboard-gradient-color-property-builder
  "Creates a  `CfnDashboard$GradientColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-gradient-color-property-builder (new CfnDashboard$GradientColorProperty$Builder) id config))


(defn build-cfn-dashboard-gradient-stop-property-builder
  "The build-cfn-dashboard-gradient-stop-property-builder function updates a CfnDashboard$GradientStopProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GradientStopProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `dataValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:data-value` |
| `gradientOffset` | java.lang.Number | [[cdk.support/lookup-entry]] | `:gradient-offset` |
"
  [^CfnDashboard$GradientStopProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :data-value)]
    (. builder dataValue data))
  (when-let [data (lookup-entry config id :gradient-offset)]
    (. builder gradientOffset data))
  (.build builder))


(defn cfn-dashboard-gradient-stop-property-builder
  "Creates a  `CfnDashboard$GradientStopProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-gradient-stop-property-builder (new CfnDashboard$GradientStopProperty$Builder) id config))


(defn build-cfn-dashboard-grid-layout-canvas-size-options-property-builder
  "The build-cfn-dashboard-grid-layout-canvas-size-options-property-builder function updates a CfnDashboard$GridLayoutCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GridLayoutCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `screenCanvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$GridLayoutScreenCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:screen-canvas-size-options` |
"
  [^CfnDashboard$GridLayoutCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :screen-canvas-size-options)]
    (. builder screenCanvasSizeOptions data))
  (.build builder))


(defn cfn-dashboard-grid-layout-canvas-size-options-property-builder
  "Creates a  `CfnDashboard$GridLayoutCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-grid-layout-canvas-size-options-property-builder (new CfnDashboard$GridLayoutCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-grid-layout-configuration-property-builder
  "The build-cfn-dashboard-grid-layout-configuration-property-builder function updates a CfnDashboard$GridLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GridLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `elements` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:elements` |
"
  [^CfnDashboard$GridLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (when-let [data (lookup-entry config id :elements)]
    (. builder elements data))
  (.build builder))


(defn cfn-dashboard-grid-layout-configuration-property-builder
  "Creates a  `CfnDashboard$GridLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-grid-layout-configuration-property-builder (new CfnDashboard$GridLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-grid-layout-element-property-builder
  "The build-cfn-dashboard-grid-layout-element-property-builder function updates a CfnDashboard$GridLayoutElementProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GridLayoutElementProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnIndex` | java.lang.Number | [[cdk.support/lookup-entry]] | `:column-index` |
| `columnSpan` | java.lang.Number | [[cdk.support/lookup-entry]] | `:column-span` |
| `elementId` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-id` |
| `elementType` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-type` |
| `rowIndex` | java.lang.Number | [[cdk.support/lookup-entry]] | `:row-index` |
| `rowSpan` | java.lang.Number | [[cdk.support/lookup-entry]] | `:row-span` |
"
  [^CfnDashboard$GridLayoutElementProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-index)]
    (. builder columnIndex data))
  (when-let [data (lookup-entry config id :column-span)]
    (. builder columnSpan data))
  (when-let [data (lookup-entry config id :element-id)]
    (. builder elementId data))
  (when-let [data (lookup-entry config id :element-type)]
    (. builder elementType data))
  (when-let [data (lookup-entry config id :row-index)]
    (. builder rowIndex data))
  (when-let [data (lookup-entry config id :row-span)]
    (. builder rowSpan data))
  (.build builder))


(defn cfn-dashboard-grid-layout-element-property-builder
  "Creates a  `CfnDashboard$GridLayoutElementProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-grid-layout-element-property-builder (new CfnDashboard$GridLayoutElementProperty$Builder) id config))


(defn build-cfn-dashboard-grid-layout-screen-canvas-size-options-property-builder
  "The build-cfn-dashboard-grid-layout-screen-canvas-size-options-property-builder function updates a CfnDashboard$GridLayoutScreenCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GridLayoutScreenCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `optimizedViewPortWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:optimized-view-port-width` |
| `resizeOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:resize-option` |
"
  [^CfnDashboard$GridLayoutScreenCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :optimized-view-port-width)]
    (. builder optimizedViewPortWidth data))
  (when-let [data (lookup-entry config id :resize-option)]
    (. builder resizeOption data))
  (.build builder))


(defn cfn-dashboard-grid-layout-screen-canvas-size-options-property-builder
  "Creates a  `CfnDashboard$GridLayoutScreenCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-grid-layout-screen-canvas-size-options-property-builder (new CfnDashboard$GridLayoutScreenCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-growth-rate-computation-property-builder
  "The build-cfn-dashboard-growth-rate-computation-property-builder function updates a CfnDashboard$GrowthRateComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$GrowthRateComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:period-size` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$GrowthRateComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :period-size)]
    (. builder periodSize data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-growth-rate-computation-property-builder
  "Creates a  `CfnDashboard$GrowthRateComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-growth-rate-computation-property-builder (new CfnDashboard$GrowthRateComputationProperty$Builder) id config))


(defn build-cfn-dashboard-header-footer-section-configuration-property-builder
  "The build-cfn-dashboard-header-footer-section-configuration-property-builder function updates a CfnDashboard$HeaderFooterSectionConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$HeaderFooterSectionConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `layout` | software.amazon.awscdk.services.quicksight.CfnDashboard$SectionLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:layout` |
| `sectionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:section-id` |
| `style` | software.amazon.awscdk.services.quicksight.CfnDashboard$SectionStyleProperty | [[cdk.support/lookup-entry]] | `:style` |
"
  [^CfnDashboard$HeaderFooterSectionConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :layout)]
    (. builder layout data))
  (when-let [data (lookup-entry config id :section-id)]
    (. builder sectionId data))
  (when-let [data (lookup-entry config id :style)]
    (. builder style data))
  (.build builder))


(defn cfn-dashboard-header-footer-section-configuration-property-builder
  "Creates a  `CfnDashboard$HeaderFooterSectionConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-header-footer-section-configuration-property-builder (new CfnDashboard$HeaderFooterSectionConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-heat-map-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-heat-map-aggregated-field-wells-property-builder function updates a CfnDashboard$HeatMapAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$HeatMapAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `rows` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rows` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$HeatMapAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (when-let [data (lookup-entry config id :rows)]
    (. builder rows data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-heat-map-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$HeatMapAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-heat-map-aggregated-field-wells-property-builder (new CfnDashboard$HeatMapAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-heat-map-configuration-property-builder
  "The build-cfn-dashboard-heat-map-configuration-property-builder function updates a CfnDashboard$HeatMapConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$HeatMapConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorScale` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColorScaleProperty | [[cdk.support/lookup-entry]] | `:color-scale` |
| `columnLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:column-label-options` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$HeatMapFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `rowLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:row-label-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$HeatMapSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnDashboard$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
"
  [^CfnDashboard$HeatMapConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color-scale)]
    (. builder colorScale data))
  (when-let [data (lookup-entry config id :column-label-options)]
    (. builder columnLabelOptions data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :row-label-options)]
    (. builder rowLabelOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (.build builder))


(defn cfn-dashboard-heat-map-configuration-property-builder
  "Creates a  `CfnDashboard$HeatMapConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-heat-map-configuration-property-builder (new CfnDashboard$HeatMapConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-heat-map-field-wells-property-builder
  "The build-cfn-dashboard-heat-map-field-wells-property-builder function updates a CfnDashboard$HeatMapFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$HeatMapFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatMapAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$HeatMapAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:heat-map-aggregated-field-wells` |
"
  [^CfnDashboard$HeatMapFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :heat-map-aggregated-field-wells)]
    (. builder heatMapAggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-heat-map-field-wells-property-builder
  "Creates a  `CfnDashboard$HeatMapFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-heat-map-field-wells-property-builder (new CfnDashboard$HeatMapFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-heat-map-sort-configuration-property-builder
  "The build-cfn-dashboard-heat-map-sort-configuration-property-builder function updates a CfnDashboard$HeatMapSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$HeatMapSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatMapColumnItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:heat-map-column-items-limit-configuration` |
| `heatMapColumnSort` | java.util.List | [[cdk.support/lookup-entry]] | `:heat-map-column-sort` |
| `heatMapRowItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:heat-map-row-items-limit-configuration` |
| `heatMapRowSort` | java.util.List | [[cdk.support/lookup-entry]] | `:heat-map-row-sort` |
"
  [^CfnDashboard$HeatMapSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :heat-map-column-items-limit-configuration)]
    (. builder heatMapColumnItemsLimitConfiguration data))
  (when-let [data (lookup-entry config id :heat-map-column-sort)]
    (. builder heatMapColumnSort data))
  (when-let [data (lookup-entry config id :heat-map-row-items-limit-configuration)]
    (. builder heatMapRowItemsLimitConfiguration data))
  (when-let [data (lookup-entry config id :heat-map-row-sort)]
    (. builder heatMapRowSort data))
  (.build builder))


(defn cfn-dashboard-heat-map-sort-configuration-property-builder
  "Creates a  `CfnDashboard$HeatMapSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-heat-map-sort-configuration-property-builder (new CfnDashboard$HeatMapSortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-heat-map-visual-property-builder
  "The build-cfn-dashboard-heat-map-visual-property-builder function updates a CfnDashboard$HeatMapVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$HeatMapVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$HeatMapVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-heat-map-visual-property-builder
  "Creates a  `CfnDashboard$HeatMapVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-heat-map-visual-property-builder (new CfnDashboard$HeatMapVisualProperty$Builder) id config))


(defn build-cfn-dashboard-histogram-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-histogram-aggregated-field-wells-property-builder function updates a CfnDashboard$HistogramAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$HistogramAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$HistogramAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-histogram-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$HistogramAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-histogram-aggregated-field-wells-property-builder (new CfnDashboard$HistogramAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-histogram-bin-options-property-builder
  "The build-cfn-dashboard-histogram-bin-options-property-builder function updates a CfnDashboard$HistogramBinOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$HistogramBinOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binCount` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bin-count` |
| `binWidth` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bin-width` |
| `selectedBinType` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-bin-type` |
| `startValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:start-value` |
"
  [^CfnDashboard$HistogramBinOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bin-count)]
    (. builder binCount data))
  (when-let [data (lookup-entry config id :bin-width)]
    (. builder binWidth data))
  (when-let [data (lookup-entry config id :selected-bin-type)]
    (. builder selectedBinType data))
  (when-let [data (lookup-entry config id :start-value)]
    (. builder startValue data))
  (.build builder))


(defn cfn-dashboard-histogram-bin-options-property-builder
  "Creates a  `CfnDashboard$HistogramBinOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-histogram-bin-options-property-builder (new CfnDashboard$HistogramBinOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-histogram-configuration-property-builder
  "The build-cfn-dashboard-histogram-configuration-property-builder function updates a CfnDashboard$HistogramConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$HistogramConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$HistogramBinOptionsProperty | [[cdk.support/lookup-entry]] | `:bin-options` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$HistogramFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnDashboard$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |
| `yAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:y-axis-display-options` |
"
  [^CfnDashboard$HistogramConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bin-options)]
    (. builder binOptions data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (when-let [data (lookup-entry config id :x-axis-display-options)]
    (. builder xAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :x-axis-label-options)]
    (. builder xAxisLabelOptions data))
  (when-let [data (lookup-entry config id :y-axis-display-options)]
    (. builder yAxisDisplayOptions data))
  (.build builder))


(defn cfn-dashboard-histogram-configuration-property-builder
  "Creates a  `CfnDashboard$HistogramConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-histogram-configuration-property-builder (new CfnDashboard$HistogramConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-histogram-field-wells-property-builder
  "The build-cfn-dashboard-histogram-field-wells-property-builder function updates a CfnDashboard$HistogramFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$HistogramFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `histogramAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:histogram-aggregated-field-wells` |
"
  [^CfnDashboard$HistogramFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :histogram-aggregated-field-wells)]
    (. builder histogramAggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-histogram-field-wells-property-builder
  "Creates a  `CfnDashboard$HistogramFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-histogram-field-wells-property-builder (new CfnDashboard$HistogramFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-histogram-visual-property-builder
  "The build-cfn-dashboard-histogram-visual-property-builder function updates a CfnDashboard$HistogramVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$HistogramVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$HistogramConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$HistogramVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-histogram-visual-property-builder
  "Creates a  `CfnDashboard$HistogramVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-histogram-visual-property-builder (new CfnDashboard$HistogramVisualProperty$Builder) id config))


(defn build-cfn-dashboard-insight-configuration-property-builder
  "The build-cfn-dashboard-insight-configuration-property-builder function updates a CfnDashboard$InsightConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$InsightConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computations` | java.util.List | [[cdk.support/lookup-entry]] | `:computations` |
| `customNarrative` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-narrative` |
"
  [^CfnDashboard$InsightConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computations)]
    (. builder computations data))
  (when-let [data (lookup-entry config id :custom-narrative)]
    (. builder customNarrative data))
  (.build builder))


(defn cfn-dashboard-insight-configuration-property-builder
  "Creates a  `CfnDashboard$InsightConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-insight-configuration-property-builder (new CfnDashboard$InsightConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-insight-visual-property-builder
  "The build-cfn-dashboard-insight-visual-property-builder function updates a CfnDashboard$InsightVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$InsightVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `insightConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:insight-configuration` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$InsightVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :insight-configuration)]
    (. builder insightConfiguration data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-insight-visual-property-builder
  "Creates a  `CfnDashboard$InsightVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-insight-visual-property-builder (new CfnDashboard$InsightVisualProperty$Builder) id config))


(defn build-cfn-dashboard-integer-default-values-property-builder
  "The build-cfn-dashboard-integer-default-values-property-builder function updates a CfnDashboard$IntegerDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$IntegerDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:static-values` |
"
  [^CfnDashboard$IntegerDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :dynamic-value)]
    (. builder dynamicValue data))
  (when-let [data (lookup-entry config id :static-values)]
    (. builder staticValues data))
  (.build builder))


(defn cfn-dashboard-integer-default-values-property-builder
  "Creates a  `CfnDashboard$IntegerDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-integer-default-values-property-builder (new CfnDashboard$IntegerDefaultValuesProperty$Builder) id config))


(defn build-cfn-dashboard-integer-parameter-declaration-property-builder
  "The build-cfn-dashboard-integer-parameter-declaration-property-builder function updates a CfnDashboard$IntegerParameterDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$IntegerParameterDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.services.quicksight.CfnDashboard$IntegerValueWhenUnsetConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-when-unset` |
"
  [^CfnDashboard$IntegerParameterDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-values)]
    (. builder defaultValues data))
  (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
    (. builder mappedDataSetParameters data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :parameter-value-type)]
    (. builder parameterValueType data))
  (when-let [data (lookup-entry config id :value-when-unset)]
    (. builder valueWhenUnset data))
  (.build builder))


(defn cfn-dashboard-integer-parameter-declaration-property-builder
  "Creates a  `CfnDashboard$IntegerParameterDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-integer-parameter-declaration-property-builder (new CfnDashboard$IntegerParameterDeclarationProperty$Builder) id config))


(defn build-cfn-dashboard-integer-parameter-property-builder
  "The build-cfn-dashboard-integer-parameter-property-builder function updates a CfnDashboard$IntegerParameterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$IntegerParameterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$IntegerParameterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-integer-parameter-property-builder
  "Creates a  `CfnDashboard$IntegerParameterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-integer-parameter-property-builder (new CfnDashboard$IntegerParameterProperty$Builder) id config))


(defn build-cfn-dashboard-integer-value-when-unset-configuration-property-builder
  "The build-cfn-dashboard-integer-value-when-unset-configuration-property-builder function updates a CfnDashboard$IntegerValueWhenUnsetConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$IntegerValueWhenUnsetConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |
"
  [^CfnDashboard$IntegerValueWhenUnsetConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-value)]
    (. builder customValue data))
  (when-let [data (lookup-entry config id :value-when-unset-option)]
    (. builder valueWhenUnsetOption data))
  (.build builder))


(defn cfn-dashboard-integer-value-when-unset-configuration-property-builder
  "Creates a  `CfnDashboard$IntegerValueWhenUnsetConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-integer-value-when-unset-configuration-property-builder (new CfnDashboard$IntegerValueWhenUnsetConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-items-limit-configuration-property-builder
  "The build-cfn-dashboard-items-limit-configuration-property-builder function updates a CfnDashboard$ItemsLimitConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ItemsLimitConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `itemsLimit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:items-limit` |
| `otherCategories` | java.lang.String | [[cdk.support/lookup-entry]] | `:other-categories` |
"
  [^CfnDashboard$ItemsLimitConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :items-limit)]
    (. builder itemsLimit data))
  (when-let [data (lookup-entry config id :other-categories)]
    (. builder otherCategories data))
  (.build builder))


(defn cfn-dashboard-items-limit-configuration-property-builder
  "Creates a  `CfnDashboard$ItemsLimitConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-items-limit-configuration-property-builder (new CfnDashboard$ItemsLimitConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-kpi-actual-value-conditional-formatting-property-builder
  "The build-cfn-dashboard-kpi-actual-value-conditional-formatting-property-builder function updates a CfnDashboard$KPIActualValueConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$KPIActualValueConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingIconProperty | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnDashboard$KPIActualValueConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-dashboard-kpi-actual-value-conditional-formatting-property-builder
  "Creates a  `CfnDashboard$KPIActualValueConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-kpi-actual-value-conditional-formatting-property-builder (new CfnDashboard$KPIActualValueConditionalFormattingProperty$Builder) id config))


(defn build-cfn-dashboard-kpi-comparison-value-conditional-formatting-property-builder
  "The build-cfn-dashboard-kpi-comparison-value-conditional-formatting-property-builder function updates a CfnDashboard$KPIComparisonValueConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$KPIComparisonValueConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnDashboard$KPIComparisonValueConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-dashboard-kpi-comparison-value-conditional-formatting-property-builder
  "Creates a  `CfnDashboard$KPIComparisonValueConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-kpi-comparison-value-conditional-formatting-property-builder (new CfnDashboard$KPIComparisonValueConditionalFormattingProperty$Builder) id config))


(defn build-cfn-dashboard-kpi-conditional-formatting-option-property-builder
  "The build-cfn-dashboard-kpi-conditional-formatting-option-property-builder function updates a CfnDashboard$KPIConditionalFormattingOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$KPIConditionalFormattingOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actualValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$KPIActualValueConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:actual-value` |
| `comparisonValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$KPIComparisonValueConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:comparison-value` |
| `primaryValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-value` |
| `progressBar` | software.amazon.awscdk.services.quicksight.CfnDashboard$KPIProgressBarConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:progress-bar` |
"
  [^CfnDashboard$KPIConditionalFormattingOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actual-value)]
    (. builder actualValue data))
  (when-let [data (lookup-entry config id :comparison-value)]
    (. builder comparisonValue data))
  (when-let [data (lookup-entry config id :primary-value)]
    (. builder primaryValue data))
  (when-let [data (lookup-entry config id :progress-bar)]
    (. builder progressBar data))
  (.build builder))


(defn cfn-dashboard-kpi-conditional-formatting-option-property-builder
  "Creates a  `CfnDashboard$KPIConditionalFormattingOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-kpi-conditional-formatting-option-property-builder (new CfnDashboard$KPIConditionalFormattingOptionProperty$Builder) id config))


(defn build-cfn-dashboard-kpi-conditional-formatting-property-builder
  "The build-cfn-dashboard-kpi-conditional-formatting-property-builder function updates a CfnDashboard$KPIConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$KPIConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |
"
  [^CfnDashboard$KPIConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :conditional-formatting-options)]
    (. builder conditionalFormattingOptions data))
  (.build builder))


(defn cfn-dashboard-kpi-conditional-formatting-property-builder
  "Creates a  `CfnDashboard$KPIConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-kpi-conditional-formatting-property-builder (new CfnDashboard$KPIConditionalFormattingProperty$Builder) id config))


(defn build-cfn-dashboard-kpi-configuration-property-builder
  "The build-cfn-dashboard-kpi-configuration-property-builder function updates a CfnDashboard$KPIConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$KPIConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `kpiOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:kpi-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$KPISortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
"
  [^CfnDashboard$KPIConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :kpi-options)]
    (. builder kpiOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (.build builder))


(defn cfn-dashboard-kpi-configuration-property-builder
  "Creates a  `CfnDashboard$KPIConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-kpi-configuration-property-builder (new CfnDashboard$KPIConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-kpi-field-wells-property-builder
  "The build-cfn-dashboard-kpi-field-wells-property-builder function updates a CfnDashboard$KPIFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$KPIFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target-values` |
| `trendGroups` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:trend-groups` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$KPIFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :target-values)]
    (. builder targetValues data))
  (when-let [data (lookup-entry config id :trend-groups)]
    (. builder trendGroups data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-kpi-field-wells-property-builder
  "Creates a  `CfnDashboard$KPIFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-kpi-field-wells-property-builder (new CfnDashboard$KPIFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-kpi-options-property-builder
  "The build-cfn-dashboard-kpi-options-property-builder function updates a CfnDashboard$KPIOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$KPIOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comparison` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:comparison` |
| `primaryValueDisplayType` | java.lang.String | [[cdk.support/lookup-entry]] | `:primary-value-display-type` |
| `primaryValueFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-value-font-configuration` |
| `progressBar` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:progress-bar` |
| `secondaryValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$SecondaryValueOptionsProperty | [[cdk.support/lookup-entry]] | `:secondary-value` |
| `secondaryValueFontConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:secondary-value-font-configuration` |
| `sparkline` | software.amazon.awscdk.services.quicksight.CfnDashboard$KPISparklineOptionsProperty | [[cdk.support/lookup-entry]] | `:sparkline` |
| `trendArrows` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:trend-arrows` |
| `visualLayoutOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-layout-options` |
"
  [^CfnDashboard$KPIOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :comparison)]
    (. builder comparison data))
  (when-let [data (lookup-entry config id :primary-value-display-type)]
    (. builder primaryValueDisplayType data))
  (when-let [data (lookup-entry config id :primary-value-font-configuration)]
    (. builder primaryValueFontConfiguration data))
  (when-let [data (lookup-entry config id :progress-bar)]
    (. builder progressBar data))
  (when-let [data (lookup-entry config id :secondary-value)]
    (. builder secondaryValue data))
  (when-let [data (lookup-entry config id :secondary-value-font-configuration)]
    (. builder secondaryValueFontConfiguration data))
  (when-let [data (lookup-entry config id :sparkline)]
    (. builder sparkline data))
  (when-let [data (lookup-entry config id :trend-arrows)]
    (. builder trendArrows data))
  (when-let [data (lookup-entry config id :visual-layout-options)]
    (. builder visualLayoutOptions data))
  (.build builder))


(defn cfn-dashboard-kpi-options-property-builder
  "Creates a  `CfnDashboard$KPIOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-kpi-options-property-builder (new CfnDashboard$KPIOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-kpi-primary-value-conditional-formatting-property-builder
  "The build-cfn-dashboard-kpi-primary-value-conditional-formatting-property-builder function updates a CfnDashboard$KPIPrimaryValueConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$KPIPrimaryValueConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnDashboard$KPIPrimaryValueConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-dashboard-kpi-primary-value-conditional-formatting-property-builder
  "Creates a  `CfnDashboard$KPIPrimaryValueConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-kpi-primary-value-conditional-formatting-property-builder (new CfnDashboard$KPIPrimaryValueConditionalFormattingProperty$Builder) id config))


(defn build-cfn-dashboard-kpi-progress-bar-conditional-formatting-property-builder
  "The build-cfn-dashboard-kpi-progress-bar-conditional-formatting-property-builder function updates a CfnDashboard$KPIProgressBarConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$KPIProgressBarConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `foregroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:foreground-color` |
"
  [^CfnDashboard$KPIProgressBarConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :foreground-color)]
    (. builder foregroundColor data))
  (.build builder))


(defn cfn-dashboard-kpi-progress-bar-conditional-formatting-property-builder
  "Creates a  `CfnDashboard$KPIProgressBarConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-kpi-progress-bar-conditional-formatting-property-builder (new CfnDashboard$KPIProgressBarConditionalFormattingProperty$Builder) id config))


(defn build-cfn-dashboard-kpi-sort-configuration-property-builder
  "The build-cfn-dashboard-kpi-sort-configuration-property-builder function updates a CfnDashboard$KPISortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$KPISortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `trendGroupSort` | java.util.List | [[cdk.support/lookup-entry]] | `:trend-group-sort` |
"
  [^CfnDashboard$KPISortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :trend-group-sort)]
    (. builder trendGroupSort data))
  (.build builder))


(defn cfn-dashboard-kpi-sort-configuration-property-builder
  "Creates a  `CfnDashboard$KPISortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-kpi-sort-configuration-property-builder (new CfnDashboard$KPISortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-kpi-sparkline-options-property-builder
  "The build-cfn-dashboard-kpi-sparkline-options-property-builder function updates a CfnDashboard$KPISparklineOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$KPISparklineOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `tooltipVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-visibility` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$KPISparklineOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :tooltip-visibility)]
    (. builder tooltipVisibility data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-kpi-sparkline-options-property-builder
  "Creates a  `CfnDashboard$KPISparklineOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-kpi-sparkline-options-property-builder (new CfnDashboard$KPISparklineOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-kpi-visual-layout-options-property-builder
  "The build-cfn-dashboard-kpi-visual-layout-options-property-builder function updates a CfnDashboard$KPIVisualLayoutOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$KPIVisualLayoutOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `standardLayout` | software.amazon.awscdk.services.quicksight.CfnDashboard$KPIVisualStandardLayoutProperty | [[cdk.support/lookup-entry]] | `:standard-layout` |
"
  [^CfnDashboard$KPIVisualLayoutOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :standard-layout)]
    (. builder standardLayout data))
  (.build builder))


(defn cfn-dashboard-kpi-visual-layout-options-property-builder
  "Creates a  `CfnDashboard$KPIVisualLayoutOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-kpi-visual-layout-options-property-builder (new CfnDashboard$KPIVisualLayoutOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-kpi-visual-property-builder
  "The build-cfn-dashboard-kpi-visual-property-builder function updates a CfnDashboard$KPIVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$KPIVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$KPIConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `conditionalFormatting` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$KPIVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :conditional-formatting)]
    (. builder conditionalFormatting data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-kpi-visual-property-builder
  "Creates a  `CfnDashboard$KPIVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-kpi-visual-property-builder (new CfnDashboard$KPIVisualProperty$Builder) id config))


(defn build-cfn-dashboard-kpi-visual-standard-layout-property-builder
  "The build-cfn-dashboard-kpi-visual-standard-layout-property-builder function updates a CfnDashboard$KPIVisualStandardLayoutProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$KPIVisualStandardLayoutProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnDashboard$KPIVisualStandardLayoutProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-dashboard-kpi-visual-standard-layout-property-builder
  "Creates a  `CfnDashboard$KPIVisualStandardLayoutProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-kpi-visual-standard-layout-property-builder (new CfnDashboard$KPIVisualStandardLayoutProperty$Builder) id config))


(defn build-cfn-dashboard-label-options-property-builder
  "The build-cfn-dashboard-label-options-property-builder function updates a CfnDashboard$LabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$LabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-label-options-property-builder
  "Creates a  `CfnDashboard$LabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-label-options-property-builder (new CfnDashboard$LabelOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-layout-configuration-property-builder
  "The build-cfn-dashboard-layout-configuration-property-builder function updates a CfnDashboard$LayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeFormLayout` | software.amazon.awscdk.services.quicksight.CfnDashboard$FreeFormLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:free-form-layout` |
| `gridLayout` | software.amazon.awscdk.services.quicksight.CfnDashboard$GridLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:grid-layout` |
| `sectionBasedLayout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:section-based-layout` |
"
  [^CfnDashboard$LayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :free-form-layout)]
    (. builder freeFormLayout data))
  (when-let [data (lookup-entry config id :grid-layout)]
    (. builder gridLayout data))
  (when-let [data (lookup-entry config id :section-based-layout)]
    (. builder sectionBasedLayout data))
  (.build builder))


(defn cfn-dashboard-layout-configuration-property-builder
  "Creates a  `CfnDashboard$LayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-layout-configuration-property-builder (new CfnDashboard$LayoutConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-layout-property-builder
  "The build-cfn-dashboard-layout-property-builder function updates a CfnDashboard$LayoutProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LayoutProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configuration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:configuration` |
"
  [^CfnDashboard$LayoutProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :configuration)]
    (. builder configuration data))
  (.build builder))


(defn cfn-dashboard-layout-property-builder
  "Creates a  `CfnDashboard$LayoutProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-layout-property-builder (new CfnDashboard$LayoutProperty$Builder) id config))


(defn build-cfn-dashboard-legend-options-property-builder
  "The build-cfn-dashboard-legend-options-property-builder function updates a CfnDashboard$LegendOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LegendOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |
"
  [^CfnDashboard$LegendOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :height)]
    (. builder height data))
  (when-let [data (lookup-entry config id :position)]
    (. builder position data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (when-let [data (lookup-entry config id :width)]
    (. builder width data))
  (.build builder))


(defn cfn-dashboard-legend-options-property-builder
  "Creates a  `CfnDashboard$LegendOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-legend-options-property-builder (new CfnDashboard$LegendOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-line-chart-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-line-chart-aggregated-field-wells-property-builder function updates a CfnDashboard$LineChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LineChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
| `smallMultiples` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$LineChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :small-multiples)]
    (. builder smallMultiples data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-line-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$LineChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-line-chart-aggregated-field-wells-property-builder (new CfnDashboard$LineChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-line-chart-configuration-property-builder
  "The build-cfn-dashboard-line-chart-configuration-property-builder function updates a CfnDashboard$LineChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LineChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contributionAnalysisDefaults` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `defaultSeriesSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-series-settings` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$LineChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `forecastConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:forecast-configurations` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnDashboard$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `secondaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-y-axis-display-options` |
| `secondaryYAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-y-axis-label-options` |
| `series` | java.util.List | [[cdk.support/lookup-entry]] | `:series` |
| `smallMultiplesOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$SmallMultiplesOptionsProperty | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |
"
  [^CfnDashboard$LineChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
    (. builder contributionAnalysisDefaults data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :default-series-settings)]
    (. builder defaultSeriesSettings data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :forecast-configurations)]
    (. builder forecastConfigurations data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
    (. builder primaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
    (. builder primaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :reference-lines)]
    (. builder referenceLines data))
  (when-let [data (lookup-entry config id :secondary-y-axis-display-options)]
    (. builder secondaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :secondary-y-axis-label-options)]
    (. builder secondaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :series)]
    (. builder series data))
  (when-let [data (lookup-entry config id :small-multiples-options)]
    (. builder smallMultiplesOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (when-let [data (lookup-entry config id :x-axis-display-options)]
    (. builder xAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :x-axis-label-options)]
    (. builder xAxisLabelOptions data))
  (.build builder))


(defn cfn-dashboard-line-chart-configuration-property-builder
  "Creates a  `CfnDashboard$LineChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-line-chart-configuration-property-builder (new CfnDashboard$LineChartConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-line-chart-default-series-settings-property-builder
  "The build-cfn-dashboard-line-chart-default-series-settings-property-builder function updates a CfnDashboard$LineChartDefaultSeriesSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LineChartDefaultSeriesSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `lineStyleSettings` | software.amazon.awscdk.services.quicksight.CfnDashboard$LineChartLineStyleSettingsProperty | [[cdk.support/lookup-entry]] | `:line-style-settings` |
| `markerStyleSettings` | software.amazon.awscdk.services.quicksight.CfnDashboard$LineChartMarkerStyleSettingsProperty | [[cdk.support/lookup-entry]] | `:marker-style-settings` |
"
  [^CfnDashboard$LineChartDefaultSeriesSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-binding)]
    (. builder axisBinding data))
  (when-let [data (lookup-entry config id :line-style-settings)]
    (. builder lineStyleSettings data))
  (when-let [data (lookup-entry config id :marker-style-settings)]
    (. builder markerStyleSettings data))
  (.build builder))


(defn cfn-dashboard-line-chart-default-series-settings-property-builder
  "Creates a  `CfnDashboard$LineChartDefaultSeriesSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-line-chart-default-series-settings-property-builder (new CfnDashboard$LineChartDefaultSeriesSettingsProperty$Builder) id config))


(defn build-cfn-dashboard-line-chart-field-wells-property-builder
  "The build-cfn-dashboard-line-chart-field-wells-property-builder function updates a CfnDashboard$LineChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LineChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineChartAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$LineChartAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:line-chart-aggregated-field-wells` |
"
  [^CfnDashboard$LineChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :line-chart-aggregated-field-wells)]
    (. builder lineChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-line-chart-field-wells-property-builder
  "Creates a  `CfnDashboard$LineChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-line-chart-field-wells-property-builder (new CfnDashboard$LineChartFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-line-chart-line-style-settings-property-builder
  "The build-cfn-dashboard-line-chart-line-style-settings-property-builder function updates a CfnDashboard$LineChartLineStyleSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LineChartLineStyleSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineInterpolation` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-interpolation` |
| `lineStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-style` |
| `lineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-visibility` |
| `lineWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-width` |
"
  [^CfnDashboard$LineChartLineStyleSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :line-interpolation)]
    (. builder lineInterpolation data))
  (when-let [data (lookup-entry config id :line-style)]
    (. builder lineStyle data))
  (when-let [data (lookup-entry config id :line-visibility)]
    (. builder lineVisibility data))
  (when-let [data (lookup-entry config id :line-width)]
    (. builder lineWidth data))
  (.build builder))


(defn cfn-dashboard-line-chart-line-style-settings-property-builder
  "Creates a  `CfnDashboard$LineChartLineStyleSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-line-chart-line-style-settings-property-builder (new CfnDashboard$LineChartLineStyleSettingsProperty$Builder) id config))


(defn build-cfn-dashboard-line-chart-marker-style-settings-property-builder
  "The build-cfn-dashboard-line-chart-marker-style-settings-property-builder function updates a CfnDashboard$LineChartMarkerStyleSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LineChartMarkerStyleSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `markerColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-color` |
| `markerShape` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-shape` |
| `markerSize` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-size` |
| `markerVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-visibility` |
"
  [^CfnDashboard$LineChartMarkerStyleSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :marker-color)]
    (. builder markerColor data))
  (when-let [data (lookup-entry config id :marker-shape)]
    (. builder markerShape data))
  (when-let [data (lookup-entry config id :marker-size)]
    (. builder markerSize data))
  (when-let [data (lookup-entry config id :marker-visibility)]
    (. builder markerVisibility data))
  (.build builder))


(defn cfn-dashboard-line-chart-marker-style-settings-property-builder
  "Creates a  `CfnDashboard$LineChartMarkerStyleSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-line-chart-marker-style-settings-property-builder (new CfnDashboard$LineChartMarkerStyleSettingsProperty$Builder) id config))


(defn build-cfn-dashboard-line-chart-series-settings-property-builder
  "The build-cfn-dashboard-line-chart-series-settings-property-builder function updates a CfnDashboard$LineChartSeriesSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LineChartSeriesSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineStyleSettings` | software.amazon.awscdk.services.quicksight.CfnDashboard$LineChartLineStyleSettingsProperty | [[cdk.support/lookup-entry]] | `:line-style-settings` |
| `markerStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:marker-style-settings` |
"
  [^CfnDashboard$LineChartSeriesSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :line-style-settings)]
    (. builder lineStyleSettings data))
  (when-let [data (lookup-entry config id :marker-style-settings)]
    (. builder markerStyleSettings data))
  (.build builder))


(defn cfn-dashboard-line-chart-series-settings-property-builder
  "Creates a  `CfnDashboard$LineChartSeriesSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-line-chart-series-settings-property-builder (new CfnDashboard$LineChartSeriesSettingsProperty$Builder) id config))


(defn build-cfn-dashboard-line-chart-sort-configuration-property-builder
  "The build-cfn-dashboard-line-chart-sort-configuration-property-builder function updates a CfnDashboard$LineChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LineChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit-configuration` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:color-items-limit-configuration` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |
"
  [^CfnDashboard$LineChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit-configuration)]
    (. builder categoryItemsLimitConfiguration data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :color-items-limit-configuration)]
    (. builder colorItemsLimitConfiguration data))
  (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
    (. builder smallMultiplesLimitConfiguration data))
  (when-let [data (lookup-entry config id :small-multiples-sort)]
    (. builder smallMultiplesSort data))
  (.build builder))


(defn cfn-dashboard-line-chart-sort-configuration-property-builder
  "Creates a  `CfnDashboard$LineChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-line-chart-sort-configuration-property-builder (new CfnDashboard$LineChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-line-chart-visual-property-builder
  "The build-cfn-dashboard-line-chart-visual-property-builder function updates a CfnDashboard$LineChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LineChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$LineChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$LineChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-line-chart-visual-property-builder
  "Creates a  `CfnDashboard$LineChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-line-chart-visual-property-builder (new CfnDashboard$LineChartVisualProperty$Builder) id config))


(defn build-cfn-dashboard-line-series-axis-display-options-property-builder
  "The build-cfn-dashboard-line-series-axis-display-options-property-builder function updates a CfnDashboard$LineSeriesAxisDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LineSeriesAxisDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:axis-options` |
| `missingDataConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:missing-data-configurations` |
"
  [^CfnDashboard$LineSeriesAxisDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-options)]
    (. builder axisOptions data))
  (when-let [data (lookup-entry config id :missing-data-configurations)]
    (. builder missingDataConfigurations data))
  (.build builder))


(defn cfn-dashboard-line-series-axis-display-options-property-builder
  "Creates a  `CfnDashboard$LineSeriesAxisDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-line-series-axis-display-options-property-builder (new CfnDashboard$LineSeriesAxisDisplayOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-link-sharing-configuration-property-builder
  "The build-cfn-dashboard-link-sharing-configuration-property-builder function updates a CfnDashboard$LinkSharingConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LinkSharingConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `permissions` | java.util.List | [[cdk.support/lookup-entry]] | `:permissions` |
"
  [^CfnDashboard$LinkSharingConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :permissions)]
    (. builder permissions data))
  (.build builder))


(defn cfn-dashboard-link-sharing-configuration-property-builder
  "Creates a  `CfnDashboard$LinkSharingConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-link-sharing-configuration-property-builder (new CfnDashboard$LinkSharingConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-list-control-display-options-property-builder
  "The build-cfn-dashboard-list-control-display-options-property-builder function updates a CfnDashboard$ListControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ListControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `searchOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ListControlSearchOptionsProperty | [[cdk.support/lookup-entry]] | `:search-options` |
| `selectAllOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ListControlSelectAllOptionsProperty | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnDashboard$ListControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :search-options)]
    (. builder searchOptions data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-dashboard-list-control-display-options-property-builder
  "Creates a  `CfnDashboard$ListControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-list-control-display-options-property-builder (new CfnDashboard$ListControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-list-control-search-options-property-builder
  "The build-cfn-dashboard-list-control-search-options-property-builder function updates a CfnDashboard$ListControlSearchOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ListControlSearchOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$ListControlSearchOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-list-control-search-options-property-builder
  "Creates a  `CfnDashboard$ListControlSearchOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-list-control-search-options-property-builder (new CfnDashboard$ListControlSearchOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-list-control-select-all-options-property-builder
  "The build-cfn-dashboard-list-control-select-all-options-property-builder function updates a CfnDashboard$ListControlSelectAllOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ListControlSelectAllOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$ListControlSelectAllOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-list-control-select-all-options-property-builder
  "Creates a  `CfnDashboard$ListControlSelectAllOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-list-control-select-all-options-property-builder (new CfnDashboard$ListControlSelectAllOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-loading-animation-property-builder
  "The build-cfn-dashboard-loading-animation-property-builder function updates a CfnDashboard$LoadingAnimationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LoadingAnimationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$LoadingAnimationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-loading-animation-property-builder
  "Creates a  `CfnDashboard$LoadingAnimationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-loading-animation-property-builder (new CfnDashboard$LoadingAnimationProperty$Builder) id config))


(defn build-cfn-dashboard-local-navigation-configuration-property-builder
  "The build-cfn-dashboard-local-navigation-configuration-property-builder function updates a CfnDashboard$LocalNavigationConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LocalNavigationConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetSheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:target-sheet-id` |
"
  [^CfnDashboard$LocalNavigationConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :target-sheet-id)]
    (. builder targetSheetId data))
  (.build builder))


(defn cfn-dashboard-local-navigation-configuration-property-builder
  "Creates a  `CfnDashboard$LocalNavigationConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-local-navigation-configuration-property-builder (new CfnDashboard$LocalNavigationConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-long-format-text-property-builder
  "The build-cfn-dashboard-long-format-text-property-builder function updates a CfnDashboard$LongFormatTextProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$LongFormatTextProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `plainText` | java.lang.String | [[cdk.support/lookup-entry]] | `:plain-text` |
| `richText` | java.lang.String | [[cdk.support/lookup-entry]] | `:rich-text` |
"
  [^CfnDashboard$LongFormatTextProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :plain-text)]
    (. builder plainText data))
  (when-let [data (lookup-entry config id :rich-text)]
    (. builder richText data))
  (.build builder))


(defn cfn-dashboard-long-format-text-property-builder
  "Creates a  `CfnDashboard$LongFormatTextProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-long-format-text-property-builder (new CfnDashboard$LongFormatTextProperty$Builder) id config))


(defn build-cfn-dashboard-mapped-data-set-parameter-property-builder
  "The build-cfn-dashboard-mapped-data-set-parameter-property-builder function updates a CfnDashboard$MappedDataSetParameterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$MappedDataSetParameterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `dataSetParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-parameter-name` |
"
  [^CfnDashboard$MappedDataSetParameterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :data-set-parameter-name)]
    (. builder dataSetParameterName data))
  (.build builder))


(defn cfn-dashboard-mapped-data-set-parameter-property-builder
  "Creates a  `CfnDashboard$MappedDataSetParameterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-mapped-data-set-parameter-property-builder (new CfnDashboard$MappedDataSetParameterProperty$Builder) id config))


(defn build-cfn-dashboard-maximum-label-type-property-builder
  "The build-cfn-dashboard-maximum-label-type-property-builder function updates a CfnDashboard$MaximumLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$MaximumLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$MaximumLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-maximum-label-type-property-builder
  "Creates a  `CfnDashboard$MaximumLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-maximum-label-type-property-builder (new CfnDashboard$MaximumLabelTypeProperty$Builder) id config))


(defn build-cfn-dashboard-maximum-minimum-computation-property-builder
  "The build-cfn-dashboard-maximum-minimum-computation-property-builder function updates a CfnDashboard$MaximumMinimumComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$MaximumMinimumComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `time` | software.amazon.awscdk.services.quicksight.CfnDashboard$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$MaximumMinimumComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-maximum-minimum-computation-property-builder
  "Creates a  `CfnDashboard$MaximumMinimumComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-maximum-minimum-computation-property-builder (new CfnDashboard$MaximumMinimumComputationProperty$Builder) id config))


(defn build-cfn-dashboard-measure-field-property-builder
  "The build-cfn-dashboard-measure-field-property-builder function updates a CfnDashboard$MeasureFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$MeasureFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `calculatedMeasureField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:calculated-measure-field` |
| `categoricalMeasureField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:categorical-measure-field` |
| `dateMeasureField` | software.amazon.awscdk.services.quicksight.CfnDashboard$DateMeasureFieldProperty | [[cdk.support/lookup-entry]] | `:date-measure-field` |
| `numericalMeasureField` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumericalMeasureFieldProperty | [[cdk.support/lookup-entry]] | `:numerical-measure-field` |
"
  [^CfnDashboard$MeasureFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :calculated-measure-field)]
    (. builder calculatedMeasureField data))
  (when-let [data (lookup-entry config id :categorical-measure-field)]
    (. builder categoricalMeasureField data))
  (when-let [data (lookup-entry config id :date-measure-field)]
    (. builder dateMeasureField data))
  (when-let [data (lookup-entry config id :numerical-measure-field)]
    (. builder numericalMeasureField data))
  (.build builder))


(defn cfn-dashboard-measure-field-property-builder
  "Creates a  `CfnDashboard$MeasureFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-measure-field-property-builder (new CfnDashboard$MeasureFieldProperty$Builder) id config))


(defn build-cfn-dashboard-metric-comparison-computation-property-builder
  "The build-cfn-dashboard-metric-comparison-computation-property-builder function updates a CfnDashboard$MetricComparisonComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$MetricComparisonComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `fromValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:from-value` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `targetValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target-value` |
| `time` | software.amazon.awscdk.services.quicksight.CfnDashboard$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |
"
  [^CfnDashboard$MetricComparisonComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :from-value)]
    (. builder fromValue data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :target-value)]
    (. builder targetValue data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (.build builder))


(defn cfn-dashboard-metric-comparison-computation-property-builder
  "Creates a  `CfnDashboard$MetricComparisonComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-metric-comparison-computation-property-builder (new CfnDashboard$MetricComparisonComputationProperty$Builder) id config))


(defn build-cfn-dashboard-minimum-label-type-property-builder
  "The build-cfn-dashboard-minimum-label-type-property-builder function updates a CfnDashboard$MinimumLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$MinimumLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$MinimumLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-minimum-label-type-property-builder
  "Creates a  `CfnDashboard$MinimumLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-minimum-label-type-property-builder (new CfnDashboard$MinimumLabelTypeProperty$Builder) id config))


(defn build-cfn-dashboard-missing-data-configuration-property-builder
  "The build-cfn-dashboard-missing-data-configuration-property-builder function updates a CfnDashboard$MissingDataConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$MissingDataConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treatmentOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:treatment-option` |
"
  [^CfnDashboard$MissingDataConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :treatment-option)]
    (. builder treatmentOption data))
  (.build builder))


(defn cfn-dashboard-missing-data-configuration-property-builder
  "Creates a  `CfnDashboard$MissingDataConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-missing-data-configuration-property-builder (new CfnDashboard$MissingDataConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-negative-value-configuration-property-builder
  "The build-cfn-dashboard-negative-value-configuration-property-builder function updates a CfnDashboard$NegativeValueConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$NegativeValueConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayMode` | java.lang.String | [[cdk.support/lookup-entry]] | `:display-mode` |
"
  [^CfnDashboard$NegativeValueConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-mode)]
    (. builder displayMode data))
  (.build builder))


(defn cfn-dashboard-negative-value-configuration-property-builder
  "Creates a  `CfnDashboard$NegativeValueConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-negative-value-configuration-property-builder (new CfnDashboard$NegativeValueConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-null-value-format-configuration-property-builder
  "The build-cfn-dashboard-null-value-format-configuration-property-builder function updates a CfnDashboard$NullValueFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$NullValueFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `nullString` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-string` |
"
  [^CfnDashboard$NullValueFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :null-string)]
    (. builder nullString data))
  (.build builder))


(defn cfn-dashboard-null-value-format-configuration-property-builder
  "Creates a  `CfnDashboard$NullValueFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-null-value-format-configuration-property-builder (new CfnDashboard$NullValueFormatConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-number-display-format-configuration-property-builder
  "The build-cfn-dashboard-number-display-format-configuration-property-builder function updates a CfnDashboard$NumberDisplayFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$NumberDisplayFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DecimalPlacesConfigurationProperty | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NegativeValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numberScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:number-scale` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |
"
  [^CfnDashboard$NumberDisplayFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :decimal-places-configuration)]
    (. builder decimalPlacesConfiguration data))
  (when-let [data (lookup-entry config id :negative-value-configuration)]
    (. builder negativeValueConfiguration data))
  (when-let [data (lookup-entry config id :null-value-format-configuration)]
    (. builder nullValueFormatConfiguration data))
  (when-let [data (lookup-entry config id :number-scale)]
    (. builder numberScale data))
  (when-let [data (lookup-entry config id :prefix)]
    (. builder prefix data))
  (when-let [data (lookup-entry config id :separator-configuration)]
    (. builder separatorConfiguration data))
  (when-let [data (lookup-entry config id :suffix)]
    (. builder suffix data))
  (.build builder))


(defn cfn-dashboard-number-display-format-configuration-property-builder
  "Creates a  `CfnDashboard$NumberDisplayFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-number-display-format-configuration-property-builder (new CfnDashboard$NumberDisplayFormatConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-number-format-configuration-property-builder
  "The build-cfn-dashboard-number-format-configuration-property-builder function updates a CfnDashboard$NumberFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$NumberFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
"
  [^CfnDashboard$NumberFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (.build builder))


(defn cfn-dashboard-number-format-configuration-property-builder
  "Creates a  `CfnDashboard$NumberFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-number-format-configuration-property-builder (new CfnDashboard$NumberFormatConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-numeric-axis-options-property-builder
  "The build-cfn-dashboard-numeric-axis-options-property-builder function updates a CfnDashboard$NumericAxisOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$NumericAxisOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `range` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range` |
| `scale` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisScaleProperty | [[cdk.support/lookup-entry]] | `:scale` |
"
  [^CfnDashboard$NumericAxisOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :range)]
    (. builder range data))
  (when-let [data (lookup-entry config id :scale)]
    (. builder scale data))
  (.build builder))


(defn cfn-dashboard-numeric-axis-options-property-builder
  "Creates a  `CfnDashboard$NumericAxisOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-numeric-axis-options-property-builder (new CfnDashboard$NumericAxisOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-numeric-equality-drill-down-filter-property-builder
  "The build-cfn-dashboard-numeric-equality-drill-down-filter-property-builder function updates a CfnDashboard$NumericEqualityDrillDownFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$NumericEqualityDrillDownFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$NumericEqualityDrillDownFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-numeric-equality-drill-down-filter-property-builder
  "Creates a  `CfnDashboard$NumericEqualityDrillDownFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-numeric-equality-drill-down-filter-property-builder (new CfnDashboard$NumericEqualityDrillDownFilterProperty$Builder) id config))


(defn build-cfn-dashboard-numeric-equality-filter-property-builder
  "The build-cfn-dashboard-numeric-equality-filter-property-builder function updates a CfnDashboard$NumericEqualityFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$NumericEqualityFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnDashboard$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$NumericEqualityFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :match-operator)]
    (. builder matchOperator data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-numeric-equality-filter-property-builder
  "Creates a  `CfnDashboard$NumericEqualityFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-numeric-equality-filter-property-builder (new CfnDashboard$NumericEqualityFilterProperty$Builder) id config))


(defn build-cfn-dashboard-numeric-format-configuration-property-builder
  "The build-cfn-dashboard-numeric-format-configuration-property-builder function updates a CfnDashboard$NumericFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$NumericFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `currencyDisplayFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$CurrencyDisplayFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:currency-display-format-configuration` |
| `numberDisplayFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumberDisplayFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:number-display-format-configuration` |
| `percentageDisplayFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:percentage-display-format-configuration` |
"
  [^CfnDashboard$NumericFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :currency-display-format-configuration)]
    (. builder currencyDisplayFormatConfiguration data))
  (when-let [data (lookup-entry config id :number-display-format-configuration)]
    (. builder numberDisplayFormatConfiguration data))
  (when-let [data (lookup-entry config id :percentage-display-format-configuration)]
    (. builder percentageDisplayFormatConfiguration data))
  (.build builder))


(defn cfn-dashboard-numeric-format-configuration-property-builder
  "Creates a  `CfnDashboard$NumericFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-numeric-format-configuration-property-builder (new CfnDashboard$NumericFormatConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-numeric-range-filter-property-builder
  "The build-cfn-dashboard-numeric-range-filter-property-builder function updates a CfnDashboard$NumericRangeFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$NumericRangeFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnDashboard$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `includeMaximum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-maximum` |
| `includeMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-minimum` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `rangeMaximum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-maximum` |
| `rangeMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-minimum` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
"
  [^CfnDashboard$NumericRangeFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :include-maximum)]
    (. builder includeMaximum data))
  (when-let [data (lookup-entry config id :include-minimum)]
    (. builder includeMinimum data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :range-maximum)]
    (. builder rangeMaximum data))
  (when-let [data (lookup-entry config id :range-minimum)]
    (. builder rangeMinimum data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (.build builder))


(defn cfn-dashboard-numeric-range-filter-property-builder
  "Creates a  `CfnDashboard$NumericRangeFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-numeric-range-filter-property-builder (new CfnDashboard$NumericRangeFilterProperty$Builder) id config))


(defn build-cfn-dashboard-numeric-range-filter-value-property-builder
  "The build-cfn-dashboard-numeric-range-filter-value-property-builder function updates a CfnDashboard$NumericRangeFilterValueProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$NumericRangeFilterValueProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameter` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter` |
| `staticValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:static-value` |
"
  [^CfnDashboard$NumericRangeFilterValueProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :parameter)]
    (. builder parameter data))
  (when-let [data (lookup-entry config id :static-value)]
    (. builder staticValue data))
  (.build builder))


(defn cfn-dashboard-numeric-range-filter-value-property-builder
  "Creates a  `CfnDashboard$NumericRangeFilterValueProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-numeric-range-filter-value-property-builder (new CfnDashboard$NumericRangeFilterValueProperty$Builder) id config))


(defn build-cfn-dashboard-numeric-separator-configuration-property-builder
  "The build-cfn-dashboard-numeric-separator-configuration-property-builder function updates a CfnDashboard$NumericSeparatorConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$NumericSeparatorConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalSeparator` | java.lang.String | [[cdk.support/lookup-entry]] | `:decimal-separator` |
| `thousandsSeparator` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:thousands-separator` |
"
  [^CfnDashboard$NumericSeparatorConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :decimal-separator)]
    (. builder decimalSeparator data))
  (when-let [data (lookup-entry config id :thousands-separator)]
    (. builder thousandsSeparator data))
  (.build builder))


(defn cfn-dashboard-numeric-separator-configuration-property-builder
  "Creates a  `CfnDashboard$NumericSeparatorConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-numeric-separator-configuration-property-builder (new CfnDashboard$NumericSeparatorConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-numerical-aggregation-function-property-builder
  "The build-cfn-dashboard-numerical-aggregation-function-property-builder function updates a CfnDashboard$NumericalAggregationFunctionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$NumericalAggregationFunctionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentileAggregation` | software.amazon.awscdk.services.quicksight.CfnDashboard$PercentileAggregationProperty | [[cdk.support/lookup-entry]] | `:percentile-aggregation` |
| `simpleNumericalAggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-numerical-aggregation` |
"
  [^CfnDashboard$NumericalAggregationFunctionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :percentile-aggregation)]
    (. builder percentileAggregation data))
  (when-let [data (lookup-entry config id :simple-numerical-aggregation)]
    (. builder simpleNumericalAggregation data))
  (.build builder))


(defn cfn-dashboard-numerical-aggregation-function-property-builder
  "Creates a  `CfnDashboard$NumericalAggregationFunctionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-numerical-aggregation-function-property-builder (new CfnDashboard$NumericalAggregationFunctionProperty$Builder) id config))


(defn build-cfn-dashboard-numerical-dimension-field-property-builder
  "The build-cfn-dashboard-numerical-dimension-field-property-builder function updates a CfnDashboard$NumericalDimensionFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$NumericalDimensionFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnDashboard$NumericalDimensionFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-dashboard-numerical-dimension-field-property-builder
  "Creates a  `CfnDashboard$NumericalDimensionFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-numerical-dimension-field-property-builder (new CfnDashboard$NumericalDimensionFieldProperty$Builder) id config))


(defn build-cfn-dashboard-numerical-measure-field-property-builder
  "The build-cfn-dashboard-numerical-measure-field-property-builder function updates a CfnDashboard$NumericalMeasureFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$NumericalMeasureFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumberFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
"
  [^CfnDashboard$NumericalMeasureFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (.build builder))


(defn cfn-dashboard-numerical-measure-field-property-builder
  "Creates a  `CfnDashboard$NumericalMeasureFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-numerical-measure-field-property-builder (new CfnDashboard$NumericalMeasureFieldProperty$Builder) id config))


(defn build-cfn-dashboard-pagination-configuration-property-builder
  "The build-cfn-dashboard-pagination-configuration-property-builder function updates a CfnDashboard$PaginationConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PaginationConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pageNumber` | java.lang.Number | [[cdk.support/lookup-entry]] | `:page-number` |
| `pageSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:page-size` |
"
  [^CfnDashboard$PaginationConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :page-number)]
    (. builder pageNumber data))
  (when-let [data (lookup-entry config id :page-size)]
    (. builder pageSize data))
  (.build builder))


(defn cfn-dashboard-pagination-configuration-property-builder
  "Creates a  `CfnDashboard$PaginationConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pagination-configuration-property-builder (new CfnDashboard$PaginationConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-panel-configuration-property-builder
  "The build-cfn-dashboard-panel-configuration-property-builder function updates a CfnDashboard$PanelConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PanelConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-color` |
| `backgroundVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-visibility` |
| `borderColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-color` |
| `borderStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-style` |
| `borderThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-thickness` |
| `borderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-visibility` |
| `gutterSpacing` | java.lang.String | [[cdk.support/lookup-entry]] | `:gutter-spacing` |
| `gutterVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:gutter-visibility` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$PanelTitleOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnDashboard$PanelConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-color)]
    (. builder backgroundColor data))
  (when-let [data (lookup-entry config id :background-visibility)]
    (. builder backgroundVisibility data))
  (when-let [data (lookup-entry config id :border-color)]
    (. builder borderColor data))
  (when-let [data (lookup-entry config id :border-style)]
    (. builder borderStyle data))
  (when-let [data (lookup-entry config id :border-thickness)]
    (. builder borderThickness data))
  (when-let [data (lookup-entry config id :border-visibility)]
    (. builder borderVisibility data))
  (when-let [data (lookup-entry config id :gutter-spacing)]
    (. builder gutterSpacing data))
  (when-let [data (lookup-entry config id :gutter-visibility)]
    (. builder gutterVisibility data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-dashboard-panel-configuration-property-builder
  "Creates a  `CfnDashboard$PanelConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-panel-configuration-property-builder (new CfnDashboard$PanelConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-panel-title-options-property-builder
  "The build-cfn-dashboard-panel-title-options-property-builder function updates a CfnDashboard$PanelTitleOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PanelTitleOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `horizontalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-text-alignment` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$PanelTitleOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (when-let [data (lookup-entry config id :horizontal-text-alignment)]
    (. builder horizontalTextAlignment data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-panel-title-options-property-builder
  "Creates a  `CfnDashboard$PanelTitleOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-panel-title-options-property-builder (new CfnDashboard$PanelTitleOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-parameter-control-property-builder
  "The build-cfn-dashboard-parameter-control-property-builder function updates a CfnDashboard$ParameterControlProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ParameterControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimePicker` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-time-picker` |
| `dropdown` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dropdown` |
| `list` | software.amazon.awscdk.services.quicksight.CfnDashboard$ParameterListControlProperty | [[cdk.support/lookup-entry]] | `:list` |
| `slider` | software.amazon.awscdk.services.quicksight.CfnDashboard$ParameterSliderControlProperty | [[cdk.support/lookup-entry]] | `:slider` |
| `textArea` | software.amazon.awscdk.services.quicksight.CfnDashboard$ParameterTextAreaControlProperty | [[cdk.support/lookup-entry]] | `:text-area` |
| `textField` | software.amazon.awscdk.services.quicksight.CfnDashboard$ParameterTextFieldControlProperty | [[cdk.support/lookup-entry]] | `:text-field` |
"
  [^CfnDashboard$ParameterControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-picker)]
    (. builder dateTimePicker data))
  (when-let [data (lookup-entry config id :dropdown)]
    (. builder dropdown data))
  (when-let [data (lookup-entry config id :list)]
    (. builder list data))
  (when-let [data (lookup-entry config id :slider)]
    (. builder slider data))
  (when-let [data (lookup-entry config id :text-area)]
    (. builder textArea data))
  (when-let [data (lookup-entry config id :text-field)]
    (. builder textField data))
  (.build builder))


(defn cfn-dashboard-parameter-control-property-builder
  "Creates a  `CfnDashboard$ParameterControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-parameter-control-property-builder (new CfnDashboard$ParameterControlProperty$Builder) id config))


(defn build-cfn-dashboard-parameter-date-time-picker-control-property-builder
  "The build-cfn-dashboard-parameter-date-time-picker-control-property-builder function updates a CfnDashboard$ParameterDateTimePickerControlProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ParameterDateTimePickerControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnDashboard$ParameterDateTimePickerControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-dashboard-parameter-date-time-picker-control-property-builder
  "Creates a  `CfnDashboard$ParameterDateTimePickerControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-parameter-date-time-picker-control-property-builder (new CfnDashboard$ParameterDateTimePickerControlProperty$Builder) id config))


(defn build-cfn-dashboard-parameter-declaration-property-builder
  "The build-cfn-dashboard-parameter-declaration-property-builder function updates a CfnDashboard$ParameterDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ParameterDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeParameterDeclaration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-time-parameter-declaration` |
| `decimalParameterDeclaration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-parameter-declaration` |
| `integerParameterDeclaration` | software.amazon.awscdk.services.quicksight.CfnDashboard$IntegerParameterDeclarationProperty | [[cdk.support/lookup-entry]] | `:integer-parameter-declaration` |
| `stringParameterDeclaration` | software.amazon.awscdk.services.quicksight.CfnDashboard$StringParameterDeclarationProperty | [[cdk.support/lookup-entry]] | `:string-parameter-declaration` |
"
  [^CfnDashboard$ParameterDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-parameter-declaration)]
    (. builder dateTimeParameterDeclaration data))
  (when-let [data (lookup-entry config id :decimal-parameter-declaration)]
    (. builder decimalParameterDeclaration data))
  (when-let [data (lookup-entry config id :integer-parameter-declaration)]
    (. builder integerParameterDeclaration data))
  (when-let [data (lookup-entry config id :string-parameter-declaration)]
    (. builder stringParameterDeclaration data))
  (.build builder))


(defn cfn-dashboard-parameter-declaration-property-builder
  "Creates a  `CfnDashboard$ParameterDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-parameter-declaration-property-builder (new CfnDashboard$ParameterDeclarationProperty$Builder) id config))


(defn build-cfn-dashboard-parameter-drop-down-control-property-builder
  "The build-cfn-dashboard-parameter-drop-down-control-property-builder function updates a CfnDashboard$ParameterDropDownControlProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ParameterDropDownControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$DropDownControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `selectableValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnDashboard$ParameterDropDownControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cascading-control-configuration)]
    (. builder cascadingControlConfiguration data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-dashboard-parameter-drop-down-control-property-builder
  "Creates a  `CfnDashboard$ParameterDropDownControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-parameter-drop-down-control-property-builder (new CfnDashboard$ParameterDropDownControlProperty$Builder) id config))


(defn build-cfn-dashboard-parameter-list-control-property-builder
  "The build-cfn-dashboard-parameter-list-control-property-builder function updates a CfnDashboard$ParameterListControlProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ParameterListControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ListControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `selectableValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnDashboard$ParameterListControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cascading-control-configuration)]
    (. builder cascadingControlConfiguration data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-dashboard-parameter-list-control-property-builder
  "Creates a  `CfnDashboard$ParameterListControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-parameter-list-control-property-builder (new CfnDashboard$ParameterListControlProperty$Builder) id config))


(defn build-cfn-dashboard-parameter-selectable-values-property-builder
  "The build-cfn-dashboard-parameter-selectable-values-property-builder function updates a CfnDashboard$ParameterSelectableValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ParameterSelectableValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `linkToDataSetColumn` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:link-to-data-set-column` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$ParameterSelectableValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :link-to-data-set-column)]
    (. builder linkToDataSetColumn data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-parameter-selectable-values-property-builder
  "Creates a  `CfnDashboard$ParameterSelectableValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-parameter-selectable-values-property-builder (new CfnDashboard$ParameterSelectableValuesProperty$Builder) id config))


(defn build-cfn-dashboard-parameter-slider-control-property-builder
  "The build-cfn-dashboard-parameter-slider-control-property-builder function updates a CfnDashboard$ParameterSliderControlProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ParameterSliderControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnDashboard$ParameterSliderControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :maximum-value)]
    (. builder maximumValue data))
  (when-let [data (lookup-entry config id :minimum-value)]
    (. builder minimumValue data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :step-size)]
    (. builder stepSize data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-dashboard-parameter-slider-control-property-builder
  "Creates a  `CfnDashboard$ParameterSliderControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-parameter-slider-control-property-builder (new CfnDashboard$ParameterSliderControlProperty$Builder) id config))


(defn build-cfn-dashboard-parameter-text-area-control-property-builder
  "The build-cfn-dashboard-parameter-text-area-control-property-builder function updates a CfnDashboard$ParameterTextAreaControlProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ParameterTextAreaControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnDashboard$ParameterTextAreaControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :delimiter)]
    (. builder delimiter data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-dashboard-parameter-text-area-control-property-builder
  "Creates a  `CfnDashboard$ParameterTextAreaControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-parameter-text-area-control-property-builder (new CfnDashboard$ParameterTextAreaControlProperty$Builder) id config))


(defn build-cfn-dashboard-parameter-text-field-control-property-builder
  "The build-cfn-dashboard-parameter-text-field-control-property-builder function updates a CfnDashboard$ParameterTextFieldControlProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ParameterTextFieldControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnDashboard$ParameterTextFieldControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-dashboard-parameter-text-field-control-property-builder
  "Creates a  `CfnDashboard$ParameterTextFieldControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-parameter-text-field-control-property-builder (new CfnDashboard$ParameterTextFieldControlProperty$Builder) id config))


(defn build-cfn-dashboard-parameters-property-builder
  "The build-cfn-dashboard-parameters-property-builder function updates a CfnDashboard$ParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:date-time-parameters` |
| `decimalParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:decimal-parameters` |
| `integerParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:integer-parameters` |
| `stringParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:string-parameters` |
"
  [^CfnDashboard$ParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-parameters)]
    (. builder dateTimeParameters data))
  (when-let [data (lookup-entry config id :decimal-parameters)]
    (. builder decimalParameters data))
  (when-let [data (lookup-entry config id :integer-parameters)]
    (. builder integerParameters data))
  (when-let [data (lookup-entry config id :string-parameters)]
    (. builder stringParameters data))
  (.build builder))


(defn cfn-dashboard-parameters-property-builder
  "Creates a  `CfnDashboard$ParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-parameters-property-builder (new CfnDashboard$ParametersProperty$Builder) id config))


(defn build-cfn-dashboard-percent-visible-range-property-builder
  "The build-cfn-dashboard-percent-visible-range-property-builder function updates a CfnDashboard$PercentVisibleRangeProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PercentVisibleRangeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `from` | java.lang.Number | [[cdk.support/lookup-entry]] | `:from` |
| `to` | java.lang.Number | [[cdk.support/lookup-entry]] | `:to` |
"
  [^CfnDashboard$PercentVisibleRangeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :from)]
    (. builder from data))
  (when-let [data (lookup-entry config id :to)]
    (. builder to data))
  (.build builder))


(defn cfn-dashboard-percent-visible-range-property-builder
  "Creates a  `CfnDashboard$PercentVisibleRangeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-percent-visible-range-property-builder (new CfnDashboard$PercentVisibleRangeProperty$Builder) id config))


(defn build-cfn-dashboard-percentage-display-format-configuration-property-builder
  "The build-cfn-dashboard-percentage-display-format-configuration-property-builder function updates a CfnDashboard$PercentageDisplayFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PercentageDisplayFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DecimalPlacesConfigurationProperty | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |
"
  [^CfnDashboard$PercentageDisplayFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :decimal-places-configuration)]
    (. builder decimalPlacesConfiguration data))
  (when-let [data (lookup-entry config id :negative-value-configuration)]
    (. builder negativeValueConfiguration data))
  (when-let [data (lookup-entry config id :null-value-format-configuration)]
    (. builder nullValueFormatConfiguration data))
  (when-let [data (lookup-entry config id :prefix)]
    (. builder prefix data))
  (when-let [data (lookup-entry config id :separator-configuration)]
    (. builder separatorConfiguration data))
  (when-let [data (lookup-entry config id :suffix)]
    (. builder suffix data))
  (.build builder))


(defn cfn-dashboard-percentage-display-format-configuration-property-builder
  "Creates a  `CfnDashboard$PercentageDisplayFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-percentage-display-format-configuration-property-builder (new CfnDashboard$PercentageDisplayFormatConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-percentile-aggregation-property-builder
  "The build-cfn-dashboard-percentile-aggregation-property-builder function updates a CfnDashboard$PercentileAggregationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PercentileAggregationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentileValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:percentile-value` |
"
  [^CfnDashboard$PercentileAggregationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :percentile-value)]
    (. builder percentileValue data))
  (.build builder))


(defn cfn-dashboard-percentile-aggregation-property-builder
  "Creates a  `CfnDashboard$PercentileAggregationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-percentile-aggregation-property-builder (new CfnDashboard$PercentileAggregationProperty$Builder) id config))


(defn build-cfn-dashboard-period-over-period-computation-property-builder
  "The build-cfn-dashboard-period-over-period-computation-property-builder function updates a CfnDashboard$PeriodOverPeriodComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PeriodOverPeriodComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.services.quicksight.CfnDashboard$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$PeriodOverPeriodComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-period-over-period-computation-property-builder
  "Creates a  `CfnDashboard$PeriodOverPeriodComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-period-over-period-computation-property-builder (new CfnDashboard$PeriodOverPeriodComputationProperty$Builder) id config))


(defn build-cfn-dashboard-period-to-date-computation-property-builder
  "The build-cfn-dashboard-period-to-date-computation-property-builder function updates a CfnDashboard$PeriodToDateComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PeriodToDateComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodTimeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:period-time-granularity` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$PeriodToDateComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :period-time-granularity)]
    (. builder periodTimeGranularity data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-period-to-date-computation-property-builder
  "Creates a  `CfnDashboard$PeriodToDateComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-period-to-date-computation-property-builder (new CfnDashboard$PeriodToDateComputationProperty$Builder) id config))


(defn build-cfn-dashboard-pie-chart-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-pie-chart-aggregated-field-wells-property-builder function updates a CfnDashboard$PieChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PieChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `smallMultiples` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$PieChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :small-multiples)]
    (. builder smallMultiples data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-pie-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$PieChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pie-chart-aggregated-field-wells-property-builder (new CfnDashboard$PieChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-pie-chart-configuration-property-builder
  "The build-cfn-dashboard-pie-chart-configuration-property-builder function updates a CfnDashboard$PieChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PieChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `contributionAnalysisDefaults` | java.util.List | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `donutOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$DonutOptionsProperty | [[cdk.support/lookup-entry]] | `:donut-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `smallMultiplesOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$SmallMultiplesOptionsProperty | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$PieChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnDashboard$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnDashboard$PieChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
    (. builder contributionAnalysisDefaults data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :donut-options)]
    (. builder donutOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :small-multiples-options)]
    (. builder smallMultiplesOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :value-label-options)]
    (. builder valueLabelOptions data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-dashboard-pie-chart-configuration-property-builder
  "Creates a  `CfnDashboard$PieChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pie-chart-configuration-property-builder (new CfnDashboard$PieChartConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-pie-chart-field-wells-property-builder
  "The build-cfn-dashboard-pie-chart-field-wells-property-builder function updates a CfnDashboard$PieChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PieChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pieChartAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$PieChartAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:pie-chart-aggregated-field-wells` |
"
  [^CfnDashboard$PieChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :pie-chart-aggregated-field-wells)]
    (. builder pieChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-pie-chart-field-wells-property-builder
  "Creates a  `CfnDashboard$PieChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pie-chart-field-wells-property-builder (new CfnDashboard$PieChartFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-pie-chart-sort-configuration-property-builder
  "The build-cfn-dashboard-pie-chart-sort-configuration-property-builder function updates a CfnDashboard$PieChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PieChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |
"
  [^CfnDashboard$PieChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
    (. builder smallMultiplesLimitConfiguration data))
  (when-let [data (lookup-entry config id :small-multiples-sort)]
    (. builder smallMultiplesSort data))
  (.build builder))


(defn cfn-dashboard-pie-chart-sort-configuration-property-builder
  "Creates a  `CfnDashboard$PieChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pie-chart-sort-configuration-property-builder (new CfnDashboard$PieChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-pie-chart-visual-property-builder
  "The build-cfn-dashboard-pie-chart-visual-property-builder function updates a CfnDashboard$PieChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PieChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$PieChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$PieChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-pie-chart-visual-property-builder
  "Creates a  `CfnDashboard$PieChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pie-chart-visual-property-builder (new CfnDashboard$PieChartVisualProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-field-sort-options-property-builder
  "The build-cfn-dashboard-pivot-field-sort-options-property-builder function updates a CfnDashboard$PivotFieldSortOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotFieldSortOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `sortBy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-by` |
"
  [^CfnDashboard$PivotFieldSortOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :sort-by)]
    (. builder sortBy data))
  (.build builder))


(defn cfn-dashboard-pivot-field-sort-options-property-builder
  "Creates a  `CfnDashboard$PivotFieldSortOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-field-sort-options-property-builder (new CfnDashboard$PivotFieldSortOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-pivot-table-aggregated-field-wells-property-builder function updates a CfnDashboard$PivotTableAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:columns` |
| `rows` | java.util.List | [[cdk.support/lookup-entry]] | `:rows` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$PivotTableAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (when-let [data (lookup-entry config id :rows)]
    (. builder rows data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-pivot-table-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$PivotTableAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-aggregated-field-wells-property-builder (new CfnDashboard$PivotTableAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-cell-conditional-formatting-property-builder
  "The build-cfn-dashboard-pivot-table-cell-conditional-formatting-property-builder function updates a CfnDashboard$PivotTableCellConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableCellConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `scope` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableConditionalFormattingScopeProperty | [[cdk.support/lookup-entry]] | `:scope` |
| `scopes` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scopes` |
| `textFormat` | software.amazon.awscdk.services.quicksight.CfnDashboard$TextConditionalFormatProperty | [[cdk.support/lookup-entry]] | `:text-format` |
"
  [^CfnDashboard$PivotTableCellConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :scope)]
    (. builder scope data))
  (when-let [data (lookup-entry config id :scopes)]
    (. builder scopes data))
  (when-let [data (lookup-entry config id :text-format)]
    (. builder textFormat data))
  (.build builder))


(defn cfn-dashboard-pivot-table-cell-conditional-formatting-property-builder
  "Creates a  `CfnDashboard$PivotTableCellConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-cell-conditional-formatting-property-builder (new CfnDashboard$PivotTableCellConditionalFormattingProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-conditional-formatting-option-property-builder
  "The build-cfn-dashboard-pivot-table-conditional-formatting-option-property-builder function updates a CfnDashboard$PivotTableConditionalFormattingOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableConditionalFormattingOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cell` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cell` |
"
  [^CfnDashboard$PivotTableConditionalFormattingOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cell)]
    (. builder cell data))
  (.build builder))


(defn cfn-dashboard-pivot-table-conditional-formatting-option-property-builder
  "Creates a  `CfnDashboard$PivotTableConditionalFormattingOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-conditional-formatting-option-property-builder (new CfnDashboard$PivotTableConditionalFormattingOptionProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-conditional-formatting-property-builder
  "The build-cfn-dashboard-pivot-table-conditional-formatting-property-builder function updates a CfnDashboard$PivotTableConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |
"
  [^CfnDashboard$PivotTableConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :conditional-formatting-options)]
    (. builder conditionalFormattingOptions data))
  (.build builder))


(defn cfn-dashboard-pivot-table-conditional-formatting-property-builder
  "Creates a  `CfnDashboard$PivotTableConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-conditional-formatting-property-builder (new CfnDashboard$PivotTableConditionalFormattingProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-conditional-formatting-scope-property-builder
  "The build-cfn-dashboard-pivot-table-conditional-formatting-scope-property-builder function updates a CfnDashboard$PivotTableConditionalFormattingScopeProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableConditionalFormattingScopeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `role` | java.lang.String | [[cdk.support/lookup-entry]] | `:role` |
"
  [^CfnDashboard$PivotTableConditionalFormattingScopeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :role)]
    (. builder role data))
  (.build builder))


(defn cfn-dashboard-pivot-table-conditional-formatting-scope-property-builder
  "Creates a  `CfnDashboard$PivotTableConditionalFormattingScopeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-conditional-formatting-scope-property-builder (new CfnDashboard$PivotTableConditionalFormattingScopeProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-configuration-property-builder
  "The build-cfn-dashboard-pivot-table-configuration-property-builder function updates a CfnDashboard$PivotTableConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `paginatedReportOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:paginated-report-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tableOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:table-options` |
| `totalOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableTotalOptionsProperty | [[cdk.support/lookup-entry]] | `:total-options` |
"
  [^CfnDashboard$PivotTableConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-options)]
    (. builder fieldOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :paginated-report-options)]
    (. builder paginatedReportOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :table-options)]
    (. builder tableOptions data))
  (when-let [data (lookup-entry config id :total-options)]
    (. builder totalOptions data))
  (.build builder))


(defn cfn-dashboard-pivot-table-configuration-property-builder
  "Creates a  `CfnDashboard$PivotTableConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-configuration-property-builder (new CfnDashboard$PivotTableConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-data-path-option-property-builder
  "The build-cfn-dashboard-pivot-table-data-path-option-property-builder function updates a CfnDashboard$PivotTableDataPathOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableDataPathOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathList` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-path-list` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |
"
  [^CfnDashboard$PivotTableDataPathOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-path-list)]
    (. builder dataPathList data))
  (when-let [data (lookup-entry config id :width)]
    (. builder width data))
  (.build builder))


(defn cfn-dashboard-pivot-table-data-path-option-property-builder
  "Creates a  `CfnDashboard$PivotTableDataPathOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-data-path-option-property-builder (new CfnDashboard$PivotTableDataPathOptionProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-field-collapse-state-option-property-builder
  "The build-cfn-dashboard-pivot-table-field-collapse-state-option-property-builder function updates a CfnDashboard$PivotTableFieldCollapseStateOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableFieldCollapseStateOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `state` | java.lang.String | [[cdk.support/lookup-entry]] | `:state` |
| `target` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target` |
"
  [^CfnDashboard$PivotTableFieldCollapseStateOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :state)]
    (. builder state data))
  (when-let [data (lookup-entry config id :target)]
    (. builder target data))
  (.build builder))


(defn cfn-dashboard-pivot-table-field-collapse-state-option-property-builder
  "Creates a  `CfnDashboard$PivotTableFieldCollapseStateOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-field-collapse-state-option-property-builder (new CfnDashboard$PivotTableFieldCollapseStateOptionProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-field-collapse-state-target-property-builder
  "The build-cfn-dashboard-pivot-table-field-collapse-state-target-property-builder function updates a CfnDashboard$PivotTableFieldCollapseStateTargetProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableFieldCollapseStateTargetProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldDataPathValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-data-path-values` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
"
  [^CfnDashboard$PivotTableFieldCollapseStateTargetProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-data-path-values)]
    (. builder fieldDataPathValues data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (.build builder))


(defn cfn-dashboard-pivot-table-field-collapse-state-target-property-builder
  "Creates a  `CfnDashboard$PivotTableFieldCollapseStateTargetProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-field-collapse-state-target-property-builder (new CfnDashboard$PivotTableFieldCollapseStateTargetProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-field-option-property-builder
  "The build-cfn-dashboard-pivot-table-field-option-property-builder function updates a CfnDashboard$PivotTableFieldOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableFieldOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$PivotTableFieldOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-pivot-table-field-option-property-builder
  "Creates a  `CfnDashboard$PivotTableFieldOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-field-option-property-builder (new CfnDashboard$PivotTableFieldOptionProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-field-options-property-builder
  "The build-cfn-dashboard-pivot-table-field-options-property-builder function updates a CfnDashboard$PivotTableFieldOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableFieldOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `collapseStateOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:collapse-state-options` |
| `dataPathOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-path-options` |
| `selectedFieldOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:selected-field-options` |
"
  [^CfnDashboard$PivotTableFieldOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :collapse-state-options)]
    (. builder collapseStateOptions data))
  (when-let [data (lookup-entry config id :data-path-options)]
    (. builder dataPathOptions data))
  (when-let [data (lookup-entry config id :selected-field-options)]
    (. builder selectedFieldOptions data))
  (.build builder))


(defn cfn-dashboard-pivot-table-field-options-property-builder
  "Creates a  `CfnDashboard$PivotTableFieldOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-field-options-property-builder (new CfnDashboard$PivotTableFieldOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-field-subtotal-options-property-builder
  "The build-cfn-dashboard-pivot-table-field-subtotal-options-property-builder function updates a CfnDashboard$PivotTableFieldSubtotalOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableFieldSubtotalOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
"
  [^CfnDashboard$PivotTableFieldSubtotalOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (.build builder))


(defn cfn-dashboard-pivot-table-field-subtotal-options-property-builder
  "Creates a  `CfnDashboard$PivotTableFieldSubtotalOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-field-subtotal-options-property-builder (new CfnDashboard$PivotTableFieldSubtotalOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-field-wells-property-builder
  "The build-cfn-dashboard-pivot-table-field-wells-property-builder function updates a CfnDashboard$PivotTableFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pivotTableAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:pivot-table-aggregated-field-wells` |
"
  [^CfnDashboard$PivotTableFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :pivot-table-aggregated-field-wells)]
    (. builder pivotTableAggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-pivot-table-field-wells-property-builder
  "Creates a  `CfnDashboard$PivotTableFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-field-wells-property-builder (new CfnDashboard$PivotTableFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-options-property-builder
  "The build-cfn-dashboard-pivot-table-options-property-builder function updates a CfnDashboard$PivotTableOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:cell-style` |
| `collapsedRowDimensionsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:collapsed-row-dimensions-visibility` |
| `columnHeaderStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-header-style` |
| `columnNamesVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-names-visibility` |
| `defaultCellWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:default-cell-width` |
| `metricPlacement` | java.lang.String | [[cdk.support/lookup-entry]] | `:metric-placement` |
| `rowAlternateColorOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$RowAlternateColorOptionsProperty | [[cdk.support/lookup-entry]] | `:row-alternate-color-options` |
| `rowFieldNamesStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:row-field-names-style` |
| `rowHeaderStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:row-header-style` |
| `rowsLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableRowsLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:rows-label-options` |
| `rowsLayout` | java.lang.String | [[cdk.support/lookup-entry]] | `:rows-layout` |
| `singleMetricVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:single-metric-visibility` |
| `toggleButtonsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:toggle-buttons-visibility` |
"
  [^CfnDashboard$PivotTableOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cell-style)]
    (. builder cellStyle data))
  (when-let [data (lookup-entry config id :collapsed-row-dimensions-visibility)]
    (. builder collapsedRowDimensionsVisibility data))
  (when-let [data (lookup-entry config id :column-header-style)]
    (. builder columnHeaderStyle data))
  (when-let [data (lookup-entry config id :column-names-visibility)]
    (. builder columnNamesVisibility data))
  (when-let [data (lookup-entry config id :default-cell-width)]
    (. builder defaultCellWidth data))
  (when-let [data (lookup-entry config id :metric-placement)]
    (. builder metricPlacement data))
  (when-let [data (lookup-entry config id :row-alternate-color-options)]
    (. builder rowAlternateColorOptions data))
  (when-let [data (lookup-entry config id :row-field-names-style)]
    (. builder rowFieldNamesStyle data))
  (when-let [data (lookup-entry config id :row-header-style)]
    (. builder rowHeaderStyle data))
  (when-let [data (lookup-entry config id :rows-label-options)]
    (. builder rowsLabelOptions data))
  (when-let [data (lookup-entry config id :rows-layout)]
    (. builder rowsLayout data))
  (when-let [data (lookup-entry config id :single-metric-visibility)]
    (. builder singleMetricVisibility data))
  (when-let [data (lookup-entry config id :toggle-buttons-visibility)]
    (. builder toggleButtonsVisibility data))
  (.build builder))


(defn cfn-dashboard-pivot-table-options-property-builder
  "Creates a  `CfnDashboard$PivotTableOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-options-property-builder (new CfnDashboard$PivotTableOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-paginated-report-options-property-builder
  "The build-cfn-dashboard-pivot-table-paginated-report-options-property-builder function updates a CfnDashboard$PivotTablePaginatedReportOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTablePaginatedReportOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `overflowColumnHeaderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:overflow-column-header-visibility` |
| `verticalOverflowVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-overflow-visibility` |
"
  [^CfnDashboard$PivotTablePaginatedReportOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :overflow-column-header-visibility)]
    (. builder overflowColumnHeaderVisibility data))
  (when-let [data (lookup-entry config id :vertical-overflow-visibility)]
    (. builder verticalOverflowVisibility data))
  (.build builder))


(defn cfn-dashboard-pivot-table-paginated-report-options-property-builder
  "Creates a  `CfnDashboard$PivotTablePaginatedReportOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-paginated-report-options-property-builder (new CfnDashboard$PivotTablePaginatedReportOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-rows-label-options-property-builder
  "The build-cfn-dashboard-pivot-table-rows-label-options-property-builder function updates a CfnDashboard$PivotTableRowsLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableRowsLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$PivotTableRowsLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-pivot-table-rows-label-options-property-builder
  "Creates a  `CfnDashboard$PivotTableRowsLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-rows-label-options-property-builder (new CfnDashboard$PivotTableRowsLabelOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-sort-by-property-builder
  "The build-cfn-dashboard-pivot-table-sort-by-property-builder function updates a CfnDashboard$PivotTableSortByProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableSortByProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnSortProperty | [[cdk.support/lookup-entry]] | `:column` |
| `dataPath` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-path` |
| `field` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field` |
"
  [^CfnDashboard$PivotTableSortByProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :data-path)]
    (. builder dataPath data))
  (when-let [data (lookup-entry config id :field)]
    (. builder field data))
  (.build builder))


(defn cfn-dashboard-pivot-table-sort-by-property-builder
  "Creates a  `CfnDashboard$PivotTableSortByProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-sort-by-property-builder (new CfnDashboard$PivotTableSortByProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-sort-configuration-property-builder
  "The build-cfn-dashboard-pivot-table-sort-configuration-property-builder function updates a CfnDashboard$PivotTableSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldSortOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-sort-options` |
"
  [^CfnDashboard$PivotTableSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-sort-options)]
    (. builder fieldSortOptions data))
  (.build builder))


(defn cfn-dashboard-pivot-table-sort-configuration-property-builder
  "Creates a  `CfnDashboard$PivotTableSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-sort-configuration-property-builder (new CfnDashboard$PivotTableSortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-total-options-property-builder
  "The build-cfn-dashboard-pivot-table-total-options-property-builder function updates a CfnDashboard$PivotTableTotalOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableTotalOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnSubtotalOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$SubtotalOptionsProperty | [[cdk.support/lookup-entry]] | `:column-subtotal-options` |
| `columnTotalOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-total-options` |
| `rowSubtotalOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-subtotal-options` |
| `rowTotalOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTotalOptionsProperty | [[cdk.support/lookup-entry]] | `:row-total-options` |
"
  [^CfnDashboard$PivotTableTotalOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-subtotal-options)]
    (. builder columnSubtotalOptions data))
  (when-let [data (lookup-entry config id :column-total-options)]
    (. builder columnTotalOptions data))
  (when-let [data (lookup-entry config id :row-subtotal-options)]
    (. builder rowSubtotalOptions data))
  (when-let [data (lookup-entry config id :row-total-options)]
    (. builder rowTotalOptions data))
  (.build builder))


(defn cfn-dashboard-pivot-table-total-options-property-builder
  "Creates a  `CfnDashboard$PivotTableTotalOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-total-options-property-builder (new CfnDashboard$PivotTableTotalOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-table-visual-property-builder
  "The build-cfn-dashboard-pivot-table-visual-property-builder function updates a CfnDashboard$PivotTableVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTableVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$PivotTableVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :conditional-formatting)]
    (. builder conditionalFormatting data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-pivot-table-visual-property-builder
  "Creates a  `CfnDashboard$PivotTableVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-table-visual-property-builder (new CfnDashboard$PivotTableVisualProperty$Builder) id config))


(defn build-cfn-dashboard-pivot-total-options-property-builder
  "The build-cfn-dashboard-pivot-total-options-property-builder function updates a CfnDashboard$PivotTotalOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PivotTotalOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `metricHeaderCellStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:metric-header-cell-style` |
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scrollStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:scroll-status` |
| `totalAggregationOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-aggregation-options` |
| `totalCellStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `valueCellStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:value-cell-style` |
"
  [^CfnDashboard$PivotTotalOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :metric-header-cell-style)]
    (. builder metricHeaderCellStyle data))
  (when-let [data (lookup-entry config id :placement)]
    (. builder placement data))
  (when-let [data (lookup-entry config id :scroll-status)]
    (. builder scrollStatus data))
  (when-let [data (lookup-entry config id :total-aggregation-options)]
    (. builder totalAggregationOptions data))
  (when-let [data (lookup-entry config id :total-cell-style)]
    (. builder totalCellStyle data))
  (when-let [data (lookup-entry config id :totals-visibility)]
    (. builder totalsVisibility data))
  (when-let [data (lookup-entry config id :value-cell-style)]
    (. builder valueCellStyle data))
  (.build builder))


(defn cfn-dashboard-pivot-total-options-property-builder
  "Creates a  `CfnDashboard$PivotTotalOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-pivot-total-options-property-builder (new CfnDashboard$PivotTotalOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-predefined-hierarchy-property-builder
  "The build-cfn-dashboard-predefined-hierarchy-property-builder function updates a CfnDashboard$PredefinedHierarchyProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$PredefinedHierarchyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:columns` |
| `drillDownFilters` | java.util.List | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnDashboard$PredefinedHierarchyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (when-let [data (lookup-entry config id :drill-down-filters)]
    (. builder drillDownFilters data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-dashboard-predefined-hierarchy-property-builder
  "Creates a  `CfnDashboard$PredefinedHierarchyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-predefined-hierarchy-property-builder (new CfnDashboard$PredefinedHierarchyProperty$Builder) id config))


(defn build-cfn-dashboard-progress-bar-options-property-builder
  "The build-cfn-dashboard-progress-bar-options-property-builder function updates a CfnDashboard$ProgressBarOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ProgressBarOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$ProgressBarOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-progress-bar-options-property-builder
  "Creates a  `CfnDashboard$ProgressBarOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-progress-bar-options-property-builder (new CfnDashboard$ProgressBarOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-props-builder
  "The build-cfn-dashboard-props-builder function updates a CfnDashboardProps$Builder instance using the provided configuration.
  The function takes the CfnDashboardProps$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `dashboardId` | java.lang.String | [[cdk.support/lookup-entry]] | `:dashboard-id` |
| `dashboardPublishOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dashboard-publish-options` |
| `definition` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:definition` |
| `linkEntities` | java.util.List | [[cdk.support/lookup-entry]] | `:link-entities` |
| `linkSharingConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:link-sharing-configuration` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameters` |
| `permissions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:permissions` |
| `sourceEntity` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-entity` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `themeArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:theme-arn` |
| `validationStrategy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:validation-strategy` |
| `versionDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:version-description` |
"
  [^CfnDashboardProps$Builder builder id config]
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :dashboard-id)]
    (. builder dashboardId data))
  (when-let [data (lookup-entry config id :dashboard-publish-options)]
    (. builder dashboardPublishOptions data))
  (when-let [data (lookup-entry config id :definition)]
    (. builder definition data))
  (when-let [data (lookup-entry config id :link-entities)]
    (. builder linkEntities data))
  (when-let [data (lookup-entry config id :link-sharing-configuration)]
    (. builder linkSharingConfiguration data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :parameters)]
    (. builder parameters data))
  (when-let [data (lookup-entry config id :permissions)]
    (. builder permissions data))
  (when-let [data (lookup-entry config id :source-entity)]
    (. builder sourceEntity data))
  (when-let [data (lookup-entry config id :tags)]
    (. builder tags data))
  (when-let [data (lookup-entry config id :theme-arn)]
    (. builder themeArn data))
  (when-let [data (lookup-entry config id :validation-strategy)]
    (. builder validationStrategy data))
  (when-let [data (lookup-entry config id :version-description)]
    (. builder versionDescription data))
  (.build builder))


(defn cfn-dashboard-props-builder
  "Creates a  `CfnDashboardProps$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-props-builder (new CfnDashboardProps$Builder) id config))


(defn build-cfn-dashboard-radar-chart-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-radar-chart-aggregated-field-wells-property-builder function updates a CfnDashboard$RadarChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$RadarChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `color` | java.util.List | [[cdk.support/lookup-entry]] | `:color` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$RadarChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-radar-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$RadarChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-radar-chart-aggregated-field-wells-property-builder (new CfnDashboard$RadarChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-radar-chart-area-style-settings-property-builder
  "The build-cfn-dashboard-radar-chart-area-style-settings-property-builder function updates a CfnDashboard$RadarChartAreaStyleSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$RadarChartAreaStyleSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$RadarChartAreaStyleSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-radar-chart-area-style-settings-property-builder
  "Creates a  `CfnDashboard$RadarChartAreaStyleSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-radar-chart-area-style-settings-property-builder (new CfnDashboard$RadarChartAreaStyleSettingsProperty$Builder) id config))


(defn build-cfn-dashboard-radar-chart-configuration-property-builder
  "The build-cfn-dashboard-radar-chart-configuration-property-builder function updates a CfnDashboard$RadarChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$RadarChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `alternateBandColorsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-colors-visibility` |
| `alternateBandEvenColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-even-color` |
| `alternateBandOddColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-odd-color` |
| `axesRangeScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:axes-range-scale` |
| `baseSeriesSettings` | software.amazon.awscdk.services.quicksight.CfnDashboard$RadarChartSeriesSettingsProperty | [[cdk.support/lookup-entry]] | `:base-series-settings` |
| `categoryAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorAxis` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:color-axis` |
| `colorLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnDashboard$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `shape` | java.lang.String | [[cdk.support/lookup-entry]] | `:shape` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `startAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:start-angle` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnDashboard$RadarChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :alternate-band-colors-visibility)]
    (. builder alternateBandColorsVisibility data))
  (when-let [data (lookup-entry config id :alternate-band-even-color)]
    (. builder alternateBandEvenColor data))
  (when-let [data (lookup-entry config id :alternate-band-odd-color)]
    (. builder alternateBandOddColor data))
  (when-let [data (lookup-entry config id :axes-range-scale)]
    (. builder axesRangeScale data))
  (when-let [data (lookup-entry config id :base-series-settings)]
    (. builder baseSeriesSettings data))
  (when-let [data (lookup-entry config id :category-axis)]
    (. builder categoryAxis data))
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :color-axis)]
    (. builder colorAxis data))
  (when-let [data (lookup-entry config id :color-label-options)]
    (. builder colorLabelOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :shape)]
    (. builder shape data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :start-angle)]
    (. builder startAngle data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-dashboard-radar-chart-configuration-property-builder
  "Creates a  `CfnDashboard$RadarChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-radar-chart-configuration-property-builder (new CfnDashboard$RadarChartConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-radar-chart-field-wells-property-builder
  "The build-cfn-dashboard-radar-chart-field-wells-property-builder function updates a CfnDashboard$RadarChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$RadarChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `radarChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:radar-chart-aggregated-field-wells` |
"
  [^CfnDashboard$RadarChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :radar-chart-aggregated-field-wells)]
    (. builder radarChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-radar-chart-field-wells-property-builder
  "Creates a  `CfnDashboard$RadarChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-radar-chart-field-wells-property-builder (new CfnDashboard$RadarChartFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-radar-chart-series-settings-property-builder
  "The build-cfn-dashboard-radar-chart-series-settings-property-builder function updates a CfnDashboard$RadarChartSeriesSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$RadarChartSeriesSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `areaStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:area-style-settings` |
"
  [^CfnDashboard$RadarChartSeriesSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :area-style-settings)]
    (. builder areaStyleSettings data))
  (.build builder))


(defn cfn-dashboard-radar-chart-series-settings-property-builder
  "Creates a  `CfnDashboard$RadarChartSeriesSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-radar-chart-series-settings-property-builder (new CfnDashboard$RadarChartSeriesSettingsProperty$Builder) id config))


(defn build-cfn-dashboard-radar-chart-sort-configuration-property-builder
  "The build-cfn-dashboard-radar-chart-sort-configuration-property-builder function updates a CfnDashboard$RadarChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$RadarChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-sort` |
"
  [^CfnDashboard$RadarChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :color-items-limit)]
    (. builder colorItemsLimit data))
  (when-let [data (lookup-entry config id :color-sort)]
    (. builder colorSort data))
  (.build builder))


(defn cfn-dashboard-radar-chart-sort-configuration-property-builder
  "Creates a  `CfnDashboard$RadarChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-radar-chart-sort-configuration-property-builder (new CfnDashboard$RadarChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-radar-chart-visual-property-builder
  "The build-cfn-dashboard-radar-chart-visual-property-builder function updates a CfnDashboard$RadarChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$RadarChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$RadarChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-radar-chart-visual-property-builder
  "Creates a  `CfnDashboard$RadarChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-radar-chart-visual-property-builder (new CfnDashboard$RadarChartVisualProperty$Builder) id config))


(defn build-cfn-dashboard-range-ends-label-type-property-builder
  "The build-cfn-dashboard-range-ends-label-type-property-builder function updates a CfnDashboard$RangeEndsLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$RangeEndsLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$RangeEndsLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-range-ends-label-type-property-builder
  "Creates a  `CfnDashboard$RangeEndsLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-range-ends-label-type-property-builder (new CfnDashboard$RangeEndsLabelTypeProperty$Builder) id config))


(defn build-cfn-dashboard-reference-line-custom-label-configuration-property-builder
  "The build-cfn-dashboard-reference-line-custom-label-configuration-property-builder function updates a CfnDashboard$ReferenceLineCustomLabelConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ReferenceLineCustomLabelConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
"
  [^CfnDashboard$ReferenceLineCustomLabelConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (.build builder))


(defn cfn-dashboard-reference-line-custom-label-configuration-property-builder
  "Creates a  `CfnDashboard$ReferenceLineCustomLabelConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-reference-line-custom-label-configuration-property-builder (new CfnDashboard$ReferenceLineCustomLabelConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-reference-line-data-configuration-property-builder
  "The build-cfn-dashboard-reference-line-data-configuration-property-builder function updates a CfnDashboard$ReferenceLineDataConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ReferenceLineDataConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `dynamicConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ReferenceLineDynamicDataConfigurationProperty | [[cdk.support/lookup-entry]] | `:dynamic-configuration` |
| `seriesType` | java.lang.String | [[cdk.support/lookup-entry]] | `:series-type` |
| `staticConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:static-configuration` |
"
  [^CfnDashboard$ReferenceLineDataConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-binding)]
    (. builder axisBinding data))
  (when-let [data (lookup-entry config id :dynamic-configuration)]
    (. builder dynamicConfiguration data))
  (when-let [data (lookup-entry config id :series-type)]
    (. builder seriesType data))
  (when-let [data (lookup-entry config id :static-configuration)]
    (. builder staticConfiguration data))
  (.build builder))


(defn cfn-dashboard-reference-line-data-configuration-property-builder
  "Creates a  `CfnDashboard$ReferenceLineDataConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-reference-line-data-configuration-property-builder (new CfnDashboard$ReferenceLineDataConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-reference-line-dynamic-data-configuration-property-builder
  "The build-cfn-dashboard-reference-line-dynamic-data-configuration-property-builder function updates a CfnDashboard$ReferenceLineDynamicDataConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ReferenceLineDynamicDataConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `calculation` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumericalAggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:calculation` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `measureAggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:measure-aggregation-function` |
"
  [^CfnDashboard$ReferenceLineDynamicDataConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :calculation)]
    (. builder calculation data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :measure-aggregation-function)]
    (. builder measureAggregationFunction data))
  (.build builder))


(defn cfn-dashboard-reference-line-dynamic-data-configuration-property-builder
  "Creates a  `CfnDashboard$ReferenceLineDynamicDataConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-reference-line-dynamic-data-configuration-property-builder (new CfnDashboard$ReferenceLineDynamicDataConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-reference-line-label-configuration-property-builder
  "The build-cfn-dashboard-reference-line-label-configuration-property-builder function updates a CfnDashboard$ReferenceLineLabelConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ReferenceLineLabelConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabelConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ReferenceLineCustomLabelConfigurationProperty | [[cdk.support/lookup-entry]] | `:custom-label-configuration` |
| `fontColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-color` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `horizontalPosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-position` |
| `valueLabelConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ReferenceLineValueLabelConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-label-configuration` |
| `verticalPosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-position` |
"
  [^CfnDashboard$ReferenceLineLabelConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label-configuration)]
    (. builder customLabelConfiguration data))
  (when-let [data (lookup-entry config id :font-color)]
    (. builder fontColor data))
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (when-let [data (lookup-entry config id :horizontal-position)]
    (. builder horizontalPosition data))
  (when-let [data (lookup-entry config id :value-label-configuration)]
    (. builder valueLabelConfiguration data))
  (when-let [data (lookup-entry config id :vertical-position)]
    (. builder verticalPosition data))
  (.build builder))


(defn cfn-dashboard-reference-line-label-configuration-property-builder
  "Creates a  `CfnDashboard$ReferenceLineLabelConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-reference-line-label-configuration-property-builder (new CfnDashboard$ReferenceLineLabelConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-reference-line-property-builder
  "The build-cfn-dashboard-reference-line-property-builder function updates a CfnDashboard$ReferenceLineProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ReferenceLineProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-configuration` |
| `labelConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ReferenceLineLabelConfigurationProperty | [[cdk.support/lookup-entry]] | `:label-configuration` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `styleConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style-configuration` |
"
  [^CfnDashboard$ReferenceLineProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-configuration)]
    (. builder dataConfiguration data))
  (when-let [data (lookup-entry config id :label-configuration)]
    (. builder labelConfiguration data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (when-let [data (lookup-entry config id :style-configuration)]
    (. builder styleConfiguration data))
  (.build builder))


(defn cfn-dashboard-reference-line-property-builder
  "Creates a  `CfnDashboard$ReferenceLineProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-reference-line-property-builder (new CfnDashboard$ReferenceLineProperty$Builder) id config))


(defn build-cfn-dashboard-reference-line-static-data-configuration-property-builder
  "The build-cfn-dashboard-reference-line-static-data-configuration-property-builder function updates a CfnDashboard$ReferenceLineStaticDataConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ReferenceLineStaticDataConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$ReferenceLineStaticDataConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-reference-line-static-data-configuration-property-builder
  "Creates a  `CfnDashboard$ReferenceLineStaticDataConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-reference-line-static-data-configuration-property-builder (new CfnDashboard$ReferenceLineStaticDataConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-reference-line-style-configuration-property-builder
  "The build-cfn-dashboard-reference-line-style-configuration-property-builder function updates a CfnDashboard$ReferenceLineStyleConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ReferenceLineStyleConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `pattern` | java.lang.String | [[cdk.support/lookup-entry]] | `:pattern` |
"
  [^CfnDashboard$ReferenceLineStyleConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :pattern)]
    (. builder pattern data))
  (.build builder))


(defn cfn-dashboard-reference-line-style-configuration-property-builder
  "Creates a  `CfnDashboard$ReferenceLineStyleConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-reference-line-style-configuration-property-builder (new CfnDashboard$ReferenceLineStyleConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-reference-line-value-label-configuration-property-builder
  "The build-cfn-dashboard-reference-line-value-label-configuration-property-builder function updates a CfnDashboard$ReferenceLineValueLabelConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ReferenceLineValueLabelConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumericFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `relativePosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative-position` |
"
  [^CfnDashboard$ReferenceLineValueLabelConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (when-let [data (lookup-entry config id :relative-position)]
    (. builder relativePosition data))
  (.build builder))


(defn cfn-dashboard-reference-line-value-label-configuration-property-builder
  "Creates a  `CfnDashboard$ReferenceLineValueLabelConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-reference-line-value-label-configuration-property-builder (new CfnDashboard$ReferenceLineValueLabelConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-relative-date-time-control-display-options-property-builder
  "The build-cfn-dashboard-relative-date-time-control-display-options-property-builder function updates a CfnDashboard$RelativeDateTimeControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$RelativeDateTimeControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnDashboard$RelativeDateTimeControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-format)]
    (. builder dateTimeFormat data))
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-dashboard-relative-date-time-control-display-options-property-builder
  "Creates a  `CfnDashboard$RelativeDateTimeControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-relative-date-time-control-display-options-property-builder (new CfnDashboard$RelativeDateTimeControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-relative-dates-filter-property-builder
  "The build-cfn-dashboard-relative-dates-filter-property-builder function updates a CfnDashboard$RelativeDatesFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$RelativeDatesFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `anchorDateConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:anchor-date-configuration` |
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `excludePeriodConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:exclude-period-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `minimumGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:minimum-granularity` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `relativeDateType` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative-date-type` |
| `relativeDateValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:relative-date-value` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnDashboard$RelativeDatesFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :anchor-date-configuration)]
    (. builder anchorDateConfiguration data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :exclude-period-configuration)]
    (. builder excludePeriodConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :minimum-granularity)]
    (. builder minimumGranularity data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (when-let [data (lookup-entry config id :relative-date-type)]
    (. builder relativeDateType data))
  (when-let [data (lookup-entry config id :relative-date-value)]
    (. builder relativeDateValue data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-dashboard-relative-dates-filter-property-builder
  "Creates a  `CfnDashboard$RelativeDatesFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-relative-dates-filter-property-builder (new CfnDashboard$RelativeDatesFilterProperty$Builder) id config))


(defn build-cfn-dashboard-resource-permission-property-builder
  "The build-cfn-dashboard-resource-permission-property-builder function updates a CfnDashboard$ResourcePermissionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ResourcePermissionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `principal` | java.lang.String | [[cdk.support/lookup-entry]] | `:principal` |
| `resource` | java.lang.String | [[cdk.support/lookup-entry]] | `:resource` |
"
  [^CfnDashboard$ResourcePermissionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :principal)]
    (. builder principal data))
  (when-let [data (lookup-entry config id :resource)]
    (. builder resource data))
  (.build builder))


(defn cfn-dashboard-resource-permission-property-builder
  "Creates a  `CfnDashboard$ResourcePermissionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-resource-permission-property-builder (new CfnDashboard$ResourcePermissionProperty$Builder) id config))


(defn build-cfn-dashboard-rolling-date-configuration-property-builder
  "The build-cfn-dashboard-rolling-date-configuration-property-builder function updates a CfnDashboard$RollingDateConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$RollingDateConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
"
  [^CfnDashboard$RollingDateConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (.build builder))


(defn cfn-dashboard-rolling-date-configuration-property-builder
  "Creates a  `CfnDashboard$RollingDateConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-rolling-date-configuration-property-builder (new CfnDashboard$RollingDateConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-row-alternate-color-options-property-builder
  "The build-cfn-dashboard-row-alternate-color-options-property-builder function updates a CfnDashboard$RowAlternateColorOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$RowAlternateColorOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `rowAlternateColors` | java.util.List | [[cdk.support/lookup-entry]] | `:row-alternate-colors` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `usePrimaryBackgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:use-primary-background-color` |
"
  [^CfnDashboard$RowAlternateColorOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :row-alternate-colors)]
    (. builder rowAlternateColors data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (when-let [data (lookup-entry config id :use-primary-background-color)]
    (. builder usePrimaryBackgroundColor data))
  (.build builder))


(defn cfn-dashboard-row-alternate-color-options-property-builder
  "Creates a  `CfnDashboard$RowAlternateColorOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-row-alternate-color-options-property-builder (new CfnDashboard$RowAlternateColorOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-same-sheet-target-visual-configuration-property-builder
  "The build-cfn-dashboard-same-sheet-target-visual-configuration-property-builder function updates a CfnDashboard$SameSheetTargetVisualConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SameSheetTargetVisualConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetVisualOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:target-visual-options` |
| `targetVisuals` | java.util.List | [[cdk.support/lookup-entry]] | `:target-visuals` |
"
  [^CfnDashboard$SameSheetTargetVisualConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :target-visual-options)]
    (. builder targetVisualOptions data))
  (when-let [data (lookup-entry config id :target-visuals)]
    (. builder targetVisuals data))
  (.build builder))


(defn cfn-dashboard-same-sheet-target-visual-configuration-property-builder
  "Creates a  `CfnDashboard$SameSheetTargetVisualConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-same-sheet-target-visual-configuration-property-builder (new CfnDashboard$SameSheetTargetVisualConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-sankey-diagram-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-sankey-diagram-aggregated-field-wells-property-builder function updates a CfnDashboard$SankeyDiagramAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SankeyDiagramAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destination` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:destination` |
| `source` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source` |
| `weight` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:weight` |
"
  [^CfnDashboard$SankeyDiagramAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :destination)]
    (. builder destination data))
  (when-let [data (lookup-entry config id :source)]
    (. builder source data))
  (when-let [data (lookup-entry config id :weight)]
    (. builder weight data))
  (.build builder))


(defn cfn-dashboard-sankey-diagram-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$SankeyDiagramAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-sankey-diagram-aggregated-field-wells-property-builder (new CfnDashboard$SankeyDiagramAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-sankey-diagram-chart-configuration-property-builder
  "The build-cfn-dashboard-sankey-diagram-chart-configuration-property-builder function updates a CfnDashboard$SankeyDiagramChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SankeyDiagramChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
"
  [^CfnDashboard$SankeyDiagramChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (.build builder))


(defn cfn-dashboard-sankey-diagram-chart-configuration-property-builder
  "Creates a  `CfnDashboard$SankeyDiagramChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-sankey-diagram-chart-configuration-property-builder (new CfnDashboard$SankeyDiagramChartConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-sankey-diagram-field-wells-property-builder
  "The build-cfn-dashboard-sankey-diagram-field-wells-property-builder function updates a CfnDashboard$SankeyDiagramFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SankeyDiagramFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sankeyDiagramAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$SankeyDiagramAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:sankey-diagram-aggregated-field-wells` |
"
  [^CfnDashboard$SankeyDiagramFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :sankey-diagram-aggregated-field-wells)]
    (. builder sankeyDiagramAggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-sankey-diagram-field-wells-property-builder
  "Creates a  `CfnDashboard$SankeyDiagramFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-sankey-diagram-field-wells-property-builder (new CfnDashboard$SankeyDiagramFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-sankey-diagram-sort-configuration-property-builder
  "The build-cfn-dashboard-sankey-diagram-sort-configuration-property-builder function updates a CfnDashboard$SankeyDiagramSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SankeyDiagramSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destinationItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:destination-items-limit` |
| `sourceItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-items-limit` |
| `weightSort` | java.util.List | [[cdk.support/lookup-entry]] | `:weight-sort` |
"
  [^CfnDashboard$SankeyDiagramSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :destination-items-limit)]
    (. builder destinationItemsLimit data))
  (when-let [data (lookup-entry config id :source-items-limit)]
    (. builder sourceItemsLimit data))
  (when-let [data (lookup-entry config id :weight-sort)]
    (. builder weightSort data))
  (.build builder))


(defn cfn-dashboard-sankey-diagram-sort-configuration-property-builder
  "Creates a  `CfnDashboard$SankeyDiagramSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-sankey-diagram-sort-configuration-property-builder (new CfnDashboard$SankeyDiagramSortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-sankey-diagram-visual-property-builder
  "The build-cfn-dashboard-sankey-diagram-visual-property-builder function updates a CfnDashboard$SankeyDiagramVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SankeyDiagramVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$SankeyDiagramVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-sankey-diagram-visual-property-builder
  "Creates a  `CfnDashboard$SankeyDiagramVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-sankey-diagram-visual-property-builder (new CfnDashboard$SankeyDiagramVisualProperty$Builder) id config))


(defn build-cfn-dashboard-scatter-plot-categorically-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-scatter-plot-categorically-aggregated-field-wells-property-builder function updates a CfnDashboard$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | java.util.List | [[cdk.support/lookup-entry]] | `:category` |
| `label` | java.util.List | [[cdk.support/lookup-entry]] | `:label` |
| `size` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:size` |
| `xAxis` | java.util.List | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | java.util.List | [[cdk.support/lookup-entry]] | `:y-axis` |
"
  [^CfnDashboard$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :label)]
    (. builder label data))
  (when-let [data (lookup-entry config id :size)]
    (. builder size data))
  (when-let [data (lookup-entry config id :x-axis)]
    (. builder xAxis data))
  (when-let [data (lookup-entry config id :y-axis)]
    (. builder yAxis data))
  (.build builder))


(defn cfn-dashboard-scatter-plot-categorically-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-scatter-plot-categorically-aggregated-field-wells-property-builder (new CfnDashboard$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-scatter-plot-configuration-property-builder
  "The build-cfn-dashboard-scatter-plot-configuration-property-builder function updates a CfnDashboard$ScatterPlotConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ScatterPlotConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnDashboard$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnDashboard$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |
| `yAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:y-axis-display-options` |
| `yAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:y-axis-label-options` |
"
  [^CfnDashboard$ScatterPlotConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (when-let [data (lookup-entry config id :x-axis-display-options)]
    (. builder xAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :x-axis-label-options)]
    (. builder xAxisLabelOptions data))
  (when-let [data (lookup-entry config id :y-axis-display-options)]
    (. builder yAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :y-axis-label-options)]
    (. builder yAxisLabelOptions data))
  (.build builder))


(defn cfn-dashboard-scatter-plot-configuration-property-builder
  "Creates a  `CfnDashboard$ScatterPlotConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-scatter-plot-configuration-property-builder (new CfnDashboard$ScatterPlotConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-scatter-plot-field-wells-property-builder
  "The build-cfn-dashboard-scatter-plot-field-wells-property-builder function updates a CfnDashboard$ScatterPlotFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ScatterPlotFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `scatterPlotCategoricallyAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$ScatterPlotCategoricallyAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:scatter-plot-categorically-aggregated-field-wells` |
| `scatterPlotUnaggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$ScatterPlotUnaggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:scatter-plot-unaggregated-field-wells` |
"
  [^CfnDashboard$ScatterPlotFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :scatter-plot-categorically-aggregated-field-wells)]
    (. builder scatterPlotCategoricallyAggregatedFieldWells data))
  (when-let [data (lookup-entry config id :scatter-plot-unaggregated-field-wells)]
    (. builder scatterPlotUnaggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-scatter-plot-field-wells-property-builder
  "Creates a  `CfnDashboard$ScatterPlotFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-scatter-plot-field-wells-property-builder (new CfnDashboard$ScatterPlotFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-scatter-plot-unaggregated-field-wells-property-builder
  "The build-cfn-dashboard-scatter-plot-unaggregated-field-wells-property-builder function updates a CfnDashboard$ScatterPlotUnaggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ScatterPlotUnaggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `label` | java.util.List | [[cdk.support/lookup-entry]] | `:label` |
| `size` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:size` |
| `xAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:y-axis` |
"
  [^CfnDashboard$ScatterPlotUnaggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :label)]
    (. builder label data))
  (when-let [data (lookup-entry config id :size)]
    (. builder size data))
  (when-let [data (lookup-entry config id :x-axis)]
    (. builder xAxis data))
  (when-let [data (lookup-entry config id :y-axis)]
    (. builder yAxis data))
  (.build builder))


(defn cfn-dashboard-scatter-plot-unaggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$ScatterPlotUnaggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-scatter-plot-unaggregated-field-wells-property-builder (new CfnDashboard$ScatterPlotUnaggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-scatter-plot-visual-property-builder
  "The build-cfn-dashboard-scatter-plot-visual-property-builder function updates a CfnDashboard$ScatterPlotVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ScatterPlotVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$ScatterPlotVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-scatter-plot-visual-property-builder
  "Creates a  `CfnDashboard$ScatterPlotVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-scatter-plot-visual-property-builder (new CfnDashboard$ScatterPlotVisualProperty$Builder) id config))


(defn build-cfn-dashboard-scroll-bar-options-property-builder
  "The build-cfn-dashboard-scroll-bar-options-property-builder function updates a CfnDashboard$ScrollBarOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ScrollBarOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `visibleRange` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visible-range` |
"
  [^CfnDashboard$ScrollBarOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (when-let [data (lookup-entry config id :visible-range)]
    (. builder visibleRange data))
  (.build builder))


(defn cfn-dashboard-scroll-bar-options-property-builder
  "Creates a  `CfnDashboard$ScrollBarOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-scroll-bar-options-property-builder (new CfnDashboard$ScrollBarOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-secondary-value-options-property-builder
  "The build-cfn-dashboard-secondary-value-options-property-builder function updates a CfnDashboard$SecondaryValueOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SecondaryValueOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$SecondaryValueOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-secondary-value-options-property-builder
  "Creates a  `CfnDashboard$SecondaryValueOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-secondary-value-options-property-builder (new CfnDashboard$SecondaryValueOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-section-after-page-break-property-builder
  "The build-cfn-dashboard-section-after-page-break-property-builder function updates a CfnDashboard$SectionAfterPageBreakProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SectionAfterPageBreakProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
"
  [^CfnDashboard$SectionAfterPageBreakProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (.build builder))


(defn cfn-dashboard-section-after-page-break-property-builder
  "Creates a  `CfnDashboard$SectionAfterPageBreakProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-section-after-page-break-property-builder (new CfnDashboard$SectionAfterPageBreakProperty$Builder) id config))


(defn build-cfn-dashboard-section-based-layout-canvas-size-options-property-builder
  "The build-cfn-dashboard-section-based-layout-canvas-size-options-property-builder function updates a CfnDashboard$SectionBasedLayoutCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SectionBasedLayoutCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paperCanvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$SectionBasedLayoutPaperCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:paper-canvas-size-options` |
"
  [^CfnDashboard$SectionBasedLayoutCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :paper-canvas-size-options)]
    (. builder paperCanvasSizeOptions data))
  (.build builder))


(defn cfn-dashboard-section-based-layout-canvas-size-options-property-builder
  "Creates a  `CfnDashboard$SectionBasedLayoutCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-section-based-layout-canvas-size-options-property-builder (new CfnDashboard$SectionBasedLayoutCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-section-based-layout-configuration-property-builder
  "The build-cfn-dashboard-section-based-layout-configuration-property-builder function updates a CfnDashboard$SectionBasedLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SectionBasedLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bodySections` | java.util.List | [[cdk.support/lookup-entry]] | `:body-sections` |
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `footerSections` | java.util.List | [[cdk.support/lookup-entry]] | `:footer-sections` |
| `headerSections` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:header-sections` |
"
  [^CfnDashboard$SectionBasedLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :body-sections)]
    (. builder bodySections data))
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (when-let [data (lookup-entry config id :footer-sections)]
    (. builder footerSections data))
  (when-let [data (lookup-entry config id :header-sections)]
    (. builder headerSections data))
  (.build builder))


(defn cfn-dashboard-section-based-layout-configuration-property-builder
  "Creates a  `CfnDashboard$SectionBasedLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-section-based-layout-configuration-property-builder (new CfnDashboard$SectionBasedLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-section-based-layout-paper-canvas-size-options-property-builder
  "The build-cfn-dashboard-section-based-layout-paper-canvas-size-options-property-builder function updates a CfnDashboard$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paperMargin` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:paper-margin` |
| `paperOrientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:paper-orientation` |
| `paperSize` | java.lang.String | [[cdk.support/lookup-entry]] | `:paper-size` |
"
  [^CfnDashboard$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :paper-margin)]
    (. builder paperMargin data))
  (when-let [data (lookup-entry config id :paper-orientation)]
    (. builder paperOrientation data))
  (when-let [data (lookup-entry config id :paper-size)]
    (. builder paperSize data))
  (.build builder))


(defn cfn-dashboard-section-based-layout-paper-canvas-size-options-property-builder
  "Creates a  `CfnDashboard$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-section-based-layout-paper-canvas-size-options-property-builder (new CfnDashboard$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-section-layout-configuration-property-builder
  "The build-cfn-dashboard-section-layout-configuration-property-builder function updates a CfnDashboard$SectionLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SectionLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeFormLayout` | software.amazon.awscdk.services.quicksight.CfnDashboard$FreeFormSectionLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:free-form-layout` |
"
  [^CfnDashboard$SectionLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :free-form-layout)]
    (. builder freeFormLayout data))
  (.build builder))


(defn cfn-dashboard-section-layout-configuration-property-builder
  "Creates a  `CfnDashboard$SectionLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-section-layout-configuration-property-builder (new CfnDashboard$SectionLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-section-page-break-configuration-property-builder
  "The build-cfn-dashboard-section-page-break-configuration-property-builder function updates a CfnDashboard$SectionPageBreakConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SectionPageBreakConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `after` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:after` |
"
  [^CfnDashboard$SectionPageBreakConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :after)]
    (. builder after data))
  (.build builder))


(defn cfn-dashboard-section-page-break-configuration-property-builder
  "Creates a  `CfnDashboard$SectionPageBreakConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-section-page-break-configuration-property-builder (new CfnDashboard$SectionPageBreakConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-section-style-property-builder
  "The build-cfn-dashboard-section-style-property-builder function updates a CfnDashboard$SectionStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SectionStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `padding` | software.amazon.awscdk.services.quicksight.CfnDashboard$SpacingProperty | [[cdk.support/lookup-entry]] | `:padding` |
"
  [^CfnDashboard$SectionStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :height)]
    (. builder height data))
  (when-let [data (lookup-entry config id :padding)]
    (. builder padding data))
  (.build builder))


(defn cfn-dashboard-section-style-property-builder
  "Creates a  `CfnDashboard$SectionStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-section-style-property-builder (new CfnDashboard$SectionStyleProperty$Builder) id config))


(defn build-cfn-dashboard-selected-sheets-filter-scope-configuration-property-builder
  "The build-cfn-dashboard-selected-sheets-filter-scope-configuration-property-builder function updates a CfnDashboard$SelectedSheetsFilterScopeConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SelectedSheetsFilterScopeConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sheetVisualScopingConfigurations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sheet-visual-scoping-configurations` |
"
  [^CfnDashboard$SelectedSheetsFilterScopeConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :sheet-visual-scoping-configurations)]
    (. builder sheetVisualScopingConfigurations data))
  (.build builder))


(defn cfn-dashboard-selected-sheets-filter-scope-configuration-property-builder
  "Creates a  `CfnDashboard$SelectedSheetsFilterScopeConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-selected-sheets-filter-scope-configuration-property-builder (new CfnDashboard$SelectedSheetsFilterScopeConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-series-item-property-builder
  "The build-cfn-dashboard-series-item-property-builder function updates a CfnDashboard$SeriesItemProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SeriesItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataFieldSeriesItem` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-field-series-item` |
| `fieldSeriesItem` | software.amazon.awscdk.services.quicksight.CfnDashboard$FieldSeriesItemProperty | [[cdk.support/lookup-entry]] | `:field-series-item` |
"
  [^CfnDashboard$SeriesItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-field-series-item)]
    (. builder dataFieldSeriesItem data))
  (when-let [data (lookup-entry config id :field-series-item)]
    (. builder fieldSeriesItem data))
  (.build builder))


(defn cfn-dashboard-series-item-property-builder
  "Creates a  `CfnDashboard$SeriesItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-series-item-property-builder (new CfnDashboard$SeriesItemProperty$Builder) id config))


(defn build-cfn-dashboard-set-parameter-value-configuration-property-builder
  "The build-cfn-dashboard-set-parameter-value-configuration-property-builder function updates a CfnDashboard$SetParameterValueConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SetParameterValueConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destinationParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:destination-parameter-name` |
| `value` | software.amazon.awscdk.services.quicksight.CfnDashboard$DestinationParameterValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$SetParameterValueConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :destination-parameter-name)]
    (. builder destinationParameterName data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-set-parameter-value-configuration-property-builder
  "Creates a  `CfnDashboard$SetParameterValueConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-set-parameter-value-configuration-property-builder (new CfnDashboard$SetParameterValueConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-shape-conditional-format-property-builder
  "The build-cfn-dashboard-shape-conditional-format-property-builder function updates a CfnDashboard$ShapeConditionalFormatProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ShapeConditionalFormatProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:background-color` |
"
  [^CfnDashboard$ShapeConditionalFormatProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-color)]
    (. builder backgroundColor data))
  (.build builder))


(defn cfn-dashboard-shape-conditional-format-property-builder
  "Creates a  `CfnDashboard$ShapeConditionalFormatProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-shape-conditional-format-property-builder (new CfnDashboard$ShapeConditionalFormatProperty$Builder) id config))


(defn build-cfn-dashboard-sheet-control-info-icon-label-options-property-builder
  "The build-cfn-dashboard-sheet-control-info-icon-label-options-property-builder function updates a CfnDashboard$SheetControlInfoIconLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SheetControlInfoIconLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconText` | java.lang.String | [[cdk.support/lookup-entry]] | `:info-icon-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$SheetControlInfoIconLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-text)]
    (. builder infoIconText data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-sheet-control-info-icon-label-options-property-builder
  "Creates a  `CfnDashboard$SheetControlInfoIconLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-sheet-control-info-icon-label-options-property-builder (new CfnDashboard$SheetControlInfoIconLabelOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-sheet-control-layout-configuration-property-builder
  "The build-cfn-dashboard-sheet-control-layout-configuration-property-builder function updates a CfnDashboard$SheetControlLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SheetControlLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `gridLayout` | software.amazon.awscdk.services.quicksight.CfnDashboard$GridLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:grid-layout` |
"
  [^CfnDashboard$SheetControlLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :grid-layout)]
    (. builder gridLayout data))
  (.build builder))


(defn cfn-dashboard-sheet-control-layout-configuration-property-builder
  "Creates a  `CfnDashboard$SheetControlLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-sheet-control-layout-configuration-property-builder (new CfnDashboard$SheetControlLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-sheet-control-layout-property-builder
  "The build-cfn-dashboard-sheet-control-layout-property-builder function updates a CfnDashboard$SheetControlLayoutProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SheetControlLayoutProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configuration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:configuration` |
"
  [^CfnDashboard$SheetControlLayoutProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :configuration)]
    (. builder configuration data))
  (.build builder))


(defn cfn-dashboard-sheet-control-layout-property-builder
  "Creates a  `CfnDashboard$SheetControlLayoutProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-sheet-control-layout-property-builder (new CfnDashboard$SheetControlLayoutProperty$Builder) id config))


(defn build-cfn-dashboard-sheet-controls-option-property-builder
  "The build-cfn-dashboard-sheet-controls-option-property-builder function updates a CfnDashboard$SheetControlsOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SheetControlsOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibilityState` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility-state` |
"
  [^CfnDashboard$SheetControlsOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility-state)]
    (. builder visibilityState data))
  (.build builder))


(defn cfn-dashboard-sheet-controls-option-property-builder
  "Creates a  `CfnDashboard$SheetControlsOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-sheet-controls-option-property-builder (new CfnDashboard$SheetControlsOptionProperty$Builder) id config))


(defn build-cfn-dashboard-sheet-definition-property-builder
  "The build-cfn-dashboard-sheet-definition-property-builder function updates a CfnDashboard$SheetDefinitionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SheetDefinitionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-type` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `filterControls` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-controls` |
| `layouts` | java.util.List | [[cdk.support/lookup-entry]] | `:layouts` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterControls` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameter-controls` |
| `sheetControlLayouts` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sheet-control-layouts` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |
| `textBoxes` | java.util.List | [[cdk.support/lookup-entry]] | `:text-boxes` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `visuals` | java.util.List | [[cdk.support/lookup-entry]] | `:visuals` |
"
  [^CfnDashboard$SheetDefinitionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :content-type)]
    (. builder contentType data))
  (when-let [data (lookup-entry config id :description)]
    (. builder description data))
  (when-let [data (lookup-entry config id :filter-controls)]
    (. builder filterControls data))
  (when-let [data (lookup-entry config id :layouts)]
    (. builder layouts data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :parameter-controls)]
    (. builder parameterControls data))
  (when-let [data (lookup-entry config id :sheet-control-layouts)]
    (. builder sheetControlLayouts data))
  (when-let [data (lookup-entry config id :sheet-id)]
    (. builder sheetId data))
  (when-let [data (lookup-entry config id :text-boxes)]
    (. builder textBoxes data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visuals)]
    (. builder visuals data))
  (.build builder))


(defn cfn-dashboard-sheet-definition-property-builder
  "Creates a  `CfnDashboard$SheetDefinitionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-sheet-definition-property-builder (new CfnDashboard$SheetDefinitionProperty$Builder) id config))


(defn build-cfn-dashboard-sheet-element-configuration-overrides-property-builder
  "The build-cfn-dashboard-sheet-element-configuration-overrides-property-builder function updates a CfnDashboard$SheetElementConfigurationOverridesProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SheetElementConfigurationOverridesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$SheetElementConfigurationOverridesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-sheet-element-configuration-overrides-property-builder
  "Creates a  `CfnDashboard$SheetElementConfigurationOverridesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-sheet-element-configuration-overrides-property-builder (new CfnDashboard$SheetElementConfigurationOverridesProperty$Builder) id config))


(defn build-cfn-dashboard-sheet-element-rendering-rule-property-builder
  "The build-cfn-dashboard-sheet-element-rendering-rule-property-builder function updates a CfnDashboard$SheetElementRenderingRuleProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SheetElementRenderingRuleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configurationOverrides` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:configuration-overrides` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
"
  [^CfnDashboard$SheetElementRenderingRuleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :configuration-overrides)]
    (. builder configurationOverrides data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (.build builder))


(defn cfn-dashboard-sheet-element-rendering-rule-property-builder
  "Creates a  `CfnDashboard$SheetElementRenderingRuleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-sheet-element-rendering-rule-property-builder (new CfnDashboard$SheetElementRenderingRuleProperty$Builder) id config))


(defn build-cfn-dashboard-sheet-layout-element-maximization-option-property-builder
  "The build-cfn-dashboard-sheet-layout-element-maximization-option-property-builder function updates a CfnDashboard$SheetLayoutElementMaximizationOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SheetLayoutElementMaximizationOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |
"
  [^CfnDashboard$SheetLayoutElementMaximizationOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :availability-status)]
    (. builder availabilityStatus data))
  (.build builder))


(defn cfn-dashboard-sheet-layout-element-maximization-option-property-builder
  "Creates a  `CfnDashboard$SheetLayoutElementMaximizationOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-sheet-layout-element-maximization-option-property-builder (new CfnDashboard$SheetLayoutElementMaximizationOptionProperty$Builder) id config))


(defn build-cfn-dashboard-sheet-property-builder
  "The build-cfn-dashboard-sheet-property-builder function updates a CfnDashboard$SheetProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SheetProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |
"
  [^CfnDashboard$SheetProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :sheet-id)]
    (. builder sheetId data))
  (.build builder))


(defn cfn-dashboard-sheet-property-builder
  "Creates a  `CfnDashboard$SheetProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-sheet-property-builder (new CfnDashboard$SheetProperty$Builder) id config))


(defn build-cfn-dashboard-sheet-text-box-property-builder
  "The build-cfn-dashboard-sheet-text-box-property-builder function updates a CfnDashboard$SheetTextBoxProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SheetTextBoxProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | java.lang.String | [[cdk.support/lookup-entry]] | `:content` |
| `sheetTextBoxId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-text-box-id` |
"
  [^CfnDashboard$SheetTextBoxProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :content)]
    (. builder content data))
  (when-let [data (lookup-entry config id :sheet-text-box-id)]
    (. builder sheetTextBoxId data))
  (.build builder))


(defn cfn-dashboard-sheet-text-box-property-builder
  "Creates a  `CfnDashboard$SheetTextBoxProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-sheet-text-box-property-builder (new CfnDashboard$SheetTextBoxProperty$Builder) id config))


(defn build-cfn-dashboard-sheet-visual-scoping-configuration-property-builder
  "The build-cfn-dashboard-sheet-visual-scoping-configuration-property-builder function updates a CfnDashboard$SheetVisualScopingConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SheetVisualScopingConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `scope` | java.lang.String | [[cdk.support/lookup-entry]] | `:scope` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |
| `visualIds` | java.util.List | [[cdk.support/lookup-entry]] | `:visual-ids` |
"
  [^CfnDashboard$SheetVisualScopingConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :scope)]
    (. builder scope data))
  (when-let [data (lookup-entry config id :sheet-id)]
    (. builder sheetId data))
  (when-let [data (lookup-entry config id :visual-ids)]
    (. builder visualIds data))
  (.build builder))


(defn cfn-dashboard-sheet-visual-scoping-configuration-property-builder
  "Creates a  `CfnDashboard$SheetVisualScopingConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-sheet-visual-scoping-configuration-property-builder (new CfnDashboard$SheetVisualScopingConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-short-format-text-property-builder
  "The build-cfn-dashboard-short-format-text-property-builder function updates a CfnDashboard$ShortFormatTextProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ShortFormatTextProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `plainText` | java.lang.String | [[cdk.support/lookup-entry]] | `:plain-text` |
| `richText` | java.lang.String | [[cdk.support/lookup-entry]] | `:rich-text` |
"
  [^CfnDashboard$ShortFormatTextProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :plain-text)]
    (. builder plainText data))
  (when-let [data (lookup-entry config id :rich-text)]
    (. builder richText data))
  (.build builder))


(defn cfn-dashboard-short-format-text-property-builder
  "Creates a  `CfnDashboard$ShortFormatTextProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-short-format-text-property-builder (new CfnDashboard$ShortFormatTextProperty$Builder) id config))


(defn build-cfn-dashboard-simple-cluster-marker-property-builder
  "The build-cfn-dashboard-simple-cluster-marker-property-builder function updates a CfnDashboard$SimpleClusterMarkerProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SimpleClusterMarkerProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
"
  [^CfnDashboard$SimpleClusterMarkerProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (.build builder))


(defn cfn-dashboard-simple-cluster-marker-property-builder
  "Creates a  `CfnDashboard$SimpleClusterMarkerProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-simple-cluster-marker-property-builder (new CfnDashboard$SimpleClusterMarkerProperty$Builder) id config))


(defn build-cfn-dashboard-slider-control-display-options-property-builder
  "The build-cfn-dashboard-slider-control-display-options-property-builder function updates a CfnDashboard$SliderControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SliderControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnDashboard$SliderControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-dashboard-slider-control-display-options-property-builder
  "Creates a  `CfnDashboard$SliderControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-slider-control-display-options-property-builder (new CfnDashboard$SliderControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-small-multiples-axis-properties-property-builder
  "The build-cfn-dashboard-small-multiples-axis-properties-property-builder function updates a CfnDashboard$SmallMultiplesAxisPropertiesProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SmallMultiplesAxisPropertiesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scale` | java.lang.String | [[cdk.support/lookup-entry]] | `:scale` |
"
  [^CfnDashboard$SmallMultiplesAxisPropertiesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :placement)]
    (. builder placement data))
  (when-let [data (lookup-entry config id :scale)]
    (. builder scale data))
  (.build builder))


(defn cfn-dashboard-small-multiples-axis-properties-property-builder
  "Creates a  `CfnDashboard$SmallMultiplesAxisPropertiesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-small-multiples-axis-properties-property-builder (new CfnDashboard$SmallMultiplesAxisPropertiesProperty$Builder) id config))


(defn build-cfn-dashboard-small-multiples-options-property-builder
  "The build-cfn-dashboard-small-multiples-options-property-builder function updates a CfnDashboard$SmallMultiplesOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SmallMultiplesOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `maxVisibleColumns` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max-visible-columns` |
| `maxVisibleRows` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max-visible-rows` |
| `panelConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:panel-configuration` |
| `xAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | software.amazon.awscdk.services.quicksight.CfnDashboard$SmallMultiplesAxisPropertiesProperty | [[cdk.support/lookup-entry]] | `:y-axis` |
"
  [^CfnDashboard$SmallMultiplesOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :max-visible-columns)]
    (. builder maxVisibleColumns data))
  (when-let [data (lookup-entry config id :max-visible-rows)]
    (. builder maxVisibleRows data))
  (when-let [data (lookup-entry config id :panel-configuration)]
    (. builder panelConfiguration data))
  (when-let [data (lookup-entry config id :x-axis)]
    (. builder xAxis data))
  (when-let [data (lookup-entry config id :y-axis)]
    (. builder yAxis data))
  (.build builder))


(defn cfn-dashboard-small-multiples-options-property-builder
  "Creates a  `CfnDashboard$SmallMultiplesOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-small-multiples-options-property-builder (new CfnDashboard$SmallMultiplesOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-spacing-property-builder
  "The build-cfn-dashboard-spacing-property-builder function updates a CfnDashboard$SpacingProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SpacingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bottom` | java.lang.String | [[cdk.support/lookup-entry]] | `:bottom` |
| `left` | java.lang.String | [[cdk.support/lookup-entry]] | `:left` |
| `right` | java.lang.String | [[cdk.support/lookup-entry]] | `:right` |
| `top` | java.lang.String | [[cdk.support/lookup-entry]] | `:top` |
"
  [^CfnDashboard$SpacingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bottom)]
    (. builder bottom data))
  (when-let [data (lookup-entry config id :left)]
    (. builder left data))
  (when-let [data (lookup-entry config id :right)]
    (. builder right data))
  (when-let [data (lookup-entry config id :top)]
    (. builder top data))
  (.build builder))


(defn cfn-dashboard-spacing-property-builder
  "Creates a  `CfnDashboard$SpacingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-spacing-property-builder (new CfnDashboard$SpacingProperty$Builder) id config))


(defn build-cfn-dashboard-string-default-values-property-builder
  "The build-cfn-dashboard-string-default-values-property-builder function updates a CfnDashboard$StringDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$StringDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |
"
  [^CfnDashboard$StringDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :dynamic-value)]
    (. builder dynamicValue data))
  (when-let [data (lookup-entry config id :static-values)]
    (. builder staticValues data))
  (.build builder))


(defn cfn-dashboard-string-default-values-property-builder
  "Creates a  `CfnDashboard$StringDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-string-default-values-property-builder (new CfnDashboard$StringDefaultValuesProperty$Builder) id config))


(defn build-cfn-dashboard-string-format-configuration-property-builder
  "The build-cfn-dashboard-string-format-configuration-property-builder function updates a CfnDashboard$StringFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$StringFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `nullValueFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numericFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumericFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:numeric-format-configuration` |
"
  [^CfnDashboard$StringFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :null-value-format-configuration)]
    (. builder nullValueFormatConfiguration data))
  (when-let [data (lookup-entry config id :numeric-format-configuration)]
    (. builder numericFormatConfiguration data))
  (.build builder))


(defn cfn-dashboard-string-format-configuration-property-builder
  "Creates a  `CfnDashboard$StringFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-string-format-configuration-property-builder (new CfnDashboard$StringFormatConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-string-parameter-declaration-property-builder
  "The build-cfn-dashboard-string-parameter-declaration-property-builder function updates a CfnDashboard$StringParameterDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$StringParameterDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.services.quicksight.CfnDashboard$StringValueWhenUnsetConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-when-unset` |
"
  [^CfnDashboard$StringParameterDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-values)]
    (. builder defaultValues data))
  (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
    (. builder mappedDataSetParameters data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :parameter-value-type)]
    (. builder parameterValueType data))
  (when-let [data (lookup-entry config id :value-when-unset)]
    (. builder valueWhenUnset data))
  (.build builder))


(defn cfn-dashboard-string-parameter-declaration-property-builder
  "Creates a  `CfnDashboard$StringParameterDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-string-parameter-declaration-property-builder (new CfnDashboard$StringParameterDeclarationProperty$Builder) id config))


(defn build-cfn-dashboard-string-parameter-property-builder
  "The build-cfn-dashboard-string-parameter-property-builder function updates a CfnDashboard$StringParameterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$StringParameterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$StringParameterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-string-parameter-property-builder
  "Creates a  `CfnDashboard$StringParameterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-string-parameter-property-builder (new CfnDashboard$StringParameterProperty$Builder) id config))


(defn build-cfn-dashboard-string-value-when-unset-configuration-property-builder
  "The build-cfn-dashboard-string-value-when-unset-configuration-property-builder function updates a CfnDashboard$StringValueWhenUnsetConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$StringValueWhenUnsetConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |
"
  [^CfnDashboard$StringValueWhenUnsetConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-value)]
    (. builder customValue data))
  (when-let [data (lookup-entry config id :value-when-unset-option)]
    (. builder valueWhenUnsetOption data))
  (.build builder))


(defn cfn-dashboard-string-value-when-unset-configuration-property-builder
  "Creates a  `CfnDashboard$StringValueWhenUnsetConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-string-value-when-unset-configuration-property-builder (new CfnDashboard$StringValueWhenUnsetConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-subtotal-options-property-builder
  "The build-cfn-dashboard-subtotal-options-property-builder function updates a CfnDashboard$SubtotalOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$SubtotalOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldLevel` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-level` |
| `fieldLevelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-level-options` |
| `metricHeaderCellStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:metric-header-cell-style` |
| `styleTargets` | java.util.List | [[cdk.support/lookup-entry]] | `:style-targets` |
| `totalCellStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `valueCellStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:value-cell-style` |
"
  [^CfnDashboard$SubtotalOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :field-level)]
    (. builder fieldLevel data))
  (when-let [data (lookup-entry config id :field-level-options)]
    (. builder fieldLevelOptions data))
  (when-let [data (lookup-entry config id :metric-header-cell-style)]
    (. builder metricHeaderCellStyle data))
  (when-let [data (lookup-entry config id :style-targets)]
    (. builder styleTargets data))
  (when-let [data (lookup-entry config id :total-cell-style)]
    (. builder totalCellStyle data))
  (when-let [data (lookup-entry config id :totals-visibility)]
    (. builder totalsVisibility data))
  (when-let [data (lookup-entry config id :value-cell-style)]
    (. builder valueCellStyle data))
  (.build builder))


(defn cfn-dashboard-subtotal-options-property-builder
  "Creates a  `CfnDashboard$SubtotalOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-subtotal-options-property-builder (new CfnDashboard$SubtotalOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-table-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-table-aggregated-field-wells-property-builder function updates a CfnDashboard$TableAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | java.util.List | [[cdk.support/lookup-entry]] | `:group-by` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$TableAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :group-by)]
    (. builder groupBy data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-table-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$TableAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-aggregated-field-wells-property-builder (new CfnDashboard$TableAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-table-border-options-property-builder
  "The build-cfn-dashboard-table-border-options-property-builder function updates a CfnDashboard$TableBorderOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableBorderOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `style` | java.lang.String | [[cdk.support/lookup-entry]] | `:style` |
| `thickness` | java.lang.Number | [[cdk.support/lookup-entry]] | `:thickness` |
"
  [^CfnDashboard$TableBorderOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :style)]
    (. builder style data))
  (when-let [data (lookup-entry config id :thickness)]
    (. builder thickness data))
  (.build builder))


(defn cfn-dashboard-table-border-options-property-builder
  "Creates a  `CfnDashboard$TableBorderOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-border-options-property-builder (new CfnDashboard$TableBorderOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-table-cell-conditional-formatting-property-builder
  "The build-cfn-dashboard-table-cell-conditional-formatting-property-builder function updates a CfnDashboard$TableCellConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableCellConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `textFormat` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-format` |
"
  [^CfnDashboard$TableCellConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :text-format)]
    (. builder textFormat data))
  (.build builder))


(defn cfn-dashboard-table-cell-conditional-formatting-property-builder
  "Creates a  `CfnDashboard$TableCellConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-cell-conditional-formatting-property-builder (new CfnDashboard$TableCellConditionalFormattingProperty$Builder) id config))


(defn build-cfn-dashboard-table-cell-image-sizing-configuration-property-builder
  "The build-cfn-dashboard-table-cell-image-sizing-configuration-property-builder function updates a CfnDashboard$TableCellImageSizingConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableCellImageSizingConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `tableCellImageScalingConfiguration` | java.lang.String | [[cdk.support/lookup-entry]] | `:table-cell-image-scaling-configuration` |
"
  [^CfnDashboard$TableCellImageSizingConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :table-cell-image-scaling-configuration)]
    (. builder tableCellImageScalingConfiguration data))
  (.build builder))


(defn cfn-dashboard-table-cell-image-sizing-configuration-property-builder
  "Creates a  `CfnDashboard$TableCellImageSizingConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-cell-image-sizing-configuration-property-builder (new CfnDashboard$TableCellImageSizingConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-table-cell-style-property-builder
  "The build-cfn-dashboard-table-cell-style-property-builder function updates a CfnDashboard$TableCellStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableCellStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-color` |
| `border` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:border` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `height` | java.lang.Number | [[cdk.support/lookup-entry]] | `:height` |
| `horizontalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-text-alignment` |
| `textWrap` | java.lang.String | [[cdk.support/lookup-entry]] | `:text-wrap` |
| `verticalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-text-alignment` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$TableCellStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-color)]
    (. builder backgroundColor data))
  (when-let [data (lookup-entry config id :border)]
    (. builder border data))
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (when-let [data (lookup-entry config id :height)]
    (. builder height data))
  (when-let [data (lookup-entry config id :horizontal-text-alignment)]
    (. builder horizontalTextAlignment data))
  (when-let [data (lookup-entry config id :text-wrap)]
    (. builder textWrap data))
  (when-let [data (lookup-entry config id :vertical-text-alignment)]
    (. builder verticalTextAlignment data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-table-cell-style-property-builder
  "Creates a  `CfnDashboard$TableCellStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-cell-style-property-builder (new CfnDashboard$TableCellStyleProperty$Builder) id config))


(defn build-cfn-dashboard-table-conditional-formatting-option-property-builder
  "The build-cfn-dashboard-table-conditional-formatting-option-property-builder function updates a CfnDashboard$TableConditionalFormattingOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableConditionalFormattingOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cell` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:cell` |
| `row` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row` |
"
  [^CfnDashboard$TableConditionalFormattingOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cell)]
    (. builder cell data))
  (when-let [data (lookup-entry config id :row)]
    (. builder row data))
  (.build builder))


(defn cfn-dashboard-table-conditional-formatting-option-property-builder
  "Creates a  `CfnDashboard$TableConditionalFormattingOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-conditional-formatting-option-property-builder (new CfnDashboard$TableConditionalFormattingOptionProperty$Builder) id config))


(defn build-cfn-dashboard-table-conditional-formatting-property-builder
  "The build-cfn-dashboard-table-conditional-formatting-property-builder function updates a CfnDashboard$TableConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |
"
  [^CfnDashboard$TableConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :conditional-formatting-options)]
    (. builder conditionalFormattingOptions data))
  (.build builder))


(defn cfn-dashboard-table-conditional-formatting-property-builder
  "Creates a  `CfnDashboard$TableConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-conditional-formatting-property-builder (new CfnDashboard$TableConditionalFormattingProperty$Builder) id config))


(defn build-cfn-dashboard-table-configuration-property-builder
  "The build-cfn-dashboard-table-configuration-property-builder function updates a CfnDashboard$TableConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableFieldOptionsProperty | [[cdk.support/lookup-entry]] | `:field-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `paginatedReportOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$TablePaginatedReportOptionsProperty | [[cdk.support/lookup-entry]] | `:paginated-report-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tableInlineVisualizations` | java.util.List | [[cdk.support/lookup-entry]] | `:table-inline-visualizations` |
| `tableOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:table-options` |
| `totalOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$TotalOptionsProperty | [[cdk.support/lookup-entry]] | `:total-options` |
"
  [^CfnDashboard$TableConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-options)]
    (. builder fieldOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :paginated-report-options)]
    (. builder paginatedReportOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :table-inline-visualizations)]
    (. builder tableInlineVisualizations data))
  (when-let [data (lookup-entry config id :table-options)]
    (. builder tableOptions data))
  (when-let [data (lookup-entry config id :total-options)]
    (. builder totalOptions data))
  (.build builder))


(defn cfn-dashboard-table-configuration-property-builder
  "Creates a  `CfnDashboard$TableConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-configuration-property-builder (new CfnDashboard$TableConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-table-field-custom-icon-content-property-builder
  "The build-cfn-dashboard-table-field-custom-icon-content-property-builder function updates a CfnDashboard$TableFieldCustomIconContentProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableFieldCustomIconContentProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon` |
"
  [^CfnDashboard$TableFieldCustomIconContentProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (.build builder))


(defn cfn-dashboard-table-field-custom-icon-content-property-builder
  "Creates a  `CfnDashboard$TableFieldCustomIconContentProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-field-custom-icon-content-property-builder (new CfnDashboard$TableFieldCustomIconContentProperty$Builder) id config))


(defn build-cfn-dashboard-table-field-custom-text-content-property-builder
  "The build-cfn-dashboard-table-field-custom-text-content-property-builder function updates a CfnDashboard$TableFieldCustomTextContentProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableFieldCustomTextContentProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `value` | java.lang.String | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$TableFieldCustomTextContentProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-table-field-custom-text-content-property-builder
  "Creates a  `CfnDashboard$TableFieldCustomTextContentProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-field-custom-text-content-property-builder (new CfnDashboard$TableFieldCustomTextContentProperty$Builder) id config))


(defn build-cfn-dashboard-table-field-image-configuration-property-builder
  "The build-cfn-dashboard-table-field-image-configuration-property-builder function updates a CfnDashboard$TableFieldImageConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableFieldImageConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sizingOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellImageSizingConfigurationProperty | [[cdk.support/lookup-entry]] | `:sizing-options` |
"
  [^CfnDashboard$TableFieldImageConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :sizing-options)]
    (. builder sizingOptions data))
  (.build builder))


(defn cfn-dashboard-table-field-image-configuration-property-builder
  "Creates a  `CfnDashboard$TableFieldImageConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-field-image-configuration-property-builder (new CfnDashboard$TableFieldImageConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-table-field-link-configuration-property-builder
  "The build-cfn-dashboard-table-field-link-configuration-property-builder function updates a CfnDashboard$TableFieldLinkConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableFieldLinkConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:content` |
| `target` | java.lang.String | [[cdk.support/lookup-entry]] | `:target` |
"
  [^CfnDashboard$TableFieldLinkConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :content)]
    (. builder content data))
  (when-let [data (lookup-entry config id :target)]
    (. builder target data))
  (.build builder))


(defn cfn-dashboard-table-field-link-configuration-property-builder
  "Creates a  `CfnDashboard$TableFieldLinkConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-field-link-configuration-property-builder (new CfnDashboard$TableFieldLinkConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-table-field-link-content-configuration-property-builder
  "The build-cfn-dashboard-table-field-link-content-configuration-property-builder function updates a CfnDashboard$TableFieldLinkContentConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableFieldLinkContentConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customIconContent` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableFieldCustomIconContentProperty | [[cdk.support/lookup-entry]] | `:custom-icon-content` |
| `customTextContent` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableFieldCustomTextContentProperty | [[cdk.support/lookup-entry]] | `:custom-text-content` |
"
  [^CfnDashboard$TableFieldLinkContentConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-icon-content)]
    (. builder customIconContent data))
  (when-let [data (lookup-entry config id :custom-text-content)]
    (. builder customTextContent data))
  (.build builder))


(defn cfn-dashboard-table-field-link-content-configuration-property-builder
  "Creates a  `CfnDashboard$TableFieldLinkContentConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-field-link-content-configuration-property-builder (new CfnDashboard$TableFieldLinkContentConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-table-field-option-property-builder
  "The build-cfn-dashboard-table-field-option-property-builder function updates a CfnDashboard$TableFieldOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableFieldOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `urlStyling` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:url-styling` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |
"
  [^CfnDashboard$TableFieldOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :url-styling)]
    (. builder urlStyling data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (when-let [data (lookup-entry config id :width)]
    (. builder width data))
  (.build builder))


(defn cfn-dashboard-table-field-option-property-builder
  "Creates a  `CfnDashboard$TableFieldOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-field-option-property-builder (new CfnDashboard$TableFieldOptionProperty$Builder) id config))


(defn build-cfn-dashboard-table-field-options-property-builder
  "The build-cfn-dashboard-table-field-options-property-builder function updates a CfnDashboard$TableFieldOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableFieldOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `order` | java.util.List | [[cdk.support/lookup-entry]] | `:order` |
| `pinnedFieldOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$TablePinnedFieldOptionsProperty | [[cdk.support/lookup-entry]] | `:pinned-field-options` |
| `selectedFieldOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:selected-field-options` |
"
  [^CfnDashboard$TableFieldOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :order)]
    (. builder order data))
  (when-let [data (lookup-entry config id :pinned-field-options)]
    (. builder pinnedFieldOptions data))
  (when-let [data (lookup-entry config id :selected-field-options)]
    (. builder selectedFieldOptions data))
  (.build builder))


(defn cfn-dashboard-table-field-options-property-builder
  "Creates a  `CfnDashboard$TableFieldOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-field-options-property-builder (new CfnDashboard$TableFieldOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-table-field-url-configuration-property-builder
  "The build-cfn-dashboard-table-field-url-configuration-property-builder function updates a CfnDashboard$TableFieldURLConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableFieldURLConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `imageConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableFieldImageConfigurationProperty | [[cdk.support/lookup-entry]] | `:image-configuration` |
| `linkConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:link-configuration` |
"
  [^CfnDashboard$TableFieldURLConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :image-configuration)]
    (. builder imageConfiguration data))
  (when-let [data (lookup-entry config id :link-configuration)]
    (. builder linkConfiguration data))
  (.build builder))


(defn cfn-dashboard-table-field-url-configuration-property-builder
  "Creates a  `CfnDashboard$TableFieldURLConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-field-url-configuration-property-builder (new CfnDashboard$TableFieldURLConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-table-field-wells-property-builder
  "The build-cfn-dashboard-table-field-wells-property-builder function updates a CfnDashboard$TableFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `tableAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:table-aggregated-field-wells` |
| `tableUnaggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:table-unaggregated-field-wells` |
"
  [^CfnDashboard$TableFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :table-aggregated-field-wells)]
    (. builder tableAggregatedFieldWells data))
  (when-let [data (lookup-entry config id :table-unaggregated-field-wells)]
    (. builder tableUnaggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-table-field-wells-property-builder
  "Creates a  `CfnDashboard$TableFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-field-wells-property-builder (new CfnDashboard$TableFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-table-inline-visualization-property-builder
  "The build-cfn-dashboard-table-inline-visualization-property-builder function updates a CfnDashboard$TableInlineVisualizationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableInlineVisualizationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataBars` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataBarsOptionsProperty | [[cdk.support/lookup-entry]] | `:data-bars` |
"
  [^CfnDashboard$TableInlineVisualizationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-bars)]
    (. builder dataBars data))
  (.build builder))


(defn cfn-dashboard-table-inline-visualization-property-builder
  "Creates a  `CfnDashboard$TableInlineVisualizationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-inline-visualization-property-builder (new CfnDashboard$TableInlineVisualizationProperty$Builder) id config))


(defn build-cfn-dashboard-table-options-property-builder
  "The build-cfn-dashboard-table-options-property-builder function updates a CfnDashboard$TableOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cell-style` |
| `headerStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:header-style` |
| `orientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:orientation` |
| `rowAlternateColorOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$RowAlternateColorOptionsProperty | [[cdk.support/lookup-entry]] | `:row-alternate-color-options` |
"
  [^CfnDashboard$TableOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cell-style)]
    (. builder cellStyle data))
  (when-let [data (lookup-entry config id :header-style)]
    (. builder headerStyle data))
  (when-let [data (lookup-entry config id :orientation)]
    (. builder orientation data))
  (when-let [data (lookup-entry config id :row-alternate-color-options)]
    (. builder rowAlternateColorOptions data))
  (.build builder))


(defn cfn-dashboard-table-options-property-builder
  "Creates a  `CfnDashboard$TableOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-options-property-builder (new CfnDashboard$TableOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-table-paginated-report-options-property-builder
  "The build-cfn-dashboard-table-paginated-report-options-property-builder function updates a CfnDashboard$TablePaginatedReportOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TablePaginatedReportOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `overflowColumnHeaderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:overflow-column-header-visibility` |
| `verticalOverflowVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-overflow-visibility` |
"
  [^CfnDashboard$TablePaginatedReportOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :overflow-column-header-visibility)]
    (. builder overflowColumnHeaderVisibility data))
  (when-let [data (lookup-entry config id :vertical-overflow-visibility)]
    (. builder verticalOverflowVisibility data))
  (.build builder))


(defn cfn-dashboard-table-paginated-report-options-property-builder
  "Creates a  `CfnDashboard$TablePaginatedReportOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-paginated-report-options-property-builder (new CfnDashboard$TablePaginatedReportOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-table-pinned-field-options-property-builder
  "The build-cfn-dashboard-table-pinned-field-options-property-builder function updates a CfnDashboard$TablePinnedFieldOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TablePinnedFieldOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pinnedLeftFields` | java.util.List | [[cdk.support/lookup-entry]] | `:pinned-left-fields` |
"
  [^CfnDashboard$TablePinnedFieldOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :pinned-left-fields)]
    (. builder pinnedLeftFields data))
  (.build builder))


(defn cfn-dashboard-table-pinned-field-options-property-builder
  "Creates a  `CfnDashboard$TablePinnedFieldOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-pinned-field-options-property-builder (new CfnDashboard$TablePinnedFieldOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-table-row-conditional-formatting-property-builder
  "The build-cfn-dashboard-table-row-conditional-formatting-property-builder function updates a CfnDashboard$TableRowConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableRowConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:background-color` |
| `textColor` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnDashboard$TableRowConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-color)]
    (. builder backgroundColor data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-dashboard-table-row-conditional-formatting-property-builder
  "Creates a  `CfnDashboard$TableRowConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-row-conditional-formatting-property-builder (new CfnDashboard$TableRowConditionalFormattingProperty$Builder) id config))


(defn build-cfn-dashboard-table-side-border-options-property-builder
  "The build-cfn-dashboard-table-side-border-options-property-builder function updates a CfnDashboard$TableSideBorderOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableSideBorderOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bottom` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bottom` |
| `innerHorizontal` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:inner-horizontal` |
| `innerVertical` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:inner-vertical` |
| `left` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:left` |
| `right` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:right` |
| `top` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:top` |
"
  [^CfnDashboard$TableSideBorderOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bottom)]
    (. builder bottom data))
  (when-let [data (lookup-entry config id :inner-horizontal)]
    (. builder innerHorizontal data))
  (when-let [data (lookup-entry config id :inner-vertical)]
    (. builder innerVertical data))
  (when-let [data (lookup-entry config id :left)]
    (. builder left data))
  (when-let [data (lookup-entry config id :right)]
    (. builder right data))
  (when-let [data (lookup-entry config id :top)]
    (. builder top data))
  (.build builder))


(defn cfn-dashboard-table-side-border-options-property-builder
  "Creates a  `CfnDashboard$TableSideBorderOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-side-border-options-property-builder (new CfnDashboard$TableSideBorderOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-table-sort-configuration-property-builder
  "The build-cfn-dashboard-table-sort-configuration-property-builder function updates a CfnDashboard$TableSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paginationConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$PaginationConfigurationProperty | [[cdk.support/lookup-entry]] | `:pagination-configuration` |
| `rowSort` | java.util.List | [[cdk.support/lookup-entry]] | `:row-sort` |
"
  [^CfnDashboard$TableSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :pagination-configuration)]
    (. builder paginationConfiguration data))
  (when-let [data (lookup-entry config id :row-sort)]
    (. builder rowSort data))
  (.build builder))


(defn cfn-dashboard-table-sort-configuration-property-builder
  "Creates a  `CfnDashboard$TableSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-sort-configuration-property-builder (new CfnDashboard$TableSortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-table-style-target-property-builder
  "The build-cfn-dashboard-table-style-target-property-builder function updates a CfnDashboard$TableStyleTargetProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableStyleTargetProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellType` | java.lang.String | [[cdk.support/lookup-entry]] | `:cell-type` |
"
  [^CfnDashboard$TableStyleTargetProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cell-type)]
    (. builder cellType data))
  (.build builder))


(defn cfn-dashboard-table-style-target-property-builder
  "Creates a  `CfnDashboard$TableStyleTargetProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-style-target-property-builder (new CfnDashboard$TableStyleTargetProperty$Builder) id config))


(defn build-cfn-dashboard-table-unaggregated-field-wells-property-builder
  "The build-cfn-dashboard-table-unaggregated-field-wells-property-builder function updates a CfnDashboard$TableUnaggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableUnaggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$TableUnaggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-table-unaggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$TableUnaggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-unaggregated-field-wells-property-builder (new CfnDashboard$TableUnaggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-table-visual-property-builder
  "The build-cfn-dashboard-table-visual-property-builder function updates a CfnDashboard$TableVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TableVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$TableVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :conditional-formatting)]
    (. builder conditionalFormatting data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-table-visual-property-builder
  "Creates a  `CfnDashboard$TableVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-table-visual-property-builder (new CfnDashboard$TableVisualProperty$Builder) id config))


(defn build-cfn-dashboard-text-area-control-display-options-property-builder
  "The build-cfn-dashboard-text-area-control-display-options-property-builder function updates a CfnDashboard$TextAreaControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TextAreaControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `placeholderOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:placeholder-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnDashboard$TextAreaControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :placeholder-options)]
    (. builder placeholderOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-dashboard-text-area-control-display-options-property-builder
  "Creates a  `CfnDashboard$TextAreaControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-text-area-control-display-options-property-builder (new CfnDashboard$TextAreaControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-text-conditional-format-property-builder
  "The build-cfn-dashboard-text-conditional-format-property-builder function updates a CfnDashboard$TextConditionalFormatProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TextConditionalFormatProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:background-color` |
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnDashboard$TextConditionalFormatProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-color)]
    (. builder backgroundColor data))
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-dashboard-text-conditional-format-property-builder
  "Creates a  `CfnDashboard$TextConditionalFormatProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-text-conditional-format-property-builder (new CfnDashboard$TextConditionalFormatProperty$Builder) id config))


(defn build-cfn-dashboard-text-control-placeholder-options-property-builder
  "The build-cfn-dashboard-text-control-placeholder-options-property-builder function updates a CfnDashboard$TextControlPlaceholderOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TextControlPlaceholderOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$TextControlPlaceholderOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-text-control-placeholder-options-property-builder
  "Creates a  `CfnDashboard$TextControlPlaceholderOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-text-control-placeholder-options-property-builder (new CfnDashboard$TextControlPlaceholderOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-text-field-control-display-options-property-builder
  "The build-cfn-dashboard-text-field-control-display-options-property-builder function updates a CfnDashboard$TextFieldControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TextFieldControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `placeholderOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$TextControlPlaceholderOptionsProperty | [[cdk.support/lookup-entry]] | `:placeholder-options` |
| `titleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnDashboard$TextFieldControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :placeholder-options)]
    (. builder placeholderOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-dashboard-text-field-control-display-options-property-builder
  "Creates a  `CfnDashboard$TextFieldControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-text-field-control-display-options-property-builder (new CfnDashboard$TextFieldControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-thousand-separator-options-property-builder
  "The build-cfn-dashboard-thousand-separator-options-property-builder function updates a CfnDashboard$ThousandSeparatorOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ThousandSeparatorOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `symbol` | java.lang.String | [[cdk.support/lookup-entry]] | `:symbol` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$ThousandSeparatorOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :symbol)]
    (. builder symbol data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-thousand-separator-options-property-builder
  "Creates a  `CfnDashboard$ThousandSeparatorOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-thousand-separator-options-property-builder (new CfnDashboard$ThousandSeparatorOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-time-based-forecast-properties-property-builder
  "The build-cfn-dashboard-time-based-forecast-properties-property-builder function updates a CfnDashboard$TimeBasedForecastPropertiesProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TimeBasedForecastPropertiesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lowerBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:lower-boundary` |
| `periodsBackward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-backward` |
| `periodsForward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-forward` |
| `predictionInterval` | java.lang.Number | [[cdk.support/lookup-entry]] | `:prediction-interval` |
| `seasonality` | java.lang.Number | [[cdk.support/lookup-entry]] | `:seasonality` |
| `upperBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:upper-boundary` |
"
  [^CfnDashboard$TimeBasedForecastPropertiesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :lower-boundary)]
    (. builder lowerBoundary data))
  (when-let [data (lookup-entry config id :periods-backward)]
    (. builder periodsBackward data))
  (when-let [data (lookup-entry config id :periods-forward)]
    (. builder periodsForward data))
  (when-let [data (lookup-entry config id :prediction-interval)]
    (. builder predictionInterval data))
  (when-let [data (lookup-entry config id :seasonality)]
    (. builder seasonality data))
  (when-let [data (lookup-entry config id :upper-boundary)]
    (. builder upperBoundary data))
  (.build builder))


(defn cfn-dashboard-time-based-forecast-properties-property-builder
  "Creates a  `CfnDashboard$TimeBasedForecastPropertiesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-time-based-forecast-properties-property-builder (new CfnDashboard$TimeBasedForecastPropertiesProperty$Builder) id config))


(defn build-cfn-dashboard-time-equality-filter-property-builder
  "The build-cfn-dashboard-time-equality-filter-property-builder function updates a CfnDashboard$TimeEqualityFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TimeEqualityFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `rollingDate` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
| `value` | java.lang.String | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$TimeEqualityFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (when-let [data (lookup-entry config id :rolling-date)]
    (. builder rollingDate data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-time-equality-filter-property-builder
  "Creates a  `CfnDashboard$TimeEqualityFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-time-equality-filter-property-builder (new CfnDashboard$TimeEqualityFilterProperty$Builder) id config))


(defn build-cfn-dashboard-time-range-drill-down-filter-property-builder
  "The build-cfn-dashboard-time-range-drill-down-filter-property-builder function updates a CfnDashboard$TimeRangeDrillDownFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TimeRangeDrillDownFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `rangeMaximum` | java.lang.String | [[cdk.support/lookup-entry]] | `:range-maximum` |
| `rangeMinimum` | java.lang.String | [[cdk.support/lookup-entry]] | `:range-minimum` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnDashboard$TimeRangeDrillDownFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :range-maximum)]
    (. builder rangeMaximum data))
  (when-let [data (lookup-entry config id :range-minimum)]
    (. builder rangeMinimum data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-dashboard-time-range-drill-down-filter-property-builder
  "Creates a  `CfnDashboard$TimeRangeDrillDownFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-time-range-drill-down-filter-property-builder (new CfnDashboard$TimeRangeDrillDownFilterProperty$Builder) id config))


(defn build-cfn-dashboard-time-range-filter-property-builder
  "The build-cfn-dashboard-time-range-filter-property-builder function updates a CfnDashboard$TimeRangeFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TimeRangeFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `excludePeriodConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:exclude-period-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `includeMaximum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-maximum` |
| `includeMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-minimum` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `rangeMaximumValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$TimeRangeFilterValueProperty | [[cdk.support/lookup-entry]] | `:range-maximum-value` |
| `rangeMinimumValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$TimeRangeFilterValueProperty | [[cdk.support/lookup-entry]] | `:range-minimum-value` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnDashboard$TimeRangeFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :exclude-period-configuration)]
    (. builder excludePeriodConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :include-maximum)]
    (. builder includeMaximum data))
  (when-let [data (lookup-entry config id :include-minimum)]
    (. builder includeMinimum data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :range-maximum-value)]
    (. builder rangeMaximumValue data))
  (when-let [data (lookup-entry config id :range-minimum-value)]
    (. builder rangeMinimumValue data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-dashboard-time-range-filter-property-builder
  "Creates a  `CfnDashboard$TimeRangeFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-time-range-filter-property-builder (new CfnDashboard$TimeRangeFilterProperty$Builder) id config))


(defn build-cfn-dashboard-time-range-filter-value-property-builder
  "The build-cfn-dashboard-time-range-filter-value-property-builder function updates a CfnDashboard$TimeRangeFilterValueProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TimeRangeFilterValueProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameter` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter` |
| `rollingDate` | software.amazon.awscdk.services.quicksight.CfnDashboard$RollingDateConfigurationProperty | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `staticValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:static-value` |
"
  [^CfnDashboard$TimeRangeFilterValueProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :parameter)]
    (. builder parameter data))
  (when-let [data (lookup-entry config id :rolling-date)]
    (. builder rollingDate data))
  (when-let [data (lookup-entry config id :static-value)]
    (. builder staticValue data))
  (.build builder))


(defn cfn-dashboard-time-range-filter-value-property-builder
  "Creates a  `CfnDashboard$TimeRangeFilterValueProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-time-range-filter-value-property-builder (new CfnDashboard$TimeRangeFilterValueProperty$Builder) id config))


(defn build-cfn-dashboard-tooltip-item-property-builder
  "The build-cfn-dashboard-tooltip-item-property-builder function updates a CfnDashboard$TooltipItemProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TooltipItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnTooltipItem` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnTooltipItemProperty | [[cdk.support/lookup-entry]] | `:column-tooltip-item` |
| `fieldTooltipItem` | software.amazon.awscdk.services.quicksight.CfnDashboard$FieldTooltipItemProperty | [[cdk.support/lookup-entry]] | `:field-tooltip-item` |
"
  [^CfnDashboard$TooltipItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-tooltip-item)]
    (. builder columnTooltipItem data))
  (when-let [data (lookup-entry config id :field-tooltip-item)]
    (. builder fieldTooltipItem data))
  (.build builder))


(defn cfn-dashboard-tooltip-item-property-builder
  "Creates a  `CfnDashboard$TooltipItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-tooltip-item-property-builder (new CfnDashboard$TooltipItemProperty$Builder) id config))


(defn build-cfn-dashboard-tooltip-options-property-builder
  "The build-cfn-dashboard-tooltip-options-property-builder function updates a CfnDashboard$TooltipOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TooltipOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldBasedTooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-based-tooltip` |
| `selectedTooltipType` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-tooltip-type` |
| `tooltipVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-visibility` |
"
  [^CfnDashboard$TooltipOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-based-tooltip)]
    (. builder fieldBasedTooltip data))
  (when-let [data (lookup-entry config id :selected-tooltip-type)]
    (. builder selectedTooltipType data))
  (when-let [data (lookup-entry config id :tooltip-visibility)]
    (. builder tooltipVisibility data))
  (.build builder))


(defn cfn-dashboard-tooltip-options-property-builder
  "Creates a  `CfnDashboard$TooltipOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-tooltip-options-property-builder (new CfnDashboard$TooltipOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-top-bottom-filter-property-builder
  "The build-cfn-dashboard-top-bottom-filter-property-builder function updates a CfnDashboard$TopBottomFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TopBottomFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationSortConfigurations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:aggregation-sort-configurations` |
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `limit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:limit` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnDashboard$TopBottomFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-sort-configurations)]
    (. builder aggregationSortConfigurations data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :limit)]
    (. builder limit data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-dashboard-top-bottom-filter-property-builder
  "Creates a  `CfnDashboard$TopBottomFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-top-bottom-filter-property-builder (new CfnDashboard$TopBottomFilterProperty$Builder) id config))


(defn build-cfn-dashboard-top-bottom-movers-computation-property-builder
  "The build-cfn-dashboard-top-bottom-movers-computation-property-builder function updates a CfnDashboard$TopBottomMoversComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TopBottomMoversComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `moverSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:mover-size` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `sortOrder` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-order` |
| `time` | software.amazon.awscdk.services.quicksight.CfnDashboard$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$TopBottomMoversComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :mover-size)]
    (. builder moverSize data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :sort-order)]
    (. builder sortOrder data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-top-bottom-movers-computation-property-builder
  "Creates a  `CfnDashboard$TopBottomMoversComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-top-bottom-movers-computation-property-builder (new CfnDashboard$TopBottomMoversComputationProperty$Builder) id config))


(defn build-cfn-dashboard-top-bottom-ranked-computation-property-builder
  "The build-cfn-dashboard-top-bottom-ranked-computation-property-builder function updates a CfnDashboard$TopBottomRankedComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TopBottomRankedComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `resultSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:result-size` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$TopBottomRankedComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :result-size)]
    (. builder resultSize data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-top-bottom-ranked-computation-property-builder
  "Creates a  `CfnDashboard$TopBottomRankedComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-top-bottom-ranked-computation-property-builder (new CfnDashboard$TopBottomRankedComputationProperty$Builder) id config))


(defn build-cfn-dashboard-total-aggregation-computation-property-builder
  "The build-cfn-dashboard-total-aggregation-computation-property-builder function updates a CfnDashboard$TotalAggregationComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TotalAggregationComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `value` | software.amazon.awscdk.services.quicksight.CfnDashboard$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$TotalAggregationComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-total-aggregation-computation-property-builder
  "Creates a  `CfnDashboard$TotalAggregationComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-total-aggregation-computation-property-builder (new CfnDashboard$TotalAggregationComputationProperty$Builder) id config))


(defn build-cfn-dashboard-total-aggregation-function-property-builder
  "The build-cfn-dashboard-total-aggregation-function-property-builder function updates a CfnDashboard$TotalAggregationFunctionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TotalAggregationFunctionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleTotalAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-total-aggregation-function` |
"
  [^CfnDashboard$TotalAggregationFunctionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :simple-total-aggregation-function)]
    (. builder simpleTotalAggregationFunction data))
  (.build builder))


(defn cfn-dashboard-total-aggregation-function-property-builder
  "Creates a  `CfnDashboard$TotalAggregationFunctionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-total-aggregation-function-property-builder (new CfnDashboard$TotalAggregationFunctionProperty$Builder) id config))


(defn build-cfn-dashboard-total-aggregation-option-property-builder
  "The build-cfn-dashboard-total-aggregation-option-property-builder function updates a CfnDashboard$TotalAggregationOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TotalAggregationOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `totalAggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-aggregation-function` |
"
  [^CfnDashboard$TotalAggregationOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :total-aggregation-function)]
    (. builder totalAggregationFunction data))
  (.build builder))


(defn cfn-dashboard-total-aggregation-option-property-builder
  "Creates a  `CfnDashboard$TotalAggregationOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-total-aggregation-option-property-builder (new CfnDashboard$TotalAggregationOptionProperty$Builder) id config))


(defn build-cfn-dashboard-total-options-property-builder
  "The build-cfn-dashboard-total-options-property-builder function updates a CfnDashboard$TotalOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TotalOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scrollStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:scroll-status` |
| `totalAggregationOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:total-aggregation-options` |
| `totalCellStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
"
  [^CfnDashboard$TotalOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :placement)]
    (. builder placement data))
  (when-let [data (lookup-entry config id :scroll-status)]
    (. builder scrollStatus data))
  (when-let [data (lookup-entry config id :total-aggregation-options)]
    (. builder totalAggregationOptions data))
  (when-let [data (lookup-entry config id :total-cell-style)]
    (. builder totalCellStyle data))
  (when-let [data (lookup-entry config id :totals-visibility)]
    (. builder totalsVisibility data))
  (.build builder))


(defn cfn-dashboard-total-options-property-builder
  "Creates a  `CfnDashboard$TotalOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-total-options-property-builder (new CfnDashboard$TotalOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-tree-map-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-tree-map-aggregated-field-wells-property-builder function updates a CfnDashboard$TreeMapAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TreeMapAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `groups` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:groups` |
| `sizes` | java.util.List | [[cdk.support/lookup-entry]] | `:sizes` |
"
  [^CfnDashboard$TreeMapAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :groups)]
    (. builder groups data))
  (when-let [data (lookup-entry config id :sizes)]
    (. builder sizes data))
  (.build builder))


(defn cfn-dashboard-tree-map-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$TreeMapAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-tree-map-aggregated-field-wells-property-builder (new CfnDashboard$TreeMapAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-tree-map-configuration-property-builder
  "The build-cfn-dashboard-tree-map-configuration-property-builder function updates a CfnDashboard$TreeMapConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TreeMapConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `colorScale` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColorScaleProperty | [[cdk.support/lookup-entry]] | `:color-scale` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `groupLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-label-options` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnDashboard$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `sizeLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:size-label-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$TreeMapSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnDashboard$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
"
  [^CfnDashboard$TreeMapConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color-label-options)]
    (. builder colorLabelOptions data))
  (when-let [data (lookup-entry config id :color-scale)]
    (. builder colorScale data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :group-label-options)]
    (. builder groupLabelOptions data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :size-label-options)]
    (. builder sizeLabelOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (.build builder))


(defn cfn-dashboard-tree-map-configuration-property-builder
  "Creates a  `CfnDashboard$TreeMapConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-tree-map-configuration-property-builder (new CfnDashboard$TreeMapConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-tree-map-field-wells-property-builder
  "The build-cfn-dashboard-tree-map-field-wells-property-builder function updates a CfnDashboard$TreeMapFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TreeMapFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treeMapAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tree-map-aggregated-field-wells` |
"
  [^CfnDashboard$TreeMapFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :tree-map-aggregated-field-wells)]
    (. builder treeMapAggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-tree-map-field-wells-property-builder
  "Creates a  `CfnDashboard$TreeMapFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-tree-map-field-wells-property-builder (new CfnDashboard$TreeMapFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-tree-map-sort-configuration-property-builder
  "The build-cfn-dashboard-tree-map-sort-configuration-property-builder function updates a CfnDashboard$TreeMapSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TreeMapSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treeMapGroupItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:tree-map-group-items-limit-configuration` |
| `treeMapSort` | java.util.List | [[cdk.support/lookup-entry]] | `:tree-map-sort` |
"
  [^CfnDashboard$TreeMapSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :tree-map-group-items-limit-configuration)]
    (. builder treeMapGroupItemsLimitConfiguration data))
  (when-let [data (lookup-entry config id :tree-map-sort)]
    (. builder treeMapSort data))
  (.build builder))


(defn cfn-dashboard-tree-map-sort-configuration-property-builder
  "Creates a  `CfnDashboard$TreeMapSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-tree-map-sort-configuration-property-builder (new CfnDashboard$TreeMapSortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-tree-map-visual-property-builder
  "The build-cfn-dashboard-tree-map-visual-property-builder function updates a CfnDashboard$TreeMapVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TreeMapVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$TreeMapConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$TreeMapVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-tree-map-visual-property-builder
  "Creates a  `CfnDashboard$TreeMapVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-tree-map-visual-property-builder (new CfnDashboard$TreeMapVisualProperty$Builder) id config))


(defn build-cfn-dashboard-trend-arrow-options-property-builder
  "The build-cfn-dashboard-trend-arrow-options-property-builder function updates a CfnDashboard$TrendArrowOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$TrendArrowOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$TrendArrowOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-trend-arrow-options-property-builder
  "Creates a  `CfnDashboard$TrendArrowOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-trend-arrow-options-property-builder (new CfnDashboard$TrendArrowOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-unaggregated-field-property-builder
  "The build-cfn-dashboard-unaggregated-field-property-builder function updates a CfnDashboard$UnaggregatedFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$UnaggregatedFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
"
  [^CfnDashboard$UnaggregatedFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (.build builder))


(defn cfn-dashboard-unaggregated-field-property-builder
  "Creates a  `CfnDashboard$UnaggregatedFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-unaggregated-field-property-builder (new CfnDashboard$UnaggregatedFieldProperty$Builder) id config))


(defn build-cfn-dashboard-unique-values-computation-property-builder
  "The build-cfn-dashboard-unique-values-computation-property-builder function updates a CfnDashboard$UniqueValuesComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$UniqueValuesComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
"
  [^CfnDashboard$UniqueValuesComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (.build builder))


(defn cfn-dashboard-unique-values-computation-property-builder
  "Creates a  `CfnDashboard$UniqueValuesComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-unique-values-computation-property-builder (new CfnDashboard$UniqueValuesComputationProperty$Builder) id config))


(defn build-cfn-dashboard-validation-strategy-property-builder
  "The build-cfn-dashboard-validation-strategy-property-builder function updates a CfnDashboard$ValidationStrategyProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$ValidationStrategyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `mode` | java.lang.String | [[cdk.support/lookup-entry]] | `:mode` |
"
  [^CfnDashboard$ValidationStrategyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :mode)]
    (. builder mode data))
  (.build builder))


(defn cfn-dashboard-validation-strategy-property-builder
  "Creates a  `CfnDashboard$ValidationStrategyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-validation-strategy-property-builder (new CfnDashboard$ValidationStrategyProperty$Builder) id config))


(defn build-cfn-dashboard-visible-range-options-property-builder
  "The build-cfn-dashboard-visible-range-options-property-builder function updates a CfnDashboard$VisibleRangeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$VisibleRangeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentRange` | software.amazon.awscdk.services.quicksight.CfnDashboard$PercentVisibleRangeProperty | [[cdk.support/lookup-entry]] | `:percent-range` |
"
  [^CfnDashboard$VisibleRangeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :percent-range)]
    (. builder percentRange data))
  (.build builder))


(defn cfn-dashboard-visible-range-options-property-builder
  "Creates a  `CfnDashboard$VisibleRangeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-visible-range-options-property-builder (new CfnDashboard$VisibleRangeOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-visual-axis-sort-option-property-builder
  "The build-cfn-dashboard-visual-axis-sort-option-property-builder function updates a CfnDashboard$VisualAxisSortOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$VisualAxisSortOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |
"
  [^CfnDashboard$VisualAxisSortOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :availability-status)]
    (. builder availabilityStatus data))
  (.build builder))


(defn cfn-dashboard-visual-axis-sort-option-property-builder
  "Creates a  `CfnDashboard$VisualAxisSortOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-visual-axis-sort-option-property-builder (new CfnDashboard$VisualAxisSortOptionProperty$Builder) id config))


(defn build-cfn-dashboard-visual-custom-action-operation-property-builder
  "The build-cfn-dashboard-visual-custom-action-operation-property-builder function updates a CfnDashboard$VisualCustomActionOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$VisualCustomActionOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `filterOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-operation` |
| `navigationOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:navigation-operation` |
| `setParametersOperation` | software.amazon.awscdk.services.quicksight.CfnDashboard$CustomActionSetParametersOperationProperty | [[cdk.support/lookup-entry]] | `:set-parameters-operation` |
| `urlOperation` | software.amazon.awscdk.services.quicksight.CfnDashboard$CustomActionURLOperationProperty | [[cdk.support/lookup-entry]] | `:url-operation` |
"
  [^CfnDashboard$VisualCustomActionOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :filter-operation)]
    (. builder filterOperation data))
  (when-let [data (lookup-entry config id :navigation-operation)]
    (. builder navigationOperation data))
  (when-let [data (lookup-entry config id :set-parameters-operation)]
    (. builder setParametersOperation data))
  (when-let [data (lookup-entry config id :url-operation)]
    (. builder urlOperation data))
  (.build builder))


(defn cfn-dashboard-visual-custom-action-operation-property-builder
  "Creates a  `CfnDashboard$VisualCustomActionOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-visual-custom-action-operation-property-builder (new CfnDashboard$VisualCustomActionOperationProperty$Builder) id config))


(defn build-cfn-dashboard-visual-custom-action-property-builder
  "The build-cfn-dashboard-visual-custom-action-property-builder function updates a CfnDashboard$VisualCustomActionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$VisualCustomActionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actionOperations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:action-operations` |
| `customActionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-action-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `trigger` | java.lang.String | [[cdk.support/lookup-entry]] | `:trigger` |
"
  [^CfnDashboard$VisualCustomActionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :action-operations)]
    (. builder actionOperations data))
  (when-let [data (lookup-entry config id :custom-action-id)]
    (. builder customActionId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (when-let [data (lookup-entry config id :trigger)]
    (. builder trigger data))
  (.build builder))


(defn cfn-dashboard-visual-custom-action-property-builder
  "Creates a  `CfnDashboard$VisualCustomActionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-visual-custom-action-property-builder (new CfnDashboard$VisualCustomActionProperty$Builder) id config))


(defn build-cfn-dashboard-visual-menu-option-property-builder
  "The build-cfn-dashboard-visual-menu-option-property-builder function updates a CfnDashboard$VisualMenuOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$VisualMenuOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |
"
  [^CfnDashboard$VisualMenuOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :availability-status)]
    (. builder availabilityStatus data))
  (.build builder))


(defn cfn-dashboard-visual-menu-option-property-builder
  "Creates a  `CfnDashboard$VisualMenuOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-visual-menu-option-property-builder (new CfnDashboard$VisualMenuOptionProperty$Builder) id config))


(defn build-cfn-dashboard-visual-palette-property-builder
  "The build-cfn-dashboard-visual-palette-property-builder function updates a CfnDashboard$VisualPaletteProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$VisualPaletteProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `chartColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:chart-color` |
| `colorMap` | java.util.List | [[cdk.support/lookup-entry]] | `:color-map` |
"
  [^CfnDashboard$VisualPaletteProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :chart-color)]
    (. builder chartColor data))
  (when-let [data (lookup-entry config id :color-map)]
    (. builder colorMap data))
  (.build builder))


(defn cfn-dashboard-visual-palette-property-builder
  "Creates a  `CfnDashboard$VisualPaletteProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-visual-palette-property-builder (new CfnDashboard$VisualPaletteProperty$Builder) id config))


(defn build-cfn-dashboard-visual-property-builder
  "The build-cfn-dashboard-visual-property-builder function updates a CfnDashboard$VisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$VisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bar-chart-visual` |
| `boxPlotVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$BoxPlotVisualProperty | [[cdk.support/lookup-entry]] | `:box-plot-visual` |
| `comboChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:combo-chart-visual` |
| `customContentVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$CustomContentVisualProperty | [[cdk.support/lookup-entry]] | `:custom-content-visual` |
| `emptyVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$EmptyVisualProperty | [[cdk.support/lookup-entry]] | `:empty-visual` |
| `filledMapVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilledMapVisualProperty | [[cdk.support/lookup-entry]] | `:filled-map-visual` |
| `funnelChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:funnel-chart-visual` |
| `gaugeChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:gauge-chart-visual` |
| `geospatialMapVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:geospatial-map-visual` |
| `heatMapVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heat-map-visual` |
| `histogramVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$HistogramVisualProperty | [[cdk.support/lookup-entry]] | `:histogram-visual` |
| `insightVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:insight-visual` |
| `kpiVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:kpi-visual` |
| `lineChartVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$LineChartVisualProperty | [[cdk.support/lookup-entry]] | `:line-chart-visual` |
| `pieChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:pie-chart-visual` |
| `pivotTableVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableVisualProperty | [[cdk.support/lookup-entry]] | `:pivot-table-visual` |
| `radarChartVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$RadarChartVisualProperty | [[cdk.support/lookup-entry]] | `:radar-chart-visual` |
| `sankeyDiagramVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sankey-diagram-visual` |
| `scatterPlotVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scatter-plot-visual` |
| `tableVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableVisualProperty | [[cdk.support/lookup-entry]] | `:table-visual` |
| `treeMapVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$TreeMapVisualProperty | [[cdk.support/lookup-entry]] | `:tree-map-visual` |
| `waterfallVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$WaterfallVisualProperty | [[cdk.support/lookup-entry]] | `:waterfall-visual` |
| `wordCloudVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$WordCloudVisualProperty | [[cdk.support/lookup-entry]] | `:word-cloud-visual` |
"
  [^CfnDashboard$VisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bar-chart-visual)]
    (. builder barChartVisual data))
  (when-let [data (lookup-entry config id :box-plot-visual)]
    (. builder boxPlotVisual data))
  (when-let [data (lookup-entry config id :combo-chart-visual)]
    (. builder comboChartVisual data))
  (when-let [data (lookup-entry config id :custom-content-visual)]
    (. builder customContentVisual data))
  (when-let [data (lookup-entry config id :empty-visual)]
    (. builder emptyVisual data))
  (when-let [data (lookup-entry config id :filled-map-visual)]
    (. builder filledMapVisual data))
  (when-let [data (lookup-entry config id :funnel-chart-visual)]
    (. builder funnelChartVisual data))
  (when-let [data (lookup-entry config id :gauge-chart-visual)]
    (. builder gaugeChartVisual data))
  (when-let [data (lookup-entry config id :geospatial-map-visual)]
    (. builder geospatialMapVisual data))
  (when-let [data (lookup-entry config id :heat-map-visual)]
    (. builder heatMapVisual data))
  (when-let [data (lookup-entry config id :histogram-visual)]
    (. builder histogramVisual data))
  (when-let [data (lookup-entry config id :insight-visual)]
    (. builder insightVisual data))
  (when-let [data (lookup-entry config id :kpi-visual)]
    (. builder kpiVisual data))
  (when-let [data (lookup-entry config id :line-chart-visual)]
    (. builder lineChartVisual data))
  (when-let [data (lookup-entry config id :pie-chart-visual)]
    (. builder pieChartVisual data))
  (when-let [data (lookup-entry config id :pivot-table-visual)]
    (. builder pivotTableVisual data))
  (when-let [data (lookup-entry config id :radar-chart-visual)]
    (. builder radarChartVisual data))
  (when-let [data (lookup-entry config id :sankey-diagram-visual)]
    (. builder sankeyDiagramVisual data))
  (when-let [data (lookup-entry config id :scatter-plot-visual)]
    (. builder scatterPlotVisual data))
  (when-let [data (lookup-entry config id :table-visual)]
    (. builder tableVisual data))
  (when-let [data (lookup-entry config id :tree-map-visual)]
    (. builder treeMapVisual data))
  (when-let [data (lookup-entry config id :waterfall-visual)]
    (. builder waterfallVisual data))
  (when-let [data (lookup-entry config id :word-cloud-visual)]
    (. builder wordCloudVisual data))
  (.build builder))


(defn cfn-dashboard-visual-property-builder
  "Creates a  `CfnDashboard$VisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-visual-property-builder (new CfnDashboard$VisualProperty$Builder) id config))


(defn build-cfn-dashboard-visual-subtitle-label-options-property-builder
  "The build-cfn-dashboard-visual-subtitle-label-options-property-builder function updates a CfnDashboard$VisualSubtitleLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$VisualSubtitleLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatText` | software.amazon.awscdk.services.quicksight.CfnDashboard$LongFormatTextProperty | [[cdk.support/lookup-entry]] | `:format-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$VisualSubtitleLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :format-text)]
    (. builder formatText data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-visual-subtitle-label-options-property-builder
  "Creates a  `CfnDashboard$VisualSubtitleLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-visual-subtitle-label-options-property-builder (new CfnDashboard$VisualSubtitleLabelOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-visual-title-label-options-property-builder
  "The build-cfn-dashboard-visual-title-label-options-property-builder function updates a CfnDashboard$VisualTitleLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$VisualTitleLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatText` | software.amazon.awscdk.services.quicksight.CfnDashboard$ShortFormatTextProperty | [[cdk.support/lookup-entry]] | `:format-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnDashboard$VisualTitleLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :format-text)]
    (. builder formatText data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-dashboard-visual-title-label-options-property-builder
  "Creates a  `CfnDashboard$VisualTitleLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-visual-title-label-options-property-builder (new CfnDashboard$VisualTitleLabelOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-waterfall-chart-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-waterfall-chart-aggregated-field-wells-property-builder function updates a CfnDashboard$WaterfallChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$WaterfallChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `breakdowns` | java.util.List | [[cdk.support/lookup-entry]] | `:breakdowns` |
| `categories` | java.util.List | [[cdk.support/lookup-entry]] | `:categories` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnDashboard$WaterfallChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :breakdowns)]
    (. builder breakdowns data))
  (when-let [data (lookup-entry config id :categories)]
    (. builder categories data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-dashboard-waterfall-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$WaterfallChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-waterfall-chart-aggregated-field-wells-property-builder (new CfnDashboard$WaterfallChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-waterfall-chart-color-configuration-property-builder
  "The build-cfn-dashboard-waterfall-chart-color-configuration-property-builder function updates a CfnDashboard$WaterfallChartColorConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$WaterfallChartColorConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupColorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-color-configuration` |
"
  [^CfnDashboard$WaterfallChartColorConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :group-color-configuration)]
    (. builder groupColorConfiguration data))
  (.build builder))


(defn cfn-dashboard-waterfall-chart-color-configuration-property-builder
  "Creates a  `CfnDashboard$WaterfallChartColorConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-waterfall-chart-color-configuration-property-builder (new CfnDashboard$WaterfallChartColorConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-waterfall-chart-configuration-property-builder
  "The build-cfn-dashboard-waterfall-chart-configuration-property-builder function updates a CfnDashboard$WaterfallChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$WaterfallChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis-display-options` |
| `categoryAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis-label-options` |
| `colorConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$WaterfallChartColorConfigurationProperty | [[cdk.support/lookup-entry]] | `:color-configuration` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnDashboard$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `waterfallChartOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:waterfall-chart-options` |
"
  [^CfnDashboard$WaterfallChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-axis-display-options)]
    (. builder categoryAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :category-axis-label-options)]
    (. builder categoryAxisLabelOptions data))
  (when-let [data (lookup-entry config id :color-configuration)]
    (. builder colorConfiguration data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
    (. builder primaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
    (. builder primaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (when-let [data (lookup-entry config id :waterfall-chart-options)]
    (. builder waterfallChartOptions data))
  (.build builder))


(defn cfn-dashboard-waterfall-chart-configuration-property-builder
  "Creates a  `CfnDashboard$WaterfallChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-waterfall-chart-configuration-property-builder (new CfnDashboard$WaterfallChartConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-waterfall-chart-field-wells-property-builder
  "The build-cfn-dashboard-waterfall-chart-field-wells-property-builder function updates a CfnDashboard$WaterfallChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$WaterfallChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `waterfallChartAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$WaterfallChartAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:waterfall-chart-aggregated-field-wells` |
"
  [^CfnDashboard$WaterfallChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :waterfall-chart-aggregated-field-wells)]
    (. builder waterfallChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-waterfall-chart-field-wells-property-builder
  "Creates a  `CfnDashboard$WaterfallChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-waterfall-chart-field-wells-property-builder (new CfnDashboard$WaterfallChartFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-waterfall-chart-group-color-configuration-property-builder
  "The build-cfn-dashboard-waterfall-chart-group-color-configuration-property-builder function updates a CfnDashboard$WaterfallChartGroupColorConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$WaterfallChartGroupColorConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `negativeBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:negative-bar-color` |
| `positiveBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:positive-bar-color` |
| `totalBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:total-bar-color` |
"
  [^CfnDashboard$WaterfallChartGroupColorConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :negative-bar-color)]
    (. builder negativeBarColor data))
  (when-let [data (lookup-entry config id :positive-bar-color)]
    (. builder positiveBarColor data))
  (when-let [data (lookup-entry config id :total-bar-color)]
    (. builder totalBarColor data))
  (.build builder))


(defn cfn-dashboard-waterfall-chart-group-color-configuration-property-builder
  "Creates a  `CfnDashboard$WaterfallChartGroupColorConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-waterfall-chart-group-color-configuration-property-builder (new CfnDashboard$WaterfallChartGroupColorConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-waterfall-chart-options-property-builder
  "The build-cfn-dashboard-waterfall-chart-options-property-builder function updates a CfnDashboard$WaterfallChartOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$WaterfallChartOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `totalBarLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:total-bar-label` |
"
  [^CfnDashboard$WaterfallChartOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :total-bar-label)]
    (. builder totalBarLabel data))
  (.build builder))


(defn cfn-dashboard-waterfall-chart-options-property-builder
  "Creates a  `CfnDashboard$WaterfallChartOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-waterfall-chart-options-property-builder (new CfnDashboard$WaterfallChartOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-waterfall-chart-sort-configuration-property-builder
  "The build-cfn-dashboard-waterfall-chart-sort-configuration-property-builder function updates a CfnDashboard$WaterfallChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$WaterfallChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `breakdownItemsLimit` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:breakdown-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
"
  [^CfnDashboard$WaterfallChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :breakdown-items-limit)]
    (. builder breakdownItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (.build builder))


(defn cfn-dashboard-waterfall-chart-sort-configuration-property-builder
  "Creates a  `CfnDashboard$WaterfallChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-waterfall-chart-sort-configuration-property-builder (new CfnDashboard$WaterfallChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-waterfall-visual-property-builder
  "The build-cfn-dashboard-waterfall-visual-property-builder function updates a CfnDashboard$WaterfallVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$WaterfallVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$WaterfallVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-waterfall-visual-property-builder
  "Creates a  `CfnDashboard$WaterfallVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-waterfall-visual-property-builder (new CfnDashboard$WaterfallVisualProperty$Builder) id config))


(defn build-cfn-dashboard-what-if-point-scenario-property-builder
  "The build-cfn-dashboard-what-if-point-scenario-property-builder function updates a CfnDashboard$WhatIfPointScenarioProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$WhatIfPointScenarioProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `date` | java.lang.String | [[cdk.support/lookup-entry]] | `:date` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$WhatIfPointScenarioProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date)]
    (. builder date data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-what-if-point-scenario-property-builder
  "Creates a  `CfnDashboard$WhatIfPointScenarioProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-what-if-point-scenario-property-builder (new CfnDashboard$WhatIfPointScenarioProperty$Builder) id config))


(defn build-cfn-dashboard-what-if-range-scenario-property-builder
  "The build-cfn-dashboard-what-if-range-scenario-property-builder function updates a CfnDashboard$WhatIfRangeScenarioProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$WhatIfRangeScenarioProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `endDate` | java.lang.String | [[cdk.support/lookup-entry]] | `:end-date` |
| `startDate` | java.lang.String | [[cdk.support/lookup-entry]] | `:start-date` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnDashboard$WhatIfRangeScenarioProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :end-date)]
    (. builder endDate data))
  (when-let [data (lookup-entry config id :start-date)]
    (. builder startDate data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-dashboard-what-if-range-scenario-property-builder
  "Creates a  `CfnDashboard$WhatIfRangeScenarioProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-what-if-range-scenario-property-builder (new CfnDashboard$WhatIfRangeScenarioProperty$Builder) id config))


(defn build-cfn-dashboard-word-cloud-aggregated-field-wells-property-builder
  "The build-cfn-dashboard-word-cloud-aggregated-field-wells-property-builder function updates a CfnDashboard$WordCloudAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$WordCloudAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-by` |
| `size` | java.util.List | [[cdk.support/lookup-entry]] | `:size` |
"
  [^CfnDashboard$WordCloudAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :group-by)]
    (. builder groupBy data))
  (when-let [data (lookup-entry config id :size)]
    (. builder size data))
  (.build builder))


(defn cfn-dashboard-word-cloud-aggregated-field-wells-property-builder
  "Creates a  `CfnDashboard$WordCloudAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-word-cloud-aggregated-field-wells-property-builder (new CfnDashboard$WordCloudAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-word-cloud-chart-configuration-property-builder
  "The build-cfn-dashboard-word-cloud-chart-configuration-property-builder function updates a CfnDashboard$WordCloudChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$WordCloudChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$WordCloudFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$WordCloudSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `wordCloudOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:word-cloud-options` |
"
  [^CfnDashboard$WordCloudChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :word-cloud-options)]
    (. builder wordCloudOptions data))
  (.build builder))


(defn cfn-dashboard-word-cloud-chart-configuration-property-builder
  "Creates a  `CfnDashboard$WordCloudChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-word-cloud-chart-configuration-property-builder (new CfnDashboard$WordCloudChartConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-word-cloud-field-wells-property-builder
  "The build-cfn-dashboard-word-cloud-field-wells-property-builder function updates a CfnDashboard$WordCloudFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$WordCloudFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `wordCloudAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$WordCloudAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:word-cloud-aggregated-field-wells` |
"
  [^CfnDashboard$WordCloudFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :word-cloud-aggregated-field-wells)]
    (. builder wordCloudAggregatedFieldWells data))
  (.build builder))


(defn cfn-dashboard-word-cloud-field-wells-property-builder
  "Creates a  `CfnDashboard$WordCloudFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-word-cloud-field-wells-property-builder (new CfnDashboard$WordCloudFieldWellsProperty$Builder) id config))


(defn build-cfn-dashboard-word-cloud-options-property-builder
  "The build-cfn-dashboard-word-cloud-options-property-builder function updates a CfnDashboard$WordCloudOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$WordCloudOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cloudLayout` | java.lang.String | [[cdk.support/lookup-entry]] | `:cloud-layout` |
| `maximumStringLength` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-string-length` |
| `wordCasing` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-casing` |
| `wordOrientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-orientation` |
| `wordPadding` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-padding` |
| `wordScaling` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-scaling` |
"
  [^CfnDashboard$WordCloudOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cloud-layout)]
    (. builder cloudLayout data))
  (when-let [data (lookup-entry config id :maximum-string-length)]
    (. builder maximumStringLength data))
  (when-let [data (lookup-entry config id :word-casing)]
    (. builder wordCasing data))
  (when-let [data (lookup-entry config id :word-orientation)]
    (. builder wordOrientation data))
  (when-let [data (lookup-entry config id :word-padding)]
    (. builder wordPadding data))
  (when-let [data (lookup-entry config id :word-scaling)]
    (. builder wordScaling data))
  (.build builder))


(defn cfn-dashboard-word-cloud-options-property-builder
  "Creates a  `CfnDashboard$WordCloudOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-word-cloud-options-property-builder (new CfnDashboard$WordCloudOptionsProperty$Builder) id config))


(defn build-cfn-dashboard-word-cloud-sort-configuration-property-builder
  "The build-cfn-dashboard-word-cloud-sort-configuration-property-builder function updates a CfnDashboard$WordCloudSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$WordCloudSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
"
  [^CfnDashboard$WordCloudSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (.build builder))


(defn cfn-dashboard-word-cloud-sort-configuration-property-builder
  "Creates a  `CfnDashboard$WordCloudSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-word-cloud-sort-configuration-property-builder (new CfnDashboard$WordCloudSortConfigurationProperty$Builder) id config))


(defn build-cfn-dashboard-word-cloud-visual-property-builder
  "The build-cfn-dashboard-word-cloud-visual-property-builder function updates a CfnDashboard$WordCloudVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnDashboard$WordCloudVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnDashboard$WordCloudVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-dashboard-word-cloud-visual-property-builder
  "Creates a  `CfnDashboard$WordCloudVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-dashboard-word-cloud-visual-property-builder (new CfnDashboard$WordCloudVisualProperty$Builder) id config))


(defn build-cfn-data-set-builder
  "The build-cfn-data-set-builder function updates a CfnDataSet$Builder instance using the provided configuration.
  The function takes the CfnDataSet$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `columnGroups` | java.util.List | [[cdk.support/lookup-entry]] | `:column-groups` |
| `columnLevelPermissionRules` | java.util.List | [[cdk.support/lookup-entry]] | `:column-level-permission-rules` |
| `dataSetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-id` |
| `dataSetRefreshProperties` | software.amazon.awscdk.services.quicksight.CfnDataSet$DataSetRefreshPropertiesProperty | [[cdk.support/lookup-entry]] | `:data-set-refresh-properties` |
| `dataSetUsageConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-set-usage-configuration` |
| `datasetParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:dataset-parameters` |
| `fieldFolders` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-folders` |
| `importMode` | java.lang.String | [[cdk.support/lookup-entry]] | `:import-mode` |
| `ingestionWaitPolicy` | software.amazon.awscdk.services.quicksight.CfnDataSet$IngestionWaitPolicyProperty | [[cdk.support/lookup-entry]] | `:ingestion-wait-policy` |
| `logicalTableMap` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:logical-table-map` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `permissions` | java.util.List | [[cdk.support/lookup-entry]] | `:permissions` |
| `physicalTableMap` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:physical-table-map` |
| `rowLevelPermissionDataSet` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-level-permission-data-set` |
| `rowLevelPermissionTagConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-level-permission-tag-configuration` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
"
  [^CfnDataSet$Builder builder id config]
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :column-groups)]
    (. builder columnGroups data))
  (when-let [data (lookup-entry config id :column-level-permission-rules)]
    (. builder columnLevelPermissionRules data))
  (when-let [data (lookup-entry config id :data-set-id)]
    (. builder dataSetId data))
  (when-let [data (lookup-entry config id :data-set-refresh-properties)]
    (. builder dataSetRefreshProperties data))
  (when-let [data (lookup-entry config id :data-set-usage-configuration)]
    (. builder dataSetUsageConfiguration data))
  (when-let [data (lookup-entry config id :dataset-parameters)]
    (. builder datasetParameters data))
  (when-let [data (lookup-entry config id :field-folders)]
    (. builder fieldFolders data))
  (when-let [data (lookup-entry config id :import-mode)]
    (. builder importMode data))
  (when-let [data (lookup-entry config id :ingestion-wait-policy)]
    (. builder ingestionWaitPolicy data))
  (when-let [data (lookup-entry config id :logical-table-map)]
    (. builder logicalTableMap data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :permissions)]
    (. builder permissions data))
  (when-let [data (lookup-entry config id :physical-table-map)]
    (. builder physicalTableMap data))
  (when-let [data (lookup-entry config id :row-level-permission-data-set)]
    (. builder rowLevelPermissionDataSet data))
  (when-let [data (lookup-entry config id :row-level-permission-tag-configuration)]
    (. builder rowLevelPermissionTagConfiguration data))
  (when-let [data (lookup-entry config id :tags)]
    (. builder tags data))
  (.build builder))


(defn cfn-data-set-builder
  "Creates a  `CfnDataSet$Builder` instance using a scope and ID, applies the data configuration, then builds it.  Takes the following arguments: 
| Argument | DataType | Description |
|---|---|---|
| scope | software.constructs.Construct | The parent scope construct of the object being built. |
| id | String or Keyword or Symbol | Value to use as both the ID of the object being build and the namespace when looking up configuration values. |
| config | map | Data configuration |"
  [^software.constructs.Construct scope id config]
  (build-cfn-data-set-builder (CfnDataSet$Builder/create scope (name id)) id config))


(defn build-cfn-data-set-calculated-column-property-builder
  "The build-cfn-data-set-calculated-column-property-builder function updates a CfnDataSet$CalculatedColumnProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$CalculatedColumnProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnId` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-id` |
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
"
  [^CfnDataSet$CalculatedColumnProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-id)]
    (. builder columnId data))
  (when-let [data (lookup-entry config id :column-name)]
    (. builder columnName data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (.build builder))


(defn cfn-data-set-calculated-column-property-builder
  "Creates a  `CfnDataSet$CalculatedColumnProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-calculated-column-property-builder (new CfnDataSet$CalculatedColumnProperty$Builder) id config))


(defn build-cfn-data-set-cast-column-type-operation-property-builder
  "The build-cfn-data-set-cast-column-type-operation-property-builder function updates a CfnDataSet$CastColumnTypeOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$CastColumnTypeOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `format` | java.lang.String | [[cdk.support/lookup-entry]] | `:format` |
| `newColumnType` | java.lang.String | [[cdk.support/lookup-entry]] | `:new-column-type` |
| `subType` | java.lang.String | [[cdk.support/lookup-entry]] | `:sub-type` |
"
  [^CfnDataSet$CastColumnTypeOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-name)]
    (. builder columnName data))
  (when-let [data (lookup-entry config id :format)]
    (. builder format data))
  (when-let [data (lookup-entry config id :new-column-type)]
    (. builder newColumnType data))
  (when-let [data (lookup-entry config id :sub-type)]
    (. builder subType data))
  (.build builder))


(defn cfn-data-set-cast-column-type-operation-property-builder
  "Creates a  `CfnDataSet$CastColumnTypeOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-cast-column-type-operation-property-builder (new CfnDataSet$CastColumnTypeOperationProperty$Builder) id config))


(defn build-cfn-data-set-column-description-property-builder
  "The build-cfn-data-set-column-description-property-builder function updates a CfnDataSet$ColumnDescriptionProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$ColumnDescriptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `text` | java.lang.String | [[cdk.support/lookup-entry]] | `:text` |
"
  [^CfnDataSet$ColumnDescriptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :text)]
    (. builder text data))
  (.build builder))


(defn cfn-data-set-column-description-property-builder
  "Creates a  `CfnDataSet$ColumnDescriptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-column-description-property-builder (new CfnDataSet$ColumnDescriptionProperty$Builder) id config))


(defn build-cfn-data-set-column-group-property-builder
  "The build-cfn-data-set-column-group-property-builder function updates a CfnDataSet$ColumnGroupProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$ColumnGroupProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `geoSpatialColumnGroup` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:geo-spatial-column-group` |
"
  [^CfnDataSet$ColumnGroupProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :geo-spatial-column-group)]
    (. builder geoSpatialColumnGroup data))
  (.build builder))


(defn cfn-data-set-column-group-property-builder
  "Creates a  `CfnDataSet$ColumnGroupProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-column-group-property-builder (new CfnDataSet$ColumnGroupProperty$Builder) id config))


(defn build-cfn-data-set-column-level-permission-rule-property-builder
  "The build-cfn-data-set-column-level-permission-rule-property-builder function updates a CfnDataSet$ColumnLevelPermissionRuleProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$ColumnLevelPermissionRuleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnNames` | java.util.List | [[cdk.support/lookup-entry]] | `:column-names` |
| `principals` | java.util.List | [[cdk.support/lookup-entry]] | `:principals` |
"
  [^CfnDataSet$ColumnLevelPermissionRuleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-names)]
    (. builder columnNames data))
  (when-let [data (lookup-entry config id :principals)]
    (. builder principals data))
  (.build builder))


(defn cfn-data-set-column-level-permission-rule-property-builder
  "Creates a  `CfnDataSet$ColumnLevelPermissionRuleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-column-level-permission-rule-property-builder (new CfnDataSet$ColumnLevelPermissionRuleProperty$Builder) id config))


(defn build-cfn-data-set-column-tag-property-builder
  "The build-cfn-data-set-column-tag-property-builder function updates a CfnDataSet$ColumnTagProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$ColumnTagProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnDescription` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-description` |
| `columnGeographicRole` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-geographic-role` |
"
  [^CfnDataSet$ColumnTagProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-description)]
    (. builder columnDescription data))
  (when-let [data (lookup-entry config id :column-geographic-role)]
    (. builder columnGeographicRole data))
  (.build builder))


(defn cfn-data-set-column-tag-property-builder
  "Creates a  `CfnDataSet$ColumnTagProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-column-tag-property-builder (new CfnDataSet$ColumnTagProperty$Builder) id config))


(defn build-cfn-data-set-create-columns-operation-property-builder
  "The build-cfn-data-set-create-columns-operation-property-builder function updates a CfnDataSet$CreateColumnsOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$CreateColumnsOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
"
  [^CfnDataSet$CreateColumnsOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (.build builder))


(defn cfn-data-set-create-columns-operation-property-builder
  "Creates a  `CfnDataSet$CreateColumnsOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-create-columns-operation-property-builder (new CfnDataSet$CreateColumnsOperationProperty$Builder) id config))


(defn build-cfn-data-set-custom-sql-property-builder
  "The build-cfn-data-set-custom-sql-property-builder function updates a CfnDataSet$CustomSqlProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$CustomSqlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `dataSourceArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-source-arn` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `sqlQuery` | java.lang.String | [[cdk.support/lookup-entry]] | `:sql-query` |
"
  [^CfnDataSet$CustomSqlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (when-let [data (lookup-entry config id :data-source-arn)]
    (. builder dataSourceArn data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :sql-query)]
    (. builder sqlQuery data))
  (.build builder))


(defn cfn-data-set-custom-sql-property-builder
  "Creates a  `CfnDataSet$CustomSqlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-custom-sql-property-builder (new CfnDataSet$CustomSqlProperty$Builder) id config))


(defn build-cfn-data-set-data-set-refresh-properties-property-builder
  "The build-cfn-data-set-data-set-refresh-properties-property-builder function updates a CfnDataSet$DataSetRefreshPropertiesProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$DataSetRefreshPropertiesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `refreshConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:refresh-configuration` |
"
  [^CfnDataSet$DataSetRefreshPropertiesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :refresh-configuration)]
    (. builder refreshConfiguration data))
  (.build builder))


(defn cfn-data-set-data-set-refresh-properties-property-builder
  "Creates a  `CfnDataSet$DataSetRefreshPropertiesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-data-set-refresh-properties-property-builder (new CfnDataSet$DataSetRefreshPropertiesProperty$Builder) id config))


(defn build-cfn-data-set-data-set-usage-configuration-property-builder
  "The build-cfn-data-set-data-set-usage-configuration-property-builder function updates a CfnDataSet$DataSetUsageConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$DataSetUsageConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `disableUseAsDirectQuerySource` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:disable-use-as-direct-query-source` |
| `disableUseAsImportedSource` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:disable-use-as-imported-source` |
"
  [^CfnDataSet$DataSetUsageConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :disable-use-as-direct-query-source)]
    (. builder disableUseAsDirectQuerySource data))
  (when-let [data (lookup-entry config id :disable-use-as-imported-source)]
    (. builder disableUseAsImportedSource data))
  (.build builder))


(defn cfn-data-set-data-set-usage-configuration-property-builder
  "Creates a  `CfnDataSet$DataSetUsageConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-data-set-usage-configuration-property-builder (new CfnDataSet$DataSetUsageConfigurationProperty$Builder) id config))


(defn build-cfn-data-set-dataset-parameter-property-builder
  "The build-cfn-data-set-dataset-parameter-property-builder function updates a CfnDataSet$DatasetParameterProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$DatasetParameterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeDatasetParameter` | software.amazon.awscdk.services.quicksight.CfnDataSet$DateTimeDatasetParameterProperty | [[cdk.support/lookup-entry]] | `:date-time-dataset-parameter` |
| `decimalDatasetParameter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-dataset-parameter` |
| `integerDatasetParameter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:integer-dataset-parameter` |
| `stringDatasetParameter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:string-dataset-parameter` |
"
  [^CfnDataSet$DatasetParameterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-dataset-parameter)]
    (. builder dateTimeDatasetParameter data))
  (when-let [data (lookup-entry config id :decimal-dataset-parameter)]
    (. builder decimalDatasetParameter data))
  (when-let [data (lookup-entry config id :integer-dataset-parameter)]
    (. builder integerDatasetParameter data))
  (when-let [data (lookup-entry config id :string-dataset-parameter)]
    (. builder stringDatasetParameter data))
  (.build builder))


(defn cfn-data-set-dataset-parameter-property-builder
  "Creates a  `CfnDataSet$DatasetParameterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-dataset-parameter-property-builder (new CfnDataSet$DatasetParameterProperty$Builder) id config))


(defn build-cfn-data-set-date-time-dataset-parameter-default-values-property-builder
  "The build-cfn-data-set-date-time-dataset-parameter-default-values-property-builder function updates a CfnDataSet$DateTimeDatasetParameterDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$DateTimeDatasetParameterDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |
"
  [^CfnDataSet$DateTimeDatasetParameterDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :static-values)]
    (. builder staticValues data))
  (.build builder))


(defn cfn-data-set-date-time-dataset-parameter-default-values-property-builder
  "Creates a  `CfnDataSet$DateTimeDatasetParameterDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-date-time-dataset-parameter-default-values-property-builder (new CfnDataSet$DateTimeDatasetParameterDefaultValuesProperty$Builder) id config))


(defn build-cfn-data-set-date-time-dataset-parameter-property-builder
  "The build-cfn-data-set-date-time-dataset-parameter-property-builder function updates a CfnDataSet$DateTimeDatasetParameterProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$DateTimeDatasetParameterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `id` | java.lang.String | [[cdk.support/lookup-entry]] | `:id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
| `valueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-type` |
"
  [^CfnDataSet$DateTimeDatasetParameterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-values)]
    (. builder defaultValues data))
  (when-let [data (lookup-entry config id :id)]
    (. builder id data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (when-let [data (lookup-entry config id :value-type)]
    (. builder valueType data))
  (.build builder))


(defn cfn-data-set-date-time-dataset-parameter-property-builder
  "Creates a  `CfnDataSet$DateTimeDatasetParameterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-date-time-dataset-parameter-property-builder (new CfnDataSet$DateTimeDatasetParameterProperty$Builder) id config))


(defn build-cfn-data-set-decimal-dataset-parameter-default-values-property-builder
  "The build-cfn-data-set-decimal-dataset-parameter-default-values-property-builder function updates a CfnDataSet$DecimalDatasetParameterDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$DecimalDatasetParameterDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |
"
  [^CfnDataSet$DecimalDatasetParameterDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :static-values)]
    (. builder staticValues data))
  (.build builder))


(defn cfn-data-set-decimal-dataset-parameter-default-values-property-builder
  "Creates a  `CfnDataSet$DecimalDatasetParameterDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-decimal-dataset-parameter-default-values-property-builder (new CfnDataSet$DecimalDatasetParameterDefaultValuesProperty$Builder) id config))


(defn build-cfn-data-set-decimal-dataset-parameter-property-builder
  "The build-cfn-data-set-decimal-dataset-parameter-property-builder function updates a CfnDataSet$DecimalDatasetParameterProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$DecimalDatasetParameterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `id` | java.lang.String | [[cdk.support/lookup-entry]] | `:id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `valueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-type` |
"
  [^CfnDataSet$DecimalDatasetParameterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-values)]
    (. builder defaultValues data))
  (when-let [data (lookup-entry config id :id)]
    (. builder id data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :value-type)]
    (. builder valueType data))
  (.build builder))


(defn cfn-data-set-decimal-dataset-parameter-property-builder
  "Creates a  `CfnDataSet$DecimalDatasetParameterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-decimal-dataset-parameter-property-builder (new CfnDataSet$DecimalDatasetParameterProperty$Builder) id config))


(defn build-cfn-data-set-field-folder-property-builder
  "The build-cfn-data-set-field-folder-property-builder function updates a CfnDataSet$FieldFolderProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$FieldFolderProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
"
  [^CfnDataSet$FieldFolderProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (when-let [data (lookup-entry config id :description)]
    (. builder description data))
  (.build builder))


(defn cfn-data-set-field-folder-property-builder
  "Creates a  `CfnDataSet$FieldFolderProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-field-folder-property-builder (new CfnDataSet$FieldFolderProperty$Builder) id config))


(defn build-cfn-data-set-filter-operation-property-builder
  "The build-cfn-data-set-filter-operation-property-builder function updates a CfnDataSet$FilterOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$FilterOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionExpression` | java.lang.String | [[cdk.support/lookup-entry]] | `:condition-expression` |
"
  [^CfnDataSet$FilterOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :condition-expression)]
    (. builder conditionExpression data))
  (.build builder))


(defn cfn-data-set-filter-operation-property-builder
  "Creates a  `CfnDataSet$FilterOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-filter-operation-property-builder (new CfnDataSet$FilterOperationProperty$Builder) id config))


(defn build-cfn-data-set-geo-spatial-column-group-property-builder
  "The build-cfn-data-set-geo-spatial-column-group-property-builder function updates a CfnDataSet$GeoSpatialColumnGroupProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$GeoSpatialColumnGroupProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `countryCode` | java.lang.String | [[cdk.support/lookup-entry]] | `:country-code` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
"
  [^CfnDataSet$GeoSpatialColumnGroupProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (when-let [data (lookup-entry config id :country-code)]
    (. builder countryCode data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (.build builder))


(defn cfn-data-set-geo-spatial-column-group-property-builder
  "Creates a  `CfnDataSet$GeoSpatialColumnGroupProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-geo-spatial-column-group-property-builder (new CfnDataSet$GeoSpatialColumnGroupProperty$Builder) id config))


(defn build-cfn-data-set-incremental-refresh-property-builder
  "The build-cfn-data-set-incremental-refresh-property-builder function updates a CfnDataSet$IncrementalRefreshProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$IncrementalRefreshProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lookbackWindow` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:lookback-window` |
"
  [^CfnDataSet$IncrementalRefreshProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :lookback-window)]
    (. builder lookbackWindow data))
  (.build builder))


(defn cfn-data-set-incremental-refresh-property-builder
  "Creates a  `CfnDataSet$IncrementalRefreshProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-incremental-refresh-property-builder (new CfnDataSet$IncrementalRefreshProperty$Builder) id config))


(defn build-cfn-data-set-ingestion-wait-policy-property-builder
  "The build-cfn-data-set-ingestion-wait-policy-property-builder function updates a CfnDataSet$IngestionWaitPolicyProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$IngestionWaitPolicyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `ingestionWaitTimeInHours` | java.lang.Number | [[cdk.support/lookup-entry]] | `:ingestion-wait-time-in-hours` |
| `waitForSpiceIngestion` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:wait-for-spice-ingestion` |
"
  [^CfnDataSet$IngestionWaitPolicyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :ingestion-wait-time-in-hours)]
    (. builder ingestionWaitTimeInHours data))
  (when-let [data (lookup-entry config id :wait-for-spice-ingestion)]
    (. builder waitForSpiceIngestion data))
  (.build builder))


(defn cfn-data-set-ingestion-wait-policy-property-builder
  "Creates a  `CfnDataSet$IngestionWaitPolicyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-ingestion-wait-policy-property-builder (new CfnDataSet$IngestionWaitPolicyProperty$Builder) id config))


(defn build-cfn-data-set-input-column-property-builder
  "The build-cfn-data-set-input-column-property-builder function updates a CfnDataSet$InputColumnProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$InputColumnProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `subType` | java.lang.String | [[cdk.support/lookup-entry]] | `:sub-type` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnDataSet$InputColumnProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :sub-type)]
    (. builder subType data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-data-set-input-column-property-builder
  "Creates a  `CfnDataSet$InputColumnProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-input-column-property-builder (new CfnDataSet$InputColumnProperty$Builder) id config))


(defn build-cfn-data-set-integer-dataset-parameter-default-values-property-builder
  "The build-cfn-data-set-integer-dataset-parameter-default-values-property-builder function updates a CfnDataSet$IntegerDatasetParameterDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$IntegerDatasetParameterDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `staticValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:static-values` |
"
  [^CfnDataSet$IntegerDatasetParameterDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :static-values)]
    (. builder staticValues data))
  (.build builder))


(defn cfn-data-set-integer-dataset-parameter-default-values-property-builder
  "Creates a  `CfnDataSet$IntegerDatasetParameterDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-integer-dataset-parameter-default-values-property-builder (new CfnDataSet$IntegerDatasetParameterDefaultValuesProperty$Builder) id config))


(defn build-cfn-data-set-integer-dataset-parameter-property-builder
  "The build-cfn-data-set-integer-dataset-parameter-property-builder function updates a CfnDataSet$IntegerDatasetParameterProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$IntegerDatasetParameterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `id` | java.lang.String | [[cdk.support/lookup-entry]] | `:id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `valueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-type` |
"
  [^CfnDataSet$IntegerDatasetParameterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-values)]
    (. builder defaultValues data))
  (when-let [data (lookup-entry config id :id)]
    (. builder id data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :value-type)]
    (. builder valueType data))
  (.build builder))


(defn cfn-data-set-integer-dataset-parameter-property-builder
  "Creates a  `CfnDataSet$IntegerDatasetParameterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-integer-dataset-parameter-property-builder (new CfnDataSet$IntegerDatasetParameterProperty$Builder) id config))


(defn build-cfn-data-set-join-instruction-property-builder
  "The build-cfn-data-set-join-instruction-property-builder function updates a CfnDataSet$JoinInstructionProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$JoinInstructionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `leftJoinKeyProperties` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:left-join-key-properties` |
| `leftOperand` | java.lang.String | [[cdk.support/lookup-entry]] | `:left-operand` |
| `onClause` | java.lang.String | [[cdk.support/lookup-entry]] | `:on-clause` |
| `rightJoinKeyProperties` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:right-join-key-properties` |
| `rightOperand` | java.lang.String | [[cdk.support/lookup-entry]] | `:right-operand` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnDataSet$JoinInstructionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :left-join-key-properties)]
    (. builder leftJoinKeyProperties data))
  (when-let [data (lookup-entry config id :left-operand)]
    (. builder leftOperand data))
  (when-let [data (lookup-entry config id :on-clause)]
    (. builder onClause data))
  (when-let [data (lookup-entry config id :right-join-key-properties)]
    (. builder rightJoinKeyProperties data))
  (when-let [data (lookup-entry config id :right-operand)]
    (. builder rightOperand data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-data-set-join-instruction-property-builder
  "Creates a  `CfnDataSet$JoinInstructionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-join-instruction-property-builder (new CfnDataSet$JoinInstructionProperty$Builder) id config))


(defn build-cfn-data-set-join-key-properties-property-builder
  "The build-cfn-data-set-join-key-properties-property-builder function updates a CfnDataSet$JoinKeyPropertiesProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$JoinKeyPropertiesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `uniqueKey` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:unique-key` |
"
  [^CfnDataSet$JoinKeyPropertiesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :unique-key)]
    (. builder uniqueKey data))
  (.build builder))


(defn cfn-data-set-join-key-properties-property-builder
  "Creates a  `CfnDataSet$JoinKeyPropertiesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-join-key-properties-property-builder (new CfnDataSet$JoinKeyPropertiesProperty$Builder) id config))


(defn build-cfn-data-set-logical-table-property-builder
  "The build-cfn-data-set-logical-table-property-builder function updates a CfnDataSet$LogicalTableProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$LogicalTableProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `alias` | java.lang.String | [[cdk.support/lookup-entry]] | `:alias` |
| `dataTransforms` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-transforms` |
| `source` | software.amazon.awscdk.services.quicksight.CfnDataSet$LogicalTableSourceProperty | [[cdk.support/lookup-entry]] | `:source` |
"
  [^CfnDataSet$LogicalTableProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :alias)]
    (. builder alias data))
  (when-let [data (lookup-entry config id :data-transforms)]
    (. builder dataTransforms data))
  (when-let [data (lookup-entry config id :source)]
    (. builder source data))
  (.build builder))


(defn cfn-data-set-logical-table-property-builder
  "Creates a  `CfnDataSet$LogicalTableProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-logical-table-property-builder (new CfnDataSet$LogicalTableProperty$Builder) id config))


(defn build-cfn-data-set-logical-table-source-property-builder
  "The build-cfn-data-set-logical-table-source-property-builder function updates a CfnDataSet$LogicalTableSourceProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$LogicalTableSourceProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-arn` |
| `joinInstruction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:join-instruction` |
| `physicalTableId` | java.lang.String | [[cdk.support/lookup-entry]] | `:physical-table-id` |
"
  [^CfnDataSet$LogicalTableSourceProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-set-arn)]
    (. builder dataSetArn data))
  (when-let [data (lookup-entry config id :join-instruction)]
    (. builder joinInstruction data))
  (when-let [data (lookup-entry config id :physical-table-id)]
    (. builder physicalTableId data))
  (.build builder))


(defn cfn-data-set-logical-table-source-property-builder
  "Creates a  `CfnDataSet$LogicalTableSourceProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-logical-table-source-property-builder (new CfnDataSet$LogicalTableSourceProperty$Builder) id config))


(defn build-cfn-data-set-lookback-window-property-builder
  "The build-cfn-data-set-lookback-window-property-builder function updates a CfnDataSet$LookbackWindowProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$LookbackWindowProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `size` | java.lang.Number | [[cdk.support/lookup-entry]] | `:size` |
| `sizeUnit` | java.lang.String | [[cdk.support/lookup-entry]] | `:size-unit` |
"
  [^CfnDataSet$LookbackWindowProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-name)]
    (. builder columnName data))
  (when-let [data (lookup-entry config id :size)]
    (. builder size data))
  (when-let [data (lookup-entry config id :size-unit)]
    (. builder sizeUnit data))
  (.build builder))


(defn cfn-data-set-lookback-window-property-builder
  "Creates a  `CfnDataSet$LookbackWindowProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-lookback-window-property-builder (new CfnDataSet$LookbackWindowProperty$Builder) id config))


(defn build-cfn-data-set-new-default-values-property-builder
  "The build-cfn-data-set-new-default-values-property-builder function updates a CfnDataSet$NewDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$NewDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeStaticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:date-time-static-values` |
| `decimalStaticValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-static-values` |
| `integerStaticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:integer-static-values` |
| `stringStaticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:string-static-values` |
"
  [^CfnDataSet$NewDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-static-values)]
    (. builder dateTimeStaticValues data))
  (when-let [data (lookup-entry config id :decimal-static-values)]
    (. builder decimalStaticValues data))
  (when-let [data (lookup-entry config id :integer-static-values)]
    (. builder integerStaticValues data))
  (when-let [data (lookup-entry config id :string-static-values)]
    (. builder stringStaticValues data))
  (.build builder))


(defn cfn-data-set-new-default-values-property-builder
  "Creates a  `CfnDataSet$NewDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-new-default-values-property-builder (new CfnDataSet$NewDefaultValuesProperty$Builder) id config))


(defn build-cfn-data-set-output-column-property-builder
  "The build-cfn-data-set-output-column-property-builder function updates a CfnDataSet$OutputColumnProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$OutputColumnProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `subType` | java.lang.String | [[cdk.support/lookup-entry]] | `:sub-type` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnDataSet$OutputColumnProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :description)]
    (. builder description data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :sub-type)]
    (. builder subType data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-data-set-output-column-property-builder
  "Creates a  `CfnDataSet$OutputColumnProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-output-column-property-builder (new CfnDataSet$OutputColumnProperty$Builder) id config))


(defn build-cfn-data-set-override-dataset-parameter-operation-property-builder
  "The build-cfn-data-set-override-dataset-parameter-operation-property-builder function updates a CfnDataSet$OverrideDatasetParameterOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$OverrideDatasetParameterOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `newDefaultValues` | software.amazon.awscdk.services.quicksight.CfnDataSet$NewDefaultValuesProperty | [[cdk.support/lookup-entry]] | `:new-default-values` |
| `newParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:new-parameter-name` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
"
  [^CfnDataSet$OverrideDatasetParameterOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :new-default-values)]
    (. builder newDefaultValues data))
  (when-let [data (lookup-entry config id :new-parameter-name)]
    (. builder newParameterName data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (.build builder))


(defn cfn-data-set-override-dataset-parameter-operation-property-builder
  "Creates a  `CfnDataSet$OverrideDatasetParameterOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-override-dataset-parameter-operation-property-builder (new CfnDataSet$OverrideDatasetParameterOperationProperty$Builder) id config))


(defn build-cfn-data-set-physical-table-property-builder
  "The build-cfn-data-set-physical-table-property-builder function updates a CfnDataSet$PhysicalTableProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$PhysicalTableProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customSql` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-sql` |
| `relationalTable` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:relational-table` |
| `s3Source` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:s3-source` |
"
  [^CfnDataSet$PhysicalTableProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-sql)]
    (. builder customSql data))
  (when-let [data (lookup-entry config id :relational-table)]
    (. builder relationalTable data))
  (when-let [data (lookup-entry config id :s3-source)]
    (. builder s3Source data))
  (.build builder))


(defn cfn-data-set-physical-table-property-builder
  "Creates a  `CfnDataSet$PhysicalTableProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-physical-table-property-builder (new CfnDataSet$PhysicalTableProperty$Builder) id config))


(defn build-cfn-data-set-project-operation-property-builder
  "The build-cfn-data-set-project-operation-property-builder function updates a CfnDataSet$ProjectOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$ProjectOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `projectedColumns` | java.util.List | [[cdk.support/lookup-entry]] | `:projected-columns` |
"
  [^CfnDataSet$ProjectOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :projected-columns)]
    (. builder projectedColumns data))
  (.build builder))


(defn cfn-data-set-project-operation-property-builder
  "Creates a  `CfnDataSet$ProjectOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-project-operation-property-builder (new CfnDataSet$ProjectOperationProperty$Builder) id config))


(defn build-cfn-data-set-props-builder
  "The build-cfn-data-set-props-builder function updates a CfnDataSetProps$Builder instance using the provided configuration.
  The function takes the CfnDataSetProps$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `columnGroups` | java.util.List | [[cdk.support/lookup-entry]] | `:column-groups` |
| `columnLevelPermissionRules` | java.util.List | [[cdk.support/lookup-entry]] | `:column-level-permission-rules` |
| `dataSetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-id` |
| `dataSetRefreshProperties` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-set-refresh-properties` |
| `dataSetUsageConfiguration` | software.amazon.awscdk.services.quicksight.CfnDataSet$DataSetUsageConfigurationProperty | [[cdk.support/lookup-entry]] | `:data-set-usage-configuration` |
| `datasetParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dataset-parameters` |
| `fieldFolders` | java.util.Map | [[cdk.support/lookup-entry]] | `:field-folders` |
| `importMode` | java.lang.String | [[cdk.support/lookup-entry]] | `:import-mode` |
| `ingestionWaitPolicy` | software.amazon.awscdk.services.quicksight.CfnDataSet$IngestionWaitPolicyProperty | [[cdk.support/lookup-entry]] | `:ingestion-wait-policy` |
| `logicalTableMap` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:logical-table-map` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `permissions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:permissions` |
| `physicalTableMap` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:physical-table-map` |
| `rowLevelPermissionDataSet` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-level-permission-data-set` |
| `rowLevelPermissionTagConfiguration` | software.amazon.awscdk.services.quicksight.CfnDataSet$RowLevelPermissionTagConfigurationProperty | [[cdk.support/lookup-entry]] | `:row-level-permission-tag-configuration` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
"
  [^CfnDataSetProps$Builder builder id config]
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :column-groups)]
    (. builder columnGroups data))
  (when-let [data (lookup-entry config id :column-level-permission-rules)]
    (. builder columnLevelPermissionRules data))
  (when-let [data (lookup-entry config id :data-set-id)]
    (. builder dataSetId data))
  (when-let [data (lookup-entry config id :data-set-refresh-properties)]
    (. builder dataSetRefreshProperties data))
  (when-let [data (lookup-entry config id :data-set-usage-configuration)]
    (. builder dataSetUsageConfiguration data))
  (when-let [data (lookup-entry config id :dataset-parameters)]
    (. builder datasetParameters data))
  (when-let [data (lookup-entry config id :field-folders)]
    (. builder fieldFolders data))
  (when-let [data (lookup-entry config id :import-mode)]
    (. builder importMode data))
  (when-let [data (lookup-entry config id :ingestion-wait-policy)]
    (. builder ingestionWaitPolicy data))
  (when-let [data (lookup-entry config id :logical-table-map)]
    (. builder logicalTableMap data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :permissions)]
    (. builder permissions data))
  (when-let [data (lookup-entry config id :physical-table-map)]
    (. builder physicalTableMap data))
  (when-let [data (lookup-entry config id :row-level-permission-data-set)]
    (. builder rowLevelPermissionDataSet data))
  (when-let [data (lookup-entry config id :row-level-permission-tag-configuration)]
    (. builder rowLevelPermissionTagConfiguration data))
  (when-let [data (lookup-entry config id :tags)]
    (. builder tags data))
  (.build builder))


(defn cfn-data-set-props-builder
  "Creates a  `CfnDataSetProps$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-props-builder (new CfnDataSetProps$Builder) id config))


(defn build-cfn-data-set-refresh-configuration-property-builder
  "The build-cfn-data-set-refresh-configuration-property-builder function updates a CfnDataSet$RefreshConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$RefreshConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `incrementalRefresh` | software.amazon.awscdk.services.quicksight.CfnDataSet$IncrementalRefreshProperty | [[cdk.support/lookup-entry]] | `:incremental-refresh` |
"
  [^CfnDataSet$RefreshConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :incremental-refresh)]
    (. builder incrementalRefresh data))
  (.build builder))


(defn cfn-data-set-refresh-configuration-property-builder
  "Creates a  `CfnDataSet$RefreshConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-refresh-configuration-property-builder (new CfnDataSet$RefreshConfigurationProperty$Builder) id config))


(defn build-cfn-data-set-relational-table-property-builder
  "The build-cfn-data-set-relational-table-property-builder function updates a CfnDataSet$RelationalTableProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$RelationalTableProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `catalog` | java.lang.String | [[cdk.support/lookup-entry]] | `:catalog` |
| `dataSourceArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-source-arn` |
| `inputColumns` | java.util.List | [[cdk.support/lookup-entry]] | `:input-columns` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `schema` | java.lang.String | [[cdk.support/lookup-entry]] | `:schema` |
"
  [^CfnDataSet$RelationalTableProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :catalog)]
    (. builder catalog data))
  (when-let [data (lookup-entry config id :data-source-arn)]
    (. builder dataSourceArn data))
  (when-let [data (lookup-entry config id :input-columns)]
    (. builder inputColumns data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :schema)]
    (. builder schema data))
  (.build builder))


(defn cfn-data-set-relational-table-property-builder
  "Creates a  `CfnDataSet$RelationalTableProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-relational-table-property-builder (new CfnDataSet$RelationalTableProperty$Builder) id config))


(defn build-cfn-data-set-rename-column-operation-property-builder
  "The build-cfn-data-set-rename-column-operation-property-builder function updates a CfnDataSet$RenameColumnOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$RenameColumnOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `newColumnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:new-column-name` |
"
  [^CfnDataSet$RenameColumnOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-name)]
    (. builder columnName data))
  (when-let [data (lookup-entry config id :new-column-name)]
    (. builder newColumnName data))
  (.build builder))


(defn cfn-data-set-rename-column-operation-property-builder
  "Creates a  `CfnDataSet$RenameColumnOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-rename-column-operation-property-builder (new CfnDataSet$RenameColumnOperationProperty$Builder) id config))


(defn build-cfn-data-set-resource-permission-property-builder
  "The build-cfn-data-set-resource-permission-property-builder function updates a CfnDataSet$ResourcePermissionProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$ResourcePermissionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `principal` | java.lang.String | [[cdk.support/lookup-entry]] | `:principal` |
"
  [^CfnDataSet$ResourcePermissionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :principal)]
    (. builder principal data))
  (.build builder))


(defn cfn-data-set-resource-permission-property-builder
  "Creates a  `CfnDataSet$ResourcePermissionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-resource-permission-property-builder (new CfnDataSet$ResourcePermissionProperty$Builder) id config))


(defn build-cfn-data-set-row-level-permission-data-set-property-builder
  "The build-cfn-data-set-row-level-permission-data-set-property-builder function updates a CfnDataSet$RowLevelPermissionDataSetProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$RowLevelPermissionDataSetProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arn` | java.lang.String | [[cdk.support/lookup-entry]] | `:arn` |
| `formatVersion` | java.lang.String | [[cdk.support/lookup-entry]] | `:format-version` |
| `namespace` | java.lang.String | [[cdk.support/lookup-entry]] | `:namespace` |
| `permissionPolicy` | java.lang.String | [[cdk.support/lookup-entry]] | `:permission-policy` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
"
  [^CfnDataSet$RowLevelPermissionDataSetProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arn)]
    (. builder arn data))
  (when-let [data (lookup-entry config id :format-version)]
    (. builder formatVersion data))
  (when-let [data (lookup-entry config id :namespace)]
    (. builder namespace data))
  (when-let [data (lookup-entry config id :permission-policy)]
    (. builder permissionPolicy data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (.build builder))


(defn cfn-data-set-row-level-permission-data-set-property-builder
  "Creates a  `CfnDataSet$RowLevelPermissionDataSetProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-row-level-permission-data-set-property-builder (new CfnDataSet$RowLevelPermissionDataSetProperty$Builder) id config))


(defn build-cfn-data-set-row-level-permission-tag-configuration-property-builder
  "The build-cfn-data-set-row-level-permission-tag-configuration-property-builder function updates a CfnDataSet$RowLevelPermissionTagConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$RowLevelPermissionTagConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `tagRuleConfigurations` | java.lang.Object | [[cdk.support/lookup-entry]] | `:tag-rule-configurations` |
| `tagRules` | java.util.List | [[cdk.support/lookup-entry]] | `:tag-rules` |
"
  [^CfnDataSet$RowLevelPermissionTagConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (when-let [data (lookup-entry config id :tag-rule-configurations)]
    (. builder tagRuleConfigurations data))
  (when-let [data (lookup-entry config id :tag-rules)]
    (. builder tagRules data))
  (.build builder))


(defn cfn-data-set-row-level-permission-tag-configuration-property-builder
  "Creates a  `CfnDataSet$RowLevelPermissionTagConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-row-level-permission-tag-configuration-property-builder (new CfnDataSet$RowLevelPermissionTagConfigurationProperty$Builder) id config))


(defn build-cfn-data-set-row-level-permission-tag-rule-property-builder
  "The build-cfn-data-set-row-level-permission-tag-rule-property-builder function updates a CfnDataSet$RowLevelPermissionTagRuleProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$RowLevelPermissionTagRuleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `matchAllValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-all-value` |
| `tagKey` | java.lang.String | [[cdk.support/lookup-entry]] | `:tag-key` |
| `tagMultiValueDelimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:tag-multi-value-delimiter` |
"
  [^CfnDataSet$RowLevelPermissionTagRuleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-name)]
    (. builder columnName data))
  (when-let [data (lookup-entry config id :match-all-value)]
    (. builder matchAllValue data))
  (when-let [data (lookup-entry config id :tag-key)]
    (. builder tagKey data))
  (when-let [data (lookup-entry config id :tag-multi-value-delimiter)]
    (. builder tagMultiValueDelimiter data))
  (.build builder))


(defn cfn-data-set-row-level-permission-tag-rule-property-builder
  "Creates a  `CfnDataSet$RowLevelPermissionTagRuleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-row-level-permission-tag-rule-property-builder (new CfnDataSet$RowLevelPermissionTagRuleProperty$Builder) id config))


(defn build-cfn-data-set-s3-source-property-builder
  "The build-cfn-data-set-s3-source-property-builder function updates a CfnDataSet$S3SourceProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$S3SourceProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSourceArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-source-arn` |
| `inputColumns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:input-columns` |
| `uploadSettings` | software.amazon.awscdk.services.quicksight.CfnDataSet$UploadSettingsProperty | [[cdk.support/lookup-entry]] | `:upload-settings` |
"
  [^CfnDataSet$S3SourceProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-source-arn)]
    (. builder dataSourceArn data))
  (when-let [data (lookup-entry config id :input-columns)]
    (. builder inputColumns data))
  (when-let [data (lookup-entry config id :upload-settings)]
    (. builder uploadSettings data))
  (.build builder))


(defn cfn-data-set-s3-source-property-builder
  "Creates a  `CfnDataSet$S3SourceProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-s3-source-property-builder (new CfnDataSet$S3SourceProperty$Builder) id config))


(defn build-cfn-data-set-string-dataset-parameter-default-values-property-builder
  "The build-cfn-data-set-string-dataset-parameter-default-values-property-builder function updates a CfnDataSet$StringDatasetParameterDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$StringDatasetParameterDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |
"
  [^CfnDataSet$StringDatasetParameterDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :static-values)]
    (. builder staticValues data))
  (.build builder))


(defn cfn-data-set-string-dataset-parameter-default-values-property-builder
  "Creates a  `CfnDataSet$StringDatasetParameterDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-string-dataset-parameter-default-values-property-builder (new CfnDataSet$StringDatasetParameterDefaultValuesProperty$Builder) id config))


(defn build-cfn-data-set-string-dataset-parameter-property-builder
  "The build-cfn-data-set-string-dataset-parameter-property-builder function updates a CfnDataSet$StringDatasetParameterProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$StringDatasetParameterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `id` | java.lang.String | [[cdk.support/lookup-entry]] | `:id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `valueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-type` |
"
  [^CfnDataSet$StringDatasetParameterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-values)]
    (. builder defaultValues data))
  (when-let [data (lookup-entry config id :id)]
    (. builder id data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :value-type)]
    (. builder valueType data))
  (.build builder))


(defn cfn-data-set-string-dataset-parameter-property-builder
  "Creates a  `CfnDataSet$StringDatasetParameterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-string-dataset-parameter-property-builder (new CfnDataSet$StringDatasetParameterProperty$Builder) id config))


(defn build-cfn-data-set-tag-column-operation-property-builder
  "The build-cfn-data-set-tag-column-operation-property-builder function updates a CfnDataSet$TagColumnOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$TagColumnOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
"
  [^CfnDataSet$TagColumnOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-name)]
    (. builder columnName data))
  (when-let [data (lookup-entry config id :tags)]
    (. builder tags data))
  (.build builder))


(defn cfn-data-set-tag-column-operation-property-builder
  "Creates a  `CfnDataSet$TagColumnOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-tag-column-operation-property-builder (new CfnDataSet$TagColumnOperationProperty$Builder) id config))


(defn build-cfn-data-set-transform-operation-property-builder
  "The build-cfn-data-set-transform-operation-property-builder function updates a CfnDataSet$TransformOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$TransformOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `castColumnTypeOperation` | software.amazon.awscdk.services.quicksight.CfnDataSet$CastColumnTypeOperationProperty | [[cdk.support/lookup-entry]] | `:cast-column-type-operation` |
| `createColumnsOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:create-columns-operation` |
| `filterOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-operation` |
| `overrideDatasetParameterOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:override-dataset-parameter-operation` |
| `projectOperation` | software.amazon.awscdk.services.quicksight.CfnDataSet$ProjectOperationProperty | [[cdk.support/lookup-entry]] | `:project-operation` |
| `renameColumnOperation` | software.amazon.awscdk.services.quicksight.CfnDataSet$RenameColumnOperationProperty | [[cdk.support/lookup-entry]] | `:rename-column-operation` |
| `tagColumnOperation` | software.amazon.awscdk.services.quicksight.CfnDataSet$TagColumnOperationProperty | [[cdk.support/lookup-entry]] | `:tag-column-operation` |
| `untagColumnOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:untag-column-operation` |
"
  [^CfnDataSet$TransformOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cast-column-type-operation)]
    (. builder castColumnTypeOperation data))
  (when-let [data (lookup-entry config id :create-columns-operation)]
    (. builder createColumnsOperation data))
  (when-let [data (lookup-entry config id :filter-operation)]
    (. builder filterOperation data))
  (when-let [data (lookup-entry config id :override-dataset-parameter-operation)]
    (. builder overrideDatasetParameterOperation data))
  (when-let [data (lookup-entry config id :project-operation)]
    (. builder projectOperation data))
  (when-let [data (lookup-entry config id :rename-column-operation)]
    (. builder renameColumnOperation data))
  (when-let [data (lookup-entry config id :tag-column-operation)]
    (. builder tagColumnOperation data))
  (when-let [data (lookup-entry config id :untag-column-operation)]
    (. builder untagColumnOperation data))
  (.build builder))


(defn cfn-data-set-transform-operation-property-builder
  "Creates a  `CfnDataSet$TransformOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-transform-operation-property-builder (new CfnDataSet$TransformOperationProperty$Builder) id config))


(defn build-cfn-data-set-untag-column-operation-property-builder
  "The build-cfn-data-set-untag-column-operation-property-builder function updates a CfnDataSet$UntagColumnOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$UntagColumnOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `tagNames` | java.util.List | [[cdk.support/lookup-entry]] | `:tag-names` |
"
  [^CfnDataSet$UntagColumnOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-name)]
    (. builder columnName data))
  (when-let [data (lookup-entry config id :tag-names)]
    (. builder tagNames data))
  (.build builder))


(defn cfn-data-set-untag-column-operation-property-builder
  "Creates a  `CfnDataSet$UntagColumnOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-untag-column-operation-property-builder (new CfnDataSet$UntagColumnOperationProperty$Builder) id config))


(defn build-cfn-data-set-upload-settings-property-builder
  "The build-cfn-data-set-upload-settings-property-builder function updates a CfnDataSet$UploadSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSet$UploadSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `containsHeader` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:contains-header` |
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `format` | java.lang.String | [[cdk.support/lookup-entry]] | `:format` |
| `startFromRow` | java.lang.Number | [[cdk.support/lookup-entry]] | `:start-from-row` |
| `textQualifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:text-qualifier` |
"
  [^CfnDataSet$UploadSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :contains-header)]
    (. builder containsHeader data))
  (when-let [data (lookup-entry config id :delimiter)]
    (. builder delimiter data))
  (when-let [data (lookup-entry config id :format)]
    (. builder format data))
  (when-let [data (lookup-entry config id :start-from-row)]
    (. builder startFromRow data))
  (when-let [data (lookup-entry config id :text-qualifier)]
    (. builder textQualifier data))
  (.build builder))


(defn cfn-data-set-upload-settings-property-builder
  "Creates a  `CfnDataSet$UploadSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-set-upload-settings-property-builder (new CfnDataSet$UploadSettingsProperty$Builder) id config))


(defn build-cfn-data-source-amazon-elasticsearch-parameters-property-builder
  "The build-cfn-data-source-amazon-elasticsearch-parameters-property-builder function updates a CfnDataSource$AmazonElasticsearchParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$AmazonElasticsearchParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `domain` | java.lang.String | [[cdk.support/lookup-entry]] | `:domain` |
"
  [^CfnDataSource$AmazonElasticsearchParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :domain)]
    (. builder domain data))
  (.build builder))


(defn cfn-data-source-amazon-elasticsearch-parameters-property-builder
  "Creates a  `CfnDataSource$AmazonElasticsearchParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-amazon-elasticsearch-parameters-property-builder (new CfnDataSource$AmazonElasticsearchParametersProperty$Builder) id config))


(defn build-cfn-data-source-amazon-open-search-parameters-property-builder
  "The build-cfn-data-source-amazon-open-search-parameters-property-builder function updates a CfnDataSource$AmazonOpenSearchParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$AmazonOpenSearchParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `domain` | java.lang.String | [[cdk.support/lookup-entry]] | `:domain` |
"
  [^CfnDataSource$AmazonOpenSearchParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :domain)]
    (. builder domain data))
  (.build builder))


(defn cfn-data-source-amazon-open-search-parameters-property-builder
  "Creates a  `CfnDataSource$AmazonOpenSearchParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-amazon-open-search-parameters-property-builder (new CfnDataSource$AmazonOpenSearchParametersProperty$Builder) id config))


(defn build-cfn-data-source-athena-parameters-property-builder
  "The build-cfn-data-source-athena-parameters-property-builder function updates a CfnDataSource$AthenaParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$AthenaParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `roleArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:role-arn` |
| `workGroup` | java.lang.String | [[cdk.support/lookup-entry]] | `:work-group` |
"
  [^CfnDataSource$AthenaParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :role-arn)]
    (. builder roleArn data))
  (when-let [data (lookup-entry config id :work-group)]
    (. builder workGroup data))
  (.build builder))


(defn cfn-data-source-athena-parameters-property-builder
  "Creates a  `CfnDataSource$AthenaParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-athena-parameters-property-builder (new CfnDataSource$AthenaParametersProperty$Builder) id config))


(defn build-cfn-data-source-aurora-parameters-property-builder
  "The build-cfn-data-source-aurora-parameters-property-builder function updates a CfnDataSource$AuroraParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$AuroraParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |
"
  [^CfnDataSource$AuroraParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :database)]
    (. builder database data))
  (when-let [data (lookup-entry config id :host)]
    (. builder host data))
  (when-let [data (lookup-entry config id :port)]
    (. builder port data))
  (.build builder))


(defn cfn-data-source-aurora-parameters-property-builder
  "Creates a  `CfnDataSource$AuroraParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-aurora-parameters-property-builder (new CfnDataSource$AuroraParametersProperty$Builder) id config))


(defn build-cfn-data-source-aurora-postgre-sql-parameters-property-builder
  "The build-cfn-data-source-aurora-postgre-sql-parameters-property-builder function updates a CfnDataSource$AuroraPostgreSqlParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$AuroraPostgreSqlParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |
"
  [^CfnDataSource$AuroraPostgreSqlParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :database)]
    (. builder database data))
  (when-let [data (lookup-entry config id :host)]
    (. builder host data))
  (when-let [data (lookup-entry config id :port)]
    (. builder port data))
  (.build builder))


(defn cfn-data-source-aurora-postgre-sql-parameters-property-builder
  "Creates a  `CfnDataSource$AuroraPostgreSqlParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-aurora-postgre-sql-parameters-property-builder (new CfnDataSource$AuroraPostgreSqlParametersProperty$Builder) id config))


(defn build-cfn-data-source-builder
  "The build-cfn-data-source-builder function updates a CfnDataSource$Builder instance using the provided configuration.
  The function takes the CfnDataSource$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `alternateDataSourceParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:alternate-data-source-parameters` |
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `credentials` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:credentials` |
| `dataSourceId` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-source-id` |
| `dataSourceParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-source-parameters` |
| `errorInfo` | software.amazon.awscdk.services.quicksight.CfnDataSource$DataSourceErrorInfoProperty | [[cdk.support/lookup-entry]] | `:error-info` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `permissions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:permissions` |
| `sslProperties` | software.amazon.awscdk.services.quicksight.CfnDataSource$SslPropertiesProperty | [[cdk.support/lookup-entry]] | `:ssl-properties` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `vpcConnectionProperties` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:vpc-connection-properties` |
"
  [^CfnDataSource$Builder builder id config]
  (when-let [data (lookup-entry config id :alternate-data-source-parameters)]
    (. builder alternateDataSourceParameters data))
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :credentials)]
    (. builder credentials data))
  (when-let [data (lookup-entry config id :data-source-id)]
    (. builder dataSourceId data))
  (when-let [data (lookup-entry config id :data-source-parameters)]
    (. builder dataSourceParameters data))
  (when-let [data (lookup-entry config id :error-info)]
    (. builder errorInfo data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :permissions)]
    (. builder permissions data))
  (when-let [data (lookup-entry config id :ssl-properties)]
    (. builder sslProperties data))
  (when-let [data (lookup-entry config id :tags)]
    (. builder tags data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :vpc-connection-properties)]
    (. builder vpcConnectionProperties data))
  (.build builder))


(defn cfn-data-source-builder
  "Creates a  `CfnDataSource$Builder` instance using a scope and ID, applies the data configuration, then builds it.  Takes the following arguments: 
| Argument | DataType | Description |
|---|---|---|
| scope | software.constructs.Construct | The parent scope construct of the object being built. |
| id | String or Keyword or Symbol | Value to use as both the ID of the object being build and the namespace when looking up configuration values. |
| config | map | Data configuration |"
  [^software.constructs.Construct scope id config]
  (build-cfn-data-source-builder (CfnDataSource$Builder/create scope (name id)) id config))


(defn build-cfn-data-source-credential-pair-property-builder
  "The build-cfn-data-source-credential-pair-property-builder function updates a CfnDataSource$CredentialPairProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$CredentialPairProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `alternateDataSourceParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:alternate-data-source-parameters` |
| `password` | java.lang.String | [[cdk.support/lookup-entry]] | `:password` |
| `username` | java.lang.String | [[cdk.support/lookup-entry]] | `:username` |
"
  [^CfnDataSource$CredentialPairProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :alternate-data-source-parameters)]
    (. builder alternateDataSourceParameters data))
  (when-let [data (lookup-entry config id :password)]
    (. builder password data))
  (when-let [data (lookup-entry config id :username)]
    (. builder username data))
  (.build builder))


(defn cfn-data-source-credential-pair-property-builder
  "Creates a  `CfnDataSource$CredentialPairProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-credential-pair-property-builder (new CfnDataSource$CredentialPairProperty$Builder) id config))


(defn build-cfn-data-source-data-source-credentials-property-builder
  "The build-cfn-data-source-data-source-credentials-property-builder function updates a CfnDataSource$DataSourceCredentialsProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$DataSourceCredentialsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `copySourceArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:copy-source-arn` |
| `credentialPair` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:credential-pair` |
| `secretArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:secret-arn` |
"
  [^CfnDataSource$DataSourceCredentialsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :copy-source-arn)]
    (. builder copySourceArn data))
  (when-let [data (lookup-entry config id :credential-pair)]
    (. builder credentialPair data))
  (when-let [data (lookup-entry config id :secret-arn)]
    (. builder secretArn data))
  (.build builder))


(defn cfn-data-source-data-source-credentials-property-builder
  "Creates a  `CfnDataSource$DataSourceCredentialsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-data-source-credentials-property-builder (new CfnDataSource$DataSourceCredentialsProperty$Builder) id config))


(defn build-cfn-data-source-data-source-error-info-property-builder
  "The build-cfn-data-source-data-source-error-info-property-builder function updates a CfnDataSource$DataSourceErrorInfoProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$DataSourceErrorInfoProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `message` | java.lang.String | [[cdk.support/lookup-entry]] | `:message` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnDataSource$DataSourceErrorInfoProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :message)]
    (. builder message data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-data-source-data-source-error-info-property-builder
  "Creates a  `CfnDataSource$DataSourceErrorInfoProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-data-source-error-info-property-builder (new CfnDataSource$DataSourceErrorInfoProperty$Builder) id config))


(defn build-cfn-data-source-data-source-parameters-property-builder
  "The build-cfn-data-source-data-source-parameters-property-builder function updates a CfnDataSource$DataSourceParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$DataSourceParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `amazonElasticsearchParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:amazon-elasticsearch-parameters` |
| `amazonOpenSearchParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$AmazonOpenSearchParametersProperty | [[cdk.support/lookup-entry]] | `:amazon-open-search-parameters` |
| `athenaParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$AthenaParametersProperty | [[cdk.support/lookup-entry]] | `:athena-parameters` |
| `auroraParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$AuroraParametersProperty | [[cdk.support/lookup-entry]] | `:aurora-parameters` |
| `auroraPostgreSqlParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$AuroraPostgreSqlParametersProperty | [[cdk.support/lookup-entry]] | `:aurora-postgre-sql-parameters` |
| `databricksParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:databricks-parameters` |
| `mariaDbParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$MariaDbParametersProperty | [[cdk.support/lookup-entry]] | `:maria-db-parameters` |
| `mySqlParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:my-sql-parameters` |
| `oracleParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:oracle-parameters` |
| `postgreSqlParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$PostgreSqlParametersProperty | [[cdk.support/lookup-entry]] | `:postgre-sql-parameters` |
| `prestoParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:presto-parameters` |
| `rdsParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$RdsParametersProperty | [[cdk.support/lookup-entry]] | `:rds-parameters` |
| `redshiftParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$RedshiftParametersProperty | [[cdk.support/lookup-entry]] | `:redshift-parameters` |
| `s3Parameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$S3ParametersProperty | [[cdk.support/lookup-entry]] | `:s3-parameters` |
| `snowflakeParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:snowflake-parameters` |
| `sparkParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:spark-parameters` |
| `sqlServerParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sql-server-parameters` |
| `starburstParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:starburst-parameters` |
| `teradataParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:teradata-parameters` |
| `trinoParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$TrinoParametersProperty | [[cdk.support/lookup-entry]] | `:trino-parameters` |
"
  [^CfnDataSource$DataSourceParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :amazon-elasticsearch-parameters)]
    (. builder amazonElasticsearchParameters data))
  (when-let [data (lookup-entry config id :amazon-open-search-parameters)]
    (. builder amazonOpenSearchParameters data))
  (when-let [data (lookup-entry config id :athena-parameters)]
    (. builder athenaParameters data))
  (when-let [data (lookup-entry config id :aurora-parameters)]
    (. builder auroraParameters data))
  (when-let [data (lookup-entry config id :aurora-postgre-sql-parameters)]
    (. builder auroraPostgreSqlParameters data))
  (when-let [data (lookup-entry config id :databricks-parameters)]
    (. builder databricksParameters data))
  (when-let [data (lookup-entry config id :maria-db-parameters)]
    (. builder mariaDbParameters data))
  (when-let [data (lookup-entry config id :my-sql-parameters)]
    (. builder mySqlParameters data))
  (when-let [data (lookup-entry config id :oracle-parameters)]
    (. builder oracleParameters data))
  (when-let [data (lookup-entry config id :postgre-sql-parameters)]
    (. builder postgreSqlParameters data))
  (when-let [data (lookup-entry config id :presto-parameters)]
    (. builder prestoParameters data))
  (when-let [data (lookup-entry config id :rds-parameters)]
    (. builder rdsParameters data))
  (when-let [data (lookup-entry config id :redshift-parameters)]
    (. builder redshiftParameters data))
  (when-let [data (lookup-entry config id :s3-parameters)]
    (. builder s3Parameters data))
  (when-let [data (lookup-entry config id :snowflake-parameters)]
    (. builder snowflakeParameters data))
  (when-let [data (lookup-entry config id :spark-parameters)]
    (. builder sparkParameters data))
  (when-let [data (lookup-entry config id :sql-server-parameters)]
    (. builder sqlServerParameters data))
  (when-let [data (lookup-entry config id :starburst-parameters)]
    (. builder starburstParameters data))
  (when-let [data (lookup-entry config id :teradata-parameters)]
    (. builder teradataParameters data))
  (when-let [data (lookup-entry config id :trino-parameters)]
    (. builder trinoParameters data))
  (.build builder))


(defn cfn-data-source-data-source-parameters-property-builder
  "Creates a  `CfnDataSource$DataSourceParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-data-source-parameters-property-builder (new CfnDataSource$DataSourceParametersProperty$Builder) id config))


(defn build-cfn-data-source-databricks-parameters-property-builder
  "The build-cfn-data-source-databricks-parameters-property-builder function updates a CfnDataSource$DatabricksParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$DatabricksParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |
| `sqlEndpointPath` | java.lang.String | [[cdk.support/lookup-entry]] | `:sql-endpoint-path` |
"
  [^CfnDataSource$DatabricksParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :host)]
    (. builder host data))
  (when-let [data (lookup-entry config id :port)]
    (. builder port data))
  (when-let [data (lookup-entry config id :sql-endpoint-path)]
    (. builder sqlEndpointPath data))
  (.build builder))


(defn cfn-data-source-databricks-parameters-property-builder
  "Creates a  `CfnDataSource$DatabricksParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-databricks-parameters-property-builder (new CfnDataSource$DatabricksParametersProperty$Builder) id config))


(defn build-cfn-data-source-identity-center-configuration-property-builder
  "The build-cfn-data-source-identity-center-configuration-property-builder function updates a CfnDataSource$IdentityCenterConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$IdentityCenterConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `enableIdentityPropagation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:enable-identity-propagation` |
"
  [^CfnDataSource$IdentityCenterConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :enable-identity-propagation)]
    (. builder enableIdentityPropagation data))
  (.build builder))


(defn cfn-data-source-identity-center-configuration-property-builder
  "Creates a  `CfnDataSource$IdentityCenterConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-identity-center-configuration-property-builder (new CfnDataSource$IdentityCenterConfigurationProperty$Builder) id config))


(defn build-cfn-data-source-manifest-file-location-property-builder
  "The build-cfn-data-source-manifest-file-location-property-builder function updates a CfnDataSource$ManifestFileLocationProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$ManifestFileLocationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bucket` | java.lang.String | [[cdk.support/lookup-entry]] | `:bucket` |
| `key` | java.lang.String | [[cdk.support/lookup-entry]] | `:key` |
"
  [^CfnDataSource$ManifestFileLocationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bucket)]
    (. builder bucket data))
  (when-let [data (lookup-entry config id :key)]
    (. builder key data))
  (.build builder))


(defn cfn-data-source-manifest-file-location-property-builder
  "Creates a  `CfnDataSource$ManifestFileLocationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-manifest-file-location-property-builder (new CfnDataSource$ManifestFileLocationProperty$Builder) id config))


(defn build-cfn-data-source-maria-db-parameters-property-builder
  "The build-cfn-data-source-maria-db-parameters-property-builder function updates a CfnDataSource$MariaDbParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$MariaDbParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |
"
  [^CfnDataSource$MariaDbParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :database)]
    (. builder database data))
  (when-let [data (lookup-entry config id :host)]
    (. builder host data))
  (when-let [data (lookup-entry config id :port)]
    (. builder port data))
  (.build builder))


(defn cfn-data-source-maria-db-parameters-property-builder
  "Creates a  `CfnDataSource$MariaDbParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-maria-db-parameters-property-builder (new CfnDataSource$MariaDbParametersProperty$Builder) id config))


(defn build-cfn-data-source-my-sql-parameters-property-builder
  "The build-cfn-data-source-my-sql-parameters-property-builder function updates a CfnDataSource$MySqlParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$MySqlParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |
"
  [^CfnDataSource$MySqlParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :database)]
    (. builder database data))
  (when-let [data (lookup-entry config id :host)]
    (. builder host data))
  (when-let [data (lookup-entry config id :port)]
    (. builder port data))
  (.build builder))


(defn cfn-data-source-my-sql-parameters-property-builder
  "Creates a  `CfnDataSource$MySqlParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-my-sql-parameters-property-builder (new CfnDataSource$MySqlParametersProperty$Builder) id config))


(defn build-cfn-data-source-oracle-parameters-property-builder
  "The build-cfn-data-source-oracle-parameters-property-builder function updates a CfnDataSource$OracleParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$OracleParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |
"
  [^CfnDataSource$OracleParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :database)]
    (. builder database data))
  (when-let [data (lookup-entry config id :host)]
    (. builder host data))
  (when-let [data (lookup-entry config id :port)]
    (. builder port data))
  (.build builder))


(defn cfn-data-source-oracle-parameters-property-builder
  "Creates a  `CfnDataSource$OracleParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-oracle-parameters-property-builder (new CfnDataSource$OracleParametersProperty$Builder) id config))


(defn build-cfn-data-source-postgre-sql-parameters-property-builder
  "The build-cfn-data-source-postgre-sql-parameters-property-builder function updates a CfnDataSource$PostgreSqlParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$PostgreSqlParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |
"
  [^CfnDataSource$PostgreSqlParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :database)]
    (. builder database data))
  (when-let [data (lookup-entry config id :host)]
    (. builder host data))
  (when-let [data (lookup-entry config id :port)]
    (. builder port data))
  (.build builder))


(defn cfn-data-source-postgre-sql-parameters-property-builder
  "Creates a  `CfnDataSource$PostgreSqlParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-postgre-sql-parameters-property-builder (new CfnDataSource$PostgreSqlParametersProperty$Builder) id config))


(defn build-cfn-data-source-presto-parameters-property-builder
  "The build-cfn-data-source-presto-parameters-property-builder function updates a CfnDataSource$PrestoParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$PrestoParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `catalog` | java.lang.String | [[cdk.support/lookup-entry]] | `:catalog` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |
"
  [^CfnDataSource$PrestoParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :catalog)]
    (. builder catalog data))
  (when-let [data (lookup-entry config id :host)]
    (. builder host data))
  (when-let [data (lookup-entry config id :port)]
    (. builder port data))
  (.build builder))


(defn cfn-data-source-presto-parameters-property-builder
  "Creates a  `CfnDataSource$PrestoParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-presto-parameters-property-builder (new CfnDataSource$PrestoParametersProperty$Builder) id config))


(defn build-cfn-data-source-props-builder
  "The build-cfn-data-source-props-builder function updates a CfnDataSourceProps$Builder instance using the provided configuration.
  The function takes the CfnDataSourceProps$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `alternateDataSourceParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:alternate-data-source-parameters` |
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `credentials` | software.amazon.awscdk.services.quicksight.CfnDataSource$DataSourceCredentialsProperty | [[cdk.support/lookup-entry]] | `:credentials` |
| `dataSourceId` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-source-id` |
| `dataSourceParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$DataSourceParametersProperty | [[cdk.support/lookup-entry]] | `:data-source-parameters` |
| `errorInfo` | software.amazon.awscdk.services.quicksight.CfnDataSource$DataSourceErrorInfoProperty | [[cdk.support/lookup-entry]] | `:error-info` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `permissions` | java.util.List | [[cdk.support/lookup-entry]] | `:permissions` |
| `sslProperties` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:ssl-properties` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `vpcConnectionProperties` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:vpc-connection-properties` |
"
  [^CfnDataSourceProps$Builder builder id config]
  (when-let [data (lookup-entry config id :alternate-data-source-parameters)]
    (. builder alternateDataSourceParameters data))
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :credentials)]
    (. builder credentials data))
  (when-let [data (lookup-entry config id :data-source-id)]
    (. builder dataSourceId data))
  (when-let [data (lookup-entry config id :data-source-parameters)]
    (. builder dataSourceParameters data))
  (when-let [data (lookup-entry config id :error-info)]
    (. builder errorInfo data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :permissions)]
    (. builder permissions data))
  (when-let [data (lookup-entry config id :ssl-properties)]
    (. builder sslProperties data))
  (when-let [data (lookup-entry config id :tags)]
    (. builder tags data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :vpc-connection-properties)]
    (. builder vpcConnectionProperties data))
  (.build builder))


(defn cfn-data-source-props-builder
  "Creates a  `CfnDataSourceProps$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-props-builder (new CfnDataSourceProps$Builder) id config))


(defn build-cfn-data-source-rds-parameters-property-builder
  "The build-cfn-data-source-rds-parameters-property-builder function updates a CfnDataSource$RdsParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$RdsParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `instanceId` | java.lang.String | [[cdk.support/lookup-entry]] | `:instance-id` |
"
  [^CfnDataSource$RdsParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :database)]
    (. builder database data))
  (when-let [data (lookup-entry config id :instance-id)]
    (. builder instanceId data))
  (.build builder))


(defn cfn-data-source-rds-parameters-property-builder
  "Creates a  `CfnDataSource$RdsParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-rds-parameters-property-builder (new CfnDataSource$RdsParametersProperty$Builder) id config))


(defn build-cfn-data-source-redshift-iam-parameters-property-builder
  "The build-cfn-data-source-redshift-iam-parameters-property-builder function updates a CfnDataSource$RedshiftIAMParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$RedshiftIAMParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `autoCreateDatabaseUser` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:auto-create-database-user` |
| `databaseGroups` | java.util.List | [[cdk.support/lookup-entry]] | `:database-groups` |
| `databaseUser` | java.lang.String | [[cdk.support/lookup-entry]] | `:database-user` |
| `roleArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:role-arn` |
"
  [^CfnDataSource$RedshiftIAMParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :auto-create-database-user)]
    (. builder autoCreateDatabaseUser data))
  (when-let [data (lookup-entry config id :database-groups)]
    (. builder databaseGroups data))
  (when-let [data (lookup-entry config id :database-user)]
    (. builder databaseUser data))
  (when-let [data (lookup-entry config id :role-arn)]
    (. builder roleArn data))
  (.build builder))


(defn cfn-data-source-redshift-iam-parameters-property-builder
  "Creates a  `CfnDataSource$RedshiftIAMParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-redshift-iam-parameters-property-builder (new CfnDataSource$RedshiftIAMParametersProperty$Builder) id config))


(defn build-cfn-data-source-redshift-parameters-property-builder
  "The build-cfn-data-source-redshift-parameters-property-builder function updates a CfnDataSource$RedshiftParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$RedshiftParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `clusterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:cluster-id` |
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `iamParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$RedshiftIAMParametersProperty | [[cdk.support/lookup-entry]] | `:iam-parameters` |
| `identityCenterConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:identity-center-configuration` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |
"
  [^CfnDataSource$RedshiftParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cluster-id)]
    (. builder clusterId data))
  (when-let [data (lookup-entry config id :database)]
    (. builder database data))
  (when-let [data (lookup-entry config id :host)]
    (. builder host data))
  (when-let [data (lookup-entry config id :iam-parameters)]
    (. builder iamParameters data))
  (when-let [data (lookup-entry config id :identity-center-configuration)]
    (. builder identityCenterConfiguration data))
  (when-let [data (lookup-entry config id :port)]
    (. builder port data))
  (.build builder))


(defn cfn-data-source-redshift-parameters-property-builder
  "Creates a  `CfnDataSource$RedshiftParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-redshift-parameters-property-builder (new CfnDataSource$RedshiftParametersProperty$Builder) id config))


(defn build-cfn-data-source-resource-permission-property-builder
  "The build-cfn-data-source-resource-permission-property-builder function updates a CfnDataSource$ResourcePermissionProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$ResourcePermissionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `principal` | java.lang.String | [[cdk.support/lookup-entry]] | `:principal` |
| `resource` | java.lang.String | [[cdk.support/lookup-entry]] | `:resource` |
"
  [^CfnDataSource$ResourcePermissionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :principal)]
    (. builder principal data))
  (when-let [data (lookup-entry config id :resource)]
    (. builder resource data))
  (.build builder))


(defn cfn-data-source-resource-permission-property-builder
  "Creates a  `CfnDataSource$ResourcePermissionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-resource-permission-property-builder (new CfnDataSource$ResourcePermissionProperty$Builder) id config))


(defn build-cfn-data-source-s3-parameters-property-builder
  "The build-cfn-data-source-s3-parameters-property-builder function updates a CfnDataSource$S3ParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$S3ParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `manifestFileLocation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:manifest-file-location` |
| `roleArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:role-arn` |
"
  [^CfnDataSource$S3ParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :manifest-file-location)]
    (. builder manifestFileLocation data))
  (when-let [data (lookup-entry config id :role-arn)]
    (. builder roleArn data))
  (.build builder))


(defn cfn-data-source-s3-parameters-property-builder
  "Creates a  `CfnDataSource$S3ParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-s3-parameters-property-builder (new CfnDataSource$S3ParametersProperty$Builder) id config))


(defn build-cfn-data-source-snowflake-parameters-property-builder
  "The build-cfn-data-source-snowflake-parameters-property-builder function updates a CfnDataSource$SnowflakeParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$SnowflakeParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `warehouse` | java.lang.String | [[cdk.support/lookup-entry]] | `:warehouse` |
"
  [^CfnDataSource$SnowflakeParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :database)]
    (. builder database data))
  (when-let [data (lookup-entry config id :host)]
    (. builder host data))
  (when-let [data (lookup-entry config id :warehouse)]
    (. builder warehouse data))
  (.build builder))


(defn cfn-data-source-snowflake-parameters-property-builder
  "Creates a  `CfnDataSource$SnowflakeParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-snowflake-parameters-property-builder (new CfnDataSource$SnowflakeParametersProperty$Builder) id config))


(defn build-cfn-data-source-spark-parameters-property-builder
  "The build-cfn-data-source-spark-parameters-property-builder function updates a CfnDataSource$SparkParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$SparkParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |
"
  [^CfnDataSource$SparkParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :host)]
    (. builder host data))
  (when-let [data (lookup-entry config id :port)]
    (. builder port data))
  (.build builder))


(defn cfn-data-source-spark-parameters-property-builder
  "Creates a  `CfnDataSource$SparkParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-spark-parameters-property-builder (new CfnDataSource$SparkParametersProperty$Builder) id config))


(defn build-cfn-data-source-sql-server-parameters-property-builder
  "The build-cfn-data-source-sql-server-parameters-property-builder function updates a CfnDataSource$SqlServerParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$SqlServerParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |
"
  [^CfnDataSource$SqlServerParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :database)]
    (. builder database data))
  (when-let [data (lookup-entry config id :host)]
    (. builder host data))
  (when-let [data (lookup-entry config id :port)]
    (. builder port data))
  (.build builder))


(defn cfn-data-source-sql-server-parameters-property-builder
  "Creates a  `CfnDataSource$SqlServerParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-sql-server-parameters-property-builder (new CfnDataSource$SqlServerParametersProperty$Builder) id config))


(defn build-cfn-data-source-ssl-properties-property-builder
  "The build-cfn-data-source-ssl-properties-property-builder function updates a CfnDataSource$SslPropertiesProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$SslPropertiesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `disableSsl` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:disable-ssl` |
"
  [^CfnDataSource$SslPropertiesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :disable-ssl)]
    (. builder disableSsl data))
  (.build builder))


(defn cfn-data-source-ssl-properties-property-builder
  "Creates a  `CfnDataSource$SslPropertiesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-ssl-properties-property-builder (new CfnDataSource$SslPropertiesProperty$Builder) id config))


(defn build-cfn-data-source-starburst-parameters-property-builder
  "The build-cfn-data-source-starburst-parameters-property-builder function updates a CfnDataSource$StarburstParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$StarburstParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `catalog` | java.lang.String | [[cdk.support/lookup-entry]] | `:catalog` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |
| `productType` | java.lang.String | [[cdk.support/lookup-entry]] | `:product-type` |
"
  [^CfnDataSource$StarburstParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :catalog)]
    (. builder catalog data))
  (when-let [data (lookup-entry config id :host)]
    (. builder host data))
  (when-let [data (lookup-entry config id :port)]
    (. builder port data))
  (when-let [data (lookup-entry config id :product-type)]
    (. builder productType data))
  (.build builder))


(defn cfn-data-source-starburst-parameters-property-builder
  "Creates a  `CfnDataSource$StarburstParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-starburst-parameters-property-builder (new CfnDataSource$StarburstParametersProperty$Builder) id config))


(defn build-cfn-data-source-teradata-parameters-property-builder
  "The build-cfn-data-source-teradata-parameters-property-builder function updates a CfnDataSource$TeradataParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$TeradataParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |
"
  [^CfnDataSource$TeradataParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :database)]
    (. builder database data))
  (when-let [data (lookup-entry config id :host)]
    (. builder host data))
  (when-let [data (lookup-entry config id :port)]
    (. builder port data))
  (.build builder))


(defn cfn-data-source-teradata-parameters-property-builder
  "Creates a  `CfnDataSource$TeradataParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-teradata-parameters-property-builder (new CfnDataSource$TeradataParametersProperty$Builder) id config))


(defn build-cfn-data-source-trino-parameters-property-builder
  "The build-cfn-data-source-trino-parameters-property-builder function updates a CfnDataSource$TrinoParametersProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$TrinoParametersProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `catalog` | java.lang.String | [[cdk.support/lookup-entry]] | `:catalog` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |
"
  [^CfnDataSource$TrinoParametersProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :catalog)]
    (. builder catalog data))
  (when-let [data (lookup-entry config id :host)]
    (. builder host data))
  (when-let [data (lookup-entry config id :port)]
    (. builder port data))
  (.build builder))


(defn cfn-data-source-trino-parameters-property-builder
  "Creates a  `CfnDataSource$TrinoParametersProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-trino-parameters-property-builder (new CfnDataSource$TrinoParametersProperty$Builder) id config))


(defn build-cfn-data-source-vpc-connection-properties-property-builder
  "The build-cfn-data-source-vpc-connection-properties-property-builder function updates a CfnDataSource$VpcConnectionPropertiesProperty$Builder instance using the provided configuration.
  The function takes the CfnDataSource$VpcConnectionPropertiesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `vpcConnectionArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:vpc-connection-arn` |
"
  [^CfnDataSource$VpcConnectionPropertiesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :vpc-connection-arn)]
    (. builder vpcConnectionArn data))
  (.build builder))


(defn cfn-data-source-vpc-connection-properties-property-builder
  "Creates a  `CfnDataSource$VpcConnectionPropertiesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-data-source-vpc-connection-properties-property-builder (new CfnDataSource$VpcConnectionPropertiesProperty$Builder) id config))


(defn build-cfn-refresh-schedule-builder
  "The build-cfn-refresh-schedule-builder function updates a CfnRefreshSchedule$Builder instance using the provided configuration.
  The function takes the CfnRefreshSchedule$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `dataSetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-id` |
| `schedule` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:schedule` |
"
  [^CfnRefreshSchedule$Builder builder id config]
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :data-set-id)]
    (. builder dataSetId data))
  (when-let [data (lookup-entry config id :schedule)]
    (. builder schedule data))
  (.build builder))


(defn cfn-refresh-schedule-builder
  "Creates a  `CfnRefreshSchedule$Builder` instance using a scope and ID, applies the data configuration, then builds it.  Takes the following arguments: 
| Argument | DataType | Description |
|---|---|---|
| scope | software.constructs.Construct | The parent scope construct of the object being built. |
| id | String or Keyword or Symbol | Value to use as both the ID of the object being build and the namespace when looking up configuration values. |
| config | map | Data configuration |"
  [^software.constructs.Construct scope id config]
  (build-cfn-refresh-schedule-builder (CfnRefreshSchedule$Builder/create scope (name id)) id config))


(defn build-cfn-refresh-schedule-props-builder
  "The build-cfn-refresh-schedule-props-builder function updates a CfnRefreshScheduleProps$Builder instance using the provided configuration.
  The function takes the CfnRefreshScheduleProps$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `dataSetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-id` |
| `schedule` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:schedule` |
"
  [^CfnRefreshScheduleProps$Builder builder id config]
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :data-set-id)]
    (. builder dataSetId data))
  (when-let [data (lookup-entry config id :schedule)]
    (. builder schedule data))
  (.build builder))


(defn cfn-refresh-schedule-props-builder
  "Creates a  `CfnRefreshScheduleProps$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-refresh-schedule-props-builder (new CfnRefreshScheduleProps$Builder) id config))


(defn build-cfn-refresh-schedule-refresh-on-day-property-builder
  "The build-cfn-refresh-schedule-refresh-on-day-property-builder function updates a CfnRefreshSchedule$RefreshOnDayProperty$Builder instance using the provided configuration.
  The function takes the CfnRefreshSchedule$RefreshOnDayProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dayOfMonth` | java.lang.String | [[cdk.support/lookup-entry]] | `:day-of-month` |
| `dayOfWeek` | java.lang.String | [[cdk.support/lookup-entry]] | `:day-of-week` |
"
  [^CfnRefreshSchedule$RefreshOnDayProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :day-of-month)]
    (. builder dayOfMonth data))
  (when-let [data (lookup-entry config id :day-of-week)]
    (. builder dayOfWeek data))
  (.build builder))


(defn cfn-refresh-schedule-refresh-on-day-property-builder
  "Creates a  `CfnRefreshSchedule$RefreshOnDayProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-refresh-schedule-refresh-on-day-property-builder (new CfnRefreshSchedule$RefreshOnDayProperty$Builder) id config))


(defn build-cfn-refresh-schedule-refresh-schedule-map-property-builder
  "The build-cfn-refresh-schedule-refresh-schedule-map-property-builder function updates a CfnRefreshSchedule$RefreshScheduleMapProperty$Builder instance using the provided configuration.
  The function takes the CfnRefreshSchedule$RefreshScheduleMapProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `refreshType` | java.lang.String | [[cdk.support/lookup-entry]] | `:refresh-type` |
| `scheduleFrequency` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:schedule-frequency` |
| `scheduleId` | java.lang.String | [[cdk.support/lookup-entry]] | `:schedule-id` |
| `startAfterDateTime` | java.lang.String | [[cdk.support/lookup-entry]] | `:start-after-date-time` |
"
  [^CfnRefreshSchedule$RefreshScheduleMapProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :refresh-type)]
    (. builder refreshType data))
  (when-let [data (lookup-entry config id :schedule-frequency)]
    (. builder scheduleFrequency data))
  (when-let [data (lookup-entry config id :schedule-id)]
    (. builder scheduleId data))
  (when-let [data (lookup-entry config id :start-after-date-time)]
    (. builder startAfterDateTime data))
  (.build builder))


(defn cfn-refresh-schedule-refresh-schedule-map-property-builder
  "Creates a  `CfnRefreshSchedule$RefreshScheduleMapProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-refresh-schedule-refresh-schedule-map-property-builder (new CfnRefreshSchedule$RefreshScheduleMapProperty$Builder) id config))


(defn build-cfn-refresh-schedule-schedule-frequency-property-builder
  "The build-cfn-refresh-schedule-schedule-frequency-property-builder function updates a CfnRefreshSchedule$ScheduleFrequencyProperty$Builder instance using the provided configuration.
  The function takes the CfnRefreshSchedule$ScheduleFrequencyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `interval` | java.lang.String | [[cdk.support/lookup-entry]] | `:interval` |
| `refreshOnDay` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:refresh-on-day` |
| `timeOfTheDay` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-of-the-day` |
| `timeZone` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-zone` |
"
  [^CfnRefreshSchedule$ScheduleFrequencyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :interval)]
    (. builder interval data))
  (when-let [data (lookup-entry config id :refresh-on-day)]
    (. builder refreshOnDay data))
  (when-let [data (lookup-entry config id :time-of-the-day)]
    (. builder timeOfTheDay data))
  (when-let [data (lookup-entry config id :time-zone)]
    (. builder timeZone data))
  (.build builder))


(defn cfn-refresh-schedule-schedule-frequency-property-builder
  "Creates a  `CfnRefreshSchedule$ScheduleFrequencyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-refresh-schedule-schedule-frequency-property-builder (new CfnRefreshSchedule$ScheduleFrequencyProperty$Builder) id config))


(defn build-cfn-template-aggregation-function-property-builder
  "The build-cfn-template-aggregation-function-property-builder function updates a CfnTemplate$AggregationFunctionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$AggregationFunctionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `attributeAggregationFunction` | software.amazon.awscdk.services.quicksight.CfnTemplate$AttributeAggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:attribute-aggregation-function` |
| `categoricalAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:categorical-aggregation-function` |
| `dateAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-aggregation-function` |
| `numericalAggregationFunction` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericalAggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:numerical-aggregation-function` |
"
  [^CfnTemplate$AggregationFunctionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :attribute-aggregation-function)]
    (. builder attributeAggregationFunction data))
  (when-let [data (lookup-entry config id :categorical-aggregation-function)]
    (. builder categoricalAggregationFunction data))
  (when-let [data (lookup-entry config id :date-aggregation-function)]
    (. builder dateAggregationFunction data))
  (when-let [data (lookup-entry config id :numerical-aggregation-function)]
    (. builder numericalAggregationFunction data))
  (.build builder))


(defn cfn-template-aggregation-function-property-builder
  "Creates a  `CfnTemplate$AggregationFunctionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-aggregation-function-property-builder (new CfnTemplate$AggregationFunctionProperty$Builder) id config))


(defn build-cfn-template-aggregation-sort-configuration-property-builder
  "The build-cfn-template-aggregation-sort-configuration-property-builder function updates a CfnTemplate$AggregationSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$AggregationSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnTemplate$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `sortDirection` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-direction` |
"
  [^CfnTemplate$AggregationSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :sort-direction)]
    (. builder sortDirection data))
  (.build builder))


(defn cfn-template-aggregation-sort-configuration-property-builder
  "Creates a  `CfnTemplate$AggregationSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-aggregation-sort-configuration-property-builder (new CfnTemplate$AggregationSortConfigurationProperty$Builder) id config))


(defn build-cfn-template-analysis-defaults-property-builder
  "The build-cfn-template-analysis-defaults-property-builder function updates a CfnTemplate$AnalysisDefaultsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$AnalysisDefaultsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultNewSheetConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-new-sheet-configuration` |
"
  [^CfnTemplate$AnalysisDefaultsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-new-sheet-configuration)]
    (. builder defaultNewSheetConfiguration data))
  (.build builder))


(defn cfn-template-analysis-defaults-property-builder
  "Creates a  `CfnTemplate$AnalysisDefaultsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-analysis-defaults-property-builder (new CfnTemplate$AnalysisDefaultsProperty$Builder) id config))


(defn build-cfn-template-anchor-date-configuration-property-builder
  "The build-cfn-template-anchor-date-configuration-property-builder function updates a CfnTemplate$AnchorDateConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$AnchorDateConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `anchorOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:anchor-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
"
  [^CfnTemplate$AnchorDateConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :anchor-option)]
    (. builder anchorOption data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (.build builder))


(defn cfn-template-anchor-date-configuration-property-builder
  "Creates a  `CfnTemplate$AnchorDateConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-anchor-date-configuration-property-builder (new CfnTemplate$AnchorDateConfigurationProperty$Builder) id config))


(defn build-cfn-template-arc-axis-configuration-property-builder
  "The build-cfn-template-arc-axis-configuration-property-builder function updates a CfnTemplate$ArcAxisConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ArcAxisConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `range` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range` |
| `reserveRange` | java.lang.Number | [[cdk.support/lookup-entry]] | `:reserve-range` |
"
  [^CfnTemplate$ArcAxisConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :range)]
    (. builder range data))
  (when-let [data (lookup-entry config id :reserve-range)]
    (. builder reserveRange data))
  (.build builder))


(defn cfn-template-arc-axis-configuration-property-builder
  "Creates a  `CfnTemplate$ArcAxisConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-arc-axis-configuration-property-builder (new CfnTemplate$ArcAxisConfigurationProperty$Builder) id config))


(defn build-cfn-template-arc-axis-display-range-property-builder
  "The build-cfn-template-arc-axis-display-range-property-builder function updates a CfnTemplate$ArcAxisDisplayRangeProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ArcAxisDisplayRangeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `max` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max` |
| `min` | java.lang.Number | [[cdk.support/lookup-entry]] | `:min` |
"
  [^CfnTemplate$ArcAxisDisplayRangeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :max)]
    (. builder max data))
  (when-let [data (lookup-entry config id :min)]
    (. builder min data))
  (.build builder))


(defn cfn-template-arc-axis-display-range-property-builder
  "Creates a  `CfnTemplate$ArcAxisDisplayRangeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-arc-axis-display-range-property-builder (new CfnTemplate$ArcAxisDisplayRangeProperty$Builder) id config))


(defn build-cfn-template-arc-configuration-property-builder
  "The build-cfn-template-arc-configuration-property-builder function updates a CfnTemplate$ArcConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ArcConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:arc-angle` |
| `arcThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:arc-thickness` |
"
  [^CfnTemplate$ArcConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arc-angle)]
    (. builder arcAngle data))
  (when-let [data (lookup-entry config id :arc-thickness)]
    (. builder arcThickness data))
  (.build builder))


(defn cfn-template-arc-configuration-property-builder
  "Creates a  `CfnTemplate$ArcConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-arc-configuration-property-builder (new CfnTemplate$ArcConfigurationProperty$Builder) id config))


(defn build-cfn-template-arc-options-property-builder
  "The build-cfn-template-arc-options-property-builder function updates a CfnTemplate$ArcOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ArcOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:arc-thickness` |
"
  [^CfnTemplate$ArcOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arc-thickness)]
    (. builder arcThickness data))
  (.build builder))


(defn cfn-template-arc-options-property-builder
  "Creates a  `CfnTemplate$ArcOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-arc-options-property-builder (new CfnTemplate$ArcOptionsProperty$Builder) id config))


(defn build-cfn-template-asset-options-property-builder
  "The build-cfn-template-asset-options-property-builder function updates a CfnTemplate$AssetOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$AssetOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `timezone` | java.lang.String | [[cdk.support/lookup-entry]] | `:timezone` |
| `weekStart` | java.lang.String | [[cdk.support/lookup-entry]] | `:week-start` |
"
  [^CfnTemplate$AssetOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :timezone)]
    (. builder timezone data))
  (when-let [data (lookup-entry config id :week-start)]
    (. builder weekStart data))
  (.build builder))


(defn cfn-template-asset-options-property-builder
  "Creates a  `CfnTemplate$AssetOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-asset-options-property-builder (new CfnTemplate$AssetOptionsProperty$Builder) id config))


(defn build-cfn-template-attribute-aggregation-function-property-builder
  "The build-cfn-template-attribute-aggregation-function-property-builder function updates a CfnTemplate$AttributeAggregationFunctionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$AttributeAggregationFunctionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleAttributeAggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-attribute-aggregation` |
| `valueForMultipleValues` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-for-multiple-values` |
"
  [^CfnTemplate$AttributeAggregationFunctionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :simple-attribute-aggregation)]
    (. builder simpleAttributeAggregation data))
  (when-let [data (lookup-entry config id :value-for-multiple-values)]
    (. builder valueForMultipleValues data))
  (.build builder))


(defn cfn-template-attribute-aggregation-function-property-builder
  "Creates a  `CfnTemplate$AttributeAggregationFunctionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-attribute-aggregation-function-property-builder (new CfnTemplate$AttributeAggregationFunctionProperty$Builder) id config))


(defn build-cfn-template-axis-data-options-property-builder
  "The build-cfn-template-axis-data-options-property-builder function updates a CfnTemplate$AxisDataOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$AxisDataOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateAxisOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$DateAxisOptionsProperty | [[cdk.support/lookup-entry]] | `:date-axis-options` |
| `numericAxisOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericAxisOptionsProperty | [[cdk.support/lookup-entry]] | `:numeric-axis-options` |
"
  [^CfnTemplate$AxisDataOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-axis-options)]
    (. builder dateAxisOptions data))
  (when-let [data (lookup-entry config id :numeric-axis-options)]
    (. builder numericAxisOptions data))
  (.build builder))


(defn cfn-template-axis-data-options-property-builder
  "Creates a  `CfnTemplate$AxisDataOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-axis-data-options-property-builder (new CfnTemplate$AxisDataOptionsProperty$Builder) id config))


(defn build-cfn-template-axis-display-min-max-range-property-builder
  "The build-cfn-template-axis-display-min-max-range-property-builder function updates a CfnTemplate$AxisDisplayMinMaxRangeProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$AxisDisplayMinMaxRangeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `maximum` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum` |
| `minimum` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum` |
"
  [^CfnTemplate$AxisDisplayMinMaxRangeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :maximum)]
    (. builder maximum data))
  (when-let [data (lookup-entry config id :minimum)]
    (. builder minimum data))
  (.build builder))


(defn cfn-template-axis-display-min-max-range-property-builder
  "Creates a  `CfnTemplate$AxisDisplayMinMaxRangeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-axis-display-min-max-range-property-builder (new CfnTemplate$AxisDisplayMinMaxRangeProperty$Builder) id config))


(defn build-cfn-template-axis-display-options-property-builder
  "The build-cfn-template-axis-display-options-property-builder function updates a CfnTemplate$AxisDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$AxisDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisLineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-line-visibility` |
| `axisOffset` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-offset` |
| `dataOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDataOptionsProperty | [[cdk.support/lookup-entry]] | `:data-options` |
| `gridLineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:grid-line-visibility` |
| `scrollbarOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ScrollBarOptionsProperty | [[cdk.support/lookup-entry]] | `:scrollbar-options` |
| `tickLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisTickLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:tick-label-options` |
"
  [^CfnTemplate$AxisDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-line-visibility)]
    (. builder axisLineVisibility data))
  (when-let [data (lookup-entry config id :axis-offset)]
    (. builder axisOffset data))
  (when-let [data (lookup-entry config id :data-options)]
    (. builder dataOptions data))
  (when-let [data (lookup-entry config id :grid-line-visibility)]
    (. builder gridLineVisibility data))
  (when-let [data (lookup-entry config id :scrollbar-options)]
    (. builder scrollbarOptions data))
  (when-let [data (lookup-entry config id :tick-label-options)]
    (. builder tickLabelOptions data))
  (.build builder))


(defn cfn-template-axis-display-options-property-builder
  "Creates a  `CfnTemplate$AxisDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-axis-display-options-property-builder (new CfnTemplate$AxisDisplayOptionsProperty$Builder) id config))


(defn build-cfn-template-axis-display-range-property-builder
  "The build-cfn-template-axis-display-range-property-builder function updates a CfnTemplate$AxisDisplayRangeProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$AxisDisplayRangeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataDriven` | java.lang.Object | [[cdk.support/lookup-entry]] | `:data-driven` |
| `minMax` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:min-max` |
"
  [^CfnTemplate$AxisDisplayRangeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-driven)]
    (. builder dataDriven data))
  (when-let [data (lookup-entry config id :min-max)]
    (. builder minMax data))
  (.build builder))


(defn cfn-template-axis-display-range-property-builder
  "Creates a  `CfnTemplate$AxisDisplayRangeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-axis-display-range-property-builder (new CfnTemplate$AxisDisplayRangeProperty$Builder) id config))


(defn build-cfn-template-axis-label-options-property-builder
  "The build-cfn-template-axis-label-options-property-builder function updates a CfnTemplate$AxisLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$AxisLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `applyTo` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisLabelReferenceOptionsProperty | [[cdk.support/lookup-entry]] | `:apply-to` |
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |
"
  [^CfnTemplate$AxisLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :apply-to)]
    (. builder applyTo data))
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (.build builder))


(defn cfn-template-axis-label-options-property-builder
  "Creates a  `CfnTemplate$AxisLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-axis-label-options-property-builder (new CfnTemplate$AxisLabelOptionsProperty$Builder) id config))


(defn build-cfn-template-axis-label-reference-options-property-builder
  "The build-cfn-template-axis-label-reference-options-property-builder function updates a CfnTemplate$AxisLabelReferenceOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$AxisLabelReferenceOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
"
  [^CfnTemplate$AxisLabelReferenceOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (.build builder))


(defn cfn-template-axis-label-reference-options-property-builder
  "Creates a  `CfnTemplate$AxisLabelReferenceOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-axis-label-reference-options-property-builder (new CfnTemplate$AxisLabelReferenceOptionsProperty$Builder) id config))


(defn build-cfn-template-axis-linear-scale-property-builder
  "The build-cfn-template-axis-linear-scale-property-builder function updates a CfnTemplate$AxisLinearScaleProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$AxisLinearScaleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `stepCount` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-count` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
"
  [^CfnTemplate$AxisLinearScaleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :step-count)]
    (. builder stepCount data))
  (when-let [data (lookup-entry config id :step-size)]
    (. builder stepSize data))
  (.build builder))


(defn cfn-template-axis-linear-scale-property-builder
  "Creates a  `CfnTemplate$AxisLinearScaleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-axis-linear-scale-property-builder (new CfnTemplate$AxisLinearScaleProperty$Builder) id config))


(defn build-cfn-template-axis-logarithmic-scale-property-builder
  "The build-cfn-template-axis-logarithmic-scale-property-builder function updates a CfnTemplate$AxisLogarithmicScaleProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$AxisLogarithmicScaleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `base` | java.lang.Number | [[cdk.support/lookup-entry]] | `:base` |
"
  [^CfnTemplate$AxisLogarithmicScaleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :base)]
    (. builder base data))
  (.build builder))


(defn cfn-template-axis-logarithmic-scale-property-builder
  "Creates a  `CfnTemplate$AxisLogarithmicScaleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-axis-logarithmic-scale-property-builder (new CfnTemplate$AxisLogarithmicScaleProperty$Builder) id config))


(defn build-cfn-template-axis-scale-property-builder
  "The build-cfn-template-axis-scale-property-builder function updates a CfnTemplate$AxisScaleProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$AxisScaleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `linear` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisLinearScaleProperty | [[cdk.support/lookup-entry]] | `:linear` |
| `logarithmic` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisLogarithmicScaleProperty | [[cdk.support/lookup-entry]] | `:logarithmic` |
"
  [^CfnTemplate$AxisScaleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :linear)]
    (. builder linear data))
  (when-let [data (lookup-entry config id :logarithmic)]
    (. builder logarithmic data))
  (.build builder))


(defn cfn-template-axis-scale-property-builder
  "Creates a  `CfnTemplate$AxisScaleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-axis-scale-property-builder (new CfnTemplate$AxisScaleProperty$Builder) id config))


(defn build-cfn-template-axis-tick-label-options-property-builder
  "The build-cfn-template-axis-tick-label-options-property-builder function updates a CfnTemplate$AxisTickLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$AxisTickLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `labelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:label-options` |
| `rotationAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:rotation-angle` |
"
  [^CfnTemplate$AxisTickLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :label-options)]
    (. builder labelOptions data))
  (when-let [data (lookup-entry config id :rotation-angle)]
    (. builder rotationAngle data))
  (.build builder))


(defn cfn-template-axis-tick-label-options-property-builder
  "Creates a  `CfnTemplate$AxisTickLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-axis-tick-label-options-property-builder (new CfnTemplate$AxisTickLabelOptionsProperty$Builder) id config))


(defn build-cfn-template-bar-chart-aggregated-field-wells-property-builder
  "The build-cfn-template-bar-chart-aggregated-field-wells-property-builder function updates a CfnTemplate$BarChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$BarChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `smallMultiples` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$BarChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :small-multiples)]
    (. builder smallMultiples data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-bar-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$BarChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-bar-chart-aggregated-field-wells-property-builder (new CfnTemplate$BarChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-bar-chart-configuration-property-builder
  "The build-cfn-template-bar-chart-configuration-property-builder function updates a CfnTemplate$BarChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$BarChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barsArrangement` | java.lang.String | [[cdk.support/lookup-entry]] | `:bars-arrangement` |
| `categoryAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `contributionAnalysisDefaults` | java.util.List | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$BarChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `orientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:orientation` |
| `referenceLines` | java.util.List | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `smallMultiplesOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SmallMultiplesOptionsProperty | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$BarChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnTemplate$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueAxis` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:value-axis` |
| `valueLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnTemplate$BarChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bars-arrangement)]
    (. builder barsArrangement data))
  (when-let [data (lookup-entry config id :category-axis)]
    (. builder categoryAxis data))
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :color-label-options)]
    (. builder colorLabelOptions data))
  (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
    (. builder contributionAnalysisDefaults data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :orientation)]
    (. builder orientation data))
  (when-let [data (lookup-entry config id :reference-lines)]
    (. builder referenceLines data))
  (when-let [data (lookup-entry config id :small-multiples-options)]
    (. builder smallMultiplesOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :value-axis)]
    (. builder valueAxis data))
  (when-let [data (lookup-entry config id :value-label-options)]
    (. builder valueLabelOptions data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-template-bar-chart-configuration-property-builder
  "Creates a  `CfnTemplate$BarChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-bar-chart-configuration-property-builder (new CfnTemplate$BarChartConfigurationProperty$Builder) id config))


(defn build-cfn-template-bar-chart-field-wells-property-builder
  "The build-cfn-template-bar-chart-field-wells-property-builder function updates a CfnTemplate$BarChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$BarChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bar-chart-aggregated-field-wells` |
"
  [^CfnTemplate$BarChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bar-chart-aggregated-field-wells)]
    (. builder barChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-template-bar-chart-field-wells-property-builder
  "Creates a  `CfnTemplate$BarChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-bar-chart-field-wells-property-builder (new CfnTemplate$BarChartFieldWellsProperty$Builder) id config))


(defn build-cfn-template-bar-chart-sort-configuration-property-builder
  "The build-cfn-template-bar-chart-sort-configuration-property-builder function updates a CfnTemplate$BarChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$BarChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | java.util.List | [[cdk.support/lookup-entry]] | `:color-sort` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |
"
  [^CfnTemplate$BarChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :color-items-limit)]
    (. builder colorItemsLimit data))
  (when-let [data (lookup-entry config id :color-sort)]
    (. builder colorSort data))
  (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
    (. builder smallMultiplesLimitConfiguration data))
  (when-let [data (lookup-entry config id :small-multiples-sort)]
    (. builder smallMultiplesSort data))
  (.build builder))


(defn cfn-template-bar-chart-sort-configuration-property-builder
  "Creates a  `CfnTemplate$BarChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-bar-chart-sort-configuration-property-builder (new CfnTemplate$BarChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-template-bar-chart-visual-property-builder
  "The build-cfn-template-bar-chart-visual-property-builder function updates a CfnTemplate$BarChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$BarChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$BarChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$BarChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-bar-chart-visual-property-builder
  "Creates a  `CfnTemplate$BarChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-bar-chart-visual-property-builder (new CfnTemplate$BarChartVisualProperty$Builder) id config))


(defn build-cfn-template-bin-count-options-property-builder
  "The build-cfn-template-bin-count-options-property-builder function updates a CfnTemplate$BinCountOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$BinCountOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$BinCountOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-bin-count-options-property-builder
  "Creates a  `CfnTemplate$BinCountOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-bin-count-options-property-builder (new CfnTemplate$BinCountOptionsProperty$Builder) id config))


(defn build-cfn-template-bin-width-options-property-builder
  "The build-cfn-template-bin-width-options-property-builder function updates a CfnTemplate$BinWidthOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$BinWidthOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binCountLimit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:bin-count-limit` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$BinWidthOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bin-count-limit)]
    (. builder binCountLimit data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-bin-width-options-property-builder
  "Creates a  `CfnTemplate$BinWidthOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-bin-width-options-property-builder (new CfnTemplate$BinWidthOptionsProperty$Builder) id config))


(defn build-cfn-template-body-section-configuration-property-builder
  "The build-cfn-template-body-section-configuration-property-builder function updates a CfnTemplate$BodySectionConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$BodySectionConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:content` |
| `pageBreakConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$SectionPageBreakConfigurationProperty | [[cdk.support/lookup-entry]] | `:page-break-configuration` |
| `sectionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:section-id` |
| `style` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style` |
"
  [^CfnTemplate$BodySectionConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :content)]
    (. builder content data))
  (when-let [data (lookup-entry config id :page-break-configuration)]
    (. builder pageBreakConfiguration data))
  (when-let [data (lookup-entry config id :section-id)]
    (. builder sectionId data))
  (when-let [data (lookup-entry config id :style)]
    (. builder style data))
  (.build builder))


(defn cfn-template-body-section-configuration-property-builder
  "Creates a  `CfnTemplate$BodySectionConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-body-section-configuration-property-builder (new CfnTemplate$BodySectionConfigurationProperty$Builder) id config))


(defn build-cfn-template-body-section-content-property-builder
  "The build-cfn-template-body-section-content-property-builder function updates a CfnTemplate$BodySectionContentProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$BodySectionContentProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `layout` | software.amazon.awscdk.services.quicksight.CfnTemplate$SectionLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:layout` |
"
  [^CfnTemplate$BodySectionContentProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :layout)]
    (. builder layout data))
  (.build builder))


(defn cfn-template-body-section-content-property-builder
  "Creates a  `CfnTemplate$BodySectionContentProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-body-section-content-property-builder (new CfnTemplate$BodySectionContentProperty$Builder) id config))


(defn build-cfn-template-box-plot-aggregated-field-wells-property-builder
  "The build-cfn-template-box-plot-aggregated-field-wells-property-builder function updates a CfnTemplate$BoxPlotAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$BoxPlotAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | java.util.List | [[cdk.support/lookup-entry]] | `:group-by` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$BoxPlotAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :group-by)]
    (. builder groupBy data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-box-plot-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$BoxPlotAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-box-plot-aggregated-field-wells-property-builder (new CfnTemplate$BoxPlotAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-box-plot-chart-configuration-property-builder
  "The build-cfn-template-box-plot-chart-configuration-property-builder function updates a CfnTemplate$BoxPlotChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$BoxPlotChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `boxPlotOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:box-plot-options` |
| `categoryAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$BoxPlotFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnTemplate$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$BoxPlotSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnTemplate$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnTemplate$BoxPlotChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :box-plot-options)]
    (. builder boxPlotOptions data))
  (when-let [data (lookup-entry config id :category-axis)]
    (. builder categoryAxis data))
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
    (. builder primaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
    (. builder primaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :reference-lines)]
    (. builder referenceLines data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-template-box-plot-chart-configuration-property-builder
  "Creates a  `CfnTemplate$BoxPlotChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-box-plot-chart-configuration-property-builder (new CfnTemplate$BoxPlotChartConfigurationProperty$Builder) id config))


(defn build-cfn-template-box-plot-field-wells-property-builder
  "The build-cfn-template-box-plot-field-wells-property-builder function updates a CfnTemplate$BoxPlotFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$BoxPlotFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `boxPlotAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$BoxPlotAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:box-plot-aggregated-field-wells` |
"
  [^CfnTemplate$BoxPlotFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :box-plot-aggregated-field-wells)]
    (. builder boxPlotAggregatedFieldWells data))
  (.build builder))


(defn cfn-template-box-plot-field-wells-property-builder
  "Creates a  `CfnTemplate$BoxPlotFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-box-plot-field-wells-property-builder (new CfnTemplate$BoxPlotFieldWellsProperty$Builder) id config))


(defn build-cfn-template-box-plot-options-property-builder
  "The build-cfn-template-box-plot-options-property-builder function updates a CfnTemplate$BoxPlotOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$BoxPlotOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `allDataPointsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:all-data-points-visibility` |
| `outlierVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:outlier-visibility` |
| `styleOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$BoxPlotStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:style-options` |
"
  [^CfnTemplate$BoxPlotOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :all-data-points-visibility)]
    (. builder allDataPointsVisibility data))
  (when-let [data (lookup-entry config id :outlier-visibility)]
    (. builder outlierVisibility data))
  (when-let [data (lookup-entry config id :style-options)]
    (. builder styleOptions data))
  (.build builder))


(defn cfn-template-box-plot-options-property-builder
  "Creates a  `CfnTemplate$BoxPlotOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-box-plot-options-property-builder (new CfnTemplate$BoxPlotOptionsProperty$Builder) id config))


(defn build-cfn-template-box-plot-sort-configuration-property-builder
  "The build-cfn-template-box-plot-sort-configuration-property-builder function updates a CfnTemplate$BoxPlotSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$BoxPlotSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
| `paginationConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:pagination-configuration` |
"
  [^CfnTemplate$BoxPlotSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :pagination-configuration)]
    (. builder paginationConfiguration data))
  (.build builder))


(defn cfn-template-box-plot-sort-configuration-property-builder
  "Creates a  `CfnTemplate$BoxPlotSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-box-plot-sort-configuration-property-builder (new CfnTemplate$BoxPlotSortConfigurationProperty$Builder) id config))


(defn build-cfn-template-box-plot-style-options-property-builder
  "The build-cfn-template-box-plot-style-options-property-builder function updates a CfnTemplate$BoxPlotStyleOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$BoxPlotStyleOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fillStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:fill-style` |
"
  [^CfnTemplate$BoxPlotStyleOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :fill-style)]
    (. builder fillStyle data))
  (.build builder))


(defn cfn-template-box-plot-style-options-property-builder
  "Creates a  `CfnTemplate$BoxPlotStyleOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-box-plot-style-options-property-builder (new CfnTemplate$BoxPlotStyleOptionsProperty$Builder) id config))


(defn build-cfn-template-box-plot-visual-property-builder
  "The build-cfn-template-box-plot-visual-property-builder function updates a CfnTemplate$BoxPlotVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$BoxPlotVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$BoxPlotChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$BoxPlotVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-box-plot-visual-property-builder
  "Creates a  `CfnTemplate$BoxPlotVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-box-plot-visual-property-builder (new CfnTemplate$BoxPlotVisualProperty$Builder) id config))


(defn build-cfn-template-builder
  "The build-cfn-template-builder function updates a CfnTemplate$Builder instance using the provided configuration.
  The function takes the CfnTemplate$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `definition` | software.amazon.awscdk.services.quicksight.CfnTemplate$TemplateVersionDefinitionProperty | [[cdk.support/lookup-entry]] | `:definition` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `permissions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:permissions` |
| `sourceEntity` | software.amazon.awscdk.services.quicksight.CfnTemplate$TemplateSourceEntityProperty | [[cdk.support/lookup-entry]] | `:source-entity` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `templateId` | java.lang.String | [[cdk.support/lookup-entry]] | `:template-id` |
| `validationStrategy` | software.amazon.awscdk.services.quicksight.CfnTemplate$ValidationStrategyProperty | [[cdk.support/lookup-entry]] | `:validation-strategy` |
| `versionDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:version-description` |
"
  [^CfnTemplate$Builder builder id config]
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :definition)]
    (. builder definition data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :permissions)]
    (. builder permissions data))
  (when-let [data (lookup-entry config id :source-entity)]
    (. builder sourceEntity data))
  (when-let [data (lookup-entry config id :tags)]
    (. builder tags data))
  (when-let [data (lookup-entry config id :template-id)]
    (. builder templateId data))
  (when-let [data (lookup-entry config id :validation-strategy)]
    (. builder validationStrategy data))
  (when-let [data (lookup-entry config id :version-description)]
    (. builder versionDescription data))
  (.build builder))


(defn cfn-template-builder
  "Creates a  `CfnTemplate$Builder` instance using a scope and ID, applies the data configuration, then builds it.  Takes the following arguments: 
| Argument | DataType | Description |
|---|---|---|
| scope | software.constructs.Construct | The parent scope construct of the object being built. |
| id | String or Keyword or Symbol | Value to use as both the ID of the object being build and the namespace when looking up configuration values. |
| config | map | Data configuration |"
  [^software.constructs.Construct scope id config]
  (build-cfn-template-builder (CfnTemplate$Builder/create scope (name id)) id config))


(defn build-cfn-template-calculated-field-property-builder
  "The build-cfn-template-calculated-field-property-builder function updates a CfnTemplate$CalculatedFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CalculatedFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
"
  [^CfnTemplate$CalculatedFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (.build builder))


(defn cfn-template-calculated-field-property-builder
  "Creates a  `CfnTemplate$CalculatedFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-calculated-field-property-builder (new CfnTemplate$CalculatedFieldProperty$Builder) id config))


(defn build-cfn-template-calculated-measure-field-property-builder
  "The build-cfn-template-calculated-measure-field-property-builder function updates a CfnTemplate$CalculatedMeasureFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CalculatedMeasureFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
"
  [^CfnTemplate$CalculatedMeasureFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (.build builder))


(defn cfn-template-calculated-measure-field-property-builder
  "Creates a  `CfnTemplate$CalculatedMeasureFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-calculated-measure-field-property-builder (new CfnTemplate$CalculatedMeasureFieldProperty$Builder) id config))


(defn build-cfn-template-cascading-control-configuration-property-builder
  "The build-cfn-template-cascading-control-configuration-property-builder function updates a CfnTemplate$CascadingControlConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CascadingControlConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sourceControls` | java.util.List | [[cdk.support/lookup-entry]] | `:source-controls` |
"
  [^CfnTemplate$CascadingControlConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :source-controls)]
    (. builder sourceControls data))
  (.build builder))


(defn cfn-template-cascading-control-configuration-property-builder
  "Creates a  `CfnTemplate$CascadingControlConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-cascading-control-configuration-property-builder (new CfnTemplate$CascadingControlConfigurationProperty$Builder) id config))


(defn build-cfn-template-cascading-control-source-property-builder
  "The build-cfn-template-cascading-control-source-property-builder function updates a CfnTemplate$CascadingControlSourceProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CascadingControlSourceProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnToMatch` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-to-match` |
| `sourceSheetControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-sheet-control-id` |
"
  [^CfnTemplate$CascadingControlSourceProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-to-match)]
    (. builder columnToMatch data))
  (when-let [data (lookup-entry config id :source-sheet-control-id)]
    (. builder sourceSheetControlId data))
  (.build builder))


(defn cfn-template-cascading-control-source-property-builder
  "Creates a  `CfnTemplate$CascadingControlSourceProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-cascading-control-source-property-builder (new CfnTemplate$CascadingControlSourceProperty$Builder) id config))


(defn build-cfn-template-categorical-dimension-field-property-builder
  "The build-cfn-template-categorical-dimension-field-property-builder function updates a CfnTemplate$CategoricalDimensionFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CategoricalDimensionFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnTemplate$CategoricalDimensionFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-template-categorical-dimension-field-property-builder
  "Creates a  `CfnTemplate$CategoricalDimensionFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-categorical-dimension-field-property-builder (new CfnTemplate$CategoricalDimensionFieldProperty$Builder) id config))


(defn build-cfn-template-categorical-measure-field-property-builder
  "The build-cfn-template-categorical-measure-field-property-builder function updates a CfnTemplate$CategoricalMeasureFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CategoricalMeasureFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$StringFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
"
  [^CfnTemplate$CategoricalMeasureFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (.build builder))


(defn cfn-template-categorical-measure-field-property-builder
  "Creates a  `CfnTemplate$CategoricalMeasureFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-categorical-measure-field-property-builder (new CfnTemplate$CategoricalMeasureFieldProperty$Builder) id config))


(defn build-cfn-template-category-drill-down-filter-property-builder
  "The build-cfn-template-category-drill-down-filter-property-builder function updates a CfnTemplate$CategoryDrillDownFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CategoryDrillDownFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
"
  [^CfnTemplate$CategoryDrillDownFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-values)]
    (. builder categoryValues data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (.build builder))


(defn cfn-template-category-drill-down-filter-property-builder
  "Creates a  `CfnTemplate$CategoryDrillDownFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-category-drill-down-filter-property-builder (new CfnTemplate$CategoryDrillDownFilterProperty$Builder) id config))


(defn build-cfn-template-category-filter-configuration-property-builder
  "The build-cfn-template-category-filter-configuration-property-builder function updates a CfnTemplate$CategoryFilterConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CategoryFilterConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customFilterConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$CustomFilterConfigurationProperty | [[cdk.support/lookup-entry]] | `:custom-filter-configuration` |
| `customFilterListConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$CustomFilterListConfigurationProperty | [[cdk.support/lookup-entry]] | `:custom-filter-list-configuration` |
| `filterListConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-list-configuration` |
"
  [^CfnTemplate$CategoryFilterConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-filter-configuration)]
    (. builder customFilterConfiguration data))
  (when-let [data (lookup-entry config id :custom-filter-list-configuration)]
    (. builder customFilterListConfiguration data))
  (when-let [data (lookup-entry config id :filter-list-configuration)]
    (. builder filterListConfiguration data))
  (.build builder))


(defn cfn-template-category-filter-configuration-property-builder
  "Creates a  `CfnTemplate$CategoryFilterConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-category-filter-configuration-property-builder (new CfnTemplate$CategoryFilterConfigurationProperty$Builder) id config))


(defn build-cfn-template-category-filter-property-builder
  "The build-cfn-template-category-filter-property-builder function updates a CfnTemplate$CategoryFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CategoryFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `configuration` | software.amazon.awscdk.services.quicksight.CfnTemplate$CategoryFilterConfigurationProperty | [[cdk.support/lookup-entry]] | `:configuration` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
"
  [^CfnTemplate$CategoryFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :configuration)]
    (. builder configuration data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (.build builder))


(defn cfn-template-category-filter-property-builder
  "Creates a  `CfnTemplate$CategoryFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-category-filter-property-builder (new CfnTemplate$CategoryFilterProperty$Builder) id config))


(defn build-cfn-template-chart-axis-label-options-property-builder
  "The build-cfn-template-chart-axis-label-options-property-builder function updates a CfnTemplate$ChartAxisLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ChartAxisLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:axis-label-options` |
| `sortIconVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-icon-visibility` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$ChartAxisLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-label-options)]
    (. builder axisLabelOptions data))
  (when-let [data (lookup-entry config id :sort-icon-visibility)]
    (. builder sortIconVisibility data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-chart-axis-label-options-property-builder
  "Creates a  `CfnTemplate$ChartAxisLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-chart-axis-label-options-property-builder (new CfnTemplate$ChartAxisLabelOptionsProperty$Builder) id config))


(defn build-cfn-template-cluster-marker-configuration-property-builder
  "The build-cfn-template-cluster-marker-configuration-property-builder function updates a CfnTemplate$ClusterMarkerConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ClusterMarkerConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `clusterMarker` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cluster-marker` |
"
  [^CfnTemplate$ClusterMarkerConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cluster-marker)]
    (. builder clusterMarker data))
  (.build builder))


(defn cfn-template-cluster-marker-configuration-property-builder
  "Creates a  `CfnTemplate$ClusterMarkerConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-cluster-marker-configuration-property-builder (new CfnTemplate$ClusterMarkerConfigurationProperty$Builder) id config))


(defn build-cfn-template-cluster-marker-property-builder
  "The build-cfn-template-cluster-marker-property-builder function updates a CfnTemplate$ClusterMarkerProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ClusterMarkerProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleClusterMarker` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:simple-cluster-marker` |
"
  [^CfnTemplate$ClusterMarkerProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :simple-cluster-marker)]
    (. builder simpleClusterMarker data))
  (.build builder))


(defn cfn-template-cluster-marker-property-builder
  "Creates a  `CfnTemplate$ClusterMarkerProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-cluster-marker-property-builder (new CfnTemplate$ClusterMarkerProperty$Builder) id config))


(defn build-cfn-template-color-scale-property-builder
  "The build-cfn-template-color-scale-property-builder function updates a CfnTemplate$ColorScaleProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ColorScaleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorFillType` | java.lang.String | [[cdk.support/lookup-entry]] | `:color-fill-type` |
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
| `nullValueColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:null-value-color` |
"
  [^CfnTemplate$ColorScaleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color-fill-type)]
    (. builder colorFillType data))
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :null-value-color)]
    (. builder nullValueColor data))
  (.build builder))


(defn cfn-template-color-scale-property-builder
  "Creates a  `CfnTemplate$ColorScaleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-color-scale-property-builder (new CfnTemplate$ColorScaleProperty$Builder) id config))


(defn build-cfn-template-colors-configuration-property-builder
  "The build-cfn-template-colors-configuration-property-builder function updates a CfnTemplate$ColorsConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ColorsConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customColors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-colors` |
"
  [^CfnTemplate$ColorsConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-colors)]
    (. builder customColors data))
  (.build builder))


(defn cfn-template-colors-configuration-property-builder
  "Creates a  `CfnTemplate$ColorsConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-colors-configuration-property-builder (new CfnTemplate$ColorsConfigurationProperty$Builder) id config))


(defn build-cfn-template-column-configuration-property-builder
  "The build-cfn-template-column-configuration-property-builder function updates a CfnTemplate$ColumnConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ColumnConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorsConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColorsConfigurationProperty | [[cdk.support/lookup-entry]] | `:colors-configuration` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `role` | java.lang.String | [[cdk.support/lookup-entry]] | `:role` |
"
  [^CfnTemplate$ColumnConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :colors-configuration)]
    (. builder colorsConfiguration data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (when-let [data (lookup-entry config id :role)]
    (. builder role data))
  (.build builder))


(defn cfn-template-column-configuration-property-builder
  "Creates a  `CfnTemplate$ColumnConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-column-configuration-property-builder (new CfnTemplate$ColumnConfigurationProperty$Builder) id config))


(defn build-cfn-template-column-group-column-schema-property-builder
  "The build-cfn-template-column-group-column-schema-property-builder function updates a CfnTemplate$ColumnGroupColumnSchemaProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ColumnGroupColumnSchemaProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
"
  [^CfnTemplate$ColumnGroupColumnSchemaProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (.build builder))


(defn cfn-template-column-group-column-schema-property-builder
  "Creates a  `CfnTemplate$ColumnGroupColumnSchemaProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-column-group-column-schema-property-builder (new CfnTemplate$ColumnGroupColumnSchemaProperty$Builder) id config))


(defn build-cfn-template-column-group-schema-property-builder
  "The build-cfn-template-column-group-schema-property-builder function updates a CfnTemplate$ColumnGroupSchemaProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ColumnGroupSchemaProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnGroupColumnSchemaList` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-group-column-schema-list` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
"
  [^CfnTemplate$ColumnGroupSchemaProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-group-column-schema-list)]
    (. builder columnGroupColumnSchemaList data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (.build builder))


(defn cfn-template-column-group-schema-property-builder
  "Creates a  `CfnTemplate$ColumnGroupSchemaProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-column-group-schema-property-builder (new CfnTemplate$ColumnGroupSchemaProperty$Builder) id config))


(defn build-cfn-template-column-hierarchy-property-builder
  "The build-cfn-template-column-hierarchy-property-builder function updates a CfnTemplate$ColumnHierarchyProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ColumnHierarchyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeHierarchy` | software.amazon.awscdk.services.quicksight.CfnTemplate$DateTimeHierarchyProperty | [[cdk.support/lookup-entry]] | `:date-time-hierarchy` |
| `explicitHierarchy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:explicit-hierarchy` |
| `predefinedHierarchy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:predefined-hierarchy` |
"
  [^CfnTemplate$ColumnHierarchyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-hierarchy)]
    (. builder dateTimeHierarchy data))
  (when-let [data (lookup-entry config id :explicit-hierarchy)]
    (. builder explicitHierarchy data))
  (when-let [data (lookup-entry config id :predefined-hierarchy)]
    (. builder predefinedHierarchy data))
  (.build builder))


(defn cfn-template-column-hierarchy-property-builder
  "Creates a  `CfnTemplate$ColumnHierarchyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-column-hierarchy-property-builder (new CfnTemplate$ColumnHierarchyProperty$Builder) id config))


(defn build-cfn-template-column-identifier-property-builder
  "The build-cfn-template-column-identifier-property-builder function updates a CfnTemplate$ColumnIdentifierProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ColumnIdentifierProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
"
  [^CfnTemplate$ColumnIdentifierProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-name)]
    (. builder columnName data))
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (.build builder))


(defn cfn-template-column-identifier-property-builder
  "Creates a  `CfnTemplate$ColumnIdentifierProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-column-identifier-property-builder (new CfnTemplate$ColumnIdentifierProperty$Builder) id config))


(defn build-cfn-template-column-schema-property-builder
  "The build-cfn-template-column-schema-property-builder function updates a CfnTemplate$ColumnSchemaProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ColumnSchemaProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataType` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-type` |
| `geographicRole` | java.lang.String | [[cdk.support/lookup-entry]] | `:geographic-role` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
"
  [^CfnTemplate$ColumnSchemaProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-type)]
    (. builder dataType data))
  (when-let [data (lookup-entry config id :geographic-role)]
    (. builder geographicRole data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (.build builder))


(defn cfn-template-column-schema-property-builder
  "Creates a  `CfnTemplate$ColumnSchemaProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-column-schema-property-builder (new CfnTemplate$ColumnSchemaProperty$Builder) id config))


(defn build-cfn-template-column-sort-property-builder
  "The build-cfn-template-column-sort-property-builder function updates a CfnTemplate$ColumnSortProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ColumnSortProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnTemplate$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `sortBy` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:sort-by` |
"
  [^CfnTemplate$ColumnSortProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :direction)]
    (. builder direction data))
  (when-let [data (lookup-entry config id :sort-by)]
    (. builder sortBy data))
  (.build builder))


(defn cfn-template-column-sort-property-builder
  "Creates a  `CfnTemplate$ColumnSortProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-column-sort-property-builder (new CfnTemplate$ColumnSortProperty$Builder) id config))


(defn build-cfn-template-column-tooltip-item-property-builder
  "The build-cfn-template-column-tooltip-item-property-builder function updates a CfnTemplate$ColumnTooltipItemProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ColumnTooltipItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregation` | software.amazon.awscdk.services.quicksight.CfnTemplate$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation` |
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `label` | java.lang.String | [[cdk.support/lookup-entry]] | `:label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$ColumnTooltipItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation)]
    (. builder aggregation data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :label)]
    (. builder label data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-column-tooltip-item-property-builder
  "Creates a  `CfnTemplate$ColumnTooltipItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-column-tooltip-item-property-builder (new CfnTemplate$ColumnTooltipItemProperty$Builder) id config))


(defn build-cfn-template-combo-chart-aggregated-field-wells-property-builder
  "The build-cfn-template-combo-chart-aggregated-field-wells-property-builder function updates a CfnTemplate$ComboChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ComboChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barValues` | java.util.List | [[cdk.support/lookup-entry]] | `:bar-values` |
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
| `lineValues` | java.util.List | [[cdk.support/lookup-entry]] | `:line-values` |
"
  [^CfnTemplate$ComboChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bar-values)]
    (. builder barValues data))
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :line-values)]
    (. builder lineValues data))
  (.build builder))


(defn cfn-template-combo-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$ComboChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-combo-chart-aggregated-field-wells-property-builder (new CfnTemplate$ComboChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-combo-chart-configuration-property-builder
  "The build-cfn-template-combo-chart-configuration-property-builder function updates a CfnTemplate$ComboChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ComboChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barDataLabels` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:bar-data-labels` |
| `barsArrangement` | java.lang.String | [[cdk.support/lookup-entry]] | `:bars-arrangement` |
| `categoryAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$ComboChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `lineDataLabels` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:line-data-labels` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | java.util.List | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `secondaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-y-axis-display-options` |
| `secondaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:secondary-y-axis-label-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnTemplate$ComboChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bar-data-labels)]
    (. builder barDataLabels data))
  (when-let [data (lookup-entry config id :bars-arrangement)]
    (. builder barsArrangement data))
  (when-let [data (lookup-entry config id :category-axis)]
    (. builder categoryAxis data))
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :color-label-options)]
    (. builder colorLabelOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :line-data-labels)]
    (. builder lineDataLabels data))
  (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
    (. builder primaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
    (. builder primaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :reference-lines)]
    (. builder referenceLines data))
  (when-let [data (lookup-entry config id :secondary-y-axis-display-options)]
    (. builder secondaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :secondary-y-axis-label-options)]
    (. builder secondaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-template-combo-chart-configuration-property-builder
  "Creates a  `CfnTemplate$ComboChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-combo-chart-configuration-property-builder (new CfnTemplate$ComboChartConfigurationProperty$Builder) id config))


(defn build-cfn-template-combo-chart-field-wells-property-builder
  "The build-cfn-template-combo-chart-field-wells-property-builder function updates a CfnTemplate$ComboChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ComboChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comboChartAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$ComboChartAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:combo-chart-aggregated-field-wells` |
"
  [^CfnTemplate$ComboChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :combo-chart-aggregated-field-wells)]
    (. builder comboChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-template-combo-chart-field-wells-property-builder
  "Creates a  `CfnTemplate$ComboChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-combo-chart-field-wells-property-builder (new CfnTemplate$ComboChartFieldWellsProperty$Builder) id config))


(defn build-cfn-template-combo-chart-sort-configuration-property-builder
  "The build-cfn-template-combo-chart-sort-configuration-property-builder function updates a CfnTemplate$ComboChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ComboChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | java.util.List | [[cdk.support/lookup-entry]] | `:color-sort` |
"
  [^CfnTemplate$ComboChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :color-items-limit)]
    (. builder colorItemsLimit data))
  (when-let [data (lookup-entry config id :color-sort)]
    (. builder colorSort data))
  (.build builder))


(defn cfn-template-combo-chart-sort-configuration-property-builder
  "Creates a  `CfnTemplate$ComboChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-combo-chart-sort-configuration-property-builder (new CfnTemplate$ComboChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-template-combo-chart-visual-property-builder
  "The build-cfn-template-combo-chart-visual-property-builder function updates a CfnTemplate$ComboChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ComboChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ComboChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$ComboChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-combo-chart-visual-property-builder
  "Creates a  `CfnTemplate$ComboChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-combo-chart-visual-property-builder (new CfnTemplate$ComboChartVisualProperty$Builder) id config))


(defn build-cfn-template-comparison-configuration-property-builder
  "The build-cfn-template-comparison-configuration-property-builder function updates a CfnTemplate$ComparisonConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ComparisonConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comparisonFormat` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:comparison-format` |
| `comparisonMethod` | java.lang.String | [[cdk.support/lookup-entry]] | `:comparison-method` |
"
  [^CfnTemplate$ComparisonConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :comparison-format)]
    (. builder comparisonFormat data))
  (when-let [data (lookup-entry config id :comparison-method)]
    (. builder comparisonMethod data))
  (.build builder))


(defn cfn-template-comparison-configuration-property-builder
  "Creates a  `CfnTemplate$ComparisonConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-comparison-configuration-property-builder (new CfnTemplate$ComparisonConfigurationProperty$Builder) id config))


(defn build-cfn-template-comparison-format-configuration-property-builder
  "The build-cfn-template-comparison-format-configuration-property-builder function updates a CfnTemplate$ComparisonFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ComparisonFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `numberDisplayFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:number-display-format-configuration` |
| `percentageDisplayFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$PercentageDisplayFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:percentage-display-format-configuration` |
"
  [^CfnTemplate$ComparisonFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :number-display-format-configuration)]
    (. builder numberDisplayFormatConfiguration data))
  (when-let [data (lookup-entry config id :percentage-display-format-configuration)]
    (. builder percentageDisplayFormatConfiguration data))
  (.build builder))


(defn cfn-template-comparison-format-configuration-property-builder
  "Creates a  `CfnTemplate$ComparisonFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-comparison-format-configuration-property-builder (new CfnTemplate$ComparisonFormatConfigurationProperty$Builder) id config))


(defn build-cfn-template-computation-property-builder
  "The build-cfn-template-computation-property-builder function updates a CfnTemplate$ComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `forecast` | software.amazon.awscdk.services.quicksight.CfnTemplate$ForecastComputationProperty | [[cdk.support/lookup-entry]] | `:forecast` |
| `growthRate` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:growth-rate` |
| `maximumMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:maximum-minimum` |
| `metricComparison` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:metric-comparison` |
| `periodOverPeriod` | software.amazon.awscdk.services.quicksight.CfnTemplate$PeriodOverPeriodComputationProperty | [[cdk.support/lookup-entry]] | `:period-over-period` |
| `periodToDate` | software.amazon.awscdk.services.quicksight.CfnTemplate$PeriodToDateComputationProperty | [[cdk.support/lookup-entry]] | `:period-to-date` |
| `topBottomMovers` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:top-bottom-movers` |
| `topBottomRanked` | software.amazon.awscdk.services.quicksight.CfnTemplate$TopBottomRankedComputationProperty | [[cdk.support/lookup-entry]] | `:top-bottom-ranked` |
| `totalAggregation` | software.amazon.awscdk.services.quicksight.CfnTemplate$TotalAggregationComputationProperty | [[cdk.support/lookup-entry]] | `:total-aggregation` |
| `uniqueValues` | software.amazon.awscdk.services.quicksight.CfnTemplate$UniqueValuesComputationProperty | [[cdk.support/lookup-entry]] | `:unique-values` |
"
  [^CfnTemplate$ComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :forecast)]
    (. builder forecast data))
  (when-let [data (lookup-entry config id :growth-rate)]
    (. builder growthRate data))
  (when-let [data (lookup-entry config id :maximum-minimum)]
    (. builder maximumMinimum data))
  (when-let [data (lookup-entry config id :metric-comparison)]
    (. builder metricComparison data))
  (when-let [data (lookup-entry config id :period-over-period)]
    (. builder periodOverPeriod data))
  (when-let [data (lookup-entry config id :period-to-date)]
    (. builder periodToDate data))
  (when-let [data (lookup-entry config id :top-bottom-movers)]
    (. builder topBottomMovers data))
  (when-let [data (lookup-entry config id :top-bottom-ranked)]
    (. builder topBottomRanked data))
  (when-let [data (lookup-entry config id :total-aggregation)]
    (. builder totalAggregation data))
  (when-let [data (lookup-entry config id :unique-values)]
    (. builder uniqueValues data))
  (.build builder))


(defn cfn-template-computation-property-builder
  "Creates a  `CfnTemplate$ComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-computation-property-builder (new CfnTemplate$ComputationProperty$Builder) id config))


(defn build-cfn-template-conditional-formatting-color-property-builder
  "The build-cfn-template-conditional-formatting-color-property-builder function updates a CfnTemplate$ConditionalFormattingColorProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ConditionalFormattingColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `gradient` | software.amazon.awscdk.services.quicksight.CfnTemplate$ConditionalFormattingGradientColorProperty | [[cdk.support/lookup-entry]] | `:gradient` |
| `solid` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:solid` |
"
  [^CfnTemplate$ConditionalFormattingColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :gradient)]
    (. builder gradient data))
  (when-let [data (lookup-entry config id :solid)]
    (. builder solid data))
  (.build builder))


(defn cfn-template-conditional-formatting-color-property-builder
  "Creates a  `CfnTemplate$ConditionalFormattingColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-conditional-formatting-color-property-builder (new CfnTemplate$ConditionalFormattingColorProperty$Builder) id config))


(defn build-cfn-template-conditional-formatting-custom-icon-condition-property-builder
  "The build-cfn-template-conditional-formatting-custom-icon-condition-property-builder function updates a CfnTemplate$ConditionalFormattingCustomIconConditionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ConditionalFormattingCustomIconConditionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `displayConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ConditionalFormattingIconDisplayConfigurationProperty | [[cdk.support/lookup-entry]] | `:display-configuration` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `iconOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ConditionalFormattingCustomIconOptionsProperty | [[cdk.support/lookup-entry]] | `:icon-options` |
"
  [^CfnTemplate$ConditionalFormattingCustomIconConditionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :display-configuration)]
    (. builder displayConfiguration data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (when-let [data (lookup-entry config id :icon-options)]
    (. builder iconOptions data))
  (.build builder))


(defn cfn-template-conditional-formatting-custom-icon-condition-property-builder
  "Creates a  `CfnTemplate$ConditionalFormattingCustomIconConditionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-conditional-formatting-custom-icon-condition-property-builder (new CfnTemplate$ConditionalFormattingCustomIconConditionProperty$Builder) id config))


(defn build-cfn-template-conditional-formatting-custom-icon-options-property-builder
  "The build-cfn-template-conditional-formatting-custom-icon-options-property-builder function updates a CfnTemplate$ConditionalFormattingCustomIconOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ConditionalFormattingCustomIconOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon` |
| `unicodeIcon` | java.lang.String | [[cdk.support/lookup-entry]] | `:unicode-icon` |
"
  [^CfnTemplate$ConditionalFormattingCustomIconOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :unicode-icon)]
    (. builder unicodeIcon data))
  (.build builder))


(defn cfn-template-conditional-formatting-custom-icon-options-property-builder
  "Creates a  `CfnTemplate$ConditionalFormattingCustomIconOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-conditional-formatting-custom-icon-options-property-builder (new CfnTemplate$ConditionalFormattingCustomIconOptionsProperty$Builder) id config))


(defn build-cfn-template-conditional-formatting-gradient-color-property-builder
  "The build-cfn-template-conditional-formatting-gradient-color-property-builder function updates a CfnTemplate$ConditionalFormattingGradientColorProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ConditionalFormattingGradientColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
"
  [^CfnTemplate$ConditionalFormattingGradientColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (.build builder))


(defn cfn-template-conditional-formatting-gradient-color-property-builder
  "Creates a  `CfnTemplate$ConditionalFormattingGradientColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-conditional-formatting-gradient-color-property-builder (new CfnTemplate$ConditionalFormattingGradientColorProperty$Builder) id config))


(defn build-cfn-template-conditional-formatting-icon-display-configuration-property-builder
  "The build-cfn-template-conditional-formatting-icon-display-configuration-property-builder function updates a CfnTemplate$ConditionalFormattingIconDisplayConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ConditionalFormattingIconDisplayConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `iconDisplayOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon-display-option` |
"
  [^CfnTemplate$ConditionalFormattingIconDisplayConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon-display-option)]
    (. builder iconDisplayOption data))
  (.build builder))


(defn cfn-template-conditional-formatting-icon-display-configuration-property-builder
  "Creates a  `CfnTemplate$ConditionalFormattingIconDisplayConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-conditional-formatting-icon-display-configuration-property-builder (new CfnTemplate$ConditionalFormattingIconDisplayConfigurationProperty$Builder) id config))


(defn build-cfn-template-conditional-formatting-icon-property-builder
  "The build-cfn-template-conditional-formatting-icon-property-builder function updates a CfnTemplate$ConditionalFormattingIconProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ConditionalFormattingIconProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customCondition` | software.amazon.awscdk.services.quicksight.CfnTemplate$ConditionalFormattingCustomIconConditionProperty | [[cdk.support/lookup-entry]] | `:custom-condition` |
| `iconSet` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon-set` |
"
  [^CfnTemplate$ConditionalFormattingIconProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-condition)]
    (. builder customCondition data))
  (when-let [data (lookup-entry config id :icon-set)]
    (. builder iconSet data))
  (.build builder))


(defn cfn-template-conditional-formatting-icon-property-builder
  "Creates a  `CfnTemplate$ConditionalFormattingIconProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-conditional-formatting-icon-property-builder (new CfnTemplate$ConditionalFormattingIconProperty$Builder) id config))


(defn build-cfn-template-conditional-formatting-icon-set-property-builder
  "The build-cfn-template-conditional-formatting-icon-set-property-builder function updates a CfnTemplate$ConditionalFormattingIconSetProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ConditionalFormattingIconSetProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `iconSetType` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon-set-type` |
"
  [^CfnTemplate$ConditionalFormattingIconSetProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (when-let [data (lookup-entry config id :icon-set-type)]
    (. builder iconSetType data))
  (.build builder))


(defn cfn-template-conditional-formatting-icon-set-property-builder
  "Creates a  `CfnTemplate$ConditionalFormattingIconSetProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-conditional-formatting-icon-set-property-builder (new CfnTemplate$ConditionalFormattingIconSetProperty$Builder) id config))


(defn build-cfn-template-conditional-formatting-solid-color-property-builder
  "The build-cfn-template-conditional-formatting-solid-color-property-builder function updates a CfnTemplate$ConditionalFormattingSolidColorProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ConditionalFormattingSolidColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
"
  [^CfnTemplate$ConditionalFormattingSolidColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (.build builder))


(defn cfn-template-conditional-formatting-solid-color-property-builder
  "Creates a  `CfnTemplate$ConditionalFormattingSolidColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-conditional-formatting-solid-color-property-builder (new CfnTemplate$ConditionalFormattingSolidColorProperty$Builder) id config))


(defn build-cfn-template-contribution-analysis-default-property-builder
  "The build-cfn-template-contribution-analysis-default-property-builder function updates a CfnTemplate$ContributionAnalysisDefaultProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ContributionAnalysisDefaultProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contributorDimensions` | java.util.List | [[cdk.support/lookup-entry]] | `:contributor-dimensions` |
| `measureFieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-field-id` |
"
  [^CfnTemplate$ContributionAnalysisDefaultProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :contributor-dimensions)]
    (. builder contributorDimensions data))
  (when-let [data (lookup-entry config id :measure-field-id)]
    (. builder measureFieldId data))
  (.build builder))


(defn cfn-template-contribution-analysis-default-property-builder
  "Creates a  `CfnTemplate$ContributionAnalysisDefaultProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-contribution-analysis-default-property-builder (new CfnTemplate$ContributionAnalysisDefaultProperty$Builder) id config))


(defn build-cfn-template-currency-display-format-configuration-property-builder
  "The build-cfn-template-currency-display-format-configuration-property-builder function updates a CfnTemplate$CurrencyDisplayFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CurrencyDisplayFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$DecimalPlacesConfigurationProperty | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NegativeValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numberScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:number-scale` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |
| `symbol` | java.lang.String | [[cdk.support/lookup-entry]] | `:symbol` |
"
  [^CfnTemplate$CurrencyDisplayFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :decimal-places-configuration)]
    (. builder decimalPlacesConfiguration data))
  (when-let [data (lookup-entry config id :negative-value-configuration)]
    (. builder negativeValueConfiguration data))
  (when-let [data (lookup-entry config id :null-value-format-configuration)]
    (. builder nullValueFormatConfiguration data))
  (when-let [data (lookup-entry config id :number-scale)]
    (. builder numberScale data))
  (when-let [data (lookup-entry config id :prefix)]
    (. builder prefix data))
  (when-let [data (lookup-entry config id :separator-configuration)]
    (. builder separatorConfiguration data))
  (when-let [data (lookup-entry config id :suffix)]
    (. builder suffix data))
  (when-let [data (lookup-entry config id :symbol)]
    (. builder symbol data))
  (.build builder))


(defn cfn-template-currency-display-format-configuration-property-builder
  "Creates a  `CfnTemplate$CurrencyDisplayFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-currency-display-format-configuration-property-builder (new CfnTemplate$CurrencyDisplayFormatConfigurationProperty$Builder) id config))


(defn build-cfn-template-custom-action-filter-operation-property-builder
  "The build-cfn-template-custom-action-filter-operation-property-builder function updates a CfnTemplate$CustomActionFilterOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CustomActionFilterOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `selectedFieldsConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-fields-configuration` |
| `targetVisualsConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterOperationTargetVisualsConfigurationProperty | [[cdk.support/lookup-entry]] | `:target-visuals-configuration` |
"
  [^CfnTemplate$CustomActionFilterOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :selected-fields-configuration)]
    (. builder selectedFieldsConfiguration data))
  (when-let [data (lookup-entry config id :target-visuals-configuration)]
    (. builder targetVisualsConfiguration data))
  (.build builder))


(defn cfn-template-custom-action-filter-operation-property-builder
  "Creates a  `CfnTemplate$CustomActionFilterOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-custom-action-filter-operation-property-builder (new CfnTemplate$CustomActionFilterOperationProperty$Builder) id config))


(defn build-cfn-template-custom-action-navigation-operation-property-builder
  "The build-cfn-template-custom-action-navigation-operation-property-builder function updates a CfnTemplate$CustomActionNavigationOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CustomActionNavigationOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `localNavigationConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:local-navigation-configuration` |
"
  [^CfnTemplate$CustomActionNavigationOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :local-navigation-configuration)]
    (. builder localNavigationConfiguration data))
  (.build builder))


(defn cfn-template-custom-action-navigation-operation-property-builder
  "Creates a  `CfnTemplate$CustomActionNavigationOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-custom-action-navigation-operation-property-builder (new CfnTemplate$CustomActionNavigationOperationProperty$Builder) id config))


(defn build-cfn-template-custom-action-set-parameters-operation-property-builder
  "The build-cfn-template-custom-action-set-parameters-operation-property-builder function updates a CfnTemplate$CustomActionSetParametersOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CustomActionSetParametersOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameterValueConfigurations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameter-value-configurations` |
"
  [^CfnTemplate$CustomActionSetParametersOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :parameter-value-configurations)]
    (. builder parameterValueConfigurations data))
  (.build builder))


(defn cfn-template-custom-action-set-parameters-operation-property-builder
  "Creates a  `CfnTemplate$CustomActionSetParametersOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-custom-action-set-parameters-operation-property-builder (new CfnTemplate$CustomActionSetParametersOperationProperty$Builder) id config))


(defn build-cfn-template-custom-action-url-operation-property-builder
  "The build-cfn-template-custom-action-url-operation-property-builder function updates a CfnTemplate$CustomActionURLOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CustomActionURLOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `urlTarget` | java.lang.String | [[cdk.support/lookup-entry]] | `:url-target` |
| `urlTemplate` | java.lang.String | [[cdk.support/lookup-entry]] | `:url-template` |
"
  [^CfnTemplate$CustomActionURLOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :url-target)]
    (. builder urlTarget data))
  (when-let [data (lookup-entry config id :url-template)]
    (. builder urlTemplate data))
  (.build builder))


(defn cfn-template-custom-action-url-operation-property-builder
  "Creates a  `CfnTemplate$CustomActionURLOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-custom-action-url-operation-property-builder (new CfnTemplate$CustomActionURLOperationProperty$Builder) id config))


(defn build-cfn-template-custom-color-property-builder
  "The build-cfn-template-custom-color-property-builder function updates a CfnTemplate$CustomColorProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CustomColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `specialValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:special-value` |
"
  [^CfnTemplate$CustomColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :field-value)]
    (. builder fieldValue data))
  (when-let [data (lookup-entry config id :special-value)]
    (. builder specialValue data))
  (.build builder))


(defn cfn-template-custom-color-property-builder
  "Creates a  `CfnTemplate$CustomColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-custom-color-property-builder (new CfnTemplate$CustomColorProperty$Builder) id config))


(defn build-cfn-template-custom-content-configuration-property-builder
  "The build-cfn-template-custom-content-configuration-property-builder function updates a CfnTemplate$CustomContentConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CustomContentConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-type` |
| `contentUrl` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-url` |
| `imageScaling` | java.lang.String | [[cdk.support/lookup-entry]] | `:image-scaling` |
"
  [^CfnTemplate$CustomContentConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :content-type)]
    (. builder contentType data))
  (when-let [data (lookup-entry config id :content-url)]
    (. builder contentUrl data))
  (when-let [data (lookup-entry config id :image-scaling)]
    (. builder imageScaling data))
  (.build builder))


(defn cfn-template-custom-content-configuration-property-builder
  "Creates a  `CfnTemplate$CustomContentConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-custom-content-configuration-property-builder (new CfnTemplate$CustomContentConfigurationProperty$Builder) id config))


(defn build-cfn-template-custom-content-visual-property-builder
  "The build-cfn-template-custom-content-visual-property-builder function updates a CfnTemplate$CustomContentVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CustomContentVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$CustomContentConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$CustomContentVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-custom-content-visual-property-builder
  "Creates a  `CfnTemplate$CustomContentVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-custom-content-visual-property-builder (new CfnTemplate$CustomContentVisualProperty$Builder) id config))


(defn build-cfn-template-custom-filter-configuration-property-builder
  "The build-cfn-template-custom-filter-configuration-property-builder function updates a CfnTemplate$CustomFilterConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CustomFilterConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-value` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
"
  [^CfnTemplate$CustomFilterConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-value)]
    (. builder categoryValue data))
  (when-let [data (lookup-entry config id :match-operator)]
    (. builder matchOperator data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (.build builder))


(defn cfn-template-custom-filter-configuration-property-builder
  "Creates a  `CfnTemplate$CustomFilterConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-custom-filter-configuration-property-builder (new CfnTemplate$CustomFilterConfigurationProperty$Builder) id config))


(defn build-cfn-template-custom-filter-list-configuration-property-builder
  "The build-cfn-template-custom-filter-list-configuration-property-builder function updates a CfnTemplate$CustomFilterListConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CustomFilterListConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
"
  [^CfnTemplate$CustomFilterListConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-values)]
    (. builder categoryValues data))
  (when-let [data (lookup-entry config id :match-operator)]
    (. builder matchOperator data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (.build builder))


(defn cfn-template-custom-filter-list-configuration-property-builder
  "Creates a  `CfnTemplate$CustomFilterListConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-custom-filter-list-configuration-property-builder (new CfnTemplate$CustomFilterListConfigurationProperty$Builder) id config))


(defn build-cfn-template-custom-narrative-options-property-builder
  "The build-cfn-template-custom-narrative-options-property-builder function updates a CfnTemplate$CustomNarrativeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CustomNarrativeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `narrative` | java.lang.String | [[cdk.support/lookup-entry]] | `:narrative` |
"
  [^CfnTemplate$CustomNarrativeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :narrative)]
    (. builder narrative data))
  (.build builder))


(defn cfn-template-custom-narrative-options-property-builder
  "Creates a  `CfnTemplate$CustomNarrativeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-custom-narrative-options-property-builder (new CfnTemplate$CustomNarrativeOptionsProperty$Builder) id config))


(defn build-cfn-template-custom-parameter-values-property-builder
  "The build-cfn-template-custom-parameter-values-property-builder function updates a CfnTemplate$CustomParameterValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CustomParameterValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeValues` | java.util.List | [[cdk.support/lookup-entry]] | `:date-time-values` |
| `decimalValues` | java.util.List | [[cdk.support/lookup-entry]] | `:decimal-values` |
| `integerValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:integer-values` |
| `stringValues` | java.util.List | [[cdk.support/lookup-entry]] | `:string-values` |
"
  [^CfnTemplate$CustomParameterValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-values)]
    (. builder dateTimeValues data))
  (when-let [data (lookup-entry config id :decimal-values)]
    (. builder decimalValues data))
  (when-let [data (lookup-entry config id :integer-values)]
    (. builder integerValues data))
  (when-let [data (lookup-entry config id :string-values)]
    (. builder stringValues data))
  (.build builder))


(defn cfn-template-custom-parameter-values-property-builder
  "Creates a  `CfnTemplate$CustomParameterValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-custom-parameter-values-property-builder (new CfnTemplate$CustomParameterValuesProperty$Builder) id config))


(defn build-cfn-template-custom-values-configuration-property-builder
  "The build-cfn-template-custom-values-configuration-property-builder function updates a CfnTemplate$CustomValuesConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$CustomValuesConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-values` |
| `includeNullValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-null-value` |
"
  [^CfnTemplate$CustomValuesConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-values)]
    (. builder customValues data))
  (when-let [data (lookup-entry config id :include-null-value)]
    (. builder includeNullValue data))
  (.build builder))


(defn cfn-template-custom-values-configuration-property-builder
  "Creates a  `CfnTemplate$CustomValuesConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-custom-values-configuration-property-builder (new CfnTemplate$CustomValuesConfigurationProperty$Builder) id config))


(defn build-cfn-template-data-bars-options-property-builder
  "The build-cfn-template-data-bars-options-property-builder function updates a CfnTemplate$DataBarsOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DataBarsOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `negativeColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:negative-color` |
| `positiveColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:positive-color` |
"
  [^CfnTemplate$DataBarsOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :negative-color)]
    (. builder negativeColor data))
  (when-let [data (lookup-entry config id :positive-color)]
    (. builder positiveColor data))
  (.build builder))


(defn cfn-template-data-bars-options-property-builder
  "Creates a  `CfnTemplate$DataBarsOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-data-bars-options-property-builder (new CfnTemplate$DataBarsOptionsProperty$Builder) id config))


(defn build-cfn-template-data-color-property-builder
  "The build-cfn-template-data-color-property-builder function updates a CfnTemplate$DataColorProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DataColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `dataValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:data-value` |
"
  [^CfnTemplate$DataColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :data-value)]
    (. builder dataValue data))
  (.build builder))


(defn cfn-template-data-color-property-builder
  "Creates a  `CfnTemplate$DataColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-data-color-property-builder (new CfnTemplate$DataColorProperty$Builder) id config))


(defn build-cfn-template-data-field-series-item-property-builder
  "The build-cfn-template-data-field-series-item-property-builder function updates a CfnTemplate$DataFieldSeriesItemProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DataFieldSeriesItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `settings` | software.amazon.awscdk.services.quicksight.CfnTemplate$LineChartSeriesSettingsProperty | [[cdk.support/lookup-entry]] | `:settings` |
"
  [^CfnTemplate$DataFieldSeriesItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-binding)]
    (. builder axisBinding data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :field-value)]
    (. builder fieldValue data))
  (when-let [data (lookup-entry config id :settings)]
    (. builder settings data))
  (.build builder))


(defn cfn-template-data-field-series-item-property-builder
  "Creates a  `CfnTemplate$DataFieldSeriesItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-data-field-series-item-property-builder (new CfnTemplate$DataFieldSeriesItemProperty$Builder) id config))


(defn build-cfn-template-data-label-options-property-builder
  "The build-cfn-template-data-label-options-property-builder function updates a CfnTemplate$DataLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DataLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-label-visibility` |
| `dataLabelTypes` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-label-types` |
| `labelColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-color` |
| `labelContent` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-content` |
| `labelFontConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:label-font-configuration` |
| `measureLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-label-visibility` |
| `overlap` | java.lang.String | [[cdk.support/lookup-entry]] | `:overlap` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$DataLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-label-visibility)]
    (. builder categoryLabelVisibility data))
  (when-let [data (lookup-entry config id :data-label-types)]
    (. builder dataLabelTypes data))
  (when-let [data (lookup-entry config id :label-color)]
    (. builder labelColor data))
  (when-let [data (lookup-entry config id :label-content)]
    (. builder labelContent data))
  (when-let [data (lookup-entry config id :label-font-configuration)]
    (. builder labelFontConfiguration data))
  (when-let [data (lookup-entry config id :measure-label-visibility)]
    (. builder measureLabelVisibility data))
  (when-let [data (lookup-entry config id :overlap)]
    (. builder overlap data))
  (when-let [data (lookup-entry config id :position)]
    (. builder position data))
  (when-let [data (lookup-entry config id :totals-visibility)]
    (. builder totalsVisibility data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-data-label-options-property-builder
  "Creates a  `CfnTemplate$DataLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-data-label-options-property-builder (new CfnTemplate$DataLabelOptionsProperty$Builder) id config))


(defn build-cfn-template-data-label-type-property-builder
  "The build-cfn-template-data-label-type-property-builder function updates a CfnTemplate$DataLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DataLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathLabelType` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataPathLabelTypeProperty | [[cdk.support/lookup-entry]] | `:data-path-label-type` |
| `fieldLabelType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-label-type` |
| `maximumLabelType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:maximum-label-type` |
| `minimumLabelType` | software.amazon.awscdk.services.quicksight.CfnTemplate$MinimumLabelTypeProperty | [[cdk.support/lookup-entry]] | `:minimum-label-type` |
| `rangeEndsLabelType` | software.amazon.awscdk.services.quicksight.CfnTemplate$RangeEndsLabelTypeProperty | [[cdk.support/lookup-entry]] | `:range-ends-label-type` |
"
  [^CfnTemplate$DataLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-path-label-type)]
    (. builder dataPathLabelType data))
  (when-let [data (lookup-entry config id :field-label-type)]
    (. builder fieldLabelType data))
  (when-let [data (lookup-entry config id :maximum-label-type)]
    (. builder maximumLabelType data))
  (when-let [data (lookup-entry config id :minimum-label-type)]
    (. builder minimumLabelType data))
  (when-let [data (lookup-entry config id :range-ends-label-type)]
    (. builder rangeEndsLabelType data))
  (.build builder))


(defn cfn-template-data-label-type-property-builder
  "Creates a  `CfnTemplate$DataLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-data-label-type-property-builder (new CfnTemplate$DataLabelTypeProperty$Builder) id config))


(defn build-cfn-template-data-path-color-property-builder
  "The build-cfn-template-data-path-color-property-builder function updates a CfnTemplate$DataPathColorProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DataPathColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `element` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:element` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnTemplate$DataPathColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :element)]
    (. builder element data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-template-data-path-color-property-builder
  "Creates a  `CfnTemplate$DataPathColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-data-path-color-property-builder (new CfnTemplate$DataPathColorProperty$Builder) id config))


(defn build-cfn-template-data-path-label-type-property-builder
  "The build-cfn-template-data-path-label-type-property-builder function updates a CfnTemplate$DataPathLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DataPathLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$DataPathLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :field-value)]
    (. builder fieldValue data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-data-path-label-type-property-builder
  "Creates a  `CfnTemplate$DataPathLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-data-path-label-type-property-builder (new CfnTemplate$DataPathLabelTypeProperty$Builder) id config))


(defn build-cfn-template-data-path-sort-property-builder
  "The build-cfn-template-data-path-sort-property-builder function updates a CfnTemplate$DataPathSortProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DataPathSortProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `sortPaths` | java.util.List | [[cdk.support/lookup-entry]] | `:sort-paths` |
"
  [^CfnTemplate$DataPathSortProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :direction)]
    (. builder direction data))
  (when-let [data (lookup-entry config id :sort-paths)]
    (. builder sortPaths data))
  (.build builder))


(defn cfn-template-data-path-sort-property-builder
  "Creates a  `CfnTemplate$DataPathSortProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-data-path-sort-property-builder (new CfnTemplate$DataPathSortProperty$Builder) id config))


(defn build-cfn-template-data-path-type-property-builder
  "The build-cfn-template-data-path-type-property-builder function updates a CfnTemplate$DataPathTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DataPathTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pivotTableDataPathType` | java.lang.String | [[cdk.support/lookup-entry]] | `:pivot-table-data-path-type` |
"
  [^CfnTemplate$DataPathTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :pivot-table-data-path-type)]
    (. builder pivotTableDataPathType data))
  (.build builder))


(defn cfn-template-data-path-type-property-builder
  "Creates a  `CfnTemplate$DataPathTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-data-path-type-property-builder (new CfnTemplate$DataPathTypeProperty$Builder) id config))


(defn build-cfn-template-data-path-value-property-builder
  "The build-cfn-template-data-path-value-property-builder function updates a CfnTemplate$DataPathValueProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DataPathValueProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-path-type` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
"
  [^CfnTemplate$DataPathValueProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-path-type)]
    (. builder dataPathType data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :field-value)]
    (. builder fieldValue data))
  (.build builder))


(defn cfn-template-data-path-value-property-builder
  "Creates a  `CfnTemplate$DataPathValueProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-data-path-value-property-builder (new CfnTemplate$DataPathValueProperty$Builder) id config))


(defn build-cfn-template-data-set-configuration-property-builder
  "The build-cfn-template-data-set-configuration-property-builder function updates a CfnTemplate$DataSetConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DataSetConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnGroupSchemaList` | java.util.List | [[cdk.support/lookup-entry]] | `:column-group-schema-list` |
| `dataSetSchema` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataSetSchemaProperty | [[cdk.support/lookup-entry]] | `:data-set-schema` |
| `placeholder` | java.lang.String | [[cdk.support/lookup-entry]] | `:placeholder` |
"
  [^CfnTemplate$DataSetConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-group-schema-list)]
    (. builder columnGroupSchemaList data))
  (when-let [data (lookup-entry config id :data-set-schema)]
    (. builder dataSetSchema data))
  (when-let [data (lookup-entry config id :placeholder)]
    (. builder placeholder data))
  (.build builder))


(defn cfn-template-data-set-configuration-property-builder
  "Creates a  `CfnTemplate$DataSetConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-data-set-configuration-property-builder (new CfnTemplate$DataSetConfigurationProperty$Builder) id config))


(defn build-cfn-template-data-set-reference-property-builder
  "The build-cfn-template-data-set-reference-property-builder function updates a CfnTemplate$DataSetReferenceProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DataSetReferenceProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-arn` |
| `dataSetPlaceholder` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-placeholder` |
"
  [^CfnTemplate$DataSetReferenceProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-set-arn)]
    (. builder dataSetArn data))
  (when-let [data (lookup-entry config id :data-set-placeholder)]
    (. builder dataSetPlaceholder data))
  (.build builder))


(defn cfn-template-data-set-reference-property-builder
  "Creates a  `CfnTemplate$DataSetReferenceProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-data-set-reference-property-builder (new CfnTemplate$DataSetReferenceProperty$Builder) id config))


(defn build-cfn-template-data-set-schema-property-builder
  "The build-cfn-template-data-set-schema-property-builder function updates a CfnTemplate$DataSetSchemaProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DataSetSchemaProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnSchemaList` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-schema-list` |
"
  [^CfnTemplate$DataSetSchemaProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-schema-list)]
    (. builder columnSchemaList data))
  (.build builder))


(defn cfn-template-data-set-schema-property-builder
  "Creates a  `CfnTemplate$DataSetSchemaProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-data-set-schema-property-builder (new CfnTemplate$DataSetSchemaProperty$Builder) id config))


(defn build-cfn-template-date-axis-options-property-builder
  "The build-cfn-template-date-axis-options-property-builder function updates a CfnTemplate$DateAxisOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DateAxisOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `missingDateVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:missing-date-visibility` |
"
  [^CfnTemplate$DateAxisOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :missing-date-visibility)]
    (. builder missingDateVisibility data))
  (.build builder))


(defn cfn-template-date-axis-options-property-builder
  "Creates a  `CfnTemplate$DateAxisOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-date-axis-options-property-builder (new CfnTemplate$DateAxisOptionsProperty$Builder) id config))


(defn build-cfn-template-date-dimension-field-property-builder
  "The build-cfn-template-date-dimension-field-property-builder function updates a CfnTemplate$DateDimensionFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DateDimensionFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `dateGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-granularity` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnTemplate$DateDimensionFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :date-granularity)]
    (. builder dateGranularity data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-template-date-dimension-field-property-builder
  "Creates a  `CfnTemplate$DateDimensionFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-date-dimension-field-property-builder (new CfnTemplate$DateDimensionFieldProperty$Builder) id config))


(defn build-cfn-template-date-measure-field-property-builder
  "The build-cfn-template-date-measure-field-property-builder function updates a CfnTemplate$DateMeasureFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DateMeasureFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$DateTimeFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
"
  [^CfnTemplate$DateMeasureFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (.build builder))


(defn cfn-template-date-measure-field-property-builder
  "Creates a  `CfnTemplate$DateMeasureFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-date-measure-field-property-builder (new CfnTemplate$DateMeasureFieldProperty$Builder) id config))


(defn build-cfn-template-date-time-default-values-property-builder
  "The build-cfn-template-date-time-default-values-property-builder function updates a CfnTemplate$DateTimeDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DateTimeDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `rollingDate` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |
"
  [^CfnTemplate$DateTimeDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :dynamic-value)]
    (. builder dynamicValue data))
  (when-let [data (lookup-entry config id :rolling-date)]
    (. builder rollingDate data))
  (when-let [data (lookup-entry config id :static-values)]
    (. builder staticValues data))
  (.build builder))


(defn cfn-template-date-time-default-values-property-builder
  "Creates a  `CfnTemplate$DateTimeDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-date-time-default-values-property-builder (new CfnTemplate$DateTimeDefaultValuesProperty$Builder) id config))


(defn build-cfn-template-date-time-format-configuration-property-builder
  "The build-cfn-template-date-time-format-configuration-property-builder function updates a CfnTemplate$DateTimeFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DateTimeFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numericFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:numeric-format-configuration` |
"
  [^CfnTemplate$DateTimeFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-format)]
    (. builder dateTimeFormat data))
  (when-let [data (lookup-entry config id :null-value-format-configuration)]
    (. builder nullValueFormatConfiguration data))
  (when-let [data (lookup-entry config id :numeric-format-configuration)]
    (. builder numericFormatConfiguration data))
  (.build builder))


(defn cfn-template-date-time-format-configuration-property-builder
  "Creates a  `CfnTemplate$DateTimeFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-date-time-format-configuration-property-builder (new CfnTemplate$DateTimeFormatConfigurationProperty$Builder) id config))


(defn build-cfn-template-date-time-hierarchy-property-builder
  "The build-cfn-template-date-time-hierarchy-property-builder function updates a CfnTemplate$DateTimeHierarchyProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DateTimeHierarchyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `drillDownFilters` | java.util.List | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnTemplate$DateTimeHierarchyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :drill-down-filters)]
    (. builder drillDownFilters data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-template-date-time-hierarchy-property-builder
  "Creates a  `CfnTemplate$DateTimeHierarchyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-date-time-hierarchy-property-builder (new CfnTemplate$DateTimeHierarchyProperty$Builder) id config))


(defn build-cfn-template-date-time-parameter-declaration-property-builder
  "The build-cfn-template-date-time-parameter-declaration-property-builder function updates a CfnTemplate$DateTimeParameterDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DateTimeParameterDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.services.quicksight.CfnTemplate$DateTimeDefaultValuesProperty | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
| `valueWhenUnset` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-when-unset` |
"
  [^CfnTemplate$DateTimeParameterDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-values)]
    (. builder defaultValues data))
  (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
    (. builder mappedDataSetParameters data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (when-let [data (lookup-entry config id :value-when-unset)]
    (. builder valueWhenUnset data))
  (.build builder))


(defn cfn-template-date-time-parameter-declaration-property-builder
  "Creates a  `CfnTemplate$DateTimeParameterDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-date-time-parameter-declaration-property-builder (new CfnTemplate$DateTimeParameterDeclarationProperty$Builder) id config))


(defn build-cfn-template-date-time-picker-control-display-options-property-builder
  "The build-cfn-template-date-time-picker-control-display-options-property-builder function updates a CfnTemplate$DateTimePickerControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DateTimePickerControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnTemplate$DateTimePickerControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-format)]
    (. builder dateTimeFormat data))
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-template-date-time-picker-control-display-options-property-builder
  "Creates a  `CfnTemplate$DateTimePickerControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-date-time-picker-control-display-options-property-builder (new CfnTemplate$DateTimePickerControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-template-date-time-value-when-unset-configuration-property-builder
  "The build-cfn-template-date-time-value-when-unset-configuration-property-builder function updates a CfnTemplate$DateTimeValueWhenUnsetConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DateTimeValueWhenUnsetConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |
"
  [^CfnTemplate$DateTimeValueWhenUnsetConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-value)]
    (. builder customValue data))
  (when-let [data (lookup-entry config id :value-when-unset-option)]
    (. builder valueWhenUnsetOption data))
  (.build builder))


(defn cfn-template-date-time-value-when-unset-configuration-property-builder
  "Creates a  `CfnTemplate$DateTimeValueWhenUnsetConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-date-time-value-when-unset-configuration-property-builder (new CfnTemplate$DateTimeValueWhenUnsetConfigurationProperty$Builder) id config))


(defn build-cfn-template-decimal-default-values-property-builder
  "The build-cfn-template-decimal-default-values-property-builder function updates a CfnTemplate$DecimalDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DecimalDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:static-values` |
"
  [^CfnTemplate$DecimalDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :dynamic-value)]
    (. builder dynamicValue data))
  (when-let [data (lookup-entry config id :static-values)]
    (. builder staticValues data))
  (.build builder))


(defn cfn-template-decimal-default-values-property-builder
  "Creates a  `CfnTemplate$DecimalDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-decimal-default-values-property-builder (new CfnTemplate$DecimalDefaultValuesProperty$Builder) id config))


(defn build-cfn-template-decimal-parameter-declaration-property-builder
  "The build-cfn-template-decimal-parameter-declaration-property-builder function updates a CfnTemplate$DecimalParameterDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DecimalParameterDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-when-unset` |
"
  [^CfnTemplate$DecimalParameterDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-values)]
    (. builder defaultValues data))
  (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
    (. builder mappedDataSetParameters data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :parameter-value-type)]
    (. builder parameterValueType data))
  (when-let [data (lookup-entry config id :value-when-unset)]
    (. builder valueWhenUnset data))
  (.build builder))


(defn cfn-template-decimal-parameter-declaration-property-builder
  "Creates a  `CfnTemplate$DecimalParameterDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-decimal-parameter-declaration-property-builder (new CfnTemplate$DecimalParameterDeclarationProperty$Builder) id config))


(defn build-cfn-template-decimal-places-configuration-property-builder
  "The build-cfn-template-decimal-places-configuration-property-builder function updates a CfnTemplate$DecimalPlacesConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DecimalPlacesConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlaces` | java.lang.Number | [[cdk.support/lookup-entry]] | `:decimal-places` |
"
  [^CfnTemplate$DecimalPlacesConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :decimal-places)]
    (. builder decimalPlaces data))
  (.build builder))


(defn cfn-template-decimal-places-configuration-property-builder
  "Creates a  `CfnTemplate$DecimalPlacesConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-decimal-places-configuration-property-builder (new CfnTemplate$DecimalPlacesConfigurationProperty$Builder) id config))


(defn build-cfn-template-decimal-value-when-unset-configuration-property-builder
  "The build-cfn-template-decimal-value-when-unset-configuration-property-builder function updates a CfnTemplate$DecimalValueWhenUnsetConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DecimalValueWhenUnsetConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |
"
  [^CfnTemplate$DecimalValueWhenUnsetConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-value)]
    (. builder customValue data))
  (when-let [data (lookup-entry config id :value-when-unset-option)]
    (. builder valueWhenUnsetOption data))
  (.build builder))


(defn cfn-template-decimal-value-when-unset-configuration-property-builder
  "Creates a  `CfnTemplate$DecimalValueWhenUnsetConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-decimal-value-when-unset-configuration-property-builder (new CfnTemplate$DecimalValueWhenUnsetConfigurationProperty$Builder) id config))


(defn build-cfn-template-default-date-time-picker-control-options-property-builder
  "The build-cfn-template-default-date-time-picker-control-options-property-builder function updates a CfnTemplate$DefaultDateTimePickerControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DefaultDateTimePickerControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnTemplate$DefaultDateTimePickerControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-template-default-date-time-picker-control-options-property-builder
  "Creates a  `CfnTemplate$DefaultDateTimePickerControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-default-date-time-picker-control-options-property-builder (new CfnTemplate$DefaultDateTimePickerControlOptionsProperty$Builder) id config))


(defn build-cfn-template-default-filter-control-configuration-property-builder
  "The build-cfn-template-default-filter-control-configuration-property-builder function updates a CfnTemplate$DefaultFilterControlConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DefaultFilterControlConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `controlOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$DefaultFilterControlOptionsProperty | [[cdk.support/lookup-entry]] | `:control-options` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnTemplate$DefaultFilterControlConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :control-options)]
    (. builder controlOptions data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-template-default-filter-control-configuration-property-builder
  "Creates a  `CfnTemplate$DefaultFilterControlConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-default-filter-control-configuration-property-builder (new CfnTemplate$DefaultFilterControlConfigurationProperty$Builder) id config))


(defn build-cfn-template-default-filter-control-options-property-builder
  "The build-cfn-template-default-filter-control-options-property-builder function updates a CfnTemplate$DefaultFilterControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DefaultFilterControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultDateTimePickerOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-date-time-picker-options` |
| `defaultDropdownOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$DefaultFilterDropDownControlOptionsProperty | [[cdk.support/lookup-entry]] | `:default-dropdown-options` |
| `defaultListOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-list-options` |
| `defaultRelativeDateTimeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-relative-date-time-options` |
| `defaultSliderOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-slider-options` |
| `defaultTextAreaOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$DefaultTextAreaControlOptionsProperty | [[cdk.support/lookup-entry]] | `:default-text-area-options` |
| `defaultTextFieldOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$DefaultTextFieldControlOptionsProperty | [[cdk.support/lookup-entry]] | `:default-text-field-options` |
"
  [^CfnTemplate$DefaultFilterControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-date-time-picker-options)]
    (. builder defaultDateTimePickerOptions data))
  (when-let [data (lookup-entry config id :default-dropdown-options)]
    (. builder defaultDropdownOptions data))
  (when-let [data (lookup-entry config id :default-list-options)]
    (. builder defaultListOptions data))
  (when-let [data (lookup-entry config id :default-relative-date-time-options)]
    (. builder defaultRelativeDateTimeOptions data))
  (when-let [data (lookup-entry config id :default-slider-options)]
    (. builder defaultSliderOptions data))
  (when-let [data (lookup-entry config id :default-text-area-options)]
    (. builder defaultTextAreaOptions data))
  (when-let [data (lookup-entry config id :default-text-field-options)]
    (. builder defaultTextFieldOptions data))
  (.build builder))


(defn cfn-template-default-filter-control-options-property-builder
  "Creates a  `CfnTemplate$DefaultFilterControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-default-filter-control-options-property-builder (new CfnTemplate$DefaultFilterControlOptionsProperty$Builder) id config))


(defn build-cfn-template-default-filter-drop-down-control-options-property-builder
  "The build-cfn-template-default-filter-drop-down-control-options-property-builder function updates a CfnTemplate$DefaultFilterDropDownControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DefaultFilterDropDownControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `selectableValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnTemplate$DefaultFilterDropDownControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-template-default-filter-drop-down-control-options-property-builder
  "Creates a  `CfnTemplate$DefaultFilterDropDownControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-default-filter-drop-down-control-options-property-builder (new CfnTemplate$DefaultFilterDropDownControlOptionsProperty$Builder) id config))


(defn build-cfn-template-default-filter-list-control-options-property-builder
  "The build-cfn-template-default-filter-list-control-options-property-builder function updates a CfnTemplate$DefaultFilterListControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DefaultFilterListControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnTemplate$DefaultFilterListControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-template-default-filter-list-control-options-property-builder
  "Creates a  `CfnTemplate$DefaultFilterListControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-default-filter-list-control-options-property-builder (new CfnTemplate$DefaultFilterListControlOptionsProperty$Builder) id config))


(defn build-cfn-template-default-free-form-layout-configuration-property-builder
  "The build-cfn-template-default-free-form-layout-configuration-property-builder function updates a CfnTemplate$DefaultFreeFormLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DefaultFreeFormLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$FreeFormLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
"
  [^CfnTemplate$DefaultFreeFormLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (.build builder))


(defn cfn-template-default-free-form-layout-configuration-property-builder
  "Creates a  `CfnTemplate$DefaultFreeFormLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-default-free-form-layout-configuration-property-builder (new CfnTemplate$DefaultFreeFormLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-template-default-grid-layout-configuration-property-builder
  "The build-cfn-template-default-grid-layout-configuration-property-builder function updates a CfnTemplate$DefaultGridLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DefaultGridLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$GridLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
"
  [^CfnTemplate$DefaultGridLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (.build builder))


(defn cfn-template-default-grid-layout-configuration-property-builder
  "Creates a  `CfnTemplate$DefaultGridLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-default-grid-layout-configuration-property-builder (new CfnTemplate$DefaultGridLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-template-default-interactive-layout-configuration-property-builder
  "The build-cfn-template-default-interactive-layout-configuration-property-builder function updates a CfnTemplate$DefaultInteractiveLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DefaultInteractiveLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeForm` | software.amazon.awscdk.services.quicksight.CfnTemplate$DefaultFreeFormLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:free-form` |
| `grid` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:grid` |
"
  [^CfnTemplate$DefaultInteractiveLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :free-form)]
    (. builder freeForm data))
  (when-let [data (lookup-entry config id :grid)]
    (. builder grid data))
  (.build builder))


(defn cfn-template-default-interactive-layout-configuration-property-builder
  "Creates a  `CfnTemplate$DefaultInteractiveLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-default-interactive-layout-configuration-property-builder (new CfnTemplate$DefaultInteractiveLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-template-default-new-sheet-configuration-property-builder
  "The build-cfn-template-default-new-sheet-configuration-property-builder function updates a CfnTemplate$DefaultNewSheetConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DefaultNewSheetConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `interactiveLayoutConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:interactive-layout-configuration` |
| `paginatedLayoutConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:paginated-layout-configuration` |
| `sheetContentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-content-type` |
"
  [^CfnTemplate$DefaultNewSheetConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :interactive-layout-configuration)]
    (. builder interactiveLayoutConfiguration data))
  (when-let [data (lookup-entry config id :paginated-layout-configuration)]
    (. builder paginatedLayoutConfiguration data))
  (when-let [data (lookup-entry config id :sheet-content-type)]
    (. builder sheetContentType data))
  (.build builder))


(defn cfn-template-default-new-sheet-configuration-property-builder
  "Creates a  `CfnTemplate$DefaultNewSheetConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-default-new-sheet-configuration-property-builder (new CfnTemplate$DefaultNewSheetConfigurationProperty$Builder) id config))


(defn build-cfn-template-default-paginated-layout-configuration-property-builder
  "The build-cfn-template-default-paginated-layout-configuration-property-builder function updates a CfnTemplate$DefaultPaginatedLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DefaultPaginatedLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sectionBased` | software.amazon.awscdk.services.quicksight.CfnTemplate$DefaultSectionBasedLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:section-based` |
"
  [^CfnTemplate$DefaultPaginatedLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :section-based)]
    (. builder sectionBased data))
  (.build builder))


(defn cfn-template-default-paginated-layout-configuration-property-builder
  "Creates a  `CfnTemplate$DefaultPaginatedLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-default-paginated-layout-configuration-property-builder (new CfnTemplate$DefaultPaginatedLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-template-default-relative-date-time-control-options-property-builder
  "The build-cfn-template-default-relative-date-time-control-options-property-builder function updates a CfnTemplate$DefaultRelativeDateTimeControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DefaultRelativeDateTimeControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$RelativeDateTimeControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
"
  [^CfnTemplate$DefaultRelativeDateTimeControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (.build builder))


(defn cfn-template-default-relative-date-time-control-options-property-builder
  "Creates a  `CfnTemplate$DefaultRelativeDateTimeControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-default-relative-date-time-control-options-property-builder (new CfnTemplate$DefaultRelativeDateTimeControlOptionsProperty$Builder) id config))


(defn build-cfn-template-default-section-based-layout-configuration-property-builder
  "The build-cfn-template-default-section-based-layout-configuration-property-builder function updates a CfnTemplate$DefaultSectionBasedLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DefaultSectionBasedLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
"
  [^CfnTemplate$DefaultSectionBasedLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (.build builder))


(defn cfn-template-default-section-based-layout-configuration-property-builder
  "Creates a  `CfnTemplate$DefaultSectionBasedLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-default-section-based-layout-configuration-property-builder (new CfnTemplate$DefaultSectionBasedLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-template-default-slider-control-options-property-builder
  "The build-cfn-template-default-slider-control-options-property-builder function updates a CfnTemplate$DefaultSliderControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DefaultSliderControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnTemplate$DefaultSliderControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :maximum-value)]
    (. builder maximumValue data))
  (when-let [data (lookup-entry config id :minimum-value)]
    (. builder minimumValue data))
  (when-let [data (lookup-entry config id :step-size)]
    (. builder stepSize data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-template-default-slider-control-options-property-builder
  "Creates a  `CfnTemplate$DefaultSliderControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-default-slider-control-options-property-builder (new CfnTemplate$DefaultSliderControlOptionsProperty$Builder) id config))


(defn build-cfn-template-default-text-area-control-options-property-builder
  "The build-cfn-template-default-text-area-control-options-property-builder function updates a CfnTemplate$DefaultTextAreaControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DefaultTextAreaControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
"
  [^CfnTemplate$DefaultTextAreaControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :delimiter)]
    (. builder delimiter data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (.build builder))


(defn cfn-template-default-text-area-control-options-property-builder
  "Creates a  `CfnTemplate$DefaultTextAreaControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-default-text-area-control-options-property-builder (new CfnTemplate$DefaultTextAreaControlOptionsProperty$Builder) id config))


(defn build-cfn-template-default-text-field-control-options-property-builder
  "The build-cfn-template-default-text-field-control-options-property-builder function updates a CfnTemplate$DefaultTextFieldControlOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DefaultTextFieldControlOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
"
  [^CfnTemplate$DefaultTextFieldControlOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (.build builder))


(defn cfn-template-default-text-field-control-options-property-builder
  "Creates a  `CfnTemplate$DefaultTextFieldControlOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-default-text-field-control-options-property-builder (new CfnTemplate$DefaultTextFieldControlOptionsProperty$Builder) id config))


(defn build-cfn-template-destination-parameter-value-configuration-property-builder
  "The build-cfn-template-destination-parameter-value-configuration-property-builder function updates a CfnTemplate$DestinationParameterValueConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DestinationParameterValueConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValuesConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-values-configuration` |
| `selectAllValueOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-value-options` |
| `sourceColumn` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:source-column` |
| `sourceField` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-field` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
"
  [^CfnTemplate$DestinationParameterValueConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-values-configuration)]
    (. builder customValuesConfiguration data))
  (when-let [data (lookup-entry config id :select-all-value-options)]
    (. builder selectAllValueOptions data))
  (when-let [data (lookup-entry config id :source-column)]
    (. builder sourceColumn data))
  (when-let [data (lookup-entry config id :source-field)]
    (. builder sourceField data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (.build builder))


(defn cfn-template-destination-parameter-value-configuration-property-builder
  "Creates a  `CfnTemplate$DestinationParameterValueConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-destination-parameter-value-configuration-property-builder (new CfnTemplate$DestinationParameterValueConfigurationProperty$Builder) id config))


(defn build-cfn-template-dimension-field-property-builder
  "The build-cfn-template-dimension-field-property-builder function updates a CfnTemplate$DimensionFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DimensionFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoricalDimensionField` | software.amazon.awscdk.services.quicksight.CfnTemplate$CategoricalDimensionFieldProperty | [[cdk.support/lookup-entry]] | `:categorical-dimension-field` |
| `dateDimensionField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-dimension-field` |
| `numericalDimensionField` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericalDimensionFieldProperty | [[cdk.support/lookup-entry]] | `:numerical-dimension-field` |
"
  [^CfnTemplate$DimensionFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :categorical-dimension-field)]
    (. builder categoricalDimensionField data))
  (when-let [data (lookup-entry config id :date-dimension-field)]
    (. builder dateDimensionField data))
  (when-let [data (lookup-entry config id :numerical-dimension-field)]
    (. builder numericalDimensionField data))
  (.build builder))


(defn cfn-template-dimension-field-property-builder
  "Creates a  `CfnTemplate$DimensionFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-dimension-field-property-builder (new CfnTemplate$DimensionFieldProperty$Builder) id config))


(defn build-cfn-template-donut-center-options-property-builder
  "The build-cfn-template-donut-center-options-property-builder function updates a CfnTemplate$DonutCenterOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DonutCenterOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `labelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-visibility` |
"
  [^CfnTemplate$DonutCenterOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :label-visibility)]
    (. builder labelVisibility data))
  (.build builder))


(defn cfn-template-donut-center-options-property-builder
  "Creates a  `CfnTemplate$DonutCenterOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-donut-center-options-property-builder (new CfnTemplate$DonutCenterOptionsProperty$Builder) id config))


(defn build-cfn-template-donut-options-property-builder
  "The build-cfn-template-donut-options-property-builder function updates a CfnTemplate$DonutOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DonutOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ArcOptionsProperty | [[cdk.support/lookup-entry]] | `:arc-options` |
| `donutCenterOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:donut-center-options` |
"
  [^CfnTemplate$DonutOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arc-options)]
    (. builder arcOptions data))
  (when-let [data (lookup-entry config id :donut-center-options)]
    (. builder donutCenterOptions data))
  (.build builder))


(defn cfn-template-donut-options-property-builder
  "Creates a  `CfnTemplate$DonutOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-donut-options-property-builder (new CfnTemplate$DonutOptionsProperty$Builder) id config))


(defn build-cfn-template-drill-down-filter-property-builder
  "The build-cfn-template-drill-down-filter-property-builder function updates a CfnTemplate$DrillDownFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DrillDownFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-filter` |
| `numericEqualityFilter` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericEqualityDrillDownFilterProperty | [[cdk.support/lookup-entry]] | `:numeric-equality-filter` |
| `timeRangeFilter` | software.amazon.awscdk.services.quicksight.CfnTemplate$TimeRangeDrillDownFilterProperty | [[cdk.support/lookup-entry]] | `:time-range-filter` |
"
  [^CfnTemplate$DrillDownFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-filter)]
    (. builder categoryFilter data))
  (when-let [data (lookup-entry config id :numeric-equality-filter)]
    (. builder numericEqualityFilter data))
  (when-let [data (lookup-entry config id :time-range-filter)]
    (. builder timeRangeFilter data))
  (.build builder))


(defn cfn-template-drill-down-filter-property-builder
  "Creates a  `CfnTemplate$DrillDownFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-drill-down-filter-property-builder (new CfnTemplate$DrillDownFilterProperty$Builder) id config))


(defn build-cfn-template-drop-down-control-display-options-property-builder
  "The build-cfn-template-drop-down-control-display-options-property-builder function updates a CfnTemplate$DropDownControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DropDownControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `selectAllOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `titleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnTemplate$DropDownControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-template-drop-down-control-display-options-property-builder
  "Creates a  `CfnTemplate$DropDownControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-drop-down-control-display-options-property-builder (new CfnTemplate$DropDownControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-template-dynamic-default-value-property-builder
  "The build-cfn-template-dynamic-default-value-property-builder function updates a CfnTemplate$DynamicDefaultValueProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$DynamicDefaultValueProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValueColumn` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-value-column` |
| `groupNameColumn` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:group-name-column` |
| `userNameColumn` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:user-name-column` |
"
  [^CfnTemplate$DynamicDefaultValueProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-value-column)]
    (. builder defaultValueColumn data))
  (when-let [data (lookup-entry config id :group-name-column)]
    (. builder groupNameColumn data))
  (when-let [data (lookup-entry config id :user-name-column)]
    (. builder userNameColumn data))
  (.build builder))


(defn cfn-template-dynamic-default-value-property-builder
  "Creates a  `CfnTemplate$DynamicDefaultValueProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-dynamic-default-value-property-builder (new CfnTemplate$DynamicDefaultValueProperty$Builder) id config))


(defn build-cfn-template-empty-visual-property-builder
  "The build-cfn-template-empty-visual-property-builder function updates a CfnTemplate$EmptyVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$EmptyVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$EmptyVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-empty-visual-property-builder
  "Creates a  `CfnTemplate$EmptyVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-empty-visual-property-builder (new CfnTemplate$EmptyVisualProperty$Builder) id config))


(defn build-cfn-template-entity-property-builder
  "The build-cfn-template-entity-property-builder function updates a CfnTemplate$EntityProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$EntityProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `path` | java.lang.String | [[cdk.support/lookup-entry]] | `:path` |
"
  [^CfnTemplate$EntityProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :path)]
    (. builder path data))
  (.build builder))


(defn cfn-template-entity-property-builder
  "Creates a  `CfnTemplate$EntityProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-entity-property-builder (new CfnTemplate$EntityProperty$Builder) id config))


(defn build-cfn-template-exclude-period-configuration-property-builder
  "The build-cfn-template-exclude-period-configuration-property-builder function updates a CfnTemplate$ExcludePeriodConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ExcludePeriodConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `amount` | java.lang.Number | [[cdk.support/lookup-entry]] | `:amount` |
| `granularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:granularity` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
"
  [^CfnTemplate$ExcludePeriodConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :amount)]
    (. builder amount data))
  (when-let [data (lookup-entry config id :granularity)]
    (. builder granularity data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (.build builder))


(defn cfn-template-exclude-period-configuration-property-builder
  "Creates a  `CfnTemplate$ExcludePeriodConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-exclude-period-configuration-property-builder (new CfnTemplate$ExcludePeriodConfigurationProperty$Builder) id config))


(defn build-cfn-template-explicit-hierarchy-property-builder
  "The build-cfn-template-explicit-hierarchy-property-builder function updates a CfnTemplate$ExplicitHierarchyProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ExplicitHierarchyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:columns` |
| `drillDownFilters` | java.util.List | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnTemplate$ExplicitHierarchyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (when-let [data (lookup-entry config id :drill-down-filters)]
    (. builder drillDownFilters data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-template-explicit-hierarchy-property-builder
  "Creates a  `CfnTemplate$ExplicitHierarchyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-explicit-hierarchy-property-builder (new CfnTemplate$ExplicitHierarchyProperty$Builder) id config))


(defn build-cfn-template-field-based-tooltip-property-builder
  "The build-cfn-template-field-based-tooltip-property-builder function updates a CfnTemplate$FieldBasedTooltipProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FieldBasedTooltipProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-visibility` |
| `tooltipFields` | java.util.List | [[cdk.support/lookup-entry]] | `:tooltip-fields` |
| `tooltipTitleType` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-title-type` |
"
  [^CfnTemplate$FieldBasedTooltipProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-visibility)]
    (. builder aggregationVisibility data))
  (when-let [data (lookup-entry config id :tooltip-fields)]
    (. builder tooltipFields data))
  (when-let [data (lookup-entry config id :tooltip-title-type)]
    (. builder tooltipTitleType data))
  (.build builder))


(defn cfn-template-field-based-tooltip-property-builder
  "Creates a  `CfnTemplate$FieldBasedTooltipProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-field-based-tooltip-property-builder (new CfnTemplate$FieldBasedTooltipProperty$Builder) id config))


(defn build-cfn-template-field-label-type-property-builder
  "The build-cfn-template-field-label-type-property-builder function updates a CfnTemplate$FieldLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FieldLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$FieldLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-field-label-type-property-builder
  "Creates a  `CfnTemplate$FieldLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-field-label-type-property-builder (new CfnTemplate$FieldLabelTypeProperty$Builder) id config))


(defn build-cfn-template-field-series-item-property-builder
  "The build-cfn-template-field-series-item-property-builder function updates a CfnTemplate$FieldSeriesItemProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FieldSeriesItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `settings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:settings` |
"
  [^CfnTemplate$FieldSeriesItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-binding)]
    (. builder axisBinding data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :settings)]
    (. builder settings data))
  (.build builder))


(defn cfn-template-field-series-item-property-builder
  "Creates a  `CfnTemplate$FieldSeriesItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-field-series-item-property-builder (new CfnTemplate$FieldSeriesItemProperty$Builder) id config))


(defn build-cfn-template-field-sort-options-property-builder
  "The build-cfn-template-field-sort-options-property-builder function updates a CfnTemplate$FieldSortOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FieldSortOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-sort` |
| `fieldSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-sort` |
"
  [^CfnTemplate$FieldSortOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-sort)]
    (. builder columnSort data))
  (when-let [data (lookup-entry config id :field-sort)]
    (. builder fieldSort data))
  (.build builder))


(defn cfn-template-field-sort-options-property-builder
  "Creates a  `CfnTemplate$FieldSortOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-field-sort-options-property-builder (new CfnTemplate$FieldSortOptionsProperty$Builder) id config))


(defn build-cfn-template-field-sort-property-builder
  "The build-cfn-template-field-sort-property-builder function updates a CfnTemplate$FieldSortProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FieldSortProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
"
  [^CfnTemplate$FieldSortProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :direction)]
    (. builder direction data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (.build builder))


(defn cfn-template-field-sort-property-builder
  "Creates a  `CfnTemplate$FieldSortProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-field-sort-property-builder (new CfnTemplate$FieldSortProperty$Builder) id config))


(defn build-cfn-template-field-tooltip-item-property-builder
  "The build-cfn-template-field-tooltip-item-property-builder function updates a CfnTemplate$FieldTooltipItemProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FieldTooltipItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `label` | java.lang.String | [[cdk.support/lookup-entry]] | `:label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$FieldTooltipItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :label)]
    (. builder label data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-field-tooltip-item-property-builder
  "Creates a  `CfnTemplate$FieldTooltipItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-field-tooltip-item-property-builder (new CfnTemplate$FieldTooltipItemProperty$Builder) id config))


(defn build-cfn-template-filled-map-aggregated-field-wells-property-builder
  "The build-cfn-template-filled-map-aggregated-field-wells-property-builder function updates a CfnTemplate$FilledMapAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilledMapAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `geospatial` | java.util.List | [[cdk.support/lookup-entry]] | `:geospatial` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$FilledMapAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :geospatial)]
    (. builder geospatial data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-filled-map-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$FilledMapAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filled-map-aggregated-field-wells-property-builder (new CfnTemplate$FilledMapAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-filled-map-conditional-formatting-option-property-builder
  "The build-cfn-template-filled-map-conditional-formatting-option-property-builder function updates a CfnTemplate$FilledMapConditionalFormattingOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilledMapConditionalFormattingOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `shape` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:shape` |
"
  [^CfnTemplate$FilledMapConditionalFormattingOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :shape)]
    (. builder shape data))
  (.build builder))


(defn cfn-template-filled-map-conditional-formatting-option-property-builder
  "Creates a  `CfnTemplate$FilledMapConditionalFormattingOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filled-map-conditional-formatting-option-property-builder (new CfnTemplate$FilledMapConditionalFormattingOptionProperty$Builder) id config))


(defn build-cfn-template-filled-map-conditional-formatting-property-builder
  "The build-cfn-template-filled-map-conditional-formatting-property-builder function updates a CfnTemplate$FilledMapConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilledMapConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |
"
  [^CfnTemplate$FilledMapConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :conditional-formatting-options)]
    (. builder conditionalFormattingOptions data))
  (.build builder))


(defn cfn-template-filled-map-conditional-formatting-property-builder
  "Creates a  `CfnTemplate$FilledMapConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filled-map-conditional-formatting-property-builder (new CfnTemplate$FilledMapConditionalFormattingProperty$Builder) id config))


(defn build-cfn-template-filled-map-configuration-property-builder
  "The build-cfn-template-filled-map-configuration-property-builder function updates a CfnTemplate$FilledMapConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilledMapConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilledMapFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnTemplate$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `mapStyleOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$GeospatialMapStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:map-style-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilledMapSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnTemplate$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `windowOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:window-options` |
"
  [^CfnTemplate$FilledMapConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :map-style-options)]
    (. builder mapStyleOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :window-options)]
    (. builder windowOptions data))
  (.build builder))


(defn cfn-template-filled-map-configuration-property-builder
  "Creates a  `CfnTemplate$FilledMapConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filled-map-configuration-property-builder (new CfnTemplate$FilledMapConfigurationProperty$Builder) id config))


(defn build-cfn-template-filled-map-field-wells-property-builder
  "The build-cfn-template-filled-map-field-wells-property-builder function updates a CfnTemplate$FilledMapFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilledMapFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `filledMapAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilledMapAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:filled-map-aggregated-field-wells` |
"
  [^CfnTemplate$FilledMapFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :filled-map-aggregated-field-wells)]
    (. builder filledMapAggregatedFieldWells data))
  (.build builder))


(defn cfn-template-filled-map-field-wells-property-builder
  "Creates a  `CfnTemplate$FilledMapFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filled-map-field-wells-property-builder (new CfnTemplate$FilledMapFieldWellsProperty$Builder) id config))


(defn build-cfn-template-filled-map-shape-conditional-formatting-property-builder
  "The build-cfn-template-filled-map-shape-conditional-formatting-property-builder function updates a CfnTemplate$FilledMapShapeConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilledMapShapeConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `format` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format` |
"
  [^CfnTemplate$FilledMapShapeConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format)]
    (. builder format data))
  (.build builder))


(defn cfn-template-filled-map-shape-conditional-formatting-property-builder
  "Creates a  `CfnTemplate$FilledMapShapeConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filled-map-shape-conditional-formatting-property-builder (new CfnTemplate$FilledMapShapeConditionalFormattingProperty$Builder) id config))


(defn build-cfn-template-filled-map-sort-configuration-property-builder
  "The build-cfn-template-filled-map-sort-configuration-property-builder function updates a CfnTemplate$FilledMapSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilledMapSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
"
  [^CfnTemplate$FilledMapSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (.build builder))


(defn cfn-template-filled-map-sort-configuration-property-builder
  "Creates a  `CfnTemplate$FilledMapSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filled-map-sort-configuration-property-builder (new CfnTemplate$FilledMapSortConfigurationProperty$Builder) id config))


(defn build-cfn-template-filled-map-visual-property-builder
  "The build-cfn-template-filled-map-visual-property-builder function updates a CfnTemplate$FilledMapVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilledMapVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilledMapConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilledMapConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$FilledMapVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :conditional-formatting)]
    (. builder conditionalFormatting data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-filled-map-visual-property-builder
  "Creates a  `CfnTemplate$FilledMapVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filled-map-visual-property-builder (new CfnTemplate$FilledMapVisualProperty$Builder) id config))


(defn build-cfn-template-filter-control-property-builder
  "The build-cfn-template-filter-control-property-builder function updates a CfnTemplate$FilterControlProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilterControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `crossSheet` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterCrossSheetControlProperty | [[cdk.support/lookup-entry]] | `:cross-sheet` |
| `dateTimePicker` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterDateTimePickerControlProperty | [[cdk.support/lookup-entry]] | `:date-time-picker` |
| `dropdown` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterDropDownControlProperty | [[cdk.support/lookup-entry]] | `:dropdown` |
| `list` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:list` |
| `relativeDateTime` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterRelativeDateTimeControlProperty | [[cdk.support/lookup-entry]] | `:relative-date-time` |
| `slider` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:slider` |
| `textArea` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterTextAreaControlProperty | [[cdk.support/lookup-entry]] | `:text-area` |
| `textField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-field` |
"
  [^CfnTemplate$FilterControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cross-sheet)]
    (. builder crossSheet data))
  (when-let [data (lookup-entry config id :date-time-picker)]
    (. builder dateTimePicker data))
  (when-let [data (lookup-entry config id :dropdown)]
    (. builder dropdown data))
  (when-let [data (lookup-entry config id :list)]
    (. builder list data))
  (when-let [data (lookup-entry config id :relative-date-time)]
    (. builder relativeDateTime data))
  (when-let [data (lookup-entry config id :slider)]
    (. builder slider data))
  (when-let [data (lookup-entry config id :text-area)]
    (. builder textArea data))
  (when-let [data (lookup-entry config id :text-field)]
    (. builder textField data))
  (.build builder))


(defn cfn-template-filter-control-property-builder
  "Creates a  `CfnTemplate$FilterControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filter-control-property-builder (new CfnTemplate$FilterControlProperty$Builder) id config))


(defn build-cfn-template-filter-cross-sheet-control-property-builder
  "The build-cfn-template-filter-cross-sheet-control-property-builder function updates a CfnTemplate$FilterCrossSheetControlProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilterCrossSheetControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
"
  [^CfnTemplate$FilterCrossSheetControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cascading-control-configuration)]
    (. builder cascadingControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (.build builder))


(defn cfn-template-filter-cross-sheet-control-property-builder
  "Creates a  `CfnTemplate$FilterCrossSheetControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filter-cross-sheet-control-property-builder (new CfnTemplate$FilterCrossSheetControlProperty$Builder) id config))


(defn build-cfn-template-filter-date-time-picker-control-property-builder
  "The build-cfn-template-filter-date-time-picker-control-property-builder function updates a CfnTemplate$FilterDateTimePickerControlProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilterDateTimePickerControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnTemplate$FilterDateTimePickerControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-template-filter-date-time-picker-control-property-builder
  "Creates a  `CfnTemplate$FilterDateTimePickerControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filter-date-time-picker-control-property-builder (new CfnTemplate$FilterDateTimePickerControlProperty$Builder) id config))


(defn build-cfn-template-filter-drop-down-control-property-builder
  "The build-cfn-template-filter-drop-down-control-property-builder function updates a CfnTemplate$FilterDropDownControlProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilterDropDownControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$DropDownControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnTemplate$FilterDropDownControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cascading-control-configuration)]
    (. builder cascadingControlConfiguration data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-template-filter-drop-down-control-property-builder
  "Creates a  `CfnTemplate$FilterDropDownControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filter-drop-down-control-property-builder (new CfnTemplate$FilterDropDownControlProperty$Builder) id config))


(defn build-cfn-template-filter-group-property-builder
  "The build-cfn-template-filter-group-property-builder function updates a CfnTemplate$FilterGroupProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilterGroupProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `crossDataset` | java.lang.String | [[cdk.support/lookup-entry]] | `:cross-dataset` |
| `filterGroupId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-group-id` |
| `filters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filters` |
| `scopeConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterScopeConfigurationProperty | [[cdk.support/lookup-entry]] | `:scope-configuration` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
"
  [^CfnTemplate$FilterGroupProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cross-dataset)]
    (. builder crossDataset data))
  (when-let [data (lookup-entry config id :filter-group-id)]
    (. builder filterGroupId data))
  (when-let [data (lookup-entry config id :filters)]
    (. builder filters data))
  (when-let [data (lookup-entry config id :scope-configuration)]
    (. builder scopeConfiguration data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (.build builder))


(defn cfn-template-filter-group-property-builder
  "Creates a  `CfnTemplate$FilterGroupProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filter-group-property-builder (new CfnTemplate$FilterGroupProperty$Builder) id config))


(defn build-cfn-template-filter-list-configuration-property-builder
  "The build-cfn-template-filter-list-configuration-property-builder function updates a CfnTemplate$FilterListConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilterListConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
"
  [^CfnTemplate$FilterListConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-values)]
    (. builder categoryValues data))
  (when-let [data (lookup-entry config id :match-operator)]
    (. builder matchOperator data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (.build builder))


(defn cfn-template-filter-list-configuration-property-builder
  "Creates a  `CfnTemplate$FilterListConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filter-list-configuration-property-builder (new CfnTemplate$FilterListConfigurationProperty$Builder) id config))


(defn build-cfn-template-filter-list-control-property-builder
  "The build-cfn-template-filter-list-control-property-builder function updates a CfnTemplate$FilterListControlProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilterListControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `selectableValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnTemplate$FilterListControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cascading-control-configuration)]
    (. builder cascadingControlConfiguration data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-template-filter-list-control-property-builder
  "Creates a  `CfnTemplate$FilterListControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filter-list-control-property-builder (new CfnTemplate$FilterListControlProperty$Builder) id config))


(defn build-cfn-template-filter-operation-selected-fields-configuration-property-builder
  "The build-cfn-template-filter-operation-selected-fields-configuration-property-builder function updates a CfnTemplate$FilterOperationSelectedFieldsConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilterOperationSelectedFieldsConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `selectedColumns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-columns` |
| `selectedFieldOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-field-options` |
| `selectedFields` | java.util.List | [[cdk.support/lookup-entry]] | `:selected-fields` |
"
  [^CfnTemplate$FilterOperationSelectedFieldsConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :selected-columns)]
    (. builder selectedColumns data))
  (when-let [data (lookup-entry config id :selected-field-options)]
    (. builder selectedFieldOptions data))
  (when-let [data (lookup-entry config id :selected-fields)]
    (. builder selectedFields data))
  (.build builder))


(defn cfn-template-filter-operation-selected-fields-configuration-property-builder
  "Creates a  `CfnTemplate$FilterOperationSelectedFieldsConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filter-operation-selected-fields-configuration-property-builder (new CfnTemplate$FilterOperationSelectedFieldsConfigurationProperty$Builder) id config))


(defn build-cfn-template-filter-operation-target-visuals-configuration-property-builder
  "The build-cfn-template-filter-operation-target-visuals-configuration-property-builder function updates a CfnTemplate$FilterOperationTargetVisualsConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilterOperationTargetVisualsConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sameSheetTargetVisualConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:same-sheet-target-visual-configuration` |
"
  [^CfnTemplate$FilterOperationTargetVisualsConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :same-sheet-target-visual-configuration)]
    (. builder sameSheetTargetVisualConfiguration data))
  (.build builder))


(defn cfn-template-filter-operation-target-visuals-configuration-property-builder
  "Creates a  `CfnTemplate$FilterOperationTargetVisualsConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filter-operation-target-visuals-configuration-property-builder (new CfnTemplate$FilterOperationTargetVisualsConfigurationProperty$Builder) id config))


(defn build-cfn-template-filter-property-builder
  "The build-cfn-template-filter-property-builder function updates a CfnTemplate$FilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryFilter` | software.amazon.awscdk.services.quicksight.CfnTemplate$CategoryFilterProperty | [[cdk.support/lookup-entry]] | `:category-filter` |
| `numericEqualityFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-equality-filter` |
| `numericRangeFilter` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericRangeFilterProperty | [[cdk.support/lookup-entry]] | `:numeric-range-filter` |
| `relativeDatesFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:relative-dates-filter` |
| `timeEqualityFilter` | software.amazon.awscdk.services.quicksight.CfnTemplate$TimeEqualityFilterProperty | [[cdk.support/lookup-entry]] | `:time-equality-filter` |
| `timeRangeFilter` | software.amazon.awscdk.services.quicksight.CfnTemplate$TimeRangeFilterProperty | [[cdk.support/lookup-entry]] | `:time-range-filter` |
| `topBottomFilter` | software.amazon.awscdk.services.quicksight.CfnTemplate$TopBottomFilterProperty | [[cdk.support/lookup-entry]] | `:top-bottom-filter` |
"
  [^CfnTemplate$FilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-filter)]
    (. builder categoryFilter data))
  (when-let [data (lookup-entry config id :numeric-equality-filter)]
    (. builder numericEqualityFilter data))
  (when-let [data (lookup-entry config id :numeric-range-filter)]
    (. builder numericRangeFilter data))
  (when-let [data (lookup-entry config id :relative-dates-filter)]
    (. builder relativeDatesFilter data))
  (when-let [data (lookup-entry config id :time-equality-filter)]
    (. builder timeEqualityFilter data))
  (when-let [data (lookup-entry config id :time-range-filter)]
    (. builder timeRangeFilter data))
  (when-let [data (lookup-entry config id :top-bottom-filter)]
    (. builder topBottomFilter data))
  (.build builder))


(defn cfn-template-filter-property-builder
  "Creates a  `CfnTemplate$FilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filter-property-builder (new CfnTemplate$FilterProperty$Builder) id config))


(defn build-cfn-template-filter-relative-date-time-control-property-builder
  "The build-cfn-template-filter-relative-date-time-control-property-builder function updates a CfnTemplate$FilterRelativeDateTimeControlProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilterRelativeDateTimeControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnTemplate$FilterRelativeDateTimeControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-template-filter-relative-date-time-control-property-builder
  "Creates a  `CfnTemplate$FilterRelativeDateTimeControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filter-relative-date-time-control-property-builder (new CfnTemplate$FilterRelativeDateTimeControlProperty$Builder) id config))


(defn build-cfn-template-filter-scope-configuration-property-builder
  "The build-cfn-template-filter-scope-configuration-property-builder function updates a CfnTemplate$FilterScopeConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilterScopeConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `allSheets` | java.lang.Object | [[cdk.support/lookup-entry]] | `:all-sheets` |
| `selectedSheets` | software.amazon.awscdk.services.quicksight.CfnTemplate$SelectedSheetsFilterScopeConfigurationProperty | [[cdk.support/lookup-entry]] | `:selected-sheets` |
"
  [^CfnTemplate$FilterScopeConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :all-sheets)]
    (. builder allSheets data))
  (when-let [data (lookup-entry config id :selected-sheets)]
    (. builder selectedSheets data))
  (.build builder))


(defn cfn-template-filter-scope-configuration-property-builder
  "Creates a  `CfnTemplate$FilterScopeConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filter-scope-configuration-property-builder (new CfnTemplate$FilterScopeConfigurationProperty$Builder) id config))


(defn build-cfn-template-filter-selectable-values-property-builder
  "The build-cfn-template-filter-selectable-values-property-builder function updates a CfnTemplate$FilterSelectableValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilterSelectableValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$FilterSelectableValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-filter-selectable-values-property-builder
  "Creates a  `CfnTemplate$FilterSelectableValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filter-selectable-values-property-builder (new CfnTemplate$FilterSelectableValuesProperty$Builder) id config))


(defn build-cfn-template-filter-slider-control-property-builder
  "The build-cfn-template-filter-slider-control-property-builder function updates a CfnTemplate$FilterSliderControlProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilterSliderControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SliderControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnTemplate$FilterSliderControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :maximum-value)]
    (. builder maximumValue data))
  (when-let [data (lookup-entry config id :minimum-value)]
    (. builder minimumValue data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :step-size)]
    (. builder stepSize data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-template-filter-slider-control-property-builder
  "Creates a  `CfnTemplate$FilterSliderControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filter-slider-control-property-builder (new CfnTemplate$FilterSliderControlProperty$Builder) id config))


(defn build-cfn-template-filter-text-area-control-property-builder
  "The build-cfn-template-filter-text-area-control-property-builder function updates a CfnTemplate$FilterTextAreaControlProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilterTextAreaControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$TextAreaControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnTemplate$FilterTextAreaControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :delimiter)]
    (. builder delimiter data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-template-filter-text-area-control-property-builder
  "Creates a  `CfnTemplate$FilterTextAreaControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filter-text-area-control-property-builder (new CfnTemplate$FilterTextAreaControlProperty$Builder) id config))


(defn build-cfn-template-filter-text-field-control-property-builder
  "The build-cfn-template-filter-text-field-control-property-builder function updates a CfnTemplate$FilterTextFieldControlProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FilterTextFieldControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$TextFieldControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnTemplate$FilterTextFieldControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :filter-control-id)]
    (. builder filterControlId data))
  (when-let [data (lookup-entry config id :source-filter-id)]
    (. builder sourceFilterId data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-template-filter-text-field-control-property-builder
  "Creates a  `CfnTemplate$FilterTextFieldControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-filter-text-field-control-property-builder (new CfnTemplate$FilterTextFieldControlProperty$Builder) id config))


(defn build-cfn-template-font-configuration-property-builder
  "The build-cfn-template-font-configuration-property-builder function updates a CfnTemplate$FontConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FontConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-color` |
| `fontDecoration` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-decoration` |
| `fontSize` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-size` |
| `fontStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-style` |
| `fontWeight` | software.amazon.awscdk.services.quicksight.CfnTemplate$FontWeightProperty | [[cdk.support/lookup-entry]] | `:font-weight` |
"
  [^CfnTemplate$FontConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :font-color)]
    (. builder fontColor data))
  (when-let [data (lookup-entry config id :font-decoration)]
    (. builder fontDecoration data))
  (when-let [data (lookup-entry config id :font-size)]
    (. builder fontSize data))
  (when-let [data (lookup-entry config id :font-style)]
    (. builder fontStyle data))
  (when-let [data (lookup-entry config id :font-weight)]
    (. builder fontWeight data))
  (.build builder))


(defn cfn-template-font-configuration-property-builder
  "Creates a  `CfnTemplate$FontConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-font-configuration-property-builder (new CfnTemplate$FontConfigurationProperty$Builder) id config))


(defn build-cfn-template-font-size-property-builder
  "The build-cfn-template-font-size-property-builder function updates a CfnTemplate$FontSizeProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FontSizeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `relative` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative` |
"
  [^CfnTemplate$FontSizeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :relative)]
    (. builder relative data))
  (.build builder))


(defn cfn-template-font-size-property-builder
  "Creates a  `CfnTemplate$FontSizeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-font-size-property-builder (new CfnTemplate$FontSizeProperty$Builder) id config))


(defn build-cfn-template-font-weight-property-builder
  "The build-cfn-template-font-weight-property-builder function updates a CfnTemplate$FontWeightProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FontWeightProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
"
  [^CfnTemplate$FontWeightProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (.build builder))


(defn cfn-template-font-weight-property-builder
  "Creates a  `CfnTemplate$FontWeightProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-font-weight-property-builder (new CfnTemplate$FontWeightProperty$Builder) id config))


(defn build-cfn-template-forecast-computation-property-builder
  "The build-cfn-template-forecast-computation-property-builder function updates a CfnTemplate$ForecastComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ForecastComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `customSeasonalityValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-seasonality-value` |
| `lowerBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:lower-boundary` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodsBackward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-backward` |
| `periodsForward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-forward` |
| `predictionInterval` | java.lang.Number | [[cdk.support/lookup-entry]] | `:prediction-interval` |
| `seasonality` | java.lang.String | [[cdk.support/lookup-entry]] | `:seasonality` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `upperBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:upper-boundary` |
| `value` | software.amazon.awscdk.services.quicksight.CfnTemplate$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$ForecastComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :custom-seasonality-value)]
    (. builder customSeasonalityValue data))
  (when-let [data (lookup-entry config id :lower-boundary)]
    (. builder lowerBoundary data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :periods-backward)]
    (. builder periodsBackward data))
  (when-let [data (lookup-entry config id :periods-forward)]
    (. builder periodsForward data))
  (when-let [data (lookup-entry config id :prediction-interval)]
    (. builder predictionInterval data))
  (when-let [data (lookup-entry config id :seasonality)]
    (. builder seasonality data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :upper-boundary)]
    (. builder upperBoundary data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-forecast-computation-property-builder
  "Creates a  `CfnTemplate$ForecastComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-forecast-computation-property-builder (new CfnTemplate$ForecastComputationProperty$Builder) id config))


(defn build-cfn-template-forecast-configuration-property-builder
  "The build-cfn-template-forecast-configuration-property-builder function updates a CfnTemplate$ForecastConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ForecastConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `forecastProperties` | software.amazon.awscdk.services.quicksight.CfnTemplate$TimeBasedForecastPropertiesProperty | [[cdk.support/lookup-entry]] | `:forecast-properties` |
| `scenario` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scenario` |
"
  [^CfnTemplate$ForecastConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :forecast-properties)]
    (. builder forecastProperties data))
  (when-let [data (lookup-entry config id :scenario)]
    (. builder scenario data))
  (.build builder))


(defn cfn-template-forecast-configuration-property-builder
  "Creates a  `CfnTemplate$ForecastConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-forecast-configuration-property-builder (new CfnTemplate$ForecastConfigurationProperty$Builder) id config))


(defn build-cfn-template-forecast-scenario-property-builder
  "The build-cfn-template-forecast-scenario-property-builder function updates a CfnTemplate$ForecastScenarioProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ForecastScenarioProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `whatIfPointScenario` | software.amazon.awscdk.services.quicksight.CfnTemplate$WhatIfPointScenarioProperty | [[cdk.support/lookup-entry]] | `:what-if-point-scenario` |
| `whatIfRangeScenario` | software.amazon.awscdk.services.quicksight.CfnTemplate$WhatIfRangeScenarioProperty | [[cdk.support/lookup-entry]] | `:what-if-range-scenario` |
"
  [^CfnTemplate$ForecastScenarioProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :what-if-point-scenario)]
    (. builder whatIfPointScenario data))
  (when-let [data (lookup-entry config id :what-if-range-scenario)]
    (. builder whatIfRangeScenario data))
  (.build builder))


(defn cfn-template-forecast-scenario-property-builder
  "Creates a  `CfnTemplate$ForecastScenarioProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-forecast-scenario-property-builder (new CfnTemplate$ForecastScenarioProperty$Builder) id config))


(defn build-cfn-template-format-configuration-property-builder
  "The build-cfn-template-format-configuration-property-builder function updates a CfnTemplate$FormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$DateTimeFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:date-time-format-configuration` |
| `numberFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumberFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:number-format-configuration` |
| `stringFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$StringFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:string-format-configuration` |
"
  [^CfnTemplate$FormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-format-configuration)]
    (. builder dateTimeFormatConfiguration data))
  (when-let [data (lookup-entry config id :number-format-configuration)]
    (. builder numberFormatConfiguration data))
  (when-let [data (lookup-entry config id :string-format-configuration)]
    (. builder stringFormatConfiguration data))
  (.build builder))


(defn cfn-template-format-configuration-property-builder
  "Creates a  `CfnTemplate$FormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-format-configuration-property-builder (new CfnTemplate$FormatConfigurationProperty$Builder) id config))


(defn build-cfn-template-free-form-layout-canvas-size-options-property-builder
  "The build-cfn-template-free-form-layout-canvas-size-options-property-builder function updates a CfnTemplate$FreeFormLayoutCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FreeFormLayoutCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `screenCanvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:screen-canvas-size-options` |
"
  [^CfnTemplate$FreeFormLayoutCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :screen-canvas-size-options)]
    (. builder screenCanvasSizeOptions data))
  (.build builder))


(defn cfn-template-free-form-layout-canvas-size-options-property-builder
  "Creates a  `CfnTemplate$FreeFormLayoutCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-free-form-layout-canvas-size-options-property-builder (new CfnTemplate$FreeFormLayoutCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-template-free-form-layout-configuration-property-builder
  "The build-cfn-template-free-form-layout-configuration-property-builder function updates a CfnTemplate$FreeFormLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FreeFormLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$FreeFormLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `elements` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:elements` |
"
  [^CfnTemplate$FreeFormLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (when-let [data (lookup-entry config id :elements)]
    (. builder elements data))
  (.build builder))


(defn cfn-template-free-form-layout-configuration-property-builder
  "Creates a  `CfnTemplate$FreeFormLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-free-form-layout-configuration-property-builder (new CfnTemplate$FreeFormLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-template-free-form-layout-element-background-style-property-builder
  "The build-cfn-template-free-form-layout-element-background-style-property-builder function updates a CfnTemplate$FreeFormLayoutElementBackgroundStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FreeFormLayoutElementBackgroundStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$FreeFormLayoutElementBackgroundStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-free-form-layout-element-background-style-property-builder
  "Creates a  `CfnTemplate$FreeFormLayoutElementBackgroundStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-free-form-layout-element-background-style-property-builder (new CfnTemplate$FreeFormLayoutElementBackgroundStyleProperty$Builder) id config))


(defn build-cfn-template-free-form-layout-element-border-style-property-builder
  "The build-cfn-template-free-form-layout-element-border-style-property-builder function updates a CfnTemplate$FreeFormLayoutElementBorderStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FreeFormLayoutElementBorderStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$FreeFormLayoutElementBorderStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-free-form-layout-element-border-style-property-builder
  "Creates a  `CfnTemplate$FreeFormLayoutElementBorderStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-free-form-layout-element-border-style-property-builder (new CfnTemplate$FreeFormLayoutElementBorderStyleProperty$Builder) id config))


(defn build-cfn-template-free-form-layout-element-property-builder
  "The build-cfn-template-free-form-layout-element-property-builder function updates a CfnTemplate$FreeFormLayoutElementProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FreeFormLayoutElementProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:background-style` |
| `borderStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:border-style` |
| `elementId` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-id` |
| `elementType` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-type` |
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `loadingAnimation` | software.amazon.awscdk.services.quicksight.CfnTemplate$LoadingAnimationProperty | [[cdk.support/lookup-entry]] | `:loading-animation` |
| `renderingRules` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rendering-rules` |
| `selectedBorderStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-border-style` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |
| `xAxisLocation` | java.lang.String | [[cdk.support/lookup-entry]] | `:x-axis-location` |
| `yAxisLocation` | java.lang.String | [[cdk.support/lookup-entry]] | `:y-axis-location` |
"
  [^CfnTemplate$FreeFormLayoutElementProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-style)]
    (. builder backgroundStyle data))
  (when-let [data (lookup-entry config id :border-style)]
    (. builder borderStyle data))
  (when-let [data (lookup-entry config id :element-id)]
    (. builder elementId data))
  (when-let [data (lookup-entry config id :element-type)]
    (. builder elementType data))
  (when-let [data (lookup-entry config id :height)]
    (. builder height data))
  (when-let [data (lookup-entry config id :loading-animation)]
    (. builder loadingAnimation data))
  (when-let [data (lookup-entry config id :rendering-rules)]
    (. builder renderingRules data))
  (when-let [data (lookup-entry config id :selected-border-style)]
    (. builder selectedBorderStyle data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (when-let [data (lookup-entry config id :width)]
    (. builder width data))
  (when-let [data (lookup-entry config id :x-axis-location)]
    (. builder xAxisLocation data))
  (when-let [data (lookup-entry config id :y-axis-location)]
    (. builder yAxisLocation data))
  (.build builder))


(defn cfn-template-free-form-layout-element-property-builder
  "Creates a  `CfnTemplate$FreeFormLayoutElementProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-free-form-layout-element-property-builder (new CfnTemplate$FreeFormLayoutElementProperty$Builder) id config))


(defn build-cfn-template-free-form-layout-screen-canvas-size-options-property-builder
  "The build-cfn-template-free-form-layout-screen-canvas-size-options-property-builder function updates a CfnTemplate$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `optimizedViewPortWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:optimized-view-port-width` |
"
  [^CfnTemplate$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :optimized-view-port-width)]
    (. builder optimizedViewPortWidth data))
  (.build builder))


(defn cfn-template-free-form-layout-screen-canvas-size-options-property-builder
  "Creates a  `CfnTemplate$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-free-form-layout-screen-canvas-size-options-property-builder (new CfnTemplate$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-template-free-form-section-layout-configuration-property-builder
  "The build-cfn-template-free-form-section-layout-configuration-property-builder function updates a CfnTemplate$FreeFormSectionLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FreeFormSectionLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `elements` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:elements` |
"
  [^CfnTemplate$FreeFormSectionLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :elements)]
    (. builder elements data))
  (.build builder))


(defn cfn-template-free-form-section-layout-configuration-property-builder
  "Creates a  `CfnTemplate$FreeFormSectionLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-free-form-section-layout-configuration-property-builder (new CfnTemplate$FreeFormSectionLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-template-funnel-chart-aggregated-field-wells-property-builder
  "The build-cfn-template-funnel-chart-aggregated-field-wells-property-builder function updates a CfnTemplate$FunnelChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FunnelChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$FunnelChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-funnel-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$FunnelChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-funnel-chart-aggregated-field-wells-property-builder (new CfnTemplate$FunnelChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-funnel-chart-configuration-property-builder
  "The build-cfn-template-funnel-chart-configuration-property-builder function updates a CfnTemplate$FunnelChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FunnelChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `dataLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-label-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FunnelChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnTemplate$FunnelChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :data-label-options)]
    (. builder dataLabelOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :value-label-options)]
    (. builder valueLabelOptions data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-template-funnel-chart-configuration-property-builder
  "Creates a  `CfnTemplate$FunnelChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-funnel-chart-configuration-property-builder (new CfnTemplate$FunnelChartConfigurationProperty$Builder) id config))


(defn build-cfn-template-funnel-chart-data-label-options-property-builder
  "The build-cfn-template-funnel-chart-data-label-options-property-builder function updates a CfnTemplate$FunnelChartDataLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FunnelChartDataLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-label-visibility` |
| `labelColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-color` |
| `labelFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label-font-configuration` |
| `measureDataLabelStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-data-label-style` |
| `measureLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-label-visibility` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$FunnelChartDataLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-label-visibility)]
    (. builder categoryLabelVisibility data))
  (when-let [data (lookup-entry config id :label-color)]
    (. builder labelColor data))
  (when-let [data (lookup-entry config id :label-font-configuration)]
    (. builder labelFontConfiguration data))
  (when-let [data (lookup-entry config id :measure-data-label-style)]
    (. builder measureDataLabelStyle data))
  (when-let [data (lookup-entry config id :measure-label-visibility)]
    (. builder measureLabelVisibility data))
  (when-let [data (lookup-entry config id :position)]
    (. builder position data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-funnel-chart-data-label-options-property-builder
  "Creates a  `CfnTemplate$FunnelChartDataLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-funnel-chart-data-label-options-property-builder (new CfnTemplate$FunnelChartDataLabelOptionsProperty$Builder) id config))


(defn build-cfn-template-funnel-chart-field-wells-property-builder
  "The build-cfn-template-funnel-chart-field-wells-property-builder function updates a CfnTemplate$FunnelChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FunnelChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `funnelChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:funnel-chart-aggregated-field-wells` |
"
  [^CfnTemplate$FunnelChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :funnel-chart-aggregated-field-wells)]
    (. builder funnelChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-template-funnel-chart-field-wells-property-builder
  "Creates a  `CfnTemplate$FunnelChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-funnel-chart-field-wells-property-builder (new CfnTemplate$FunnelChartFieldWellsProperty$Builder) id config))


(defn build-cfn-template-funnel-chart-sort-configuration-property-builder
  "The build-cfn-template-funnel-chart-sort-configuration-property-builder function updates a CfnTemplate$FunnelChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FunnelChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
"
  [^CfnTemplate$FunnelChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (.build builder))


(defn cfn-template-funnel-chart-sort-configuration-property-builder
  "Creates a  `CfnTemplate$FunnelChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-funnel-chart-sort-configuration-property-builder (new CfnTemplate$FunnelChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-template-funnel-chart-visual-property-builder
  "The build-cfn-template-funnel-chart-visual-property-builder function updates a CfnTemplate$FunnelChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$FunnelChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$FunnelChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-funnel-chart-visual-property-builder
  "Creates a  `CfnTemplate$FunnelChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-funnel-chart-visual-property-builder (new CfnTemplate$FunnelChartVisualProperty$Builder) id config))


(defn build-cfn-template-gauge-chart-arc-conditional-formatting-property-builder
  "The build-cfn-template-gauge-chart-arc-conditional-formatting-property-builder function updates a CfnTemplate$GaugeChartArcConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GaugeChartArcConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `foregroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:foreground-color` |
"
  [^CfnTemplate$GaugeChartArcConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :foreground-color)]
    (. builder foregroundColor data))
  (.build builder))


(defn cfn-template-gauge-chart-arc-conditional-formatting-property-builder
  "Creates a  `CfnTemplate$GaugeChartArcConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-gauge-chart-arc-conditional-formatting-property-builder (new CfnTemplate$GaugeChartArcConditionalFormattingProperty$Builder) id config))


(defn build-cfn-template-gauge-chart-conditional-formatting-option-property-builder
  "The build-cfn-template-gauge-chart-conditional-formatting-option-property-builder function updates a CfnTemplate$GaugeChartConditionalFormattingOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GaugeChartConditionalFormattingOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arc` | software.amazon.awscdk.services.quicksight.CfnTemplate$GaugeChartArcConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:arc` |
| `primaryValue` | software.amazon.awscdk.services.quicksight.CfnTemplate$GaugeChartPrimaryValueConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:primary-value` |
"
  [^CfnTemplate$GaugeChartConditionalFormattingOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arc)]
    (. builder arc data))
  (when-let [data (lookup-entry config id :primary-value)]
    (. builder primaryValue data))
  (.build builder))


(defn cfn-template-gauge-chart-conditional-formatting-option-property-builder
  "Creates a  `CfnTemplate$GaugeChartConditionalFormattingOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-gauge-chart-conditional-formatting-option-property-builder (new CfnTemplate$GaugeChartConditionalFormattingOptionProperty$Builder) id config))


(defn build-cfn-template-gauge-chart-conditional-formatting-property-builder
  "The build-cfn-template-gauge-chart-conditional-formatting-property-builder function updates a CfnTemplate$GaugeChartConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GaugeChartConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |
"
  [^CfnTemplate$GaugeChartConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :conditional-formatting-options)]
    (. builder conditionalFormattingOptions data))
  (.build builder))


(defn cfn-template-gauge-chart-conditional-formatting-property-builder
  "Creates a  `CfnTemplate$GaugeChartConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-gauge-chart-conditional-formatting-property-builder (new CfnTemplate$GaugeChartConditionalFormattingProperty$Builder) id config))


(defn build-cfn-template-gauge-chart-configuration-property-builder
  "The build-cfn-template-gauge-chart-configuration-property-builder function updates a CfnTemplate$GaugeChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GaugeChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `gaugeChartOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:gauge-chart-options` |
| `tooltipOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip-options` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnTemplate$GaugeChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :gauge-chart-options)]
    (. builder gaugeChartOptions data))
  (when-let [data (lookup-entry config id :tooltip-options)]
    (. builder tooltipOptions data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-template-gauge-chart-configuration-property-builder
  "Creates a  `CfnTemplate$GaugeChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-gauge-chart-configuration-property-builder (new CfnTemplate$GaugeChartConfigurationProperty$Builder) id config))


(defn build-cfn-template-gauge-chart-field-wells-property-builder
  "The build-cfn-template-gauge-chart-field-wells-property-builder function updates a CfnTemplate$GaugeChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GaugeChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target-values` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$GaugeChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :target-values)]
    (. builder targetValues data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-gauge-chart-field-wells-property-builder
  "Creates a  `CfnTemplate$GaugeChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-gauge-chart-field-wells-property-builder (new CfnTemplate$GaugeChartFieldWellsProperty$Builder) id config))


(defn build-cfn-template-gauge-chart-options-property-builder
  "The build-cfn-template-gauge-chart-options-property-builder function updates a CfnTemplate$GaugeChartOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GaugeChartOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arc` | software.amazon.awscdk.services.quicksight.CfnTemplate$ArcConfigurationProperty | [[cdk.support/lookup-entry]] | `:arc` |
| `arcAxis` | software.amazon.awscdk.services.quicksight.CfnTemplate$ArcAxisConfigurationProperty | [[cdk.support/lookup-entry]] | `:arc-axis` |
| `comparison` | software.amazon.awscdk.services.quicksight.CfnTemplate$ComparisonConfigurationProperty | [[cdk.support/lookup-entry]] | `:comparison` |
| `primaryValueDisplayType` | java.lang.String | [[cdk.support/lookup-entry]] | `:primary-value-display-type` |
| `primaryValueFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-value-font-configuration` |
"
  [^CfnTemplate$GaugeChartOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arc)]
    (. builder arc data))
  (when-let [data (lookup-entry config id :arc-axis)]
    (. builder arcAxis data))
  (when-let [data (lookup-entry config id :comparison)]
    (. builder comparison data))
  (when-let [data (lookup-entry config id :primary-value-display-type)]
    (. builder primaryValueDisplayType data))
  (when-let [data (lookup-entry config id :primary-value-font-configuration)]
    (. builder primaryValueFontConfiguration data))
  (.build builder))


(defn cfn-template-gauge-chart-options-property-builder
  "Creates a  `CfnTemplate$GaugeChartOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-gauge-chart-options-property-builder (new CfnTemplate$GaugeChartOptionsProperty$Builder) id config))


(defn build-cfn-template-gauge-chart-primary-value-conditional-formatting-property-builder
  "The build-cfn-template-gauge-chart-primary-value-conditional-formatting-property-builder function updates a CfnTemplate$GaugeChartPrimaryValueConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GaugeChartPrimaryValueConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.services.quicksight.CfnTemplate$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnTemplate$GaugeChartPrimaryValueConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-template-gauge-chart-primary-value-conditional-formatting-property-builder
  "Creates a  `CfnTemplate$GaugeChartPrimaryValueConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-gauge-chart-primary-value-conditional-formatting-property-builder (new CfnTemplate$GaugeChartPrimaryValueConditionalFormattingProperty$Builder) id config))


(defn build-cfn-template-gauge-chart-visual-property-builder
  "The build-cfn-template-gauge-chart-visual-property-builder function updates a CfnTemplate$GaugeChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GaugeChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$GaugeChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnTemplate$GaugeChartConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$GaugeChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :conditional-formatting)]
    (. builder conditionalFormatting data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-gauge-chart-visual-property-builder
  "Creates a  `CfnTemplate$GaugeChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-gauge-chart-visual-property-builder (new CfnTemplate$GaugeChartVisualProperty$Builder) id config))


(defn build-cfn-template-geospatial-coordinate-bounds-property-builder
  "The build-cfn-template-geospatial-coordinate-bounds-property-builder function updates a CfnTemplate$GeospatialCoordinateBoundsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GeospatialCoordinateBoundsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `east` | java.lang.Number | [[cdk.support/lookup-entry]] | `:east` |
| `north` | java.lang.Number | [[cdk.support/lookup-entry]] | `:north` |
| `south` | java.lang.Number | [[cdk.support/lookup-entry]] | `:south` |
| `west` | java.lang.Number | [[cdk.support/lookup-entry]] | `:west` |
"
  [^CfnTemplate$GeospatialCoordinateBoundsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :east)]
    (. builder east data))
  (when-let [data (lookup-entry config id :north)]
    (. builder north data))
  (when-let [data (lookup-entry config id :south)]
    (. builder south data))
  (when-let [data (lookup-entry config id :west)]
    (. builder west data))
  (.build builder))


(defn cfn-template-geospatial-coordinate-bounds-property-builder
  "Creates a  `CfnTemplate$GeospatialCoordinateBoundsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-geospatial-coordinate-bounds-property-builder (new CfnTemplate$GeospatialCoordinateBoundsProperty$Builder) id config))


(defn build-cfn-template-geospatial-heatmap-color-scale-property-builder
  "The build-cfn-template-geospatial-heatmap-color-scale-property-builder function updates a CfnTemplate$GeospatialHeatmapColorScaleProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GeospatialHeatmapColorScaleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
"
  [^CfnTemplate$GeospatialHeatmapColorScaleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (.build builder))


(defn cfn-template-geospatial-heatmap-color-scale-property-builder
  "Creates a  `CfnTemplate$GeospatialHeatmapColorScaleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-geospatial-heatmap-color-scale-property-builder (new CfnTemplate$GeospatialHeatmapColorScaleProperty$Builder) id config))


(defn build-cfn-template-geospatial-heatmap-configuration-property-builder
  "The build-cfn-template-geospatial-heatmap-configuration-property-builder function updates a CfnTemplate$GeospatialHeatmapConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GeospatialHeatmapConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatmapColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heatmap-color` |
"
  [^CfnTemplate$GeospatialHeatmapConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :heatmap-color)]
    (. builder heatmapColor data))
  (.build builder))


(defn cfn-template-geospatial-heatmap-configuration-property-builder
  "Creates a  `CfnTemplate$GeospatialHeatmapConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-geospatial-heatmap-configuration-property-builder (new CfnTemplate$GeospatialHeatmapConfigurationProperty$Builder) id config))


(defn build-cfn-template-geospatial-heatmap-data-color-property-builder
  "The build-cfn-template-geospatial-heatmap-data-color-property-builder function updates a CfnTemplate$GeospatialHeatmapDataColorProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GeospatialHeatmapDataColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
"
  [^CfnTemplate$GeospatialHeatmapDataColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (.build builder))


(defn cfn-template-geospatial-heatmap-data-color-property-builder
  "Creates a  `CfnTemplate$GeospatialHeatmapDataColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-geospatial-heatmap-data-color-property-builder (new CfnTemplate$GeospatialHeatmapDataColorProperty$Builder) id config))


(defn build-cfn-template-geospatial-map-aggregated-field-wells-property-builder
  "The build-cfn-template-geospatial-map-aggregated-field-wells-property-builder function updates a CfnTemplate$GeospatialMapAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GeospatialMapAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
| `geospatial` | java.util.List | [[cdk.support/lookup-entry]] | `:geospatial` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$GeospatialMapAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :geospatial)]
    (. builder geospatial data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-geospatial-map-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$GeospatialMapAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-geospatial-map-aggregated-field-wells-property-builder (new CfnTemplate$GeospatialMapAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-geospatial-map-configuration-property-builder
  "The build-cfn-template-geospatial-map-configuration-property-builder function updates a CfnTemplate$GeospatialMapConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GeospatialMapConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$GeospatialMapFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnTemplate$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `mapStyleOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$GeospatialMapStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:map-style-options` |
| `pointStyleOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$GeospatialPointStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:point-style-options` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `windowOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$GeospatialWindowOptionsProperty | [[cdk.support/lookup-entry]] | `:window-options` |
"
  [^CfnTemplate$GeospatialMapConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :map-style-options)]
    (. builder mapStyleOptions data))
  (when-let [data (lookup-entry config id :point-style-options)]
    (. builder pointStyleOptions data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (when-let [data (lookup-entry config id :window-options)]
    (. builder windowOptions data))
  (.build builder))


(defn cfn-template-geospatial-map-configuration-property-builder
  "Creates a  `CfnTemplate$GeospatialMapConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-geospatial-map-configuration-property-builder (new CfnTemplate$GeospatialMapConfigurationProperty$Builder) id config))


(defn build-cfn-template-geospatial-map-field-wells-property-builder
  "The build-cfn-template-geospatial-map-field-wells-property-builder function updates a CfnTemplate$GeospatialMapFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GeospatialMapFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `geospatialMapAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$GeospatialMapAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:geospatial-map-aggregated-field-wells` |
"
  [^CfnTemplate$GeospatialMapFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :geospatial-map-aggregated-field-wells)]
    (. builder geospatialMapAggregatedFieldWells data))
  (.build builder))


(defn cfn-template-geospatial-map-field-wells-property-builder
  "Creates a  `CfnTemplate$GeospatialMapFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-geospatial-map-field-wells-property-builder (new CfnTemplate$GeospatialMapFieldWellsProperty$Builder) id config))


(defn build-cfn-template-geospatial-map-style-options-property-builder
  "The build-cfn-template-geospatial-map-style-options-property-builder function updates a CfnTemplate$GeospatialMapStyleOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GeospatialMapStyleOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `baseMapStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:base-map-style` |
"
  [^CfnTemplate$GeospatialMapStyleOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :base-map-style)]
    (. builder baseMapStyle data))
  (.build builder))


(defn cfn-template-geospatial-map-style-options-property-builder
  "Creates a  `CfnTemplate$GeospatialMapStyleOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-geospatial-map-style-options-property-builder (new CfnTemplate$GeospatialMapStyleOptionsProperty$Builder) id config))


(defn build-cfn-template-geospatial-map-visual-property-builder
  "The build-cfn-template-geospatial-map-visual-property-builder function updates a CfnTemplate$GeospatialMapVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GeospatialMapVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$GeospatialMapConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$GeospatialMapVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-geospatial-map-visual-property-builder
  "Creates a  `CfnTemplate$GeospatialMapVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-geospatial-map-visual-property-builder (new CfnTemplate$GeospatialMapVisualProperty$Builder) id config))


(defn build-cfn-template-geospatial-point-style-options-property-builder
  "The build-cfn-template-geospatial-point-style-options-property-builder function updates a CfnTemplate$GeospatialPointStyleOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GeospatialPointStyleOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `clusterMarkerConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ClusterMarkerConfigurationProperty | [[cdk.support/lookup-entry]] | `:cluster-marker-configuration` |
| `heatmapConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heatmap-configuration` |
| `selectedPointStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-point-style` |
"
  [^CfnTemplate$GeospatialPointStyleOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cluster-marker-configuration)]
    (. builder clusterMarkerConfiguration data))
  (when-let [data (lookup-entry config id :heatmap-configuration)]
    (. builder heatmapConfiguration data))
  (when-let [data (lookup-entry config id :selected-point-style)]
    (. builder selectedPointStyle data))
  (.build builder))


(defn cfn-template-geospatial-point-style-options-property-builder
  "Creates a  `CfnTemplate$GeospatialPointStyleOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-geospatial-point-style-options-property-builder (new CfnTemplate$GeospatialPointStyleOptionsProperty$Builder) id config))


(defn build-cfn-template-geospatial-window-options-property-builder
  "The build-cfn-template-geospatial-window-options-property-builder function updates a CfnTemplate$GeospatialWindowOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GeospatialWindowOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bounds` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bounds` |
| `mapZoomMode` | java.lang.String | [[cdk.support/lookup-entry]] | `:map-zoom-mode` |
"
  [^CfnTemplate$GeospatialWindowOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bounds)]
    (. builder bounds data))
  (when-let [data (lookup-entry config id :map-zoom-mode)]
    (. builder mapZoomMode data))
  (.build builder))


(defn cfn-template-geospatial-window-options-property-builder
  "Creates a  `CfnTemplate$GeospatialWindowOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-geospatial-window-options-property-builder (new CfnTemplate$GeospatialWindowOptionsProperty$Builder) id config))


(defn build-cfn-template-global-table-border-options-property-builder
  "The build-cfn-template-global-table-border-options-property-builder function updates a CfnTemplate$GlobalTableBorderOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GlobalTableBorderOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sideSpecificBorder` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:side-specific-border` |
| `uniformBorder` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:uniform-border` |
"
  [^CfnTemplate$GlobalTableBorderOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :side-specific-border)]
    (. builder sideSpecificBorder data))
  (when-let [data (lookup-entry config id :uniform-border)]
    (. builder uniformBorder data))
  (.build builder))


(defn cfn-template-global-table-border-options-property-builder
  "Creates a  `CfnTemplate$GlobalTableBorderOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-global-table-border-options-property-builder (new CfnTemplate$GlobalTableBorderOptionsProperty$Builder) id config))


(defn build-cfn-template-gradient-color-property-builder
  "The build-cfn-template-gradient-color-property-builder function updates a CfnTemplate$GradientColorProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GradientColorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `stops` | java.util.List | [[cdk.support/lookup-entry]] | `:stops` |
"
  [^CfnTemplate$GradientColorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :stops)]
    (. builder stops data))
  (.build builder))


(defn cfn-template-gradient-color-property-builder
  "Creates a  `CfnTemplate$GradientColorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-gradient-color-property-builder (new CfnTemplate$GradientColorProperty$Builder) id config))


(defn build-cfn-template-gradient-stop-property-builder
  "The build-cfn-template-gradient-stop-property-builder function updates a CfnTemplate$GradientStopProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GradientStopProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `dataValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:data-value` |
| `gradientOffset` | java.lang.Number | [[cdk.support/lookup-entry]] | `:gradient-offset` |
"
  [^CfnTemplate$GradientStopProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :data-value)]
    (. builder dataValue data))
  (when-let [data (lookup-entry config id :gradient-offset)]
    (. builder gradientOffset data))
  (.build builder))


(defn cfn-template-gradient-stop-property-builder
  "Creates a  `CfnTemplate$GradientStopProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-gradient-stop-property-builder (new CfnTemplate$GradientStopProperty$Builder) id config))


(defn build-cfn-template-grid-layout-canvas-size-options-property-builder
  "The build-cfn-template-grid-layout-canvas-size-options-property-builder function updates a CfnTemplate$GridLayoutCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GridLayoutCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `screenCanvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:screen-canvas-size-options` |
"
  [^CfnTemplate$GridLayoutCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :screen-canvas-size-options)]
    (. builder screenCanvasSizeOptions data))
  (.build builder))


(defn cfn-template-grid-layout-canvas-size-options-property-builder
  "Creates a  `CfnTemplate$GridLayoutCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-grid-layout-canvas-size-options-property-builder (new CfnTemplate$GridLayoutCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-template-grid-layout-configuration-property-builder
  "The build-cfn-template-grid-layout-configuration-property-builder function updates a CfnTemplate$GridLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GridLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `elements` | java.util.List | [[cdk.support/lookup-entry]] | `:elements` |
"
  [^CfnTemplate$GridLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (when-let [data (lookup-entry config id :elements)]
    (. builder elements data))
  (.build builder))


(defn cfn-template-grid-layout-configuration-property-builder
  "Creates a  `CfnTemplate$GridLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-grid-layout-configuration-property-builder (new CfnTemplate$GridLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-template-grid-layout-element-property-builder
  "The build-cfn-template-grid-layout-element-property-builder function updates a CfnTemplate$GridLayoutElementProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GridLayoutElementProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnIndex` | java.lang.Number | [[cdk.support/lookup-entry]] | `:column-index` |
| `columnSpan` | java.lang.Number | [[cdk.support/lookup-entry]] | `:column-span` |
| `elementId` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-id` |
| `elementType` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-type` |
| `rowIndex` | java.lang.Number | [[cdk.support/lookup-entry]] | `:row-index` |
| `rowSpan` | java.lang.Number | [[cdk.support/lookup-entry]] | `:row-span` |
"
  [^CfnTemplate$GridLayoutElementProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-index)]
    (. builder columnIndex data))
  (when-let [data (lookup-entry config id :column-span)]
    (. builder columnSpan data))
  (when-let [data (lookup-entry config id :element-id)]
    (. builder elementId data))
  (when-let [data (lookup-entry config id :element-type)]
    (. builder elementType data))
  (when-let [data (lookup-entry config id :row-index)]
    (. builder rowIndex data))
  (when-let [data (lookup-entry config id :row-span)]
    (. builder rowSpan data))
  (.build builder))


(defn cfn-template-grid-layout-element-property-builder
  "Creates a  `CfnTemplate$GridLayoutElementProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-grid-layout-element-property-builder (new CfnTemplate$GridLayoutElementProperty$Builder) id config))


(defn build-cfn-template-grid-layout-screen-canvas-size-options-property-builder
  "The build-cfn-template-grid-layout-screen-canvas-size-options-property-builder function updates a CfnTemplate$GridLayoutScreenCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GridLayoutScreenCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `optimizedViewPortWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:optimized-view-port-width` |
| `resizeOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:resize-option` |
"
  [^CfnTemplate$GridLayoutScreenCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :optimized-view-port-width)]
    (. builder optimizedViewPortWidth data))
  (when-let [data (lookup-entry config id :resize-option)]
    (. builder resizeOption data))
  (.build builder))


(defn cfn-template-grid-layout-screen-canvas-size-options-property-builder
  "Creates a  `CfnTemplate$GridLayoutScreenCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-grid-layout-screen-canvas-size-options-property-builder (new CfnTemplate$GridLayoutScreenCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-template-growth-rate-computation-property-builder
  "The build-cfn-template-growth-rate-computation-property-builder function updates a CfnTemplate$GrowthRateComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$GrowthRateComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:period-size` |
| `time` | software.amazon.awscdk.services.quicksight.CfnTemplate$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.services.quicksight.CfnTemplate$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$GrowthRateComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :period-size)]
    (. builder periodSize data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-growth-rate-computation-property-builder
  "Creates a  `CfnTemplate$GrowthRateComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-growth-rate-computation-property-builder (new CfnTemplate$GrowthRateComputationProperty$Builder) id config))


(defn build-cfn-template-header-footer-section-configuration-property-builder
  "The build-cfn-template-header-footer-section-configuration-property-builder function updates a CfnTemplate$HeaderFooterSectionConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$HeaderFooterSectionConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `layout` | software.amazon.awscdk.services.quicksight.CfnTemplate$SectionLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:layout` |
| `sectionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:section-id` |
| `style` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style` |
"
  [^CfnTemplate$HeaderFooterSectionConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :layout)]
    (. builder layout data))
  (when-let [data (lookup-entry config id :section-id)]
    (. builder sectionId data))
  (when-let [data (lookup-entry config id :style)]
    (. builder style data))
  (.build builder))


(defn cfn-template-header-footer-section-configuration-property-builder
  "Creates a  `CfnTemplate$HeaderFooterSectionConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-header-footer-section-configuration-property-builder (new CfnTemplate$HeaderFooterSectionConfigurationProperty$Builder) id config))


(defn build-cfn-template-heat-map-aggregated-field-wells-property-builder
  "The build-cfn-template-heat-map-aggregated-field-wells-property-builder function updates a CfnTemplate$HeatMapAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$HeatMapAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:columns` |
| `rows` | java.util.List | [[cdk.support/lookup-entry]] | `:rows` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$HeatMapAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (when-let [data (lookup-entry config id :rows)]
    (. builder rows data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-heat-map-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$HeatMapAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-heat-map-aggregated-field-wells-property-builder (new CfnTemplate$HeatMapAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-heat-map-configuration-property-builder
  "The build-cfn-template-heat-map-configuration-property-builder function updates a CfnTemplate$HeatMapConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$HeatMapConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorScale` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColorScaleProperty | [[cdk.support/lookup-entry]] | `:color-scale` |
| `columnLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-label-options` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$HeatMapFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnTemplate$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `rowLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:row-label-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$HeatMapSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnTemplate$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
"
  [^CfnTemplate$HeatMapConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color-scale)]
    (. builder colorScale data))
  (when-let [data (lookup-entry config id :column-label-options)]
    (. builder columnLabelOptions data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :row-label-options)]
    (. builder rowLabelOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (.build builder))


(defn cfn-template-heat-map-configuration-property-builder
  "Creates a  `CfnTemplate$HeatMapConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-heat-map-configuration-property-builder (new CfnTemplate$HeatMapConfigurationProperty$Builder) id config))


(defn build-cfn-template-heat-map-field-wells-property-builder
  "The build-cfn-template-heat-map-field-wells-property-builder function updates a CfnTemplate$HeatMapFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$HeatMapFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatMapAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heat-map-aggregated-field-wells` |
"
  [^CfnTemplate$HeatMapFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :heat-map-aggregated-field-wells)]
    (. builder heatMapAggregatedFieldWells data))
  (.build builder))


(defn cfn-template-heat-map-field-wells-property-builder
  "Creates a  `CfnTemplate$HeatMapFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-heat-map-field-wells-property-builder (new CfnTemplate$HeatMapFieldWellsProperty$Builder) id config))


(defn build-cfn-template-heat-map-sort-configuration-property-builder
  "The build-cfn-template-heat-map-sort-configuration-property-builder function updates a CfnTemplate$HeatMapSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$HeatMapSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatMapColumnItemsLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heat-map-column-items-limit-configuration` |
| `heatMapColumnSort` | java.util.List | [[cdk.support/lookup-entry]] | `:heat-map-column-sort` |
| `heatMapRowItemsLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heat-map-row-items-limit-configuration` |
| `heatMapRowSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heat-map-row-sort` |
"
  [^CfnTemplate$HeatMapSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :heat-map-column-items-limit-configuration)]
    (. builder heatMapColumnItemsLimitConfiguration data))
  (when-let [data (lookup-entry config id :heat-map-column-sort)]
    (. builder heatMapColumnSort data))
  (when-let [data (lookup-entry config id :heat-map-row-items-limit-configuration)]
    (. builder heatMapRowItemsLimitConfiguration data))
  (when-let [data (lookup-entry config id :heat-map-row-sort)]
    (. builder heatMapRowSort data))
  (.build builder))


(defn cfn-template-heat-map-sort-configuration-property-builder
  "Creates a  `CfnTemplate$HeatMapSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-heat-map-sort-configuration-property-builder (new CfnTemplate$HeatMapSortConfigurationProperty$Builder) id config))


(defn build-cfn-template-heat-map-visual-property-builder
  "The build-cfn-template-heat-map-visual-property-builder function updates a CfnTemplate$HeatMapVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$HeatMapVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$HeatMapConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$HeatMapVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-heat-map-visual-property-builder
  "Creates a  `CfnTemplate$HeatMapVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-heat-map-visual-property-builder (new CfnTemplate$HeatMapVisualProperty$Builder) id config))


(defn build-cfn-template-histogram-aggregated-field-wells-property-builder
  "The build-cfn-template-histogram-aggregated-field-wells-property-builder function updates a CfnTemplate$HistogramAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$HistogramAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$HistogramAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-histogram-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$HistogramAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-histogram-aggregated-field-wells-property-builder (new CfnTemplate$HistogramAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-histogram-bin-options-property-builder
  "The build-cfn-template-histogram-bin-options-property-builder function updates a CfnTemplate$HistogramBinOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$HistogramBinOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binCount` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bin-count` |
| `binWidth` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bin-width` |
| `selectedBinType` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-bin-type` |
| `startValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:start-value` |
"
  [^CfnTemplate$HistogramBinOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bin-count)]
    (. builder binCount data))
  (when-let [data (lookup-entry config id :bin-width)]
    (. builder binWidth data))
  (when-let [data (lookup-entry config id :selected-bin-type)]
    (. builder selectedBinType data))
  (when-let [data (lookup-entry config id :start-value)]
    (. builder startValue data))
  (.build builder))


(defn cfn-template-histogram-bin-options-property-builder
  "Creates a  `CfnTemplate$HistogramBinOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-histogram-bin-options-property-builder (new CfnTemplate$HistogramBinOptionsProperty$Builder) id config))


(defn build-cfn-template-histogram-configuration-property-builder
  "The build-cfn-template-histogram-configuration-property-builder function updates a CfnTemplate$HistogramConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$HistogramConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bin-options` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$HistogramFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnTemplate$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |
| `yAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:y-axis-display-options` |
"
  [^CfnTemplate$HistogramConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bin-options)]
    (. builder binOptions data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (when-let [data (lookup-entry config id :x-axis-display-options)]
    (. builder xAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :x-axis-label-options)]
    (. builder xAxisLabelOptions data))
  (when-let [data (lookup-entry config id :y-axis-display-options)]
    (. builder yAxisDisplayOptions data))
  (.build builder))


(defn cfn-template-histogram-configuration-property-builder
  "Creates a  `CfnTemplate$HistogramConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-histogram-configuration-property-builder (new CfnTemplate$HistogramConfigurationProperty$Builder) id config))


(defn build-cfn-template-histogram-field-wells-property-builder
  "The build-cfn-template-histogram-field-wells-property-builder function updates a CfnTemplate$HistogramFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$HistogramFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `histogramAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$HistogramAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:histogram-aggregated-field-wells` |
"
  [^CfnTemplate$HistogramFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :histogram-aggregated-field-wells)]
    (. builder histogramAggregatedFieldWells data))
  (.build builder))


(defn cfn-template-histogram-field-wells-property-builder
  "Creates a  `CfnTemplate$HistogramFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-histogram-field-wells-property-builder (new CfnTemplate$HistogramFieldWellsProperty$Builder) id config))


(defn build-cfn-template-histogram-visual-property-builder
  "The build-cfn-template-histogram-visual-property-builder function updates a CfnTemplate$HistogramVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$HistogramVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$HistogramVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-histogram-visual-property-builder
  "Creates a  `CfnTemplate$HistogramVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-histogram-visual-property-builder (new CfnTemplate$HistogramVisualProperty$Builder) id config))


(defn build-cfn-template-insight-configuration-property-builder
  "The build-cfn-template-insight-configuration-property-builder function updates a CfnTemplate$InsightConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$InsightConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:computations` |
| `customNarrative` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-narrative` |
"
  [^CfnTemplate$InsightConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computations)]
    (. builder computations data))
  (when-let [data (lookup-entry config id :custom-narrative)]
    (. builder customNarrative data))
  (.build builder))


(defn cfn-template-insight-configuration-property-builder
  "Creates a  `CfnTemplate$InsightConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-insight-configuration-property-builder (new CfnTemplate$InsightConfigurationProperty$Builder) id config))


(defn build-cfn-template-insight-visual-property-builder
  "The build-cfn-template-insight-visual-property-builder function updates a CfnTemplate$InsightVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$InsightVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `insightConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:insight-configuration` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$InsightVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :insight-configuration)]
    (. builder insightConfiguration data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-insight-visual-property-builder
  "Creates a  `CfnTemplate$InsightVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-insight-visual-property-builder (new CfnTemplate$InsightVisualProperty$Builder) id config))


(defn build-cfn-template-integer-default-values-property-builder
  "The build-cfn-template-integer-default-values-property-builder function updates a CfnTemplate$IntegerDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$IntegerDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |
"
  [^CfnTemplate$IntegerDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :dynamic-value)]
    (. builder dynamicValue data))
  (when-let [data (lookup-entry config id :static-values)]
    (. builder staticValues data))
  (.build builder))


(defn cfn-template-integer-default-values-property-builder
  "Creates a  `CfnTemplate$IntegerDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-integer-default-values-property-builder (new CfnTemplate$IntegerDefaultValuesProperty$Builder) id config))


(defn build-cfn-template-integer-parameter-declaration-property-builder
  "The build-cfn-template-integer-parameter-declaration-property-builder function updates a CfnTemplate$IntegerParameterDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$IntegerParameterDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-when-unset` |
"
  [^CfnTemplate$IntegerParameterDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-values)]
    (. builder defaultValues data))
  (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
    (. builder mappedDataSetParameters data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :parameter-value-type)]
    (. builder parameterValueType data))
  (when-let [data (lookup-entry config id :value-when-unset)]
    (. builder valueWhenUnset data))
  (.build builder))


(defn cfn-template-integer-parameter-declaration-property-builder
  "Creates a  `CfnTemplate$IntegerParameterDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-integer-parameter-declaration-property-builder (new CfnTemplate$IntegerParameterDeclarationProperty$Builder) id config))


(defn build-cfn-template-integer-value-when-unset-configuration-property-builder
  "The build-cfn-template-integer-value-when-unset-configuration-property-builder function updates a CfnTemplate$IntegerValueWhenUnsetConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$IntegerValueWhenUnsetConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |
"
  [^CfnTemplate$IntegerValueWhenUnsetConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-value)]
    (. builder customValue data))
  (when-let [data (lookup-entry config id :value-when-unset-option)]
    (. builder valueWhenUnsetOption data))
  (.build builder))


(defn cfn-template-integer-value-when-unset-configuration-property-builder
  "Creates a  `CfnTemplate$IntegerValueWhenUnsetConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-integer-value-when-unset-configuration-property-builder (new CfnTemplate$IntegerValueWhenUnsetConfigurationProperty$Builder) id config))


(defn build-cfn-template-items-limit-configuration-property-builder
  "The build-cfn-template-items-limit-configuration-property-builder function updates a CfnTemplate$ItemsLimitConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ItemsLimitConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `itemsLimit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:items-limit` |
| `otherCategories` | java.lang.String | [[cdk.support/lookup-entry]] | `:other-categories` |
"
  [^CfnTemplate$ItemsLimitConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :items-limit)]
    (. builder itemsLimit data))
  (when-let [data (lookup-entry config id :other-categories)]
    (. builder otherCategories data))
  (.build builder))


(defn cfn-template-items-limit-configuration-property-builder
  "Creates a  `CfnTemplate$ItemsLimitConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-items-limit-configuration-property-builder (new CfnTemplate$ItemsLimitConfigurationProperty$Builder) id config))


(defn build-cfn-template-kpi-actual-value-conditional-formatting-property-builder
  "The build-cfn-template-kpi-actual-value-conditional-formatting-property-builder function updates a CfnTemplate$KPIActualValueConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$KPIActualValueConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnTemplate$KPIActualValueConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-template-kpi-actual-value-conditional-formatting-property-builder
  "Creates a  `CfnTemplate$KPIActualValueConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-kpi-actual-value-conditional-formatting-property-builder (new CfnTemplate$KPIActualValueConditionalFormattingProperty$Builder) id config))


(defn build-cfn-template-kpi-comparison-value-conditional-formatting-property-builder
  "The build-cfn-template-kpi-comparison-value-conditional-formatting-property-builder function updates a CfnTemplate$KPIComparisonValueConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$KPIComparisonValueConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnTemplate$KPIComparisonValueConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-template-kpi-comparison-value-conditional-formatting-property-builder
  "Creates a  `CfnTemplate$KPIComparisonValueConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-kpi-comparison-value-conditional-formatting-property-builder (new CfnTemplate$KPIComparisonValueConditionalFormattingProperty$Builder) id config))


(defn build-cfn-template-kpi-conditional-formatting-option-property-builder
  "The build-cfn-template-kpi-conditional-formatting-option-property-builder function updates a CfnTemplate$KPIConditionalFormattingOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$KPIConditionalFormattingOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actualValue` | software.amazon.awscdk.services.quicksight.CfnTemplate$KPIActualValueConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:actual-value` |
| `comparisonValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:comparison-value` |
| `primaryValue` | software.amazon.awscdk.services.quicksight.CfnTemplate$KPIPrimaryValueConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:primary-value` |
| `progressBar` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:progress-bar` |
"
  [^CfnTemplate$KPIConditionalFormattingOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actual-value)]
    (. builder actualValue data))
  (when-let [data (lookup-entry config id :comparison-value)]
    (. builder comparisonValue data))
  (when-let [data (lookup-entry config id :primary-value)]
    (. builder primaryValue data))
  (when-let [data (lookup-entry config id :progress-bar)]
    (. builder progressBar data))
  (.build builder))


(defn cfn-template-kpi-conditional-formatting-option-property-builder
  "Creates a  `CfnTemplate$KPIConditionalFormattingOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-kpi-conditional-formatting-option-property-builder (new CfnTemplate$KPIConditionalFormattingOptionProperty$Builder) id config))


(defn build-cfn-template-kpi-conditional-formatting-property-builder
  "The build-cfn-template-kpi-conditional-formatting-property-builder function updates a CfnTemplate$KPIConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$KPIConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |
"
  [^CfnTemplate$KPIConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :conditional-formatting-options)]
    (. builder conditionalFormattingOptions data))
  (.build builder))


(defn cfn-template-kpi-conditional-formatting-property-builder
  "Creates a  `CfnTemplate$KPIConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-kpi-conditional-formatting-property-builder (new CfnTemplate$KPIConditionalFormattingProperty$Builder) id config))


(defn build-cfn-template-kpi-configuration-property-builder
  "The build-cfn-template-kpi-configuration-property-builder function updates a CfnTemplate$KPIConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$KPIConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `kpiOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$KPIOptionsProperty | [[cdk.support/lookup-entry]] | `:kpi-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
"
  [^CfnTemplate$KPIConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :kpi-options)]
    (. builder kpiOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (.build builder))


(defn cfn-template-kpi-configuration-property-builder
  "Creates a  `CfnTemplate$KPIConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-kpi-configuration-property-builder (new CfnTemplate$KPIConfigurationProperty$Builder) id config))


(defn build-cfn-template-kpi-field-wells-property-builder
  "The build-cfn-template-kpi-field-wells-property-builder function updates a CfnTemplate$KPIFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$KPIFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target-values` |
| `trendGroups` | java.util.List | [[cdk.support/lookup-entry]] | `:trend-groups` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$KPIFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :target-values)]
    (. builder targetValues data))
  (when-let [data (lookup-entry config id :trend-groups)]
    (. builder trendGroups data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-kpi-field-wells-property-builder
  "Creates a  `CfnTemplate$KPIFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-kpi-field-wells-property-builder (new CfnTemplate$KPIFieldWellsProperty$Builder) id config))


(defn build-cfn-template-kpi-options-property-builder
  "The build-cfn-template-kpi-options-property-builder function updates a CfnTemplate$KPIOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$KPIOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comparison` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:comparison` |
| `primaryValueDisplayType` | java.lang.String | [[cdk.support/lookup-entry]] | `:primary-value-display-type` |
| `primaryValueFontConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:primary-value-font-configuration` |
| `progressBar` | software.amazon.awscdk.services.quicksight.CfnTemplate$ProgressBarOptionsProperty | [[cdk.support/lookup-entry]] | `:progress-bar` |
| `secondaryValue` | software.amazon.awscdk.services.quicksight.CfnTemplate$SecondaryValueOptionsProperty | [[cdk.support/lookup-entry]] | `:secondary-value` |
| `secondaryValueFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-value-font-configuration` |
| `sparkline` | software.amazon.awscdk.services.quicksight.CfnTemplate$KPISparklineOptionsProperty | [[cdk.support/lookup-entry]] | `:sparkline` |
| `trendArrows` | software.amazon.awscdk.services.quicksight.CfnTemplate$TrendArrowOptionsProperty | [[cdk.support/lookup-entry]] | `:trend-arrows` |
| `visualLayoutOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$KPIVisualLayoutOptionsProperty | [[cdk.support/lookup-entry]] | `:visual-layout-options` |
"
  [^CfnTemplate$KPIOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :comparison)]
    (. builder comparison data))
  (when-let [data (lookup-entry config id :primary-value-display-type)]
    (. builder primaryValueDisplayType data))
  (when-let [data (lookup-entry config id :primary-value-font-configuration)]
    (. builder primaryValueFontConfiguration data))
  (when-let [data (lookup-entry config id :progress-bar)]
    (. builder progressBar data))
  (when-let [data (lookup-entry config id :secondary-value)]
    (. builder secondaryValue data))
  (when-let [data (lookup-entry config id :secondary-value-font-configuration)]
    (. builder secondaryValueFontConfiguration data))
  (when-let [data (lookup-entry config id :sparkline)]
    (. builder sparkline data))
  (when-let [data (lookup-entry config id :trend-arrows)]
    (. builder trendArrows data))
  (when-let [data (lookup-entry config id :visual-layout-options)]
    (. builder visualLayoutOptions data))
  (.build builder))


(defn cfn-template-kpi-options-property-builder
  "Creates a  `CfnTemplate$KPIOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-kpi-options-property-builder (new CfnTemplate$KPIOptionsProperty$Builder) id config))


(defn build-cfn-template-kpi-primary-value-conditional-formatting-property-builder
  "The build-cfn-template-kpi-primary-value-conditional-formatting-property-builder function updates a CfnTemplate$KPIPrimaryValueConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$KPIPrimaryValueConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.services.quicksight.CfnTemplate$ConditionalFormattingIconProperty | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnTemplate$KPIPrimaryValueConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-template-kpi-primary-value-conditional-formatting-property-builder
  "Creates a  `CfnTemplate$KPIPrimaryValueConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-kpi-primary-value-conditional-formatting-property-builder (new CfnTemplate$KPIPrimaryValueConditionalFormattingProperty$Builder) id config))


(defn build-cfn-template-kpi-progress-bar-conditional-formatting-property-builder
  "The build-cfn-template-kpi-progress-bar-conditional-formatting-property-builder function updates a CfnTemplate$KPIProgressBarConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$KPIProgressBarConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `foregroundColor` | software.amazon.awscdk.services.quicksight.CfnTemplate$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:foreground-color` |
"
  [^CfnTemplate$KPIProgressBarConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :foreground-color)]
    (. builder foregroundColor data))
  (.build builder))


(defn cfn-template-kpi-progress-bar-conditional-formatting-property-builder
  "Creates a  `CfnTemplate$KPIProgressBarConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-kpi-progress-bar-conditional-formatting-property-builder (new CfnTemplate$KPIProgressBarConditionalFormattingProperty$Builder) id config))


(defn build-cfn-template-kpi-sort-configuration-property-builder
  "The build-cfn-template-kpi-sort-configuration-property-builder function updates a CfnTemplate$KPISortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$KPISortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `trendGroupSort` | java.util.List | [[cdk.support/lookup-entry]] | `:trend-group-sort` |
"
  [^CfnTemplate$KPISortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :trend-group-sort)]
    (. builder trendGroupSort data))
  (.build builder))


(defn cfn-template-kpi-sort-configuration-property-builder
  "Creates a  `CfnTemplate$KPISortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-kpi-sort-configuration-property-builder (new CfnTemplate$KPISortConfigurationProperty$Builder) id config))


(defn build-cfn-template-kpi-sparkline-options-property-builder
  "The build-cfn-template-kpi-sparkline-options-property-builder function updates a CfnTemplate$KPISparklineOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$KPISparklineOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `tooltipVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-visibility` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$KPISparklineOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :tooltip-visibility)]
    (. builder tooltipVisibility data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-kpi-sparkline-options-property-builder
  "Creates a  `CfnTemplate$KPISparklineOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-kpi-sparkline-options-property-builder (new CfnTemplate$KPISparklineOptionsProperty$Builder) id config))


(defn build-cfn-template-kpi-visual-layout-options-property-builder
  "The build-cfn-template-kpi-visual-layout-options-property-builder function updates a CfnTemplate$KPIVisualLayoutOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$KPIVisualLayoutOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `standardLayout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:standard-layout` |
"
  [^CfnTemplate$KPIVisualLayoutOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :standard-layout)]
    (. builder standardLayout data))
  (.build builder))


(defn cfn-template-kpi-visual-layout-options-property-builder
  "Creates a  `CfnTemplate$KPIVisualLayoutOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-kpi-visual-layout-options-property-builder (new CfnTemplate$KPIVisualLayoutOptionsProperty$Builder) id config))


(defn build-cfn-template-kpi-visual-property-builder
  "The build-cfn-template-kpi-visual-property-builder function updates a CfnTemplate$KPIVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$KPIVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnTemplate$KPIConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$KPIVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :conditional-formatting)]
    (. builder conditionalFormatting data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-kpi-visual-property-builder
  "Creates a  `CfnTemplate$KPIVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-kpi-visual-property-builder (new CfnTemplate$KPIVisualProperty$Builder) id config))


(defn build-cfn-template-kpi-visual-standard-layout-property-builder
  "The build-cfn-template-kpi-visual-standard-layout-property-builder function updates a CfnTemplate$KPIVisualStandardLayoutProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$KPIVisualStandardLayoutProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnTemplate$KPIVisualStandardLayoutProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-template-kpi-visual-standard-layout-property-builder
  "Creates a  `CfnTemplate$KPIVisualStandardLayoutProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-kpi-visual-standard-layout-property-builder (new CfnTemplate$KPIVisualStandardLayoutProperty$Builder) id config))


(defn build-cfn-template-label-options-property-builder
  "The build-cfn-template-label-options-property-builder function updates a CfnTemplate$LabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$LabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-label-options-property-builder
  "Creates a  `CfnTemplate$LabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-label-options-property-builder (new CfnTemplate$LabelOptionsProperty$Builder) id config))


(defn build-cfn-template-layout-configuration-property-builder
  "The build-cfn-template-layout-configuration-property-builder function updates a CfnTemplate$LayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeFormLayout` | software.amazon.awscdk.services.quicksight.CfnTemplate$FreeFormLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:free-form-layout` |
| `gridLayout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:grid-layout` |
| `sectionBasedLayout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:section-based-layout` |
"
  [^CfnTemplate$LayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :free-form-layout)]
    (. builder freeFormLayout data))
  (when-let [data (lookup-entry config id :grid-layout)]
    (. builder gridLayout data))
  (when-let [data (lookup-entry config id :section-based-layout)]
    (. builder sectionBasedLayout data))
  (.build builder))


(defn cfn-template-layout-configuration-property-builder
  "Creates a  `CfnTemplate$LayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-layout-configuration-property-builder (new CfnTemplate$LayoutConfigurationProperty$Builder) id config))


(defn build-cfn-template-layout-property-builder
  "The build-cfn-template-layout-property-builder function updates a CfnTemplate$LayoutProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LayoutProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configuration` | software.amazon.awscdk.services.quicksight.CfnTemplate$LayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:configuration` |
"
  [^CfnTemplate$LayoutProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :configuration)]
    (. builder configuration data))
  (.build builder))


(defn cfn-template-layout-property-builder
  "Creates a  `CfnTemplate$LayoutProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-layout-property-builder (new CfnTemplate$LayoutProperty$Builder) id config))


(defn build-cfn-template-legend-options-property-builder
  "The build-cfn-template-legend-options-property-builder function updates a CfnTemplate$LegendOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LegendOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |
"
  [^CfnTemplate$LegendOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :height)]
    (. builder height data))
  (when-let [data (lookup-entry config id :position)]
    (. builder position data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (when-let [data (lookup-entry config id :width)]
    (. builder width data))
  (.build builder))


(defn cfn-template-legend-options-property-builder
  "Creates a  `CfnTemplate$LegendOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-legend-options-property-builder (new CfnTemplate$LegendOptionsProperty$Builder) id config))


(defn build-cfn-template-line-chart-aggregated-field-wells-property-builder
  "The build-cfn-template-line-chart-aggregated-field-wells-property-builder function updates a CfnTemplate$LineChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LineChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `smallMultiples` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$LineChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :small-multiples)]
    (. builder smallMultiples data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-line-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$LineChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-line-chart-aggregated-field-wells-property-builder (new CfnTemplate$LineChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-line-chart-configuration-property-builder
  "The build-cfn-template-line-chart-configuration-property-builder function updates a CfnTemplate$LineChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LineChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contributionAnalysisDefaults` | java.util.List | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `defaultSeriesSettings` | software.amazon.awscdk.services.quicksight.CfnTemplate$LineChartDefaultSeriesSettingsProperty | [[cdk.support/lookup-entry]] | `:default-series-settings` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$LineChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `forecastConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:forecast-configurations` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnTemplate$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `secondaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-y-axis-display-options` |
| `secondaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:secondary-y-axis-label-options` |
| `series` | java.util.List | [[cdk.support/lookup-entry]] | `:series` |
| `smallMultiplesOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SmallMultiplesOptionsProperty | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$LineChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnTemplate$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |
"
  [^CfnTemplate$LineChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
    (. builder contributionAnalysisDefaults data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :default-series-settings)]
    (. builder defaultSeriesSettings data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :forecast-configurations)]
    (. builder forecastConfigurations data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
    (. builder primaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
    (. builder primaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :reference-lines)]
    (. builder referenceLines data))
  (when-let [data (lookup-entry config id :secondary-y-axis-display-options)]
    (. builder secondaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :secondary-y-axis-label-options)]
    (. builder secondaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :series)]
    (. builder series data))
  (when-let [data (lookup-entry config id :small-multiples-options)]
    (. builder smallMultiplesOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (when-let [data (lookup-entry config id :x-axis-display-options)]
    (. builder xAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :x-axis-label-options)]
    (. builder xAxisLabelOptions data))
  (.build builder))


(defn cfn-template-line-chart-configuration-property-builder
  "Creates a  `CfnTemplate$LineChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-line-chart-configuration-property-builder (new CfnTemplate$LineChartConfigurationProperty$Builder) id config))


(defn build-cfn-template-line-chart-default-series-settings-property-builder
  "The build-cfn-template-line-chart-default-series-settings-property-builder function updates a CfnTemplate$LineChartDefaultSeriesSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LineChartDefaultSeriesSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `lineStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-style-settings` |
| `markerStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:marker-style-settings` |
"
  [^CfnTemplate$LineChartDefaultSeriesSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-binding)]
    (. builder axisBinding data))
  (when-let [data (lookup-entry config id :line-style-settings)]
    (. builder lineStyleSettings data))
  (when-let [data (lookup-entry config id :marker-style-settings)]
    (. builder markerStyleSettings data))
  (.build builder))


(defn cfn-template-line-chart-default-series-settings-property-builder
  "Creates a  `CfnTemplate$LineChartDefaultSeriesSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-line-chart-default-series-settings-property-builder (new CfnTemplate$LineChartDefaultSeriesSettingsProperty$Builder) id config))


(defn build-cfn-template-line-chart-field-wells-property-builder
  "The build-cfn-template-line-chart-field-wells-property-builder function updates a CfnTemplate$LineChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LineChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineChartAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$LineChartAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:line-chart-aggregated-field-wells` |
"
  [^CfnTemplate$LineChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :line-chart-aggregated-field-wells)]
    (. builder lineChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-template-line-chart-field-wells-property-builder
  "Creates a  `CfnTemplate$LineChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-line-chart-field-wells-property-builder (new CfnTemplate$LineChartFieldWellsProperty$Builder) id config))


(defn build-cfn-template-line-chart-line-style-settings-property-builder
  "The build-cfn-template-line-chart-line-style-settings-property-builder function updates a CfnTemplate$LineChartLineStyleSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LineChartLineStyleSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineInterpolation` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-interpolation` |
| `lineStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-style` |
| `lineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-visibility` |
| `lineWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-width` |
"
  [^CfnTemplate$LineChartLineStyleSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :line-interpolation)]
    (. builder lineInterpolation data))
  (when-let [data (lookup-entry config id :line-style)]
    (. builder lineStyle data))
  (when-let [data (lookup-entry config id :line-visibility)]
    (. builder lineVisibility data))
  (when-let [data (lookup-entry config id :line-width)]
    (. builder lineWidth data))
  (.build builder))


(defn cfn-template-line-chart-line-style-settings-property-builder
  "Creates a  `CfnTemplate$LineChartLineStyleSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-line-chart-line-style-settings-property-builder (new CfnTemplate$LineChartLineStyleSettingsProperty$Builder) id config))


(defn build-cfn-template-line-chart-marker-style-settings-property-builder
  "The build-cfn-template-line-chart-marker-style-settings-property-builder function updates a CfnTemplate$LineChartMarkerStyleSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LineChartMarkerStyleSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `markerColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-color` |
| `markerShape` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-shape` |
| `markerSize` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-size` |
| `markerVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-visibility` |
"
  [^CfnTemplate$LineChartMarkerStyleSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :marker-color)]
    (. builder markerColor data))
  (when-let [data (lookup-entry config id :marker-shape)]
    (. builder markerShape data))
  (when-let [data (lookup-entry config id :marker-size)]
    (. builder markerSize data))
  (when-let [data (lookup-entry config id :marker-visibility)]
    (. builder markerVisibility data))
  (.build builder))


(defn cfn-template-line-chart-marker-style-settings-property-builder
  "Creates a  `CfnTemplate$LineChartMarkerStyleSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-line-chart-marker-style-settings-property-builder (new CfnTemplate$LineChartMarkerStyleSettingsProperty$Builder) id config))


(defn build-cfn-template-line-chart-series-settings-property-builder
  "The build-cfn-template-line-chart-series-settings-property-builder function updates a CfnTemplate$LineChartSeriesSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LineChartSeriesSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-style-settings` |
| `markerStyleSettings` | software.amazon.awscdk.services.quicksight.CfnTemplate$LineChartMarkerStyleSettingsProperty | [[cdk.support/lookup-entry]] | `:marker-style-settings` |
"
  [^CfnTemplate$LineChartSeriesSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :line-style-settings)]
    (. builder lineStyleSettings data))
  (when-let [data (lookup-entry config id :marker-style-settings)]
    (. builder markerStyleSettings data))
  (.build builder))


(defn cfn-template-line-chart-series-settings-property-builder
  "Creates a  `CfnTemplate$LineChartSeriesSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-line-chart-series-settings-property-builder (new CfnTemplate$LineChartSeriesSettingsProperty$Builder) id config))


(defn build-cfn-template-line-chart-sort-configuration-property-builder
  "The build-cfn-template-line-chart-sort-configuration-property-builder function updates a CfnTemplate$LineChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LineChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit-configuration` |
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:color-items-limit-configuration` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |
"
  [^CfnTemplate$LineChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit-configuration)]
    (. builder categoryItemsLimitConfiguration data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :color-items-limit-configuration)]
    (. builder colorItemsLimitConfiguration data))
  (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
    (. builder smallMultiplesLimitConfiguration data))
  (when-let [data (lookup-entry config id :small-multiples-sort)]
    (. builder smallMultiplesSort data))
  (.build builder))


(defn cfn-template-line-chart-sort-configuration-property-builder
  "Creates a  `CfnTemplate$LineChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-line-chart-sort-configuration-property-builder (new CfnTemplate$LineChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-template-line-chart-visual-property-builder
  "The build-cfn-template-line-chart-visual-property-builder function updates a CfnTemplate$LineChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LineChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$LineChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$LineChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-line-chart-visual-property-builder
  "Creates a  `CfnTemplate$LineChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-line-chart-visual-property-builder (new CfnTemplate$LineChartVisualProperty$Builder) id config))


(defn build-cfn-template-line-series-axis-display-options-property-builder
  "The build-cfn-template-line-series-axis-display-options-property-builder function updates a CfnTemplate$LineSeriesAxisDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LineSeriesAxisDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:axis-options` |
| `missingDataConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:missing-data-configurations` |
"
  [^CfnTemplate$LineSeriesAxisDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-options)]
    (. builder axisOptions data))
  (when-let [data (lookup-entry config id :missing-data-configurations)]
    (. builder missingDataConfigurations data))
  (.build builder))


(defn cfn-template-line-series-axis-display-options-property-builder
  "Creates a  `CfnTemplate$LineSeriesAxisDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-line-series-axis-display-options-property-builder (new CfnTemplate$LineSeriesAxisDisplayOptionsProperty$Builder) id config))


(defn build-cfn-template-list-control-display-options-property-builder
  "The build-cfn-template-list-control-display-options-property-builder function updates a CfnTemplate$ListControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ListControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `searchOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ListControlSearchOptionsProperty | [[cdk.support/lookup-entry]] | `:search-options` |
| `selectAllOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ListControlSelectAllOptionsProperty | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnTemplate$ListControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :search-options)]
    (. builder searchOptions data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-template-list-control-display-options-property-builder
  "Creates a  `CfnTemplate$ListControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-list-control-display-options-property-builder (new CfnTemplate$ListControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-template-list-control-search-options-property-builder
  "The build-cfn-template-list-control-search-options-property-builder function updates a CfnTemplate$ListControlSearchOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ListControlSearchOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$ListControlSearchOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-list-control-search-options-property-builder
  "Creates a  `CfnTemplate$ListControlSearchOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-list-control-search-options-property-builder (new CfnTemplate$ListControlSearchOptionsProperty$Builder) id config))


(defn build-cfn-template-list-control-select-all-options-property-builder
  "The build-cfn-template-list-control-select-all-options-property-builder function updates a CfnTemplate$ListControlSelectAllOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ListControlSelectAllOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$ListControlSelectAllOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-list-control-select-all-options-property-builder
  "Creates a  `CfnTemplate$ListControlSelectAllOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-list-control-select-all-options-property-builder (new CfnTemplate$ListControlSelectAllOptionsProperty$Builder) id config))


(defn build-cfn-template-loading-animation-property-builder
  "The build-cfn-template-loading-animation-property-builder function updates a CfnTemplate$LoadingAnimationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LoadingAnimationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$LoadingAnimationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-loading-animation-property-builder
  "Creates a  `CfnTemplate$LoadingAnimationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-loading-animation-property-builder (new CfnTemplate$LoadingAnimationProperty$Builder) id config))


(defn build-cfn-template-local-navigation-configuration-property-builder
  "The build-cfn-template-local-navigation-configuration-property-builder function updates a CfnTemplate$LocalNavigationConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LocalNavigationConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetSheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:target-sheet-id` |
"
  [^CfnTemplate$LocalNavigationConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :target-sheet-id)]
    (. builder targetSheetId data))
  (.build builder))


(defn cfn-template-local-navigation-configuration-property-builder
  "Creates a  `CfnTemplate$LocalNavigationConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-local-navigation-configuration-property-builder (new CfnTemplate$LocalNavigationConfigurationProperty$Builder) id config))


(defn build-cfn-template-long-format-text-property-builder
  "The build-cfn-template-long-format-text-property-builder function updates a CfnTemplate$LongFormatTextProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$LongFormatTextProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `plainText` | java.lang.String | [[cdk.support/lookup-entry]] | `:plain-text` |
| `richText` | java.lang.String | [[cdk.support/lookup-entry]] | `:rich-text` |
"
  [^CfnTemplate$LongFormatTextProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :plain-text)]
    (. builder plainText data))
  (when-let [data (lookup-entry config id :rich-text)]
    (. builder richText data))
  (.build builder))


(defn cfn-template-long-format-text-property-builder
  "Creates a  `CfnTemplate$LongFormatTextProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-long-format-text-property-builder (new CfnTemplate$LongFormatTextProperty$Builder) id config))


(defn build-cfn-template-mapped-data-set-parameter-property-builder
  "The build-cfn-template-mapped-data-set-parameter-property-builder function updates a CfnTemplate$MappedDataSetParameterProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$MappedDataSetParameterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `dataSetParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-parameter-name` |
"
  [^CfnTemplate$MappedDataSetParameterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :data-set-parameter-name)]
    (. builder dataSetParameterName data))
  (.build builder))


(defn cfn-template-mapped-data-set-parameter-property-builder
  "Creates a  `CfnTemplate$MappedDataSetParameterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-mapped-data-set-parameter-property-builder (new CfnTemplate$MappedDataSetParameterProperty$Builder) id config))


(defn build-cfn-template-maximum-label-type-property-builder
  "The build-cfn-template-maximum-label-type-property-builder function updates a CfnTemplate$MaximumLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$MaximumLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$MaximumLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-maximum-label-type-property-builder
  "Creates a  `CfnTemplate$MaximumLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-maximum-label-type-property-builder (new CfnTemplate$MaximumLabelTypeProperty$Builder) id config))


(defn build-cfn-template-maximum-minimum-computation-property-builder
  "The build-cfn-template-maximum-minimum-computation-property-builder function updates a CfnTemplate$MaximumMinimumComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$MaximumMinimumComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.services.quicksight.CfnTemplate$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$MaximumMinimumComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-maximum-minimum-computation-property-builder
  "Creates a  `CfnTemplate$MaximumMinimumComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-maximum-minimum-computation-property-builder (new CfnTemplate$MaximumMinimumComputationProperty$Builder) id config))


(defn build-cfn-template-measure-field-property-builder
  "The build-cfn-template-measure-field-property-builder function updates a CfnTemplate$MeasureFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$MeasureFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `calculatedMeasureField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:calculated-measure-field` |
| `categoricalMeasureField` | software.amazon.awscdk.services.quicksight.CfnTemplate$CategoricalMeasureFieldProperty | [[cdk.support/lookup-entry]] | `:categorical-measure-field` |
| `dateMeasureField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-measure-field` |
| `numericalMeasureField` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericalMeasureFieldProperty | [[cdk.support/lookup-entry]] | `:numerical-measure-field` |
"
  [^CfnTemplate$MeasureFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :calculated-measure-field)]
    (. builder calculatedMeasureField data))
  (when-let [data (lookup-entry config id :categorical-measure-field)]
    (. builder categoricalMeasureField data))
  (when-let [data (lookup-entry config id :date-measure-field)]
    (. builder dateMeasureField data))
  (when-let [data (lookup-entry config id :numerical-measure-field)]
    (. builder numericalMeasureField data))
  (.build builder))


(defn cfn-template-measure-field-property-builder
  "Creates a  `CfnTemplate$MeasureFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-measure-field-property-builder (new CfnTemplate$MeasureFieldProperty$Builder) id config))


(defn build-cfn-template-metric-comparison-computation-property-builder
  "The build-cfn-template-metric-comparison-computation-property-builder function updates a CfnTemplate$MetricComparisonComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$MetricComparisonComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `fromValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:from-value` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `targetValue` | software.amazon.awscdk.services.quicksight.CfnTemplate$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:target-value` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
"
  [^CfnTemplate$MetricComparisonComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :from-value)]
    (. builder fromValue data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :target-value)]
    (. builder targetValue data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (.build builder))


(defn cfn-template-metric-comparison-computation-property-builder
  "Creates a  `CfnTemplate$MetricComparisonComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-metric-comparison-computation-property-builder (new CfnTemplate$MetricComparisonComputationProperty$Builder) id config))


(defn build-cfn-template-minimum-label-type-property-builder
  "The build-cfn-template-minimum-label-type-property-builder function updates a CfnTemplate$MinimumLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$MinimumLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$MinimumLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-minimum-label-type-property-builder
  "Creates a  `CfnTemplate$MinimumLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-minimum-label-type-property-builder (new CfnTemplate$MinimumLabelTypeProperty$Builder) id config))


(defn build-cfn-template-missing-data-configuration-property-builder
  "The build-cfn-template-missing-data-configuration-property-builder function updates a CfnTemplate$MissingDataConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$MissingDataConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treatmentOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:treatment-option` |
"
  [^CfnTemplate$MissingDataConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :treatment-option)]
    (. builder treatmentOption data))
  (.build builder))


(defn cfn-template-missing-data-configuration-property-builder
  "Creates a  `CfnTemplate$MissingDataConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-missing-data-configuration-property-builder (new CfnTemplate$MissingDataConfigurationProperty$Builder) id config))


(defn build-cfn-template-negative-value-configuration-property-builder
  "The build-cfn-template-negative-value-configuration-property-builder function updates a CfnTemplate$NegativeValueConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$NegativeValueConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayMode` | java.lang.String | [[cdk.support/lookup-entry]] | `:display-mode` |
"
  [^CfnTemplate$NegativeValueConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-mode)]
    (. builder displayMode data))
  (.build builder))


(defn cfn-template-negative-value-configuration-property-builder
  "Creates a  `CfnTemplate$NegativeValueConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-negative-value-configuration-property-builder (new CfnTemplate$NegativeValueConfigurationProperty$Builder) id config))


(defn build-cfn-template-null-value-format-configuration-property-builder
  "The build-cfn-template-null-value-format-configuration-property-builder function updates a CfnTemplate$NullValueFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$NullValueFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `nullString` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-string` |
"
  [^CfnTemplate$NullValueFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :null-string)]
    (. builder nullString data))
  (.build builder))


(defn cfn-template-null-value-format-configuration-property-builder
  "Creates a  `CfnTemplate$NullValueFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-null-value-format-configuration-property-builder (new CfnTemplate$NullValueFormatConfigurationProperty$Builder) id config))


(defn build-cfn-template-number-display-format-configuration-property-builder
  "The build-cfn-template-number-display-format-configuration-property-builder function updates a CfnTemplate$NumberDisplayFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$NumberDisplayFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NegativeValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numberScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:number-scale` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |
"
  [^CfnTemplate$NumberDisplayFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :decimal-places-configuration)]
    (. builder decimalPlacesConfiguration data))
  (when-let [data (lookup-entry config id :negative-value-configuration)]
    (. builder negativeValueConfiguration data))
  (when-let [data (lookup-entry config id :null-value-format-configuration)]
    (. builder nullValueFormatConfiguration data))
  (when-let [data (lookup-entry config id :number-scale)]
    (. builder numberScale data))
  (when-let [data (lookup-entry config id :prefix)]
    (. builder prefix data))
  (when-let [data (lookup-entry config id :separator-configuration)]
    (. builder separatorConfiguration data))
  (when-let [data (lookup-entry config id :suffix)]
    (. builder suffix data))
  (.build builder))


(defn cfn-template-number-display-format-configuration-property-builder
  "Creates a  `CfnTemplate$NumberDisplayFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-number-display-format-configuration-property-builder (new CfnTemplate$NumberDisplayFormatConfigurationProperty$Builder) id config))


(defn build-cfn-template-number-format-configuration-property-builder
  "The build-cfn-template-number-format-configuration-property-builder function updates a CfnTemplate$NumberFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$NumberFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
"
  [^CfnTemplate$NumberFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (.build builder))


(defn cfn-template-number-format-configuration-property-builder
  "Creates a  `CfnTemplate$NumberFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-number-format-configuration-property-builder (new CfnTemplate$NumberFormatConfigurationProperty$Builder) id config))


(defn build-cfn-template-numeric-axis-options-property-builder
  "The build-cfn-template-numeric-axis-options-property-builder function updates a CfnTemplate$NumericAxisOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$NumericAxisOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `range` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range` |
| `scale` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scale` |
"
  [^CfnTemplate$NumericAxisOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :range)]
    (. builder range data))
  (when-let [data (lookup-entry config id :scale)]
    (. builder scale data))
  (.build builder))


(defn cfn-template-numeric-axis-options-property-builder
  "Creates a  `CfnTemplate$NumericAxisOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-numeric-axis-options-property-builder (new CfnTemplate$NumericAxisOptionsProperty$Builder) id config))


(defn build-cfn-template-numeric-equality-drill-down-filter-property-builder
  "The build-cfn-template-numeric-equality-drill-down-filter-property-builder function updates a CfnTemplate$NumericEqualityDrillDownFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$NumericEqualityDrillDownFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$NumericEqualityDrillDownFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-numeric-equality-drill-down-filter-property-builder
  "Creates a  `CfnTemplate$NumericEqualityDrillDownFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-numeric-equality-drill-down-filter-property-builder (new CfnTemplate$NumericEqualityDrillDownFilterProperty$Builder) id config))


(defn build-cfn-template-numeric-equality-filter-property-builder
  "The build-cfn-template-numeric-equality-filter-property-builder function updates a CfnTemplate$NumericEqualityFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$NumericEqualityFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$NumericEqualityFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :match-operator)]
    (. builder matchOperator data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-numeric-equality-filter-property-builder
  "Creates a  `CfnTemplate$NumericEqualityFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-numeric-equality-filter-property-builder (new CfnTemplate$NumericEqualityFilterProperty$Builder) id config))


(defn build-cfn-template-numeric-format-configuration-property-builder
  "The build-cfn-template-numeric-format-configuration-property-builder function updates a CfnTemplate$NumericFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$NumericFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `currencyDisplayFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:currency-display-format-configuration` |
| `numberDisplayFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumberDisplayFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:number-display-format-configuration` |
| `percentageDisplayFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:percentage-display-format-configuration` |
"
  [^CfnTemplate$NumericFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :currency-display-format-configuration)]
    (. builder currencyDisplayFormatConfiguration data))
  (when-let [data (lookup-entry config id :number-display-format-configuration)]
    (. builder numberDisplayFormatConfiguration data))
  (when-let [data (lookup-entry config id :percentage-display-format-configuration)]
    (. builder percentageDisplayFormatConfiguration data))
  (.build builder))


(defn cfn-template-numeric-format-configuration-property-builder
  "Creates a  `CfnTemplate$NumericFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-numeric-format-configuration-property-builder (new CfnTemplate$NumericFormatConfigurationProperty$Builder) id config))


(defn build-cfn-template-numeric-range-filter-property-builder
  "The build-cfn-template-numeric-range-filter-property-builder function updates a CfnTemplate$NumericRangeFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$NumericRangeFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnTemplate$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `includeMaximum` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:include-maximum` |
| `includeMinimum` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:include-minimum` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `rangeMaximum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-maximum` |
| `rangeMinimum` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericRangeFilterValueProperty | [[cdk.support/lookup-entry]] | `:range-minimum` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
"
  [^CfnTemplate$NumericRangeFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :include-maximum)]
    (. builder includeMaximum data))
  (when-let [data (lookup-entry config id :include-minimum)]
    (. builder includeMinimum data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :range-maximum)]
    (. builder rangeMaximum data))
  (when-let [data (lookup-entry config id :range-minimum)]
    (. builder rangeMinimum data))
  (when-let [data (lookup-entry config id :select-all-options)]
    (. builder selectAllOptions data))
  (.build builder))


(defn cfn-template-numeric-range-filter-property-builder
  "Creates a  `CfnTemplate$NumericRangeFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-numeric-range-filter-property-builder (new CfnTemplate$NumericRangeFilterProperty$Builder) id config))


(defn build-cfn-template-numeric-range-filter-value-property-builder
  "The build-cfn-template-numeric-range-filter-value-property-builder function updates a CfnTemplate$NumericRangeFilterValueProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$NumericRangeFilterValueProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameter` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter` |
| `staticValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:static-value` |
"
  [^CfnTemplate$NumericRangeFilterValueProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :parameter)]
    (. builder parameter data))
  (when-let [data (lookup-entry config id :static-value)]
    (. builder staticValue data))
  (.build builder))


(defn cfn-template-numeric-range-filter-value-property-builder
  "Creates a  `CfnTemplate$NumericRangeFilterValueProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-numeric-range-filter-value-property-builder (new CfnTemplate$NumericRangeFilterValueProperty$Builder) id config))


(defn build-cfn-template-numeric-separator-configuration-property-builder
  "The build-cfn-template-numeric-separator-configuration-property-builder function updates a CfnTemplate$NumericSeparatorConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$NumericSeparatorConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalSeparator` | java.lang.String | [[cdk.support/lookup-entry]] | `:decimal-separator` |
| `thousandsSeparator` | software.amazon.awscdk.services.quicksight.CfnTemplate$ThousandSeparatorOptionsProperty | [[cdk.support/lookup-entry]] | `:thousands-separator` |
"
  [^CfnTemplate$NumericSeparatorConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :decimal-separator)]
    (. builder decimalSeparator data))
  (when-let [data (lookup-entry config id :thousands-separator)]
    (. builder thousandsSeparator data))
  (.build builder))


(defn cfn-template-numeric-separator-configuration-property-builder
  "Creates a  `CfnTemplate$NumericSeparatorConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-numeric-separator-configuration-property-builder (new CfnTemplate$NumericSeparatorConfigurationProperty$Builder) id config))


(defn build-cfn-template-numerical-aggregation-function-property-builder
  "The build-cfn-template-numerical-aggregation-function-property-builder function updates a CfnTemplate$NumericalAggregationFunctionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$NumericalAggregationFunctionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentileAggregation` | software.amazon.awscdk.services.quicksight.CfnTemplate$PercentileAggregationProperty | [[cdk.support/lookup-entry]] | `:percentile-aggregation` |
| `simpleNumericalAggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-numerical-aggregation` |
"
  [^CfnTemplate$NumericalAggregationFunctionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :percentile-aggregation)]
    (. builder percentileAggregation data))
  (when-let [data (lookup-entry config id :simple-numerical-aggregation)]
    (. builder simpleNumericalAggregation data))
  (.build builder))


(defn cfn-template-numerical-aggregation-function-property-builder
  "Creates a  `CfnTemplate$NumericalAggregationFunctionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-numerical-aggregation-function-property-builder (new CfnTemplate$NumericalAggregationFunctionProperty$Builder) id config))


(defn build-cfn-template-numerical-dimension-field-property-builder
  "The build-cfn-template-numerical-dimension-field-property-builder function updates a CfnTemplate$NumericalDimensionFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$NumericalDimensionFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnTemplate$NumericalDimensionFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-template-numerical-dimension-field-property-builder
  "Creates a  `CfnTemplate$NumericalDimensionFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-numerical-dimension-field-property-builder (new CfnTemplate$NumericalDimensionFieldProperty$Builder) id config))


(defn build-cfn-template-numerical-measure-field-property-builder
  "The build-cfn-template-numerical-measure-field-property-builder function updates a CfnTemplate$NumericalMeasureFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$NumericalMeasureFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericalAggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumberFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
"
  [^CfnTemplate$NumericalMeasureFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-function)]
    (. builder aggregationFunction data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (.build builder))


(defn cfn-template-numerical-measure-field-property-builder
  "Creates a  `CfnTemplate$NumericalMeasureFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-numerical-measure-field-property-builder (new CfnTemplate$NumericalMeasureFieldProperty$Builder) id config))


(defn build-cfn-template-pagination-configuration-property-builder
  "The build-cfn-template-pagination-configuration-property-builder function updates a CfnTemplate$PaginationConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PaginationConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pageNumber` | java.lang.Number | [[cdk.support/lookup-entry]] | `:page-number` |
| `pageSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:page-size` |
"
  [^CfnTemplate$PaginationConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :page-number)]
    (. builder pageNumber data))
  (when-let [data (lookup-entry config id :page-size)]
    (. builder pageSize data))
  (.build builder))


(defn cfn-template-pagination-configuration-property-builder
  "Creates a  `CfnTemplate$PaginationConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pagination-configuration-property-builder (new CfnTemplate$PaginationConfigurationProperty$Builder) id config))


(defn build-cfn-template-panel-configuration-property-builder
  "The build-cfn-template-panel-configuration-property-builder function updates a CfnTemplate$PanelConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PanelConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-color` |
| `backgroundVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-visibility` |
| `borderColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-color` |
| `borderStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-style` |
| `borderThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-thickness` |
| `borderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-visibility` |
| `gutterSpacing` | java.lang.String | [[cdk.support/lookup-entry]] | `:gutter-spacing` |
| `gutterVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:gutter-visibility` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnTemplate$PanelConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-color)]
    (. builder backgroundColor data))
  (when-let [data (lookup-entry config id :background-visibility)]
    (. builder backgroundVisibility data))
  (when-let [data (lookup-entry config id :border-color)]
    (. builder borderColor data))
  (when-let [data (lookup-entry config id :border-style)]
    (. builder borderStyle data))
  (when-let [data (lookup-entry config id :border-thickness)]
    (. builder borderThickness data))
  (when-let [data (lookup-entry config id :border-visibility)]
    (. builder borderVisibility data))
  (when-let [data (lookup-entry config id :gutter-spacing)]
    (. builder gutterSpacing data))
  (when-let [data (lookup-entry config id :gutter-visibility)]
    (. builder gutterVisibility data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-template-panel-configuration-property-builder
  "Creates a  `CfnTemplate$PanelConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-panel-configuration-property-builder (new CfnTemplate$PanelConfigurationProperty$Builder) id config))


(defn build-cfn-template-panel-title-options-property-builder
  "The build-cfn-template-panel-title-options-property-builder function updates a CfnTemplate$PanelTitleOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PanelTitleOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `horizontalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-text-alignment` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$PanelTitleOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (when-let [data (lookup-entry config id :horizontal-text-alignment)]
    (. builder horizontalTextAlignment data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-panel-title-options-property-builder
  "Creates a  `CfnTemplate$PanelTitleOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-panel-title-options-property-builder (new CfnTemplate$PanelTitleOptionsProperty$Builder) id config))


(defn build-cfn-template-parameter-control-property-builder
  "The build-cfn-template-parameter-control-property-builder function updates a CfnTemplate$ParameterControlProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ParameterControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimePicker` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-time-picker` |
| `dropdown` | software.amazon.awscdk.services.quicksight.CfnTemplate$ParameterDropDownControlProperty | [[cdk.support/lookup-entry]] | `:dropdown` |
| `list` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:list` |
| `slider` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:slider` |
| `textArea` | software.amazon.awscdk.services.quicksight.CfnTemplate$ParameterTextAreaControlProperty | [[cdk.support/lookup-entry]] | `:text-area` |
| `textField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-field` |
"
  [^CfnTemplate$ParameterControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-picker)]
    (. builder dateTimePicker data))
  (when-let [data (lookup-entry config id :dropdown)]
    (. builder dropdown data))
  (when-let [data (lookup-entry config id :list)]
    (. builder list data))
  (when-let [data (lookup-entry config id :slider)]
    (. builder slider data))
  (when-let [data (lookup-entry config id :text-area)]
    (. builder textArea data))
  (when-let [data (lookup-entry config id :text-field)]
    (. builder textField data))
  (.build builder))


(defn cfn-template-parameter-control-property-builder
  "Creates a  `CfnTemplate$ParameterControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-parameter-control-property-builder (new CfnTemplate$ParameterControlProperty$Builder) id config))


(defn build-cfn-template-parameter-date-time-picker-control-property-builder
  "The build-cfn-template-parameter-date-time-picker-control-property-builder function updates a CfnTemplate$ParameterDateTimePickerControlProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ParameterDateTimePickerControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$DateTimePickerControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnTemplate$ParameterDateTimePickerControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-template-parameter-date-time-picker-control-property-builder
  "Creates a  `CfnTemplate$ParameterDateTimePickerControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-parameter-date-time-picker-control-property-builder (new CfnTemplate$ParameterDateTimePickerControlProperty$Builder) id config))


(defn build-cfn-template-parameter-declaration-property-builder
  "The build-cfn-template-parameter-declaration-property-builder function updates a CfnTemplate$ParameterDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ParameterDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeParameterDeclaration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-time-parameter-declaration` |
| `decimalParameterDeclaration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-parameter-declaration` |
| `integerParameterDeclaration` | software.amazon.awscdk.services.quicksight.CfnTemplate$IntegerParameterDeclarationProperty | [[cdk.support/lookup-entry]] | `:integer-parameter-declaration` |
| `stringParameterDeclaration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:string-parameter-declaration` |
"
  [^CfnTemplate$ParameterDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-parameter-declaration)]
    (. builder dateTimeParameterDeclaration data))
  (when-let [data (lookup-entry config id :decimal-parameter-declaration)]
    (. builder decimalParameterDeclaration data))
  (when-let [data (lookup-entry config id :integer-parameter-declaration)]
    (. builder integerParameterDeclaration data))
  (when-let [data (lookup-entry config id :string-parameter-declaration)]
    (. builder stringParameterDeclaration data))
  (.build builder))


(defn cfn-template-parameter-declaration-property-builder
  "Creates a  `CfnTemplate$ParameterDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-parameter-declaration-property-builder (new CfnTemplate$ParameterDeclarationProperty$Builder) id config))


(defn build-cfn-template-parameter-drop-down-control-property-builder
  "The build-cfn-template-parameter-drop-down-control-property-builder function updates a CfnTemplate$ParameterDropDownControlProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ParameterDropDownControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$DropDownControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnTemplate$ParameterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnTemplate$ParameterDropDownControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cascading-control-configuration)]
    (. builder cascadingControlConfiguration data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-template-parameter-drop-down-control-property-builder
  "Creates a  `CfnTemplate$ParameterDropDownControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-parameter-drop-down-control-property-builder (new CfnTemplate$ParameterDropDownControlProperty$Builder) id config))


(defn build-cfn-template-parameter-list-control-property-builder
  "The build-cfn-template-parameter-list-control-property-builder function updates a CfnTemplate$ParameterListControlProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ParameterListControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnTemplate$ParameterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnTemplate$ParameterListControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cascading-control-configuration)]
    (. builder cascadingControlConfiguration data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :selectable-values)]
    (. builder selectableValues data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-template-parameter-list-control-property-builder
  "Creates a  `CfnTemplate$ParameterListControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-parameter-list-control-property-builder (new CfnTemplate$ParameterListControlProperty$Builder) id config))


(defn build-cfn-template-parameter-selectable-values-property-builder
  "The build-cfn-template-parameter-selectable-values-property-builder function updates a CfnTemplate$ParameterSelectableValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ParameterSelectableValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `linkToDataSetColumn` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:link-to-data-set-column` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$ParameterSelectableValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :link-to-data-set-column)]
    (. builder linkToDataSetColumn data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-parameter-selectable-values-property-builder
  "Creates a  `CfnTemplate$ParameterSelectableValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-parameter-selectable-values-property-builder (new CfnTemplate$ParameterSelectableValuesProperty$Builder) id config))


(defn build-cfn-template-parameter-slider-control-property-builder
  "The build-cfn-template-parameter-slider-control-property-builder function updates a CfnTemplate$ParameterSliderControlProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ParameterSliderControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnTemplate$ParameterSliderControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :maximum-value)]
    (. builder maximumValue data))
  (when-let [data (lookup-entry config id :minimum-value)]
    (. builder minimumValue data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :step-size)]
    (. builder stepSize data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-template-parameter-slider-control-property-builder
  "Creates a  `CfnTemplate$ParameterSliderControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-parameter-slider-control-property-builder (new CfnTemplate$ParameterSliderControlProperty$Builder) id config))


(defn build-cfn-template-parameter-text-area-control-property-builder
  "The build-cfn-template-parameter-text-area-control-property-builder function updates a CfnTemplate$ParameterTextAreaControlProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ParameterTextAreaControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$TextAreaControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnTemplate$ParameterTextAreaControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :delimiter)]
    (. builder delimiter data))
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-template-parameter-text-area-control-property-builder
  "Creates a  `CfnTemplate$ParameterTextAreaControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-parameter-text-area-control-property-builder (new CfnTemplate$ParameterTextAreaControlProperty$Builder) id config))


(defn build-cfn-template-parameter-text-field-control-property-builder
  "The build-cfn-template-parameter-text-field-control-property-builder function updates a CfnTemplate$ParameterTextFieldControlProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ParameterTextFieldControlProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
"
  [^CfnTemplate$ParameterTextFieldControlProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-options)]
    (. builder displayOptions data))
  (when-let [data (lookup-entry config id :parameter-control-id)]
    (. builder parameterControlId data))
  (when-let [data (lookup-entry config id :source-parameter-name)]
    (. builder sourceParameterName data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (.build builder))


(defn cfn-template-parameter-text-field-control-property-builder
  "Creates a  `CfnTemplate$ParameterTextFieldControlProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-parameter-text-field-control-property-builder (new CfnTemplate$ParameterTextFieldControlProperty$Builder) id config))


(defn build-cfn-template-percent-visible-range-property-builder
  "The build-cfn-template-percent-visible-range-property-builder function updates a CfnTemplate$PercentVisibleRangeProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PercentVisibleRangeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `from` | java.lang.Number | [[cdk.support/lookup-entry]] | `:from` |
| `to` | java.lang.Number | [[cdk.support/lookup-entry]] | `:to` |
"
  [^CfnTemplate$PercentVisibleRangeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :from)]
    (. builder from data))
  (when-let [data (lookup-entry config id :to)]
    (. builder to data))
  (.build builder))


(defn cfn-template-percent-visible-range-property-builder
  "Creates a  `CfnTemplate$PercentVisibleRangeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-percent-visible-range-property-builder (new CfnTemplate$PercentVisibleRangeProperty$Builder) id config))


(defn build-cfn-template-percentage-display-format-configuration-property-builder
  "The build-cfn-template-percentage-display-format-configuration-property-builder function updates a CfnTemplate$PercentageDisplayFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PercentageDisplayFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |
"
  [^CfnTemplate$PercentageDisplayFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :decimal-places-configuration)]
    (. builder decimalPlacesConfiguration data))
  (when-let [data (lookup-entry config id :negative-value-configuration)]
    (. builder negativeValueConfiguration data))
  (when-let [data (lookup-entry config id :null-value-format-configuration)]
    (. builder nullValueFormatConfiguration data))
  (when-let [data (lookup-entry config id :prefix)]
    (. builder prefix data))
  (when-let [data (lookup-entry config id :separator-configuration)]
    (. builder separatorConfiguration data))
  (when-let [data (lookup-entry config id :suffix)]
    (. builder suffix data))
  (.build builder))


(defn cfn-template-percentage-display-format-configuration-property-builder
  "Creates a  `CfnTemplate$PercentageDisplayFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-percentage-display-format-configuration-property-builder (new CfnTemplate$PercentageDisplayFormatConfigurationProperty$Builder) id config))


(defn build-cfn-template-percentile-aggregation-property-builder
  "The build-cfn-template-percentile-aggregation-property-builder function updates a CfnTemplate$PercentileAggregationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PercentileAggregationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentileValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:percentile-value` |
"
  [^CfnTemplate$PercentileAggregationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :percentile-value)]
    (. builder percentileValue data))
  (.build builder))


(defn cfn-template-percentile-aggregation-property-builder
  "Creates a  `CfnTemplate$PercentileAggregationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-percentile-aggregation-property-builder (new CfnTemplate$PercentileAggregationProperty$Builder) id config))


(defn build-cfn-template-period-over-period-computation-property-builder
  "The build-cfn-template-period-over-period-computation-property-builder function updates a CfnTemplate$PeriodOverPeriodComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PeriodOverPeriodComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.services.quicksight.CfnTemplate$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$PeriodOverPeriodComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-period-over-period-computation-property-builder
  "Creates a  `CfnTemplate$PeriodOverPeriodComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-period-over-period-computation-property-builder (new CfnTemplate$PeriodOverPeriodComputationProperty$Builder) id config))


(defn build-cfn-template-period-to-date-computation-property-builder
  "The build-cfn-template-period-to-date-computation-property-builder function updates a CfnTemplate$PeriodToDateComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PeriodToDateComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodTimeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:period-time-granularity` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$PeriodToDateComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :period-time-granularity)]
    (. builder periodTimeGranularity data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-period-to-date-computation-property-builder
  "Creates a  `CfnTemplate$PeriodToDateComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-period-to-date-computation-property-builder (new CfnTemplate$PeriodToDateComputationProperty$Builder) id config))


(defn build-cfn-template-pie-chart-aggregated-field-wells-property-builder
  "The build-cfn-template-pie-chart-aggregated-field-wells-property-builder function updates a CfnTemplate$PieChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PieChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | java.util.List | [[cdk.support/lookup-entry]] | `:category` |
| `smallMultiples` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$PieChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :small-multiples)]
    (. builder smallMultiples data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-pie-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$PieChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pie-chart-aggregated-field-wells-property-builder (new CfnTemplate$PieChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-pie-chart-configuration-property-builder
  "The build-cfn-template-pie-chart-configuration-property-builder function updates a CfnTemplate$PieChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PieChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `contributionAnalysisDefaults` | java.util.List | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `donutOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:donut-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$PieChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnTemplate$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `smallMultiplesOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SmallMultiplesOptionsProperty | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$PieChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnTemplate$PieChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
    (. builder contributionAnalysisDefaults data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :donut-options)]
    (. builder donutOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :small-multiples-options)]
    (. builder smallMultiplesOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :value-label-options)]
    (. builder valueLabelOptions data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-template-pie-chart-configuration-property-builder
  "Creates a  `CfnTemplate$PieChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pie-chart-configuration-property-builder (new CfnTemplate$PieChartConfigurationProperty$Builder) id config))


(defn build-cfn-template-pie-chart-field-wells-property-builder
  "The build-cfn-template-pie-chart-field-wells-property-builder function updates a CfnTemplate$PieChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PieChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pieChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:pie-chart-aggregated-field-wells` |
"
  [^CfnTemplate$PieChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :pie-chart-aggregated-field-wells)]
    (. builder pieChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-template-pie-chart-field-wells-property-builder
  "Creates a  `CfnTemplate$PieChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pie-chart-field-wells-property-builder (new CfnTemplate$PieChartFieldWellsProperty$Builder) id config))


(defn build-cfn-template-pie-chart-sort-configuration-property-builder
  "The build-cfn-template-pie-chart-sort-configuration-property-builder function updates a CfnTemplate$PieChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PieChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |
"
  [^CfnTemplate$PieChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
    (. builder smallMultiplesLimitConfiguration data))
  (when-let [data (lookup-entry config id :small-multiples-sort)]
    (. builder smallMultiplesSort data))
  (.build builder))


(defn cfn-template-pie-chart-sort-configuration-property-builder
  "Creates a  `CfnTemplate$PieChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pie-chart-sort-configuration-property-builder (new CfnTemplate$PieChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-template-pie-chart-visual-property-builder
  "The build-cfn-template-pie-chart-visual-property-builder function updates a CfnTemplate$PieChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PieChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$PieChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-pie-chart-visual-property-builder
  "Creates a  `CfnTemplate$PieChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pie-chart-visual-property-builder (new CfnTemplate$PieChartVisualProperty$Builder) id config))


(defn build-cfn-template-pivot-field-sort-options-property-builder
  "The build-cfn-template-pivot-field-sort-options-property-builder function updates a CfnTemplate$PivotFieldSortOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotFieldSortOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `sortBy` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableSortByProperty | [[cdk.support/lookup-entry]] | `:sort-by` |
"
  [^CfnTemplate$PivotFieldSortOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :sort-by)]
    (. builder sortBy data))
  (.build builder))


(defn cfn-template-pivot-field-sort-options-property-builder
  "Creates a  `CfnTemplate$PivotFieldSortOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-field-sort-options-property-builder (new CfnTemplate$PivotFieldSortOptionsProperty$Builder) id config))


(defn build-cfn-template-pivot-table-aggregated-field-wells-property-builder
  "The build-cfn-template-pivot-table-aggregated-field-wells-property-builder function updates a CfnTemplate$PivotTableAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `rows` | java.util.List | [[cdk.support/lookup-entry]] | `:rows` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$PivotTableAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (when-let [data (lookup-entry config id :rows)]
    (. builder rows data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-pivot-table-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$PivotTableAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-aggregated-field-wells-property-builder (new CfnTemplate$PivotTableAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-pivot-table-cell-conditional-formatting-property-builder
  "The build-cfn-template-pivot-table-cell-conditional-formatting-property-builder function updates a CfnTemplate$PivotTableCellConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableCellConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `scope` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scope` |
| `scopes` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scopes` |
| `textFormat` | software.amazon.awscdk.services.quicksight.CfnTemplate$TextConditionalFormatProperty | [[cdk.support/lookup-entry]] | `:text-format` |
"
  [^CfnTemplate$PivotTableCellConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :scope)]
    (. builder scope data))
  (when-let [data (lookup-entry config id :scopes)]
    (. builder scopes data))
  (when-let [data (lookup-entry config id :text-format)]
    (. builder textFormat data))
  (.build builder))


(defn cfn-template-pivot-table-cell-conditional-formatting-property-builder
  "Creates a  `CfnTemplate$PivotTableCellConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-cell-conditional-formatting-property-builder (new CfnTemplate$PivotTableCellConditionalFormattingProperty$Builder) id config))


(defn build-cfn-template-pivot-table-conditional-formatting-option-property-builder
  "The build-cfn-template-pivot-table-conditional-formatting-option-property-builder function updates a CfnTemplate$PivotTableConditionalFormattingOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableConditionalFormattingOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cell` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableCellConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:cell` |
"
  [^CfnTemplate$PivotTableConditionalFormattingOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cell)]
    (. builder cell data))
  (.build builder))


(defn cfn-template-pivot-table-conditional-formatting-option-property-builder
  "Creates a  `CfnTemplate$PivotTableConditionalFormattingOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-conditional-formatting-option-property-builder (new CfnTemplate$PivotTableConditionalFormattingOptionProperty$Builder) id config))


(defn build-cfn-template-pivot-table-conditional-formatting-property-builder
  "The build-cfn-template-pivot-table-conditional-formatting-property-builder function updates a CfnTemplate$PivotTableConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |
"
  [^CfnTemplate$PivotTableConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :conditional-formatting-options)]
    (. builder conditionalFormattingOptions data))
  (.build builder))


(defn cfn-template-pivot-table-conditional-formatting-property-builder
  "Creates a  `CfnTemplate$PivotTableConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-conditional-formatting-property-builder (new CfnTemplate$PivotTableConditionalFormattingProperty$Builder) id config))


(defn build-cfn-template-pivot-table-conditional-formatting-scope-property-builder
  "The build-cfn-template-pivot-table-conditional-formatting-scope-property-builder function updates a CfnTemplate$PivotTableConditionalFormattingScopeProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableConditionalFormattingScopeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `role` | java.lang.String | [[cdk.support/lookup-entry]] | `:role` |
"
  [^CfnTemplate$PivotTableConditionalFormattingScopeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :role)]
    (. builder role data))
  (.build builder))


(defn cfn-template-pivot-table-conditional-formatting-scope-property-builder
  "Creates a  `CfnTemplate$PivotTableConditionalFormattingScopeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-conditional-formatting-scope-property-builder (new CfnTemplate$PivotTableConditionalFormattingScopeProperty$Builder) id config))


(defn build-cfn-template-pivot-table-configuration-property-builder
  "The build-cfn-template-pivot-table-configuration-property-builder function updates a CfnTemplate$PivotTableConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableFieldOptionsProperty | [[cdk.support/lookup-entry]] | `:field-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `paginatedReportOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:paginated-report-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tableOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableOptionsProperty | [[cdk.support/lookup-entry]] | `:table-options` |
| `totalOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableTotalOptionsProperty | [[cdk.support/lookup-entry]] | `:total-options` |
"
  [^CfnTemplate$PivotTableConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-options)]
    (. builder fieldOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :paginated-report-options)]
    (. builder paginatedReportOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :table-options)]
    (. builder tableOptions data))
  (when-let [data (lookup-entry config id :total-options)]
    (. builder totalOptions data))
  (.build builder))


(defn cfn-template-pivot-table-configuration-property-builder
  "Creates a  `CfnTemplate$PivotTableConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-configuration-property-builder (new CfnTemplate$PivotTableConfigurationProperty$Builder) id config))


(defn build-cfn-template-pivot-table-data-path-option-property-builder
  "The build-cfn-template-pivot-table-data-path-option-property-builder function updates a CfnTemplate$PivotTableDataPathOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableDataPathOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathList` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-path-list` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |
"
  [^CfnTemplate$PivotTableDataPathOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-path-list)]
    (. builder dataPathList data))
  (when-let [data (lookup-entry config id :width)]
    (. builder width data))
  (.build builder))


(defn cfn-template-pivot-table-data-path-option-property-builder
  "Creates a  `CfnTemplate$PivotTableDataPathOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-data-path-option-property-builder (new CfnTemplate$PivotTableDataPathOptionProperty$Builder) id config))


(defn build-cfn-template-pivot-table-field-collapse-state-option-property-builder
  "The build-cfn-template-pivot-table-field-collapse-state-option-property-builder function updates a CfnTemplate$PivotTableFieldCollapseStateOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableFieldCollapseStateOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `state` | java.lang.String | [[cdk.support/lookup-entry]] | `:state` |
| `target` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target` |
"
  [^CfnTemplate$PivotTableFieldCollapseStateOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :state)]
    (. builder state data))
  (when-let [data (lookup-entry config id :target)]
    (. builder target data))
  (.build builder))


(defn cfn-template-pivot-table-field-collapse-state-option-property-builder
  "Creates a  `CfnTemplate$PivotTableFieldCollapseStateOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-field-collapse-state-option-property-builder (new CfnTemplate$PivotTableFieldCollapseStateOptionProperty$Builder) id config))


(defn build-cfn-template-pivot-table-field-collapse-state-target-property-builder
  "The build-cfn-template-pivot-table-field-collapse-state-target-property-builder function updates a CfnTemplate$PivotTableFieldCollapseStateTargetProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableFieldCollapseStateTargetProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldDataPathValues` | java.util.List | [[cdk.support/lookup-entry]] | `:field-data-path-values` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
"
  [^CfnTemplate$PivotTableFieldCollapseStateTargetProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-data-path-values)]
    (. builder fieldDataPathValues data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (.build builder))


(defn cfn-template-pivot-table-field-collapse-state-target-property-builder
  "Creates a  `CfnTemplate$PivotTableFieldCollapseStateTargetProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-field-collapse-state-target-property-builder (new CfnTemplate$PivotTableFieldCollapseStateTargetProperty$Builder) id config))


(defn build-cfn-template-pivot-table-field-option-property-builder
  "The build-cfn-template-pivot-table-field-option-property-builder function updates a CfnTemplate$PivotTableFieldOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableFieldOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$PivotTableFieldOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-pivot-table-field-option-property-builder
  "Creates a  `CfnTemplate$PivotTableFieldOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-field-option-property-builder (new CfnTemplate$PivotTableFieldOptionProperty$Builder) id config))


(defn build-cfn-template-pivot-table-field-options-property-builder
  "The build-cfn-template-pivot-table-field-options-property-builder function updates a CfnTemplate$PivotTableFieldOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableFieldOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `collapseStateOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:collapse-state-options` |
| `dataPathOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:data-path-options` |
| `selectedFieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-field-options` |
"
  [^CfnTemplate$PivotTableFieldOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :collapse-state-options)]
    (. builder collapseStateOptions data))
  (when-let [data (lookup-entry config id :data-path-options)]
    (. builder dataPathOptions data))
  (when-let [data (lookup-entry config id :selected-field-options)]
    (. builder selectedFieldOptions data))
  (.build builder))


(defn cfn-template-pivot-table-field-options-property-builder
  "Creates a  `CfnTemplate$PivotTableFieldOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-field-options-property-builder (new CfnTemplate$PivotTableFieldOptionsProperty$Builder) id config))


(defn build-cfn-template-pivot-table-field-subtotal-options-property-builder
  "The build-cfn-template-pivot-table-field-subtotal-options-property-builder function updates a CfnTemplate$PivotTableFieldSubtotalOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableFieldSubtotalOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
"
  [^CfnTemplate$PivotTableFieldSubtotalOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (.build builder))


(defn cfn-template-pivot-table-field-subtotal-options-property-builder
  "Creates a  `CfnTemplate$PivotTableFieldSubtotalOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-field-subtotal-options-property-builder (new CfnTemplate$PivotTableFieldSubtotalOptionsProperty$Builder) id config))


(defn build-cfn-template-pivot-table-field-wells-property-builder
  "The build-cfn-template-pivot-table-field-wells-property-builder function updates a CfnTemplate$PivotTableFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pivotTableAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:pivot-table-aggregated-field-wells` |
"
  [^CfnTemplate$PivotTableFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :pivot-table-aggregated-field-wells)]
    (. builder pivotTableAggregatedFieldWells data))
  (.build builder))


(defn cfn-template-pivot-table-field-wells-property-builder
  "Creates a  `CfnTemplate$PivotTableFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-field-wells-property-builder (new CfnTemplate$PivotTableFieldWellsProperty$Builder) id config))


(defn build-cfn-template-pivot-table-options-property-builder
  "The build-cfn-template-pivot-table-options-property-builder function updates a CfnTemplate$PivotTableOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellStyle` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:cell-style` |
| `collapsedRowDimensionsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:collapsed-row-dimensions-visibility` |
| `columnHeaderStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-header-style` |
| `columnNamesVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-names-visibility` |
| `defaultCellWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:default-cell-width` |
| `metricPlacement` | java.lang.String | [[cdk.support/lookup-entry]] | `:metric-placement` |
| `rowAlternateColorOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$RowAlternateColorOptionsProperty | [[cdk.support/lookup-entry]] | `:row-alternate-color-options` |
| `rowFieldNamesStyle` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:row-field-names-style` |
| `rowHeaderStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-header-style` |
| `rowsLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rows-label-options` |
| `rowsLayout` | java.lang.String | [[cdk.support/lookup-entry]] | `:rows-layout` |
| `singleMetricVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:single-metric-visibility` |
| `toggleButtonsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:toggle-buttons-visibility` |
"
  [^CfnTemplate$PivotTableOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cell-style)]
    (. builder cellStyle data))
  (when-let [data (lookup-entry config id :collapsed-row-dimensions-visibility)]
    (. builder collapsedRowDimensionsVisibility data))
  (when-let [data (lookup-entry config id :column-header-style)]
    (. builder columnHeaderStyle data))
  (when-let [data (lookup-entry config id :column-names-visibility)]
    (. builder columnNamesVisibility data))
  (when-let [data (lookup-entry config id :default-cell-width)]
    (. builder defaultCellWidth data))
  (when-let [data (lookup-entry config id :metric-placement)]
    (. builder metricPlacement data))
  (when-let [data (lookup-entry config id :row-alternate-color-options)]
    (. builder rowAlternateColorOptions data))
  (when-let [data (lookup-entry config id :row-field-names-style)]
    (. builder rowFieldNamesStyle data))
  (when-let [data (lookup-entry config id :row-header-style)]
    (. builder rowHeaderStyle data))
  (when-let [data (lookup-entry config id :rows-label-options)]
    (. builder rowsLabelOptions data))
  (when-let [data (lookup-entry config id :rows-layout)]
    (. builder rowsLayout data))
  (when-let [data (lookup-entry config id :single-metric-visibility)]
    (. builder singleMetricVisibility data))
  (when-let [data (lookup-entry config id :toggle-buttons-visibility)]
    (. builder toggleButtonsVisibility data))
  (.build builder))


(defn cfn-template-pivot-table-options-property-builder
  "Creates a  `CfnTemplate$PivotTableOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-options-property-builder (new CfnTemplate$PivotTableOptionsProperty$Builder) id config))


(defn build-cfn-template-pivot-table-paginated-report-options-property-builder
  "The build-cfn-template-pivot-table-paginated-report-options-property-builder function updates a CfnTemplate$PivotTablePaginatedReportOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTablePaginatedReportOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `overflowColumnHeaderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:overflow-column-header-visibility` |
| `verticalOverflowVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-overflow-visibility` |
"
  [^CfnTemplate$PivotTablePaginatedReportOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :overflow-column-header-visibility)]
    (. builder overflowColumnHeaderVisibility data))
  (when-let [data (lookup-entry config id :vertical-overflow-visibility)]
    (. builder verticalOverflowVisibility data))
  (.build builder))


(defn cfn-template-pivot-table-paginated-report-options-property-builder
  "Creates a  `CfnTemplate$PivotTablePaginatedReportOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-paginated-report-options-property-builder (new CfnTemplate$PivotTablePaginatedReportOptionsProperty$Builder) id config))


(defn build-cfn-template-pivot-table-rows-label-options-property-builder
  "The build-cfn-template-pivot-table-rows-label-options-property-builder function updates a CfnTemplate$PivotTableRowsLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableRowsLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$PivotTableRowsLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-pivot-table-rows-label-options-property-builder
  "Creates a  `CfnTemplate$PivotTableRowsLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-rows-label-options-property-builder (new CfnTemplate$PivotTableRowsLabelOptionsProperty$Builder) id config))


(defn build-cfn-template-pivot-table-sort-by-property-builder
  "The build-cfn-template-pivot-table-sort-by-property-builder function updates a CfnTemplate$PivotTableSortByProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableSortByProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnSortProperty | [[cdk.support/lookup-entry]] | `:column` |
| `dataPath` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataPathSortProperty | [[cdk.support/lookup-entry]] | `:data-path` |
| `field` | software.amazon.awscdk.services.quicksight.CfnTemplate$FieldSortProperty | [[cdk.support/lookup-entry]] | `:field` |
"
  [^CfnTemplate$PivotTableSortByProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :data-path)]
    (. builder dataPath data))
  (when-let [data (lookup-entry config id :field)]
    (. builder field data))
  (.build builder))


(defn cfn-template-pivot-table-sort-by-property-builder
  "Creates a  `CfnTemplate$PivotTableSortByProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-sort-by-property-builder (new CfnTemplate$PivotTableSortByProperty$Builder) id config))


(defn build-cfn-template-pivot-table-sort-configuration-property-builder
  "The build-cfn-template-pivot-table-sort-configuration-property-builder function updates a CfnTemplate$PivotTableSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldSortOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:field-sort-options` |
"
  [^CfnTemplate$PivotTableSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-sort-options)]
    (. builder fieldSortOptions data))
  (.build builder))


(defn cfn-template-pivot-table-sort-configuration-property-builder
  "Creates a  `CfnTemplate$PivotTableSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-sort-configuration-property-builder (new CfnTemplate$PivotTableSortConfigurationProperty$Builder) id config))


(defn build-cfn-template-pivot-table-total-options-property-builder
  "The build-cfn-template-pivot-table-total-options-property-builder function updates a CfnTemplate$PivotTableTotalOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableTotalOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnSubtotalOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-subtotal-options` |
| `columnTotalOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTotalOptionsProperty | [[cdk.support/lookup-entry]] | `:column-total-options` |
| `rowSubtotalOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-subtotal-options` |
| `rowTotalOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTotalOptionsProperty | [[cdk.support/lookup-entry]] | `:row-total-options` |
"
  [^CfnTemplate$PivotTableTotalOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-subtotal-options)]
    (. builder columnSubtotalOptions data))
  (when-let [data (lookup-entry config id :column-total-options)]
    (. builder columnTotalOptions data))
  (when-let [data (lookup-entry config id :row-subtotal-options)]
    (. builder rowSubtotalOptions data))
  (when-let [data (lookup-entry config id :row-total-options)]
    (. builder rowTotalOptions data))
  (.build builder))


(defn cfn-template-pivot-table-total-options-property-builder
  "Creates a  `CfnTemplate$PivotTableTotalOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-total-options-property-builder (new CfnTemplate$PivotTableTotalOptionsProperty$Builder) id config))


(defn build-cfn-template-pivot-table-visual-property-builder
  "The build-cfn-template-pivot-table-visual-property-builder function updates a CfnTemplate$PivotTableVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTableVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$PivotTableVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :conditional-formatting)]
    (. builder conditionalFormatting data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-pivot-table-visual-property-builder
  "Creates a  `CfnTemplate$PivotTableVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-table-visual-property-builder (new CfnTemplate$PivotTableVisualProperty$Builder) id config))


(defn build-cfn-template-pivot-total-options-property-builder
  "The build-cfn-template-pivot-total-options-property-builder function updates a CfnTemplate$PivotTotalOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PivotTotalOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `metricHeaderCellStyle` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:metric-header-cell-style` |
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scrollStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:scroll-status` |
| `totalAggregationOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-aggregation-options` |
| `totalCellStyle` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `valueCellStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-cell-style` |
"
  [^CfnTemplate$PivotTotalOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :metric-header-cell-style)]
    (. builder metricHeaderCellStyle data))
  (when-let [data (lookup-entry config id :placement)]
    (. builder placement data))
  (when-let [data (lookup-entry config id :scroll-status)]
    (. builder scrollStatus data))
  (when-let [data (lookup-entry config id :total-aggregation-options)]
    (. builder totalAggregationOptions data))
  (when-let [data (lookup-entry config id :total-cell-style)]
    (. builder totalCellStyle data))
  (when-let [data (lookup-entry config id :totals-visibility)]
    (. builder totalsVisibility data))
  (when-let [data (lookup-entry config id :value-cell-style)]
    (. builder valueCellStyle data))
  (.build builder))


(defn cfn-template-pivot-total-options-property-builder
  "Creates a  `CfnTemplate$PivotTotalOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-pivot-total-options-property-builder (new CfnTemplate$PivotTotalOptionsProperty$Builder) id config))


(defn build-cfn-template-predefined-hierarchy-property-builder
  "The build-cfn-template-predefined-hierarchy-property-builder function updates a CfnTemplate$PredefinedHierarchyProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$PredefinedHierarchyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `drillDownFilters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |
"
  [^CfnTemplate$PredefinedHierarchyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (when-let [data (lookup-entry config id :drill-down-filters)]
    (. builder drillDownFilters data))
  (when-let [data (lookup-entry config id :hierarchy-id)]
    (. builder hierarchyId data))
  (.build builder))


(defn cfn-template-predefined-hierarchy-property-builder
  "Creates a  `CfnTemplate$PredefinedHierarchyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-predefined-hierarchy-property-builder (new CfnTemplate$PredefinedHierarchyProperty$Builder) id config))


(defn build-cfn-template-progress-bar-options-property-builder
  "The build-cfn-template-progress-bar-options-property-builder function updates a CfnTemplate$ProgressBarOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ProgressBarOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$ProgressBarOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-progress-bar-options-property-builder
  "Creates a  `CfnTemplate$ProgressBarOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-progress-bar-options-property-builder (new CfnTemplate$ProgressBarOptionsProperty$Builder) id config))


(defn build-cfn-template-props-builder
  "The build-cfn-template-props-builder function updates a CfnTemplateProps$Builder instance using the provided configuration.
  The function takes the CfnTemplateProps$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `definition` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:definition` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `permissions` | java.util.List | [[cdk.support/lookup-entry]] | `:permissions` |
| `sourceEntity` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-entity` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `templateId` | java.lang.String | [[cdk.support/lookup-entry]] | `:template-id` |
| `validationStrategy` | software.amazon.awscdk.services.quicksight.CfnTemplate$ValidationStrategyProperty | [[cdk.support/lookup-entry]] | `:validation-strategy` |
| `versionDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:version-description` |
"
  [^CfnTemplateProps$Builder builder id config]
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :definition)]
    (. builder definition data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :permissions)]
    (. builder permissions data))
  (when-let [data (lookup-entry config id :source-entity)]
    (. builder sourceEntity data))
  (when-let [data (lookup-entry config id :tags)]
    (. builder tags data))
  (when-let [data (lookup-entry config id :template-id)]
    (. builder templateId data))
  (when-let [data (lookup-entry config id :validation-strategy)]
    (. builder validationStrategy data))
  (when-let [data (lookup-entry config id :version-description)]
    (. builder versionDescription data))
  (.build builder))


(defn cfn-template-props-builder
  "Creates a  `CfnTemplateProps$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-props-builder (new CfnTemplateProps$Builder) id config))


(defn build-cfn-template-radar-chart-aggregated-field-wells-property-builder
  "The build-cfn-template-radar-chart-aggregated-field-wells-property-builder function updates a CfnTemplate$RadarChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$RadarChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `color` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$RadarChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-radar-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$RadarChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-radar-chart-aggregated-field-wells-property-builder (new CfnTemplate$RadarChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-radar-chart-area-style-settings-property-builder
  "The build-cfn-template-radar-chart-area-style-settings-property-builder function updates a CfnTemplate$RadarChartAreaStyleSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$RadarChartAreaStyleSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$RadarChartAreaStyleSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-radar-chart-area-style-settings-property-builder
  "Creates a  `CfnTemplate$RadarChartAreaStyleSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-radar-chart-area-style-settings-property-builder (new CfnTemplate$RadarChartAreaStyleSettingsProperty$Builder) id config))


(defn build-cfn-template-radar-chart-configuration-property-builder
  "The build-cfn-template-radar-chart-configuration-property-builder function updates a CfnTemplate$RadarChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$RadarChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `alternateBandColorsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-colors-visibility` |
| `alternateBandEvenColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-even-color` |
| `alternateBandOddColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-odd-color` |
| `axesRangeScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:axes-range-scale` |
| `baseSeriesSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:base-series-settings` |
| `categoryAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorAxis` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:color-axis` |
| `colorLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$RadarChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `shape` | java.lang.String | [[cdk.support/lookup-entry]] | `:shape` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `startAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:start-angle` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
"
  [^CfnTemplate$RadarChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :alternate-band-colors-visibility)]
    (. builder alternateBandColorsVisibility data))
  (when-let [data (lookup-entry config id :alternate-band-even-color)]
    (. builder alternateBandEvenColor data))
  (when-let [data (lookup-entry config id :alternate-band-odd-color)]
    (. builder alternateBandOddColor data))
  (when-let [data (lookup-entry config id :axes-range-scale)]
    (. builder axesRangeScale data))
  (when-let [data (lookup-entry config id :base-series-settings)]
    (. builder baseSeriesSettings data))
  (when-let [data (lookup-entry config id :category-axis)]
    (. builder categoryAxis data))
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :color-axis)]
    (. builder colorAxis data))
  (when-let [data (lookup-entry config id :color-label-options)]
    (. builder colorLabelOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :shape)]
    (. builder shape data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :start-angle)]
    (. builder startAngle data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (.build builder))


(defn cfn-template-radar-chart-configuration-property-builder
  "Creates a  `CfnTemplate$RadarChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-radar-chart-configuration-property-builder (new CfnTemplate$RadarChartConfigurationProperty$Builder) id config))


(defn build-cfn-template-radar-chart-field-wells-property-builder
  "The build-cfn-template-radar-chart-field-wells-property-builder function updates a CfnTemplate$RadarChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$RadarChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `radarChartAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$RadarChartAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:radar-chart-aggregated-field-wells` |
"
  [^CfnTemplate$RadarChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :radar-chart-aggregated-field-wells)]
    (. builder radarChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-template-radar-chart-field-wells-property-builder
  "Creates a  `CfnTemplate$RadarChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-radar-chart-field-wells-property-builder (new CfnTemplate$RadarChartFieldWellsProperty$Builder) id config))


(defn build-cfn-template-radar-chart-series-settings-property-builder
  "The build-cfn-template-radar-chart-series-settings-property-builder function updates a CfnTemplate$RadarChartSeriesSettingsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$RadarChartSeriesSettingsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `areaStyleSettings` | software.amazon.awscdk.services.quicksight.CfnTemplate$RadarChartAreaStyleSettingsProperty | [[cdk.support/lookup-entry]] | `:area-style-settings` |
"
  [^CfnTemplate$RadarChartSeriesSettingsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :area-style-settings)]
    (. builder areaStyleSettings data))
  (.build builder))


(defn cfn-template-radar-chart-series-settings-property-builder
  "Creates a  `CfnTemplate$RadarChartSeriesSettingsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-radar-chart-series-settings-property-builder (new CfnTemplate$RadarChartSeriesSettingsProperty$Builder) id config))


(defn build-cfn-template-radar-chart-sort-configuration-property-builder
  "The build-cfn-template-radar-chart-sort-configuration-property-builder function updates a CfnTemplate$RadarChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$RadarChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | java.util.List | [[cdk.support/lookup-entry]] | `:color-sort` |
"
  [^CfnTemplate$RadarChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (when-let [data (lookup-entry config id :color-items-limit)]
    (. builder colorItemsLimit data))
  (when-let [data (lookup-entry config id :color-sort)]
    (. builder colorSort data))
  (.build builder))


(defn cfn-template-radar-chart-sort-configuration-property-builder
  "Creates a  `CfnTemplate$RadarChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-radar-chart-sort-configuration-property-builder (new CfnTemplate$RadarChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-template-radar-chart-visual-property-builder
  "The build-cfn-template-radar-chart-visual-property-builder function updates a CfnTemplate$RadarChartVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$RadarChartVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$RadarChartVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-radar-chart-visual-property-builder
  "Creates a  `CfnTemplate$RadarChartVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-radar-chart-visual-property-builder (new CfnTemplate$RadarChartVisualProperty$Builder) id config))


(defn build-cfn-template-range-ends-label-type-property-builder
  "The build-cfn-template-range-ends-label-type-property-builder function updates a CfnTemplate$RangeEndsLabelTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$RangeEndsLabelTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$RangeEndsLabelTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-range-ends-label-type-property-builder
  "Creates a  `CfnTemplate$RangeEndsLabelTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-range-ends-label-type-property-builder (new CfnTemplate$RangeEndsLabelTypeProperty$Builder) id config))


(defn build-cfn-template-reference-line-custom-label-configuration-property-builder
  "The build-cfn-template-reference-line-custom-label-configuration-property-builder function updates a CfnTemplate$ReferenceLineCustomLabelConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ReferenceLineCustomLabelConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
"
  [^CfnTemplate$ReferenceLineCustomLabelConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (.build builder))


(defn cfn-template-reference-line-custom-label-configuration-property-builder
  "Creates a  `CfnTemplate$ReferenceLineCustomLabelConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-reference-line-custom-label-configuration-property-builder (new CfnTemplate$ReferenceLineCustomLabelConfigurationProperty$Builder) id config))


(defn build-cfn-template-reference-line-data-configuration-property-builder
  "The build-cfn-template-reference-line-data-configuration-property-builder function updates a CfnTemplate$ReferenceLineDataConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ReferenceLineDataConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `dynamicConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-configuration` |
| `seriesType` | java.lang.String | [[cdk.support/lookup-entry]] | `:series-type` |
| `staticConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:static-configuration` |
"
  [^CfnTemplate$ReferenceLineDataConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :axis-binding)]
    (. builder axisBinding data))
  (when-let [data (lookup-entry config id :dynamic-configuration)]
    (. builder dynamicConfiguration data))
  (when-let [data (lookup-entry config id :series-type)]
    (. builder seriesType data))
  (when-let [data (lookup-entry config id :static-configuration)]
    (. builder staticConfiguration data))
  (.build builder))


(defn cfn-template-reference-line-data-configuration-property-builder
  "Creates a  `CfnTemplate$ReferenceLineDataConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-reference-line-data-configuration-property-builder (new CfnTemplate$ReferenceLineDataConfigurationProperty$Builder) id config))


(defn build-cfn-template-reference-line-dynamic-data-configuration-property-builder
  "The build-cfn-template-reference-line-dynamic-data-configuration-property-builder function updates a CfnTemplate$ReferenceLineDynamicDataConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ReferenceLineDynamicDataConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `calculation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:calculation` |
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `measureAggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:measure-aggregation-function` |
"
  [^CfnTemplate$ReferenceLineDynamicDataConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :calculation)]
    (. builder calculation data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :measure-aggregation-function)]
    (. builder measureAggregationFunction data))
  (.build builder))


(defn cfn-template-reference-line-dynamic-data-configuration-property-builder
  "Creates a  `CfnTemplate$ReferenceLineDynamicDataConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-reference-line-dynamic-data-configuration-property-builder (new CfnTemplate$ReferenceLineDynamicDataConfigurationProperty$Builder) id config))


(defn build-cfn-template-reference-line-label-configuration-property-builder
  "The build-cfn-template-reference-line-label-configuration-property-builder function updates a CfnTemplate$ReferenceLineLabelConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ReferenceLineLabelConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabelConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-label-configuration` |
| `fontColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-color` |
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `horizontalPosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-position` |
| `valueLabelConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ReferenceLineValueLabelConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-label-configuration` |
| `verticalPosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-position` |
"
  [^CfnTemplate$ReferenceLineLabelConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label-configuration)]
    (. builder customLabelConfiguration data))
  (when-let [data (lookup-entry config id :font-color)]
    (. builder fontColor data))
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (when-let [data (lookup-entry config id :horizontal-position)]
    (. builder horizontalPosition data))
  (when-let [data (lookup-entry config id :value-label-configuration)]
    (. builder valueLabelConfiguration data))
  (when-let [data (lookup-entry config id :vertical-position)]
    (. builder verticalPosition data))
  (.build builder))


(defn cfn-template-reference-line-label-configuration-property-builder
  "Creates a  `CfnTemplate$ReferenceLineLabelConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-reference-line-label-configuration-property-builder (new CfnTemplate$ReferenceLineLabelConfigurationProperty$Builder) id config))


(defn build-cfn-template-reference-line-property-builder
  "The build-cfn-template-reference-line-property-builder function updates a CfnTemplate$ReferenceLineProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ReferenceLineProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-configuration` |
| `labelConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label-configuration` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `styleConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style-configuration` |
"
  [^CfnTemplate$ReferenceLineProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-configuration)]
    (. builder dataConfiguration data))
  (when-let [data (lookup-entry config id :label-configuration)]
    (. builder labelConfiguration data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (when-let [data (lookup-entry config id :style-configuration)]
    (. builder styleConfiguration data))
  (.build builder))


(defn cfn-template-reference-line-property-builder
  "Creates a  `CfnTemplate$ReferenceLineProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-reference-line-property-builder (new CfnTemplate$ReferenceLineProperty$Builder) id config))


(defn build-cfn-template-reference-line-static-data-configuration-property-builder
  "The build-cfn-template-reference-line-static-data-configuration-property-builder function updates a CfnTemplate$ReferenceLineStaticDataConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ReferenceLineStaticDataConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$ReferenceLineStaticDataConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-reference-line-static-data-configuration-property-builder
  "Creates a  `CfnTemplate$ReferenceLineStaticDataConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-reference-line-static-data-configuration-property-builder (new CfnTemplate$ReferenceLineStaticDataConfigurationProperty$Builder) id config))


(defn build-cfn-template-reference-line-style-configuration-property-builder
  "The build-cfn-template-reference-line-style-configuration-property-builder function updates a CfnTemplate$ReferenceLineStyleConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ReferenceLineStyleConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `pattern` | java.lang.String | [[cdk.support/lookup-entry]] | `:pattern` |
"
  [^CfnTemplate$ReferenceLineStyleConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :pattern)]
    (. builder pattern data))
  (.build builder))


(defn cfn-template-reference-line-style-configuration-property-builder
  "Creates a  `CfnTemplate$ReferenceLineStyleConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-reference-line-style-configuration-property-builder (new CfnTemplate$ReferenceLineStyleConfigurationProperty$Builder) id config))


(defn build-cfn-template-reference-line-value-label-configuration-property-builder
  "The build-cfn-template-reference-line-value-label-configuration-property-builder function updates a CfnTemplate$ReferenceLineValueLabelConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ReferenceLineValueLabelConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `relativePosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative-position` |
"
  [^CfnTemplate$ReferenceLineValueLabelConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (when-let [data (lookup-entry config id :relative-position)]
    (. builder relativePosition data))
  (.build builder))


(defn cfn-template-reference-line-value-label-configuration-property-builder
  "Creates a  `CfnTemplate$ReferenceLineValueLabelConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-reference-line-value-label-configuration-property-builder (new CfnTemplate$ReferenceLineValueLabelConfigurationProperty$Builder) id config))


(defn build-cfn-template-relative-date-time-control-display-options-property-builder
  "The build-cfn-template-relative-date-time-control-display-options-property-builder function updates a CfnTemplate$RelativeDateTimeControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$RelativeDateTimeControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnTemplate$RelativeDateTimeControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date-time-format)]
    (. builder dateTimeFormat data))
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-template-relative-date-time-control-display-options-property-builder
  "Creates a  `CfnTemplate$RelativeDateTimeControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-relative-date-time-control-display-options-property-builder (new CfnTemplate$RelativeDateTimeControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-template-relative-dates-filter-property-builder
  "The build-cfn-template-relative-dates-filter-property-builder function updates a CfnTemplate$RelativeDatesFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$RelativeDatesFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `anchorDateConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$AnchorDateConfigurationProperty | [[cdk.support/lookup-entry]] | `:anchor-date-configuration` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `excludePeriodConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:exclude-period-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `minimumGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:minimum-granularity` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `relativeDateType` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative-date-type` |
| `relativeDateValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:relative-date-value` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnTemplate$RelativeDatesFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :anchor-date-configuration)]
    (. builder anchorDateConfiguration data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :exclude-period-configuration)]
    (. builder excludePeriodConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :minimum-granularity)]
    (. builder minimumGranularity data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (when-let [data (lookup-entry config id :relative-date-type)]
    (. builder relativeDateType data))
  (when-let [data (lookup-entry config id :relative-date-value)]
    (. builder relativeDateValue data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-template-relative-dates-filter-property-builder
  "Creates a  `CfnTemplate$RelativeDatesFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-relative-dates-filter-property-builder (new CfnTemplate$RelativeDatesFilterProperty$Builder) id config))


(defn build-cfn-template-resource-permission-property-builder
  "The build-cfn-template-resource-permission-property-builder function updates a CfnTemplate$ResourcePermissionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ResourcePermissionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `principal` | java.lang.String | [[cdk.support/lookup-entry]] | `:principal` |
| `resource` | java.lang.String | [[cdk.support/lookup-entry]] | `:resource` |
"
  [^CfnTemplate$ResourcePermissionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :principal)]
    (. builder principal data))
  (when-let [data (lookup-entry config id :resource)]
    (. builder resource data))
  (.build builder))


(defn cfn-template-resource-permission-property-builder
  "Creates a  `CfnTemplate$ResourcePermissionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-resource-permission-property-builder (new CfnTemplate$ResourcePermissionProperty$Builder) id config))


(defn build-cfn-template-rolling-date-configuration-property-builder
  "The build-cfn-template-rolling-date-configuration-property-builder function updates a CfnTemplate$RollingDateConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$RollingDateConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
"
  [^CfnTemplate$RollingDateConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-set-identifier)]
    (. builder dataSetIdentifier data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (.build builder))


(defn cfn-template-rolling-date-configuration-property-builder
  "Creates a  `CfnTemplate$RollingDateConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-rolling-date-configuration-property-builder (new CfnTemplate$RollingDateConfigurationProperty$Builder) id config))


(defn build-cfn-template-row-alternate-color-options-property-builder
  "The build-cfn-template-row-alternate-color-options-property-builder function updates a CfnTemplate$RowAlternateColorOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$RowAlternateColorOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `rowAlternateColors` | java.util.List | [[cdk.support/lookup-entry]] | `:row-alternate-colors` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `usePrimaryBackgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:use-primary-background-color` |
"
  [^CfnTemplate$RowAlternateColorOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :row-alternate-colors)]
    (. builder rowAlternateColors data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (when-let [data (lookup-entry config id :use-primary-background-color)]
    (. builder usePrimaryBackgroundColor data))
  (.build builder))


(defn cfn-template-row-alternate-color-options-property-builder
  "Creates a  `CfnTemplate$RowAlternateColorOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-row-alternate-color-options-property-builder (new CfnTemplate$RowAlternateColorOptionsProperty$Builder) id config))


(defn build-cfn-template-same-sheet-target-visual-configuration-property-builder
  "The build-cfn-template-same-sheet-target-visual-configuration-property-builder function updates a CfnTemplate$SameSheetTargetVisualConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SameSheetTargetVisualConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetVisualOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:target-visual-options` |
| `targetVisuals` | java.util.List | [[cdk.support/lookup-entry]] | `:target-visuals` |
"
  [^CfnTemplate$SameSheetTargetVisualConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :target-visual-options)]
    (. builder targetVisualOptions data))
  (when-let [data (lookup-entry config id :target-visuals)]
    (. builder targetVisuals data))
  (.build builder))


(defn cfn-template-same-sheet-target-visual-configuration-property-builder
  "Creates a  `CfnTemplate$SameSheetTargetVisualConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-same-sheet-target-visual-configuration-property-builder (new CfnTemplate$SameSheetTargetVisualConfigurationProperty$Builder) id config))


(defn build-cfn-template-sankey-diagram-aggregated-field-wells-property-builder
  "The build-cfn-template-sankey-diagram-aggregated-field-wells-property-builder function updates a CfnTemplate$SankeyDiagramAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SankeyDiagramAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destination` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:destination` |
| `source` | java.util.List | [[cdk.support/lookup-entry]] | `:source` |
| `weight` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:weight` |
"
  [^CfnTemplate$SankeyDiagramAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :destination)]
    (. builder destination data))
  (when-let [data (lookup-entry config id :source)]
    (. builder source data))
  (when-let [data (lookup-entry config id :weight)]
    (. builder weight data))
  (.build builder))


(defn cfn-template-sankey-diagram-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$SankeyDiagramAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-sankey-diagram-aggregated-field-wells-property-builder (new CfnTemplate$SankeyDiagramAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-sankey-diagram-chart-configuration-property-builder
  "The build-cfn-template-sankey-diagram-chart-configuration-property-builder function updates a CfnTemplate$SankeyDiagramChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SankeyDiagramChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$SankeyDiagramFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$SankeyDiagramSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
"
  [^CfnTemplate$SankeyDiagramChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (.build builder))


(defn cfn-template-sankey-diagram-chart-configuration-property-builder
  "Creates a  `CfnTemplate$SankeyDiagramChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-sankey-diagram-chart-configuration-property-builder (new CfnTemplate$SankeyDiagramChartConfigurationProperty$Builder) id config))


(defn build-cfn-template-sankey-diagram-field-wells-property-builder
  "The build-cfn-template-sankey-diagram-field-wells-property-builder function updates a CfnTemplate$SankeyDiagramFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SankeyDiagramFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sankeyDiagramAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$SankeyDiagramAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:sankey-diagram-aggregated-field-wells` |
"
  [^CfnTemplate$SankeyDiagramFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :sankey-diagram-aggregated-field-wells)]
    (. builder sankeyDiagramAggregatedFieldWells data))
  (.build builder))


(defn cfn-template-sankey-diagram-field-wells-property-builder
  "Creates a  `CfnTemplate$SankeyDiagramFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-sankey-diagram-field-wells-property-builder (new CfnTemplate$SankeyDiagramFieldWellsProperty$Builder) id config))


(defn build-cfn-template-sankey-diagram-sort-configuration-property-builder
  "The build-cfn-template-sankey-diagram-sort-configuration-property-builder function updates a CfnTemplate$SankeyDiagramSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SankeyDiagramSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destinationItemsLimit` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:destination-items-limit` |
| `sourceItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-items-limit` |
| `weightSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:weight-sort` |
"
  [^CfnTemplate$SankeyDiagramSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :destination-items-limit)]
    (. builder destinationItemsLimit data))
  (when-let [data (lookup-entry config id :source-items-limit)]
    (. builder sourceItemsLimit data))
  (when-let [data (lookup-entry config id :weight-sort)]
    (. builder weightSort data))
  (.build builder))


(defn cfn-template-sankey-diagram-sort-configuration-property-builder
  "Creates a  `CfnTemplate$SankeyDiagramSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-sankey-diagram-sort-configuration-property-builder (new CfnTemplate$SankeyDiagramSortConfigurationProperty$Builder) id config))


(defn build-cfn-template-sankey-diagram-visual-property-builder
  "The build-cfn-template-sankey-diagram-visual-property-builder function updates a CfnTemplate$SankeyDiagramVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SankeyDiagramVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$SankeyDiagramChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$SankeyDiagramVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-sankey-diagram-visual-property-builder
  "Creates a  `CfnTemplate$SankeyDiagramVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-sankey-diagram-visual-property-builder (new CfnTemplate$SankeyDiagramVisualProperty$Builder) id config))


(defn build-cfn-template-scatter-plot-categorically-aggregated-field-wells-property-builder
  "The build-cfn-template-scatter-plot-categorically-aggregated-field-wells-property-builder function updates a CfnTemplate$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `label` | java.util.List | [[cdk.support/lookup-entry]] | `:label` |
| `size` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:size` |
| `xAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:y-axis` |
"
  [^CfnTemplate$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :label)]
    (. builder label data))
  (when-let [data (lookup-entry config id :size)]
    (. builder size data))
  (when-let [data (lookup-entry config id :x-axis)]
    (. builder xAxis data))
  (when-let [data (lookup-entry config id :y-axis)]
    (. builder yAxis data))
  (.build builder))


(defn cfn-template-scatter-plot-categorically-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-scatter-plot-categorically-aggregated-field-wells-property-builder (new CfnTemplate$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-scatter-plot-configuration-property-builder
  "The build-cfn-template-scatter-plot-configuration-property-builder function updates a CfnTemplate$ScatterPlotConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ScatterPlotConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnTemplate$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnTemplate$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |
| `yAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:y-axis-display-options` |
| `yAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:y-axis-label-options` |
"
  [^CfnTemplate$ScatterPlotConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (when-let [data (lookup-entry config id :x-axis-display-options)]
    (. builder xAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :x-axis-label-options)]
    (. builder xAxisLabelOptions data))
  (when-let [data (lookup-entry config id :y-axis-display-options)]
    (. builder yAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :y-axis-label-options)]
    (. builder yAxisLabelOptions data))
  (.build builder))


(defn cfn-template-scatter-plot-configuration-property-builder
  "Creates a  `CfnTemplate$ScatterPlotConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-scatter-plot-configuration-property-builder (new CfnTemplate$ScatterPlotConfigurationProperty$Builder) id config))


(defn build-cfn-template-scatter-plot-field-wells-property-builder
  "The build-cfn-template-scatter-plot-field-wells-property-builder function updates a CfnTemplate$ScatterPlotFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ScatterPlotFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `scatterPlotCategoricallyAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$ScatterPlotCategoricallyAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:scatter-plot-categorically-aggregated-field-wells` |
| `scatterPlotUnaggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scatter-plot-unaggregated-field-wells` |
"
  [^CfnTemplate$ScatterPlotFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :scatter-plot-categorically-aggregated-field-wells)]
    (. builder scatterPlotCategoricallyAggregatedFieldWells data))
  (when-let [data (lookup-entry config id :scatter-plot-unaggregated-field-wells)]
    (. builder scatterPlotUnaggregatedFieldWells data))
  (.build builder))


(defn cfn-template-scatter-plot-field-wells-property-builder
  "Creates a  `CfnTemplate$ScatterPlotFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-scatter-plot-field-wells-property-builder (new CfnTemplate$ScatterPlotFieldWellsProperty$Builder) id config))


(defn build-cfn-template-scatter-plot-unaggregated-field-wells-property-builder
  "The build-cfn-template-scatter-plot-unaggregated-field-wells-property-builder function updates a CfnTemplate$ScatterPlotUnaggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ScatterPlotUnaggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | java.util.List | [[cdk.support/lookup-entry]] | `:category` |
| `label` | java.util.List | [[cdk.support/lookup-entry]] | `:label` |
| `size` | java.util.List | [[cdk.support/lookup-entry]] | `:size` |
| `xAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:y-axis` |
"
  [^CfnTemplate$ScatterPlotUnaggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :label)]
    (. builder label data))
  (when-let [data (lookup-entry config id :size)]
    (. builder size data))
  (when-let [data (lookup-entry config id :x-axis)]
    (. builder xAxis data))
  (when-let [data (lookup-entry config id :y-axis)]
    (. builder yAxis data))
  (.build builder))


(defn cfn-template-scatter-plot-unaggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$ScatterPlotUnaggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-scatter-plot-unaggregated-field-wells-property-builder (new CfnTemplate$ScatterPlotUnaggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-scatter-plot-visual-property-builder
  "The build-cfn-template-scatter-plot-visual-property-builder function updates a CfnTemplate$ScatterPlotVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ScatterPlotVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$ScatterPlotVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-scatter-plot-visual-property-builder
  "Creates a  `CfnTemplate$ScatterPlotVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-scatter-plot-visual-property-builder (new CfnTemplate$ScatterPlotVisualProperty$Builder) id config))


(defn build-cfn-template-scroll-bar-options-property-builder
  "The build-cfn-template-scroll-bar-options-property-builder function updates a CfnTemplate$ScrollBarOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ScrollBarOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `visibleRange` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisibleRangeOptionsProperty | [[cdk.support/lookup-entry]] | `:visible-range` |
"
  [^CfnTemplate$ScrollBarOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (when-let [data (lookup-entry config id :visible-range)]
    (. builder visibleRange data))
  (.build builder))


(defn cfn-template-scroll-bar-options-property-builder
  "Creates a  `CfnTemplate$ScrollBarOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-scroll-bar-options-property-builder (new CfnTemplate$ScrollBarOptionsProperty$Builder) id config))


(defn build-cfn-template-secondary-value-options-property-builder
  "The build-cfn-template-secondary-value-options-property-builder function updates a CfnTemplate$SecondaryValueOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SecondaryValueOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$SecondaryValueOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-secondary-value-options-property-builder
  "Creates a  `CfnTemplate$SecondaryValueOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-secondary-value-options-property-builder (new CfnTemplate$SecondaryValueOptionsProperty$Builder) id config))


(defn build-cfn-template-section-after-page-break-property-builder
  "The build-cfn-template-section-after-page-break-property-builder function updates a CfnTemplate$SectionAfterPageBreakProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SectionAfterPageBreakProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
"
  [^CfnTemplate$SectionAfterPageBreakProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (.build builder))


(defn cfn-template-section-after-page-break-property-builder
  "Creates a  `CfnTemplate$SectionAfterPageBreakProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-section-after-page-break-property-builder (new CfnTemplate$SectionAfterPageBreakProperty$Builder) id config))


(defn build-cfn-template-section-based-layout-canvas-size-options-property-builder
  "The build-cfn-template-section-based-layout-canvas-size-options-property-builder function updates a CfnTemplate$SectionBasedLayoutCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SectionBasedLayoutCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paperCanvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SectionBasedLayoutPaperCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:paper-canvas-size-options` |
"
  [^CfnTemplate$SectionBasedLayoutCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :paper-canvas-size-options)]
    (. builder paperCanvasSizeOptions data))
  (.build builder))


(defn cfn-template-section-based-layout-canvas-size-options-property-builder
  "Creates a  `CfnTemplate$SectionBasedLayoutCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-section-based-layout-canvas-size-options-property-builder (new CfnTemplate$SectionBasedLayoutCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-template-section-based-layout-configuration-property-builder
  "The build-cfn-template-section-based-layout-configuration-property-builder function updates a CfnTemplate$SectionBasedLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SectionBasedLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bodySections` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:body-sections` |
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SectionBasedLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `footerSections` | java.util.List | [[cdk.support/lookup-entry]] | `:footer-sections` |
| `headerSections` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:header-sections` |
"
  [^CfnTemplate$SectionBasedLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :body-sections)]
    (. builder bodySections data))
  (when-let [data (lookup-entry config id :canvas-size-options)]
    (. builder canvasSizeOptions data))
  (when-let [data (lookup-entry config id :footer-sections)]
    (. builder footerSections data))
  (when-let [data (lookup-entry config id :header-sections)]
    (. builder headerSections data))
  (.build builder))


(defn cfn-template-section-based-layout-configuration-property-builder
  "Creates a  `CfnTemplate$SectionBasedLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-section-based-layout-configuration-property-builder (new CfnTemplate$SectionBasedLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-template-section-based-layout-paper-canvas-size-options-property-builder
  "The build-cfn-template-section-based-layout-paper-canvas-size-options-property-builder function updates a CfnTemplate$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paperMargin` | software.amazon.awscdk.services.quicksight.CfnTemplate$SpacingProperty | [[cdk.support/lookup-entry]] | `:paper-margin` |
| `paperOrientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:paper-orientation` |
| `paperSize` | java.lang.String | [[cdk.support/lookup-entry]] | `:paper-size` |
"
  [^CfnTemplate$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :paper-margin)]
    (. builder paperMargin data))
  (when-let [data (lookup-entry config id :paper-orientation)]
    (. builder paperOrientation data))
  (when-let [data (lookup-entry config id :paper-size)]
    (. builder paperSize data))
  (.build builder))


(defn cfn-template-section-based-layout-paper-canvas-size-options-property-builder
  "Creates a  `CfnTemplate$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-section-based-layout-paper-canvas-size-options-property-builder (new CfnTemplate$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder) id config))


(defn build-cfn-template-section-layout-configuration-property-builder
  "The build-cfn-template-section-layout-configuration-property-builder function updates a CfnTemplate$SectionLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SectionLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeFormLayout` | software.amazon.awscdk.services.quicksight.CfnTemplate$FreeFormSectionLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:free-form-layout` |
"
  [^CfnTemplate$SectionLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :free-form-layout)]
    (. builder freeFormLayout data))
  (.build builder))


(defn cfn-template-section-layout-configuration-property-builder
  "Creates a  `CfnTemplate$SectionLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-section-layout-configuration-property-builder (new CfnTemplate$SectionLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-template-section-page-break-configuration-property-builder
  "The build-cfn-template-section-page-break-configuration-property-builder function updates a CfnTemplate$SectionPageBreakConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SectionPageBreakConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `after` | software.amazon.awscdk.services.quicksight.CfnTemplate$SectionAfterPageBreakProperty | [[cdk.support/lookup-entry]] | `:after` |
"
  [^CfnTemplate$SectionPageBreakConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :after)]
    (. builder after data))
  (.build builder))


(defn cfn-template-section-page-break-configuration-property-builder
  "Creates a  `CfnTemplate$SectionPageBreakConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-section-page-break-configuration-property-builder (new CfnTemplate$SectionPageBreakConfigurationProperty$Builder) id config))


(defn build-cfn-template-section-style-property-builder
  "The build-cfn-template-section-style-property-builder function updates a CfnTemplate$SectionStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SectionStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `padding` | software.amazon.awscdk.services.quicksight.CfnTemplate$SpacingProperty | [[cdk.support/lookup-entry]] | `:padding` |
"
  [^CfnTemplate$SectionStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :height)]
    (. builder height data))
  (when-let [data (lookup-entry config id :padding)]
    (. builder padding data))
  (.build builder))


(defn cfn-template-section-style-property-builder
  "Creates a  `CfnTemplate$SectionStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-section-style-property-builder (new CfnTemplate$SectionStyleProperty$Builder) id config))


(defn build-cfn-template-selected-sheets-filter-scope-configuration-property-builder
  "The build-cfn-template-selected-sheets-filter-scope-configuration-property-builder function updates a CfnTemplate$SelectedSheetsFilterScopeConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SelectedSheetsFilterScopeConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sheetVisualScopingConfigurations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sheet-visual-scoping-configurations` |
"
  [^CfnTemplate$SelectedSheetsFilterScopeConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :sheet-visual-scoping-configurations)]
    (. builder sheetVisualScopingConfigurations data))
  (.build builder))


(defn cfn-template-selected-sheets-filter-scope-configuration-property-builder
  "Creates a  `CfnTemplate$SelectedSheetsFilterScopeConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-selected-sheets-filter-scope-configuration-property-builder (new CfnTemplate$SelectedSheetsFilterScopeConfigurationProperty$Builder) id config))


(defn build-cfn-template-series-item-property-builder
  "The build-cfn-template-series-item-property-builder function updates a CfnTemplate$SeriesItemProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SeriesItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataFieldSeriesItem` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataFieldSeriesItemProperty | [[cdk.support/lookup-entry]] | `:data-field-series-item` |
| `fieldSeriesItem` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-series-item` |
"
  [^CfnTemplate$SeriesItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-field-series-item)]
    (. builder dataFieldSeriesItem data))
  (when-let [data (lookup-entry config id :field-series-item)]
    (. builder fieldSeriesItem data))
  (.build builder))


(defn cfn-template-series-item-property-builder
  "Creates a  `CfnTemplate$SeriesItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-series-item-property-builder (new CfnTemplate$SeriesItemProperty$Builder) id config))


(defn build-cfn-template-set-parameter-value-configuration-property-builder
  "The build-cfn-template-set-parameter-value-configuration-property-builder function updates a CfnTemplate$SetParameterValueConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SetParameterValueConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destinationParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:destination-parameter-name` |
| `value` | software.amazon.awscdk.services.quicksight.CfnTemplate$DestinationParameterValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$SetParameterValueConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :destination-parameter-name)]
    (. builder destinationParameterName data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-set-parameter-value-configuration-property-builder
  "Creates a  `CfnTemplate$SetParameterValueConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-set-parameter-value-configuration-property-builder (new CfnTemplate$SetParameterValueConfigurationProperty$Builder) id config))


(defn build-cfn-template-shape-conditional-format-property-builder
  "The build-cfn-template-shape-conditional-format-property-builder function updates a CfnTemplate$ShapeConditionalFormatProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ShapeConditionalFormatProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:background-color` |
"
  [^CfnTemplate$ShapeConditionalFormatProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-color)]
    (. builder backgroundColor data))
  (.build builder))


(defn cfn-template-shape-conditional-format-property-builder
  "Creates a  `CfnTemplate$ShapeConditionalFormatProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-shape-conditional-format-property-builder (new CfnTemplate$ShapeConditionalFormatProperty$Builder) id config))


(defn build-cfn-template-sheet-control-info-icon-label-options-property-builder
  "The build-cfn-template-sheet-control-info-icon-label-options-property-builder function updates a CfnTemplate$SheetControlInfoIconLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SheetControlInfoIconLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconText` | java.lang.String | [[cdk.support/lookup-entry]] | `:info-icon-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$SheetControlInfoIconLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-text)]
    (. builder infoIconText data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-sheet-control-info-icon-label-options-property-builder
  "Creates a  `CfnTemplate$SheetControlInfoIconLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-sheet-control-info-icon-label-options-property-builder (new CfnTemplate$SheetControlInfoIconLabelOptionsProperty$Builder) id config))


(defn build-cfn-template-sheet-control-layout-configuration-property-builder
  "The build-cfn-template-sheet-control-layout-configuration-property-builder function updates a CfnTemplate$SheetControlLayoutConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SheetControlLayoutConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `gridLayout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:grid-layout` |
"
  [^CfnTemplate$SheetControlLayoutConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :grid-layout)]
    (. builder gridLayout data))
  (.build builder))


(defn cfn-template-sheet-control-layout-configuration-property-builder
  "Creates a  `CfnTemplate$SheetControlLayoutConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-sheet-control-layout-configuration-property-builder (new CfnTemplate$SheetControlLayoutConfigurationProperty$Builder) id config))


(defn build-cfn-template-sheet-control-layout-property-builder
  "The build-cfn-template-sheet-control-layout-property-builder function updates a CfnTemplate$SheetControlLayoutProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SheetControlLayoutProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configuration` | software.amazon.awscdk.services.quicksight.CfnTemplate$SheetControlLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:configuration` |
"
  [^CfnTemplate$SheetControlLayoutProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :configuration)]
    (. builder configuration data))
  (.build builder))


(defn cfn-template-sheet-control-layout-property-builder
  "Creates a  `CfnTemplate$SheetControlLayoutProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-sheet-control-layout-property-builder (new CfnTemplate$SheetControlLayoutProperty$Builder) id config))


(defn build-cfn-template-sheet-definition-property-builder
  "The build-cfn-template-sheet-definition-property-builder function updates a CfnTemplate$SheetDefinitionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SheetDefinitionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-type` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `filterControls` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-controls` |
| `layouts` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:layouts` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterControls` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameter-controls` |
| `sheetControlLayouts` | java.util.List | [[cdk.support/lookup-entry]] | `:sheet-control-layouts` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |
| `textBoxes` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-boxes` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `visuals` | java.util.List | [[cdk.support/lookup-entry]] | `:visuals` |
"
  [^CfnTemplate$SheetDefinitionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :content-type)]
    (. builder contentType data))
  (when-let [data (lookup-entry config id :description)]
    (. builder description data))
  (when-let [data (lookup-entry config id :filter-controls)]
    (. builder filterControls data))
  (when-let [data (lookup-entry config id :layouts)]
    (. builder layouts data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :parameter-controls)]
    (. builder parameterControls data))
  (when-let [data (lookup-entry config id :sheet-control-layouts)]
    (. builder sheetControlLayouts data))
  (when-let [data (lookup-entry config id :sheet-id)]
    (. builder sheetId data))
  (when-let [data (lookup-entry config id :text-boxes)]
    (. builder textBoxes data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visuals)]
    (. builder visuals data))
  (.build builder))


(defn cfn-template-sheet-definition-property-builder
  "Creates a  `CfnTemplate$SheetDefinitionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-sheet-definition-property-builder (new CfnTemplate$SheetDefinitionProperty$Builder) id config))


(defn build-cfn-template-sheet-element-configuration-overrides-property-builder
  "The build-cfn-template-sheet-element-configuration-overrides-property-builder function updates a CfnTemplate$SheetElementConfigurationOverridesProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SheetElementConfigurationOverridesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$SheetElementConfigurationOverridesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-sheet-element-configuration-overrides-property-builder
  "Creates a  `CfnTemplate$SheetElementConfigurationOverridesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-sheet-element-configuration-overrides-property-builder (new CfnTemplate$SheetElementConfigurationOverridesProperty$Builder) id config))


(defn build-cfn-template-sheet-element-rendering-rule-property-builder
  "The build-cfn-template-sheet-element-rendering-rule-property-builder function updates a CfnTemplate$SheetElementRenderingRuleProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SheetElementRenderingRuleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configurationOverrides` | software.amazon.awscdk.services.quicksight.CfnTemplate$SheetElementConfigurationOverridesProperty | [[cdk.support/lookup-entry]] | `:configuration-overrides` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
"
  [^CfnTemplate$SheetElementRenderingRuleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :configuration-overrides)]
    (. builder configurationOverrides data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (.build builder))


(defn cfn-template-sheet-element-rendering-rule-property-builder
  "Creates a  `CfnTemplate$SheetElementRenderingRuleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-sheet-element-rendering-rule-property-builder (new CfnTemplate$SheetElementRenderingRuleProperty$Builder) id config))


(defn build-cfn-template-sheet-property-builder
  "The build-cfn-template-sheet-property-builder function updates a CfnTemplate$SheetProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SheetProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |
"
  [^CfnTemplate$SheetProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :sheet-id)]
    (. builder sheetId data))
  (.build builder))


(defn cfn-template-sheet-property-builder
  "Creates a  `CfnTemplate$SheetProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-sheet-property-builder (new CfnTemplate$SheetProperty$Builder) id config))


(defn build-cfn-template-sheet-text-box-property-builder
  "The build-cfn-template-sheet-text-box-property-builder function updates a CfnTemplate$SheetTextBoxProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SheetTextBoxProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | java.lang.String | [[cdk.support/lookup-entry]] | `:content` |
| `sheetTextBoxId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-text-box-id` |
"
  [^CfnTemplate$SheetTextBoxProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :content)]
    (. builder content data))
  (when-let [data (lookup-entry config id :sheet-text-box-id)]
    (. builder sheetTextBoxId data))
  (.build builder))


(defn cfn-template-sheet-text-box-property-builder
  "Creates a  `CfnTemplate$SheetTextBoxProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-sheet-text-box-property-builder (new CfnTemplate$SheetTextBoxProperty$Builder) id config))


(defn build-cfn-template-sheet-visual-scoping-configuration-property-builder
  "The build-cfn-template-sheet-visual-scoping-configuration-property-builder function updates a CfnTemplate$SheetVisualScopingConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SheetVisualScopingConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `scope` | java.lang.String | [[cdk.support/lookup-entry]] | `:scope` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |
| `visualIds` | java.util.List | [[cdk.support/lookup-entry]] | `:visual-ids` |
"
  [^CfnTemplate$SheetVisualScopingConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :scope)]
    (. builder scope data))
  (when-let [data (lookup-entry config id :sheet-id)]
    (. builder sheetId data))
  (when-let [data (lookup-entry config id :visual-ids)]
    (. builder visualIds data))
  (.build builder))


(defn cfn-template-sheet-visual-scoping-configuration-property-builder
  "Creates a  `CfnTemplate$SheetVisualScopingConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-sheet-visual-scoping-configuration-property-builder (new CfnTemplate$SheetVisualScopingConfigurationProperty$Builder) id config))


(defn build-cfn-template-short-format-text-property-builder
  "The build-cfn-template-short-format-text-property-builder function updates a CfnTemplate$ShortFormatTextProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ShortFormatTextProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `plainText` | java.lang.String | [[cdk.support/lookup-entry]] | `:plain-text` |
| `richText` | java.lang.String | [[cdk.support/lookup-entry]] | `:rich-text` |
"
  [^CfnTemplate$ShortFormatTextProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :plain-text)]
    (. builder plainText data))
  (when-let [data (lookup-entry config id :rich-text)]
    (. builder richText data))
  (.build builder))


(defn cfn-template-short-format-text-property-builder
  "Creates a  `CfnTemplate$ShortFormatTextProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-short-format-text-property-builder (new CfnTemplate$ShortFormatTextProperty$Builder) id config))


(defn build-cfn-template-simple-cluster-marker-property-builder
  "The build-cfn-template-simple-cluster-marker-property-builder function updates a CfnTemplate$SimpleClusterMarkerProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SimpleClusterMarkerProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
"
  [^CfnTemplate$SimpleClusterMarkerProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (.build builder))


(defn cfn-template-simple-cluster-marker-property-builder
  "Creates a  `CfnTemplate$SimpleClusterMarkerProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-simple-cluster-marker-property-builder (new CfnTemplate$SimpleClusterMarkerProperty$Builder) id config))


(defn build-cfn-template-slider-control-display-options-property-builder
  "The build-cfn-template-slider-control-display-options-property-builder function updates a CfnTemplate$SliderControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SliderControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnTemplate$SliderControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-template-slider-control-display-options-property-builder
  "Creates a  `CfnTemplate$SliderControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-slider-control-display-options-property-builder (new CfnTemplate$SliderControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-template-small-multiples-axis-properties-property-builder
  "The build-cfn-template-small-multiples-axis-properties-property-builder function updates a CfnTemplate$SmallMultiplesAxisPropertiesProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SmallMultiplesAxisPropertiesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scale` | java.lang.String | [[cdk.support/lookup-entry]] | `:scale` |
"
  [^CfnTemplate$SmallMultiplesAxisPropertiesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :placement)]
    (. builder placement data))
  (when-let [data (lookup-entry config id :scale)]
    (. builder scale data))
  (.build builder))


(defn cfn-template-small-multiples-axis-properties-property-builder
  "Creates a  `CfnTemplate$SmallMultiplesAxisPropertiesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-small-multiples-axis-properties-property-builder (new CfnTemplate$SmallMultiplesAxisPropertiesProperty$Builder) id config))


(defn build-cfn-template-small-multiples-options-property-builder
  "The build-cfn-template-small-multiples-options-property-builder function updates a CfnTemplate$SmallMultiplesOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SmallMultiplesOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `maxVisibleColumns` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max-visible-columns` |
| `maxVisibleRows` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max-visible-rows` |
| `panelConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:panel-configuration` |
| `xAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | software.amazon.awscdk.services.quicksight.CfnTemplate$SmallMultiplesAxisPropertiesProperty | [[cdk.support/lookup-entry]] | `:y-axis` |
"
  [^CfnTemplate$SmallMultiplesOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :max-visible-columns)]
    (. builder maxVisibleColumns data))
  (when-let [data (lookup-entry config id :max-visible-rows)]
    (. builder maxVisibleRows data))
  (when-let [data (lookup-entry config id :panel-configuration)]
    (. builder panelConfiguration data))
  (when-let [data (lookup-entry config id :x-axis)]
    (. builder xAxis data))
  (when-let [data (lookup-entry config id :y-axis)]
    (. builder yAxis data))
  (.build builder))


(defn cfn-template-small-multiples-options-property-builder
  "Creates a  `CfnTemplate$SmallMultiplesOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-small-multiples-options-property-builder (new CfnTemplate$SmallMultiplesOptionsProperty$Builder) id config))


(defn build-cfn-template-spacing-property-builder
  "The build-cfn-template-spacing-property-builder function updates a CfnTemplate$SpacingProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SpacingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bottom` | java.lang.String | [[cdk.support/lookup-entry]] | `:bottom` |
| `left` | java.lang.String | [[cdk.support/lookup-entry]] | `:left` |
| `right` | java.lang.String | [[cdk.support/lookup-entry]] | `:right` |
| `top` | java.lang.String | [[cdk.support/lookup-entry]] | `:top` |
"
  [^CfnTemplate$SpacingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bottom)]
    (. builder bottom data))
  (when-let [data (lookup-entry config id :left)]
    (. builder left data))
  (when-let [data (lookup-entry config id :right)]
    (. builder right data))
  (when-let [data (lookup-entry config id :top)]
    (. builder top data))
  (.build builder))


(defn cfn-template-spacing-property-builder
  "Creates a  `CfnTemplate$SpacingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-spacing-property-builder (new CfnTemplate$SpacingProperty$Builder) id config))


(defn build-cfn-template-string-default-values-property-builder
  "The build-cfn-template-string-default-values-property-builder function updates a CfnTemplate$StringDefaultValuesProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$StringDefaultValuesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.services.quicksight.CfnTemplate$DynamicDefaultValueProperty | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |
"
  [^CfnTemplate$StringDefaultValuesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :dynamic-value)]
    (. builder dynamicValue data))
  (when-let [data (lookup-entry config id :static-values)]
    (. builder staticValues data))
  (.build builder))


(defn cfn-template-string-default-values-property-builder
  "Creates a  `CfnTemplate$StringDefaultValuesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-string-default-values-property-builder (new CfnTemplate$StringDefaultValuesProperty$Builder) id config))


(defn build-cfn-template-string-format-configuration-property-builder
  "The build-cfn-template-string-format-configuration-property-builder function updates a CfnTemplate$StringFormatConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$StringFormatConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numericFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-format-configuration` |
"
  [^CfnTemplate$StringFormatConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :null-value-format-configuration)]
    (. builder nullValueFormatConfiguration data))
  (when-let [data (lookup-entry config id :numeric-format-configuration)]
    (. builder numericFormatConfiguration data))
  (.build builder))


(defn cfn-template-string-format-configuration-property-builder
  "Creates a  `CfnTemplate$StringFormatConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-string-format-configuration-property-builder (new CfnTemplate$StringFormatConfigurationProperty$Builder) id config))


(defn build-cfn-template-string-parameter-declaration-property-builder
  "The build-cfn-template-string-parameter-declaration-property-builder function updates a CfnTemplate$StringParameterDeclarationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$StringParameterDeclarationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.services.quicksight.CfnTemplate$StringValueWhenUnsetConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-when-unset` |
"
  [^CfnTemplate$StringParameterDeclarationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :default-values)]
    (. builder defaultValues data))
  (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
    (. builder mappedDataSetParameters data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :parameter-value-type)]
    (. builder parameterValueType data))
  (when-let [data (lookup-entry config id :value-when-unset)]
    (. builder valueWhenUnset data))
  (.build builder))


(defn cfn-template-string-parameter-declaration-property-builder
  "Creates a  `CfnTemplate$StringParameterDeclarationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-string-parameter-declaration-property-builder (new CfnTemplate$StringParameterDeclarationProperty$Builder) id config))


(defn build-cfn-template-string-value-when-unset-configuration-property-builder
  "The build-cfn-template-string-value-when-unset-configuration-property-builder function updates a CfnTemplate$StringValueWhenUnsetConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$StringValueWhenUnsetConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |
"
  [^CfnTemplate$StringValueWhenUnsetConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-value)]
    (. builder customValue data))
  (when-let [data (lookup-entry config id :value-when-unset-option)]
    (. builder valueWhenUnsetOption data))
  (.build builder))


(defn cfn-template-string-value-when-unset-configuration-property-builder
  "Creates a  `CfnTemplate$StringValueWhenUnsetConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-string-value-when-unset-configuration-property-builder (new CfnTemplate$StringValueWhenUnsetConfigurationProperty$Builder) id config))


(defn build-cfn-template-subtotal-options-property-builder
  "The build-cfn-template-subtotal-options-property-builder function updates a CfnTemplate$SubtotalOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$SubtotalOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldLevel` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-level` |
| `fieldLevelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-level-options` |
| `metricHeaderCellStyle` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:metric-header-cell-style` |
| `styleTargets` | java.util.List | [[cdk.support/lookup-entry]] | `:style-targets` |
| `totalCellStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `valueCellStyle` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:value-cell-style` |
"
  [^CfnTemplate$SubtotalOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :field-level)]
    (. builder fieldLevel data))
  (when-let [data (lookup-entry config id :field-level-options)]
    (. builder fieldLevelOptions data))
  (when-let [data (lookup-entry config id :metric-header-cell-style)]
    (. builder metricHeaderCellStyle data))
  (when-let [data (lookup-entry config id :style-targets)]
    (. builder styleTargets data))
  (when-let [data (lookup-entry config id :total-cell-style)]
    (. builder totalCellStyle data))
  (when-let [data (lookup-entry config id :totals-visibility)]
    (. builder totalsVisibility data))
  (when-let [data (lookup-entry config id :value-cell-style)]
    (. builder valueCellStyle data))
  (.build builder))


(defn cfn-template-subtotal-options-property-builder
  "Creates a  `CfnTemplate$SubtotalOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-subtotal-options-property-builder (new CfnTemplate$SubtotalOptionsProperty$Builder) id config))


(defn build-cfn-template-table-aggregated-field-wells-property-builder
  "The build-cfn-template-table-aggregated-field-wells-property-builder function updates a CfnTemplate$TableAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-by` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$TableAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :group-by)]
    (. builder groupBy data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-table-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$TableAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-aggregated-field-wells-property-builder (new CfnTemplate$TableAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-table-border-options-property-builder
  "The build-cfn-template-table-border-options-property-builder function updates a CfnTemplate$TableBorderOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableBorderOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `style` | java.lang.String | [[cdk.support/lookup-entry]] | `:style` |
| `thickness` | java.lang.Number | [[cdk.support/lookup-entry]] | `:thickness` |
"
  [^CfnTemplate$TableBorderOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color)]
    (. builder color data))
  (when-let [data (lookup-entry config id :style)]
    (. builder style data))
  (when-let [data (lookup-entry config id :thickness)]
    (. builder thickness data))
  (.build builder))


(defn cfn-template-table-border-options-property-builder
  "Creates a  `CfnTemplate$TableBorderOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-border-options-property-builder (new CfnTemplate$TableBorderOptionsProperty$Builder) id config))


(defn build-cfn-template-table-cell-conditional-formatting-property-builder
  "The build-cfn-template-table-cell-conditional-formatting-property-builder function updates a CfnTemplate$TableCellConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableCellConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `textFormat` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-format` |
"
  [^CfnTemplate$TableCellConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :text-format)]
    (. builder textFormat data))
  (.build builder))


(defn cfn-template-table-cell-conditional-formatting-property-builder
  "Creates a  `CfnTemplate$TableCellConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-cell-conditional-formatting-property-builder (new CfnTemplate$TableCellConditionalFormattingProperty$Builder) id config))


(defn build-cfn-template-table-cell-image-sizing-configuration-property-builder
  "The build-cfn-template-table-cell-image-sizing-configuration-property-builder function updates a CfnTemplate$TableCellImageSizingConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableCellImageSizingConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `tableCellImageScalingConfiguration` | java.lang.String | [[cdk.support/lookup-entry]] | `:table-cell-image-scaling-configuration` |
"
  [^CfnTemplate$TableCellImageSizingConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :table-cell-image-scaling-configuration)]
    (. builder tableCellImageScalingConfiguration data))
  (.build builder))


(defn cfn-template-table-cell-image-sizing-configuration-property-builder
  "Creates a  `CfnTemplate$TableCellImageSizingConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-cell-image-sizing-configuration-property-builder (new CfnTemplate$TableCellImageSizingConfigurationProperty$Builder) id config))


(defn build-cfn-template-table-cell-style-property-builder
  "The build-cfn-template-table-cell-style-property-builder function updates a CfnTemplate$TableCellStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableCellStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-color` |
| `border` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:border` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `height` | java.lang.Number | [[cdk.support/lookup-entry]] | `:height` |
| `horizontalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-text-alignment` |
| `textWrap` | java.lang.String | [[cdk.support/lookup-entry]] | `:text-wrap` |
| `verticalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-text-alignment` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$TableCellStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-color)]
    (. builder backgroundColor data))
  (when-let [data (lookup-entry config id :border)]
    (. builder border data))
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (when-let [data (lookup-entry config id :height)]
    (. builder height data))
  (when-let [data (lookup-entry config id :horizontal-text-alignment)]
    (. builder horizontalTextAlignment data))
  (when-let [data (lookup-entry config id :text-wrap)]
    (. builder textWrap data))
  (when-let [data (lookup-entry config id :vertical-text-alignment)]
    (. builder verticalTextAlignment data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-table-cell-style-property-builder
  "Creates a  `CfnTemplate$TableCellStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-cell-style-property-builder (new CfnTemplate$TableCellStyleProperty$Builder) id config))


(defn build-cfn-template-table-conditional-formatting-option-property-builder
  "The build-cfn-template-table-conditional-formatting-option-property-builder function updates a CfnTemplate$TableConditionalFormattingOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableConditionalFormattingOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cell` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableCellConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:cell` |
| `row` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableRowConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:row` |
"
  [^CfnTemplate$TableConditionalFormattingOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cell)]
    (. builder cell data))
  (when-let [data (lookup-entry config id :row)]
    (. builder row data))
  (.build builder))


(defn cfn-template-table-conditional-formatting-option-property-builder
  "Creates a  `CfnTemplate$TableConditionalFormattingOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-conditional-formatting-option-property-builder (new CfnTemplate$TableConditionalFormattingOptionProperty$Builder) id config))


(defn build-cfn-template-table-conditional-formatting-property-builder
  "The build-cfn-template-table-conditional-formatting-property-builder function updates a CfnTemplate$TableConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |
"
  [^CfnTemplate$TableConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :conditional-formatting-options)]
    (. builder conditionalFormattingOptions data))
  (.build builder))


(defn cfn-template-table-conditional-formatting-property-builder
  "Creates a  `CfnTemplate$TableConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-conditional-formatting-property-builder (new CfnTemplate$TableConditionalFormattingProperty$Builder) id config))


(defn build-cfn-template-table-configuration-property-builder
  "The build-cfn-template-table-configuration-property-builder function updates a CfnTemplate$TableConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `paginatedReportOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$TablePaginatedReportOptionsProperty | [[cdk.support/lookup-entry]] | `:paginated-report-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tableInlineVisualizations` | java.util.List | [[cdk.support/lookup-entry]] | `:table-inline-visualizations` |
| `tableOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableOptionsProperty | [[cdk.support/lookup-entry]] | `:table-options` |
| `totalOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-options` |
"
  [^CfnTemplate$TableConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-options)]
    (. builder fieldOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :paginated-report-options)]
    (. builder paginatedReportOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :table-inline-visualizations)]
    (. builder tableInlineVisualizations data))
  (when-let [data (lookup-entry config id :table-options)]
    (. builder tableOptions data))
  (when-let [data (lookup-entry config id :total-options)]
    (. builder totalOptions data))
  (.build builder))


(defn cfn-template-table-configuration-property-builder
  "Creates a  `CfnTemplate$TableConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-configuration-property-builder (new CfnTemplate$TableConfigurationProperty$Builder) id config))


(defn build-cfn-template-table-field-custom-icon-content-property-builder
  "The build-cfn-template-table-field-custom-icon-content-property-builder function updates a CfnTemplate$TableFieldCustomIconContentProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableFieldCustomIconContentProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon` |
"
  [^CfnTemplate$TableFieldCustomIconContentProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (.build builder))


(defn cfn-template-table-field-custom-icon-content-property-builder
  "Creates a  `CfnTemplate$TableFieldCustomIconContentProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-field-custom-icon-content-property-builder (new CfnTemplate$TableFieldCustomIconContentProperty$Builder) id config))


(defn build-cfn-template-table-field-custom-text-content-property-builder
  "The build-cfn-template-table-field-custom-text-content-property-builder function updates a CfnTemplate$TableFieldCustomTextContentProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableFieldCustomTextContentProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `value` | java.lang.String | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$TableFieldCustomTextContentProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :font-configuration)]
    (. builder fontConfiguration data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-table-field-custom-text-content-property-builder
  "Creates a  `CfnTemplate$TableFieldCustomTextContentProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-field-custom-text-content-property-builder (new CfnTemplate$TableFieldCustomTextContentProperty$Builder) id config))


(defn build-cfn-template-table-field-image-configuration-property-builder
  "The build-cfn-template-table-field-image-configuration-property-builder function updates a CfnTemplate$TableFieldImageConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableFieldImageConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sizingOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sizing-options` |
"
  [^CfnTemplate$TableFieldImageConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :sizing-options)]
    (. builder sizingOptions data))
  (.build builder))


(defn cfn-template-table-field-image-configuration-property-builder
  "Creates a  `CfnTemplate$TableFieldImageConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-field-image-configuration-property-builder (new CfnTemplate$TableFieldImageConfigurationProperty$Builder) id config))


(defn build-cfn-template-table-field-link-configuration-property-builder
  "The build-cfn-template-table-field-link-configuration-property-builder function updates a CfnTemplate$TableFieldLinkConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableFieldLinkConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableFieldLinkContentConfigurationProperty | [[cdk.support/lookup-entry]] | `:content` |
| `target` | java.lang.String | [[cdk.support/lookup-entry]] | `:target` |
"
  [^CfnTemplate$TableFieldLinkConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :content)]
    (. builder content data))
  (when-let [data (lookup-entry config id :target)]
    (. builder target data))
  (.build builder))


(defn cfn-template-table-field-link-configuration-property-builder
  "Creates a  `CfnTemplate$TableFieldLinkConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-field-link-configuration-property-builder (new CfnTemplate$TableFieldLinkConfigurationProperty$Builder) id config))


(defn build-cfn-template-table-field-link-content-configuration-property-builder
  "The build-cfn-template-table-field-link-content-configuration-property-builder function updates a CfnTemplate$TableFieldLinkContentConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableFieldLinkContentConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customIconContent` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableFieldCustomIconContentProperty | [[cdk.support/lookup-entry]] | `:custom-icon-content` |
| `customTextContent` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-text-content` |
"
  [^CfnTemplate$TableFieldLinkContentConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-icon-content)]
    (. builder customIconContent data))
  (when-let [data (lookup-entry config id :custom-text-content)]
    (. builder customTextContent data))
  (.build builder))


(defn cfn-template-table-field-link-content-configuration-property-builder
  "Creates a  `CfnTemplate$TableFieldLinkContentConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-field-link-content-configuration-property-builder (new CfnTemplate$TableFieldLinkContentConfigurationProperty$Builder) id config))


(defn build-cfn-template-table-field-option-property-builder
  "The build-cfn-template-table-field-option-property-builder function updates a CfnTemplate$TableFieldOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableFieldOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `urlStyling` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:url-styling` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |
"
  [^CfnTemplate$TableFieldOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :url-styling)]
    (. builder urlStyling data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (when-let [data (lookup-entry config id :width)]
    (. builder width data))
  (.build builder))


(defn cfn-template-table-field-option-property-builder
  "Creates a  `CfnTemplate$TableFieldOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-field-option-property-builder (new CfnTemplate$TableFieldOptionProperty$Builder) id config))


(defn build-cfn-template-table-field-options-property-builder
  "The build-cfn-template-table-field-options-property-builder function updates a CfnTemplate$TableFieldOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableFieldOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `order` | java.util.List | [[cdk.support/lookup-entry]] | `:order` |
| `pinnedFieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:pinned-field-options` |
| `selectedFieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-field-options` |
"
  [^CfnTemplate$TableFieldOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :order)]
    (. builder order data))
  (when-let [data (lookup-entry config id :pinned-field-options)]
    (. builder pinnedFieldOptions data))
  (when-let [data (lookup-entry config id :selected-field-options)]
    (. builder selectedFieldOptions data))
  (.build builder))


(defn cfn-template-table-field-options-property-builder
  "Creates a  `CfnTemplate$TableFieldOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-field-options-property-builder (new CfnTemplate$TableFieldOptionsProperty$Builder) id config))


(defn build-cfn-template-table-field-url-configuration-property-builder
  "The build-cfn-template-table-field-url-configuration-property-builder function updates a CfnTemplate$TableFieldURLConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableFieldURLConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `imageConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableFieldImageConfigurationProperty | [[cdk.support/lookup-entry]] | `:image-configuration` |
| `linkConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableFieldLinkConfigurationProperty | [[cdk.support/lookup-entry]] | `:link-configuration` |
"
  [^CfnTemplate$TableFieldURLConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :image-configuration)]
    (. builder imageConfiguration data))
  (when-let [data (lookup-entry config id :link-configuration)]
    (. builder linkConfiguration data))
  (.build builder))


(defn cfn-template-table-field-url-configuration-property-builder
  "Creates a  `CfnTemplate$TableFieldURLConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-field-url-configuration-property-builder (new CfnTemplate$TableFieldURLConfigurationProperty$Builder) id config))


(defn build-cfn-template-table-field-wells-property-builder
  "The build-cfn-template-table-field-wells-property-builder function updates a CfnTemplate$TableFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `tableAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:table-aggregated-field-wells` |
| `tableUnaggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:table-unaggregated-field-wells` |
"
  [^CfnTemplate$TableFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :table-aggregated-field-wells)]
    (. builder tableAggregatedFieldWells data))
  (when-let [data (lookup-entry config id :table-unaggregated-field-wells)]
    (. builder tableUnaggregatedFieldWells data))
  (.build builder))


(defn cfn-template-table-field-wells-property-builder
  "Creates a  `CfnTemplate$TableFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-field-wells-property-builder (new CfnTemplate$TableFieldWellsProperty$Builder) id config))


(defn build-cfn-template-table-inline-visualization-property-builder
  "The build-cfn-template-table-inline-visualization-property-builder function updates a CfnTemplate$TableInlineVisualizationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableInlineVisualizationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataBars` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataBarsOptionsProperty | [[cdk.support/lookup-entry]] | `:data-bars` |
"
  [^CfnTemplate$TableInlineVisualizationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-bars)]
    (. builder dataBars data))
  (.build builder))


(defn cfn-template-table-inline-visualization-property-builder
  "Creates a  `CfnTemplate$TableInlineVisualizationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-inline-visualization-property-builder (new CfnTemplate$TableInlineVisualizationProperty$Builder) id config))


(defn build-cfn-template-table-options-property-builder
  "The build-cfn-template-table-options-property-builder function updates a CfnTemplate$TableOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cell-style` |
| `headerStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:header-style` |
| `orientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:orientation` |
| `rowAlternateColorOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$RowAlternateColorOptionsProperty | [[cdk.support/lookup-entry]] | `:row-alternate-color-options` |
"
  [^CfnTemplate$TableOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cell-style)]
    (. builder cellStyle data))
  (when-let [data (lookup-entry config id :header-style)]
    (. builder headerStyle data))
  (when-let [data (lookup-entry config id :orientation)]
    (. builder orientation data))
  (when-let [data (lookup-entry config id :row-alternate-color-options)]
    (. builder rowAlternateColorOptions data))
  (.build builder))


(defn cfn-template-table-options-property-builder
  "Creates a  `CfnTemplate$TableOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-options-property-builder (new CfnTemplate$TableOptionsProperty$Builder) id config))


(defn build-cfn-template-table-paginated-report-options-property-builder
  "The build-cfn-template-table-paginated-report-options-property-builder function updates a CfnTemplate$TablePaginatedReportOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TablePaginatedReportOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `overflowColumnHeaderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:overflow-column-header-visibility` |
| `verticalOverflowVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-overflow-visibility` |
"
  [^CfnTemplate$TablePaginatedReportOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :overflow-column-header-visibility)]
    (. builder overflowColumnHeaderVisibility data))
  (when-let [data (lookup-entry config id :vertical-overflow-visibility)]
    (. builder verticalOverflowVisibility data))
  (.build builder))


(defn cfn-template-table-paginated-report-options-property-builder
  "Creates a  `CfnTemplate$TablePaginatedReportOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-paginated-report-options-property-builder (new CfnTemplate$TablePaginatedReportOptionsProperty$Builder) id config))


(defn build-cfn-template-table-pinned-field-options-property-builder
  "The build-cfn-template-table-pinned-field-options-property-builder function updates a CfnTemplate$TablePinnedFieldOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TablePinnedFieldOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pinnedLeftFields` | java.util.List | [[cdk.support/lookup-entry]] | `:pinned-left-fields` |
"
  [^CfnTemplate$TablePinnedFieldOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :pinned-left-fields)]
    (. builder pinnedLeftFields data))
  (.build builder))


(defn cfn-template-table-pinned-field-options-property-builder
  "Creates a  `CfnTemplate$TablePinnedFieldOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-pinned-field-options-property-builder (new CfnTemplate$TablePinnedFieldOptionsProperty$Builder) id config))


(defn build-cfn-template-table-row-conditional-formatting-property-builder
  "The build-cfn-template-table-row-conditional-formatting-property-builder function updates a CfnTemplate$TableRowConditionalFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableRowConditionalFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:background-color` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnTemplate$TableRowConditionalFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-color)]
    (. builder backgroundColor data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-template-table-row-conditional-formatting-property-builder
  "Creates a  `CfnTemplate$TableRowConditionalFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-row-conditional-formatting-property-builder (new CfnTemplate$TableRowConditionalFormattingProperty$Builder) id config))


(defn build-cfn-template-table-side-border-options-property-builder
  "The build-cfn-template-table-side-border-options-property-builder function updates a CfnTemplate$TableSideBorderOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableSideBorderOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bottom` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bottom` |
| `innerHorizontal` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:inner-horizontal` |
| `innerVertical` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:inner-vertical` |
| `left` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:left` |
| `right` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:right` |
| `top` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:top` |
"
  [^CfnTemplate$TableSideBorderOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bottom)]
    (. builder bottom data))
  (when-let [data (lookup-entry config id :inner-horizontal)]
    (. builder innerHorizontal data))
  (when-let [data (lookup-entry config id :inner-vertical)]
    (. builder innerVertical data))
  (when-let [data (lookup-entry config id :left)]
    (. builder left data))
  (when-let [data (lookup-entry config id :right)]
    (. builder right data))
  (when-let [data (lookup-entry config id :top)]
    (. builder top data))
  (.build builder))


(defn cfn-template-table-side-border-options-property-builder
  "Creates a  `CfnTemplate$TableSideBorderOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-side-border-options-property-builder (new CfnTemplate$TableSideBorderOptionsProperty$Builder) id config))


(defn build-cfn-template-table-sort-configuration-property-builder
  "The build-cfn-template-table-sort-configuration-property-builder function updates a CfnTemplate$TableSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paginationConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$PaginationConfigurationProperty | [[cdk.support/lookup-entry]] | `:pagination-configuration` |
| `rowSort` | java.util.List | [[cdk.support/lookup-entry]] | `:row-sort` |
"
  [^CfnTemplate$TableSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :pagination-configuration)]
    (. builder paginationConfiguration data))
  (when-let [data (lookup-entry config id :row-sort)]
    (. builder rowSort data))
  (.build builder))


(defn cfn-template-table-sort-configuration-property-builder
  "Creates a  `CfnTemplate$TableSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-sort-configuration-property-builder (new CfnTemplate$TableSortConfigurationProperty$Builder) id config))


(defn build-cfn-template-table-style-target-property-builder
  "The build-cfn-template-table-style-target-property-builder function updates a CfnTemplate$TableStyleTargetProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableStyleTargetProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellType` | java.lang.String | [[cdk.support/lookup-entry]] | `:cell-type` |
"
  [^CfnTemplate$TableStyleTargetProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cell-type)]
    (. builder cellType data))
  (.build builder))


(defn cfn-template-table-style-target-property-builder
  "Creates a  `CfnTemplate$TableStyleTargetProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-style-target-property-builder (new CfnTemplate$TableStyleTargetProperty$Builder) id config))


(defn build-cfn-template-table-unaggregated-field-wells-property-builder
  "The build-cfn-template-table-unaggregated-field-wells-property-builder function updates a CfnTemplate$TableUnaggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableUnaggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$TableUnaggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-table-unaggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$TableUnaggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-unaggregated-field-wells-property-builder (new CfnTemplate$TableUnaggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-table-visual-property-builder
  "The build-cfn-template-table-visual-property-builder function updates a CfnTemplate$TableVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TableVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$TableVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :conditional-formatting)]
    (. builder conditionalFormatting data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-table-visual-property-builder
  "Creates a  `CfnTemplate$TableVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-table-visual-property-builder (new CfnTemplate$TableVisualProperty$Builder) id config))


(defn build-cfn-template-template-error-property-builder
  "The build-cfn-template-template-error-property-builder function updates a CfnTemplate$TemplateErrorProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TemplateErrorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `message` | java.lang.String | [[cdk.support/lookup-entry]] | `:message` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `violatedEntities` | java.util.List | [[cdk.support/lookup-entry]] | `:violated-entities` |
"
  [^CfnTemplate$TemplateErrorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :message)]
    (. builder message data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :violated-entities)]
    (. builder violatedEntities data))
  (.build builder))


(defn cfn-template-template-error-property-builder
  "Creates a  `CfnTemplate$TemplateErrorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-template-error-property-builder (new CfnTemplate$TemplateErrorProperty$Builder) id config))


(defn build-cfn-template-template-source-analysis-property-builder
  "The build-cfn-template-template-source-analysis-property-builder function updates a CfnTemplate$TemplateSourceAnalysisProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TemplateSourceAnalysisProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arn` | java.lang.String | [[cdk.support/lookup-entry]] | `:arn` |
| `dataSetReferences` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-set-references` |
"
  [^CfnTemplate$TemplateSourceAnalysisProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arn)]
    (. builder arn data))
  (when-let [data (lookup-entry config id :data-set-references)]
    (. builder dataSetReferences data))
  (.build builder))


(defn cfn-template-template-source-analysis-property-builder
  "Creates a  `CfnTemplate$TemplateSourceAnalysisProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-template-source-analysis-property-builder (new CfnTemplate$TemplateSourceAnalysisProperty$Builder) id config))


(defn build-cfn-template-template-source-entity-property-builder
  "The build-cfn-template-template-source-entity-property-builder function updates a CfnTemplate$TemplateSourceEntityProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TemplateSourceEntityProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sourceAnalysis` | software.amazon.awscdk.services.quicksight.CfnTemplate$TemplateSourceAnalysisProperty | [[cdk.support/lookup-entry]] | `:source-analysis` |
| `sourceTemplate` | software.amazon.awscdk.services.quicksight.CfnTemplate$TemplateSourceTemplateProperty | [[cdk.support/lookup-entry]] | `:source-template` |
"
  [^CfnTemplate$TemplateSourceEntityProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :source-analysis)]
    (. builder sourceAnalysis data))
  (when-let [data (lookup-entry config id :source-template)]
    (. builder sourceTemplate data))
  (.build builder))


(defn cfn-template-template-source-entity-property-builder
  "Creates a  `CfnTemplate$TemplateSourceEntityProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-template-source-entity-property-builder (new CfnTemplate$TemplateSourceEntityProperty$Builder) id config))


(defn build-cfn-template-template-source-template-property-builder
  "The build-cfn-template-template-source-template-property-builder function updates a CfnTemplate$TemplateSourceTemplateProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TemplateSourceTemplateProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arn` | java.lang.String | [[cdk.support/lookup-entry]] | `:arn` |
"
  [^CfnTemplate$TemplateSourceTemplateProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arn)]
    (. builder arn data))
  (.build builder))


(defn cfn-template-template-source-template-property-builder
  "Creates a  `CfnTemplate$TemplateSourceTemplateProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-template-source-template-property-builder (new CfnTemplate$TemplateSourceTemplateProperty$Builder) id config))


(defn build-cfn-template-template-version-definition-property-builder
  "The build-cfn-template-template-version-definition-property-builder function updates a CfnTemplate$TemplateVersionDefinitionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TemplateVersionDefinitionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `analysisDefaults` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:analysis-defaults` |
| `calculatedFields` | java.util.List | [[cdk.support/lookup-entry]] | `:calculated-fields` |
| `columnConfigurations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-configurations` |
| `dataSetConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:data-set-configurations` |
| `filterGroups` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-groups` |
| `options` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:options` |
| `parameterDeclarations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameter-declarations` |
| `sheets` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sheets` |
"
  [^CfnTemplate$TemplateVersionDefinitionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :analysis-defaults)]
    (. builder analysisDefaults data))
  (when-let [data (lookup-entry config id :calculated-fields)]
    (. builder calculatedFields data))
  (when-let [data (lookup-entry config id :column-configurations)]
    (. builder columnConfigurations data))
  (when-let [data (lookup-entry config id :data-set-configurations)]
    (. builder dataSetConfigurations data))
  (when-let [data (lookup-entry config id :filter-groups)]
    (. builder filterGroups data))
  (when-let [data (lookup-entry config id :options)]
    (. builder options data))
  (when-let [data (lookup-entry config id :parameter-declarations)]
    (. builder parameterDeclarations data))
  (when-let [data (lookup-entry config id :sheets)]
    (. builder sheets data))
  (.build builder))


(defn cfn-template-template-version-definition-property-builder
  "Creates a  `CfnTemplate$TemplateVersionDefinitionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-template-version-definition-property-builder (new CfnTemplate$TemplateVersionDefinitionProperty$Builder) id config))


(defn build-cfn-template-template-version-property-builder
  "The build-cfn-template-template-version-property-builder function updates a CfnTemplate$TemplateVersionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TemplateVersionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `createdTime` | java.lang.String | [[cdk.support/lookup-entry]] | `:created-time` |
| `dataSetConfigurations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-set-configurations` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `errors` | java.util.List | [[cdk.support/lookup-entry]] | `:errors` |
| `sheets` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sheets` |
| `sourceEntityArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-entity-arn` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `themeArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:theme-arn` |
| `versionNumber` | java.lang.Number | [[cdk.support/lookup-entry]] | `:version-number` |
"
  [^CfnTemplate$TemplateVersionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :created-time)]
    (. builder createdTime data))
  (when-let [data (lookup-entry config id :data-set-configurations)]
    (. builder dataSetConfigurations data))
  (when-let [data (lookup-entry config id :description)]
    (. builder description data))
  (when-let [data (lookup-entry config id :errors)]
    (. builder errors data))
  (when-let [data (lookup-entry config id :sheets)]
    (. builder sheets data))
  (when-let [data (lookup-entry config id :source-entity-arn)]
    (. builder sourceEntityArn data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (when-let [data (lookup-entry config id :theme-arn)]
    (. builder themeArn data))
  (when-let [data (lookup-entry config id :version-number)]
    (. builder versionNumber data))
  (.build builder))


(defn cfn-template-template-version-property-builder
  "Creates a  `CfnTemplate$TemplateVersionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-template-version-property-builder (new CfnTemplate$TemplateVersionProperty$Builder) id config))


(defn build-cfn-template-text-area-control-display-options-property-builder
  "The build-cfn-template-text-area-control-display-options-property-builder function updates a CfnTemplate$TextAreaControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TextAreaControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `placeholderOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:placeholder-options` |
| `titleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnTemplate$TextAreaControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :placeholder-options)]
    (. builder placeholderOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-template-text-area-control-display-options-property-builder
  "Creates a  `CfnTemplate$TextAreaControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-text-area-control-display-options-property-builder (new CfnTemplate$TextAreaControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-template-text-conditional-format-property-builder
  "The build-cfn-template-text-conditional-format-property-builder function updates a CfnTemplate$TextConditionalFormatProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TextConditionalFormatProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:background-color` |
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |
"
  [^CfnTemplate$TextConditionalFormatProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :background-color)]
    (. builder backgroundColor data))
  (when-let [data (lookup-entry config id :icon)]
    (. builder icon data))
  (when-let [data (lookup-entry config id :text-color)]
    (. builder textColor data))
  (.build builder))


(defn cfn-template-text-conditional-format-property-builder
  "Creates a  `CfnTemplate$TextConditionalFormatProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-text-conditional-format-property-builder (new CfnTemplate$TextConditionalFormatProperty$Builder) id config))


(defn build-cfn-template-text-control-placeholder-options-property-builder
  "The build-cfn-template-text-control-placeholder-options-property-builder function updates a CfnTemplate$TextControlPlaceholderOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TextControlPlaceholderOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$TextControlPlaceholderOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-text-control-placeholder-options-property-builder
  "Creates a  `CfnTemplate$TextControlPlaceholderOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-text-control-placeholder-options-property-builder (new CfnTemplate$TextControlPlaceholderOptionsProperty$Builder) id config))


(defn build-cfn-template-text-field-control-display-options-property-builder
  "The build-cfn-template-text-field-control-display-options-property-builder function updates a CfnTemplate$TextFieldControlDisplayOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TextFieldControlDisplayOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `placeholderOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:placeholder-options` |
| `titleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title-options` |
"
  [^CfnTemplate$TextFieldControlDisplayOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :info-icon-label-options)]
    (. builder infoIconLabelOptions data))
  (when-let [data (lookup-entry config id :placeholder-options)]
    (. builder placeholderOptions data))
  (when-let [data (lookup-entry config id :title-options)]
    (. builder titleOptions data))
  (.build builder))


(defn cfn-template-text-field-control-display-options-property-builder
  "Creates a  `CfnTemplate$TextFieldControlDisplayOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-text-field-control-display-options-property-builder (new CfnTemplate$TextFieldControlDisplayOptionsProperty$Builder) id config))


(defn build-cfn-template-thousand-separator-options-property-builder
  "The build-cfn-template-thousand-separator-options-property-builder function updates a CfnTemplate$ThousandSeparatorOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ThousandSeparatorOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `symbol` | java.lang.String | [[cdk.support/lookup-entry]] | `:symbol` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$ThousandSeparatorOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :symbol)]
    (. builder symbol data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-thousand-separator-options-property-builder
  "Creates a  `CfnTemplate$ThousandSeparatorOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-thousand-separator-options-property-builder (new CfnTemplate$ThousandSeparatorOptionsProperty$Builder) id config))


(defn build-cfn-template-time-based-forecast-properties-property-builder
  "The build-cfn-template-time-based-forecast-properties-property-builder function updates a CfnTemplate$TimeBasedForecastPropertiesProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TimeBasedForecastPropertiesProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lowerBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:lower-boundary` |
| `periodsBackward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-backward` |
| `periodsForward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-forward` |
| `predictionInterval` | java.lang.Number | [[cdk.support/lookup-entry]] | `:prediction-interval` |
| `seasonality` | java.lang.Number | [[cdk.support/lookup-entry]] | `:seasonality` |
| `upperBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:upper-boundary` |
"
  [^CfnTemplate$TimeBasedForecastPropertiesProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :lower-boundary)]
    (. builder lowerBoundary data))
  (when-let [data (lookup-entry config id :periods-backward)]
    (. builder periodsBackward data))
  (when-let [data (lookup-entry config id :periods-forward)]
    (. builder periodsForward data))
  (when-let [data (lookup-entry config id :prediction-interval)]
    (. builder predictionInterval data))
  (when-let [data (lookup-entry config id :seasonality)]
    (. builder seasonality data))
  (when-let [data (lookup-entry config id :upper-boundary)]
    (. builder upperBoundary data))
  (.build builder))


(defn cfn-template-time-based-forecast-properties-property-builder
  "Creates a  `CfnTemplate$TimeBasedForecastPropertiesProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-time-based-forecast-properties-property-builder (new CfnTemplate$TimeBasedForecastPropertiesProperty$Builder) id config))


(defn build-cfn-template-time-equality-filter-property-builder
  "The build-cfn-template-time-equality-filter-property-builder function updates a CfnTemplate$TimeEqualityFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TimeEqualityFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `rollingDate` | software.amazon.awscdk.services.quicksight.CfnTemplate$RollingDateConfigurationProperty | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
| `value` | java.lang.String | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$TimeEqualityFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (when-let [data (lookup-entry config id :rolling-date)]
    (. builder rollingDate data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-time-equality-filter-property-builder
  "Creates a  `CfnTemplate$TimeEqualityFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-time-equality-filter-property-builder (new CfnTemplate$TimeEqualityFilterProperty$Builder) id config))


(defn build-cfn-template-time-range-drill-down-filter-property-builder
  "The build-cfn-template-time-range-drill-down-filter-property-builder function updates a CfnTemplate$TimeRangeDrillDownFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TimeRangeDrillDownFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `rangeMaximum` | java.lang.String | [[cdk.support/lookup-entry]] | `:range-maximum` |
| `rangeMinimum` | java.lang.String | [[cdk.support/lookup-entry]] | `:range-minimum` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnTemplate$TimeRangeDrillDownFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :range-maximum)]
    (. builder rangeMaximum data))
  (when-let [data (lookup-entry config id :range-minimum)]
    (. builder rangeMinimum data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-template-time-range-drill-down-filter-property-builder
  "Creates a  `CfnTemplate$TimeRangeDrillDownFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-time-range-drill-down-filter-property-builder (new CfnTemplate$TimeRangeDrillDownFilterProperty$Builder) id config))


(defn build-cfn-template-time-range-filter-property-builder
  "The build-cfn-template-time-range-filter-property-builder function updates a CfnTemplate$TimeRangeFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TimeRangeFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `excludePeriodConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:exclude-period-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `includeMaximum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-maximum` |
| `includeMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-minimum` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `rangeMaximumValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-maximum-value` |
| `rangeMinimumValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-minimum-value` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnTemplate$TimeRangeFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :exclude-period-configuration)]
    (. builder excludePeriodConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :include-maximum)]
    (. builder includeMaximum data))
  (when-let [data (lookup-entry config id :include-minimum)]
    (. builder includeMinimum data))
  (when-let [data (lookup-entry config id :null-option)]
    (. builder nullOption data))
  (when-let [data (lookup-entry config id :range-maximum-value)]
    (. builder rangeMaximumValue data))
  (when-let [data (lookup-entry config id :range-minimum-value)]
    (. builder rangeMinimumValue data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-template-time-range-filter-property-builder
  "Creates a  `CfnTemplate$TimeRangeFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-time-range-filter-property-builder (new CfnTemplate$TimeRangeFilterProperty$Builder) id config))


(defn build-cfn-template-time-range-filter-value-property-builder
  "The build-cfn-template-time-range-filter-value-property-builder function updates a CfnTemplate$TimeRangeFilterValueProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TimeRangeFilterValueProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameter` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter` |
| `rollingDate` | software.amazon.awscdk.services.quicksight.CfnTemplate$RollingDateConfigurationProperty | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `staticValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:static-value` |
"
  [^CfnTemplate$TimeRangeFilterValueProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :parameter)]
    (. builder parameter data))
  (when-let [data (lookup-entry config id :rolling-date)]
    (. builder rollingDate data))
  (when-let [data (lookup-entry config id :static-value)]
    (. builder staticValue data))
  (.build builder))


(defn cfn-template-time-range-filter-value-property-builder
  "Creates a  `CfnTemplate$TimeRangeFilterValueProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-time-range-filter-value-property-builder (new CfnTemplate$TimeRangeFilterValueProperty$Builder) id config))


(defn build-cfn-template-tooltip-item-property-builder
  "The build-cfn-template-tooltip-item-property-builder function updates a CfnTemplate$TooltipItemProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TooltipItemProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnTooltipItem` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnTooltipItemProperty | [[cdk.support/lookup-entry]] | `:column-tooltip-item` |
| `fieldTooltipItem` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-tooltip-item` |
"
  [^CfnTemplate$TooltipItemProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column-tooltip-item)]
    (. builder columnTooltipItem data))
  (when-let [data (lookup-entry config id :field-tooltip-item)]
    (. builder fieldTooltipItem data))
  (.build builder))


(defn cfn-template-tooltip-item-property-builder
  "Creates a  `CfnTemplate$TooltipItemProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-tooltip-item-property-builder (new CfnTemplate$TooltipItemProperty$Builder) id config))


(defn build-cfn-template-tooltip-options-property-builder
  "The build-cfn-template-tooltip-options-property-builder function updates a CfnTemplate$TooltipOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TooltipOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldBasedTooltip` | software.amazon.awscdk.services.quicksight.CfnTemplate$FieldBasedTooltipProperty | [[cdk.support/lookup-entry]] | `:field-based-tooltip` |
| `selectedTooltipType` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-tooltip-type` |
| `tooltipVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-visibility` |
"
  [^CfnTemplate$TooltipOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-based-tooltip)]
    (. builder fieldBasedTooltip data))
  (when-let [data (lookup-entry config id :selected-tooltip-type)]
    (. builder selectedTooltipType data))
  (when-let [data (lookup-entry config id :tooltip-visibility)]
    (. builder tooltipVisibility data))
  (.build builder))


(defn cfn-template-tooltip-options-property-builder
  "Creates a  `CfnTemplate$TooltipOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-tooltip-options-property-builder (new CfnTemplate$TooltipOptionsProperty$Builder) id config))


(defn build-cfn-template-top-bottom-filter-property-builder
  "The build-cfn-template-top-bottom-filter-property-builder function updates a CfnTemplate$TopBottomFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TopBottomFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationSortConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:aggregation-sort-configurations` |
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `limit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:limit` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnTemplate$TopBottomFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation-sort-configurations)]
    (. builder aggregationSortConfigurations data))
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :default-filter-control-configuration)]
    (. builder defaultFilterControlConfiguration data))
  (when-let [data (lookup-entry config id :filter-id)]
    (. builder filterId data))
  (when-let [data (lookup-entry config id :limit)]
    (. builder limit data))
  (when-let [data (lookup-entry config id :parameter-name)]
    (. builder parameterName data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-template-top-bottom-filter-property-builder
  "Creates a  `CfnTemplate$TopBottomFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-top-bottom-filter-property-builder (new CfnTemplate$TopBottomFilterProperty$Builder) id config))


(defn build-cfn-template-top-bottom-movers-computation-property-builder
  "The build-cfn-template-top-bottom-movers-computation-property-builder function updates a CfnTemplate$TopBottomMoversComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TopBottomMoversComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `moverSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:mover-size` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `sortOrder` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-order` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.services.quicksight.CfnTemplate$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$TopBottomMoversComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :mover-size)]
    (. builder moverSize data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :sort-order)]
    (. builder sortOrder data))
  (when-let [data (lookup-entry config id :time)]
    (. builder time data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-top-bottom-movers-computation-property-builder
  "Creates a  `CfnTemplate$TopBottomMoversComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-top-bottom-movers-computation-property-builder (new CfnTemplate$TopBottomMoversComputationProperty$Builder) id config))


(defn build-cfn-template-top-bottom-ranked-computation-property-builder
  "The build-cfn-template-top-bottom-ranked-computation-property-builder function updates a CfnTemplate$TopBottomRankedComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TopBottomRankedComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `resultSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:result-size` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.services.quicksight.CfnTemplate$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$TopBottomRankedComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :result-size)]
    (. builder resultSize data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-top-bottom-ranked-computation-property-builder
  "Creates a  `CfnTemplate$TopBottomRankedComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-top-bottom-ranked-computation-property-builder (new CfnTemplate$TopBottomRankedComputationProperty$Builder) id config))


(defn build-cfn-template-total-aggregation-computation-property-builder
  "The build-cfn-template-total-aggregation-computation-property-builder function updates a CfnTemplate$TotalAggregationComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TotalAggregationComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `value` | software.amazon.awscdk.services.quicksight.CfnTemplate$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$TotalAggregationComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-total-aggregation-computation-property-builder
  "Creates a  `CfnTemplate$TotalAggregationComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-total-aggregation-computation-property-builder (new CfnTemplate$TotalAggregationComputationProperty$Builder) id config))


(defn build-cfn-template-total-aggregation-function-property-builder
  "The build-cfn-template-total-aggregation-function-property-builder function updates a CfnTemplate$TotalAggregationFunctionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TotalAggregationFunctionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleTotalAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-total-aggregation-function` |
"
  [^CfnTemplate$TotalAggregationFunctionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :simple-total-aggregation-function)]
    (. builder simpleTotalAggregationFunction data))
  (.build builder))


(defn cfn-template-total-aggregation-function-property-builder
  "Creates a  `CfnTemplate$TotalAggregationFunctionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-total-aggregation-function-property-builder (new CfnTemplate$TotalAggregationFunctionProperty$Builder) id config))


(defn build-cfn-template-total-aggregation-option-property-builder
  "The build-cfn-template-total-aggregation-option-property-builder function updates a CfnTemplate$TotalAggregationOptionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TotalAggregationOptionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `totalAggregationFunction` | software.amazon.awscdk.services.quicksight.CfnTemplate$TotalAggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:total-aggregation-function` |
"
  [^CfnTemplate$TotalAggregationOptionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :total-aggregation-function)]
    (. builder totalAggregationFunction data))
  (.build builder))


(defn cfn-template-total-aggregation-option-property-builder
  "Creates a  `CfnTemplate$TotalAggregationOptionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-total-aggregation-option-property-builder (new CfnTemplate$TotalAggregationOptionProperty$Builder) id config))


(defn build-cfn-template-total-options-property-builder
  "The build-cfn-template-total-options-property-builder function updates a CfnTemplate$TotalOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TotalOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scrollStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:scroll-status` |
| `totalAggregationOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:total-aggregation-options` |
| `totalCellStyle` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
"
  [^CfnTemplate$TotalOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :custom-label)]
    (. builder customLabel data))
  (when-let [data (lookup-entry config id :placement)]
    (. builder placement data))
  (when-let [data (lookup-entry config id :scroll-status)]
    (. builder scrollStatus data))
  (when-let [data (lookup-entry config id :total-aggregation-options)]
    (. builder totalAggregationOptions data))
  (when-let [data (lookup-entry config id :total-cell-style)]
    (. builder totalCellStyle data))
  (when-let [data (lookup-entry config id :totals-visibility)]
    (. builder totalsVisibility data))
  (.build builder))


(defn cfn-template-total-options-property-builder
  "Creates a  `CfnTemplate$TotalOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-total-options-property-builder (new CfnTemplate$TotalOptionsProperty$Builder) id config))


(defn build-cfn-template-tree-map-aggregated-field-wells-property-builder
  "The build-cfn-template-tree-map-aggregated-field-wells-property-builder function updates a CfnTemplate$TreeMapAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TreeMapAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `groups` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:groups` |
| `sizes` | java.util.List | [[cdk.support/lookup-entry]] | `:sizes` |
"
  [^CfnTemplate$TreeMapAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :groups)]
    (. builder groups data))
  (when-let [data (lookup-entry config id :sizes)]
    (. builder sizes data))
  (.build builder))


(defn cfn-template-tree-map-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$TreeMapAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-tree-map-aggregated-field-wells-property-builder (new CfnTemplate$TreeMapAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-tree-map-configuration-property-builder
  "The build-cfn-template-tree-map-configuration-property-builder function updates a CfnTemplate$TreeMapConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TreeMapConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `colorScale` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColorScaleProperty | [[cdk.support/lookup-entry]] | `:color-scale` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `groupLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-label-options` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `sizeLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:size-label-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
"
  [^CfnTemplate$TreeMapConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :color-label-options)]
    (. builder colorLabelOptions data))
  (when-let [data (lookup-entry config id :color-scale)]
    (. builder colorScale data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :group-label-options)]
    (. builder groupLabelOptions data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :size-label-options)]
    (. builder sizeLabelOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :tooltip)]
    (. builder tooltip data))
  (.build builder))


(defn cfn-template-tree-map-configuration-property-builder
  "Creates a  `CfnTemplate$TreeMapConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-tree-map-configuration-property-builder (new CfnTemplate$TreeMapConfigurationProperty$Builder) id config))


(defn build-cfn-template-tree-map-field-wells-property-builder
  "The build-cfn-template-tree-map-field-wells-property-builder function updates a CfnTemplate$TreeMapFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TreeMapFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treeMapAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tree-map-aggregated-field-wells` |
"
  [^CfnTemplate$TreeMapFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :tree-map-aggregated-field-wells)]
    (. builder treeMapAggregatedFieldWells data))
  (.build builder))


(defn cfn-template-tree-map-field-wells-property-builder
  "Creates a  `CfnTemplate$TreeMapFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-tree-map-field-wells-property-builder (new CfnTemplate$TreeMapFieldWellsProperty$Builder) id config))


(defn build-cfn-template-tree-map-sort-configuration-property-builder
  "The build-cfn-template-tree-map-sort-configuration-property-builder function updates a CfnTemplate$TreeMapSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TreeMapSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treeMapGroupItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:tree-map-group-items-limit-configuration` |
| `treeMapSort` | java.util.List | [[cdk.support/lookup-entry]] | `:tree-map-sort` |
"
  [^CfnTemplate$TreeMapSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :tree-map-group-items-limit-configuration)]
    (. builder treeMapGroupItemsLimitConfiguration data))
  (when-let [data (lookup-entry config id :tree-map-sort)]
    (. builder treeMapSort data))
  (.build builder))


(defn cfn-template-tree-map-sort-configuration-property-builder
  "Creates a  `CfnTemplate$TreeMapSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-tree-map-sort-configuration-property-builder (new CfnTemplate$TreeMapSortConfigurationProperty$Builder) id config))


(defn build-cfn-template-tree-map-visual-property-builder
  "The build-cfn-template-tree-map-visual-property-builder function updates a CfnTemplate$TreeMapVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TreeMapVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$TreeMapConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$TreeMapVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-tree-map-visual-property-builder
  "Creates a  `CfnTemplate$TreeMapVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-tree-map-visual-property-builder (new CfnTemplate$TreeMapVisualProperty$Builder) id config))


(defn build-cfn-template-trend-arrow-options-property-builder
  "The build-cfn-template-trend-arrow-options-property-builder function updates a CfnTemplate$TrendArrowOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$TrendArrowOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$TrendArrowOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-trend-arrow-options-property-builder
  "Creates a  `CfnTemplate$TrendArrowOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-trend-arrow-options-property-builder (new CfnTemplate$TrendArrowOptionsProperty$Builder) id config))


(defn build-cfn-template-unaggregated-field-property-builder
  "The build-cfn-template-unaggregated-field-property-builder function updates a CfnTemplate$UnaggregatedFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$UnaggregatedFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
"
  [^CfnTemplate$UnaggregatedFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :column)]
    (. builder column data))
  (when-let [data (lookup-entry config id :field-id)]
    (. builder fieldId data))
  (when-let [data (lookup-entry config id :format-configuration)]
    (. builder formatConfiguration data))
  (.build builder))


(defn cfn-template-unaggregated-field-property-builder
  "Creates a  `CfnTemplate$UnaggregatedFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-unaggregated-field-property-builder (new CfnTemplate$UnaggregatedFieldProperty$Builder) id config))


(defn build-cfn-template-unique-values-computation-property-builder
  "The build-cfn-template-unique-values-computation-property-builder function updates a CfnTemplate$UniqueValuesComputationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$UniqueValuesComputationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.services.quicksight.CfnTemplate$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
"
  [^CfnTemplate$UniqueValuesComputationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category)]
    (. builder category data))
  (when-let [data (lookup-entry config id :computation-id)]
    (. builder computationId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (.build builder))


(defn cfn-template-unique-values-computation-property-builder
  "Creates a  `CfnTemplate$UniqueValuesComputationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-unique-values-computation-property-builder (new CfnTemplate$UniqueValuesComputationProperty$Builder) id config))


(defn build-cfn-template-validation-strategy-property-builder
  "The build-cfn-template-validation-strategy-property-builder function updates a CfnTemplate$ValidationStrategyProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$ValidationStrategyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `mode` | java.lang.String | [[cdk.support/lookup-entry]] | `:mode` |
"
  [^CfnTemplate$ValidationStrategyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :mode)]
    (. builder mode data))
  (.build builder))


(defn cfn-template-validation-strategy-property-builder
  "Creates a  `CfnTemplate$ValidationStrategyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-validation-strategy-property-builder (new CfnTemplate$ValidationStrategyProperty$Builder) id config))


(defn build-cfn-template-visible-range-options-property-builder
  "The build-cfn-template-visible-range-options-property-builder function updates a CfnTemplate$VisibleRangeOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$VisibleRangeOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentRange` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:percent-range` |
"
  [^CfnTemplate$VisibleRangeOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :percent-range)]
    (. builder percentRange data))
  (.build builder))


(defn cfn-template-visible-range-options-property-builder
  "Creates a  `CfnTemplate$VisibleRangeOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-visible-range-options-property-builder (new CfnTemplate$VisibleRangeOptionsProperty$Builder) id config))


(defn build-cfn-template-visual-custom-action-operation-property-builder
  "The build-cfn-template-visual-custom-action-operation-property-builder function updates a CfnTemplate$VisualCustomActionOperationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$VisualCustomActionOperationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `filterOperation` | software.amazon.awscdk.services.quicksight.CfnTemplate$CustomActionFilterOperationProperty | [[cdk.support/lookup-entry]] | `:filter-operation` |
| `navigationOperation` | software.amazon.awscdk.services.quicksight.CfnTemplate$CustomActionNavigationOperationProperty | [[cdk.support/lookup-entry]] | `:navigation-operation` |
| `setParametersOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:set-parameters-operation` |
| `urlOperation` | software.amazon.awscdk.services.quicksight.CfnTemplate$CustomActionURLOperationProperty | [[cdk.support/lookup-entry]] | `:url-operation` |
"
  [^CfnTemplate$VisualCustomActionOperationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :filter-operation)]
    (. builder filterOperation data))
  (when-let [data (lookup-entry config id :navigation-operation)]
    (. builder navigationOperation data))
  (when-let [data (lookup-entry config id :set-parameters-operation)]
    (. builder setParametersOperation data))
  (when-let [data (lookup-entry config id :url-operation)]
    (. builder urlOperation data))
  (.build builder))


(defn cfn-template-visual-custom-action-operation-property-builder
  "Creates a  `CfnTemplate$VisualCustomActionOperationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-visual-custom-action-operation-property-builder (new CfnTemplate$VisualCustomActionOperationProperty$Builder) id config))


(defn build-cfn-template-visual-custom-action-property-builder
  "The build-cfn-template-visual-custom-action-property-builder function updates a CfnTemplate$VisualCustomActionProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$VisualCustomActionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actionOperations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:action-operations` |
| `customActionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-action-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `trigger` | java.lang.String | [[cdk.support/lookup-entry]] | `:trigger` |
"
  [^CfnTemplate$VisualCustomActionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :action-operations)]
    (. builder actionOperations data))
  (when-let [data (lookup-entry config id :custom-action-id)]
    (. builder customActionId data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (when-let [data (lookup-entry config id :trigger)]
    (. builder trigger data))
  (.build builder))


(defn cfn-template-visual-custom-action-property-builder
  "Creates a  `CfnTemplate$VisualCustomActionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-visual-custom-action-property-builder (new CfnTemplate$VisualCustomActionProperty$Builder) id config))


(defn build-cfn-template-visual-palette-property-builder
  "The build-cfn-template-visual-palette-property-builder function updates a CfnTemplate$VisualPaletteProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$VisualPaletteProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `chartColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:chart-color` |
| `colorMap` | java.util.List | [[cdk.support/lookup-entry]] | `:color-map` |
"
  [^CfnTemplate$VisualPaletteProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :chart-color)]
    (. builder chartColor data))
  (when-let [data (lookup-entry config id :color-map)]
    (. builder colorMap data))
  (.build builder))


(defn cfn-template-visual-palette-property-builder
  "Creates a  `CfnTemplate$VisualPaletteProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-visual-palette-property-builder (new CfnTemplate$VisualPaletteProperty$Builder) id config))


(defn build-cfn-template-visual-property-builder
  "The build-cfn-template-visual-property-builder function updates a CfnTemplate$VisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$VisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bar-chart-visual` |
| `boxPlotVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:box-plot-visual` |
| `comboChartVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$ComboChartVisualProperty | [[cdk.support/lookup-entry]] | `:combo-chart-visual` |
| `customContentVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-content-visual` |
| `emptyVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:empty-visual` |
| `filledMapVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilledMapVisualProperty | [[cdk.support/lookup-entry]] | `:filled-map-visual` |
| `funnelChartVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$FunnelChartVisualProperty | [[cdk.support/lookup-entry]] | `:funnel-chart-visual` |
| `gaugeChartVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$GaugeChartVisualProperty | [[cdk.support/lookup-entry]] | `:gauge-chart-visual` |
| `geospatialMapVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:geospatial-map-visual` |
| `heatMapVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heat-map-visual` |
| `histogramVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:histogram-visual` |
| `insightVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:insight-visual` |
| `kpiVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$KPIVisualProperty | [[cdk.support/lookup-entry]] | `:kpi-visual` |
| `lineChartVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$LineChartVisualProperty | [[cdk.support/lookup-entry]] | `:line-chart-visual` |
| `pieChartVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$PieChartVisualProperty | [[cdk.support/lookup-entry]] | `:pie-chart-visual` |
| `pivotTableVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableVisualProperty | [[cdk.support/lookup-entry]] | `:pivot-table-visual` |
| `radarChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:radar-chart-visual` |
| `sankeyDiagramVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sankey-diagram-visual` |
| `scatterPlotVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$ScatterPlotVisualProperty | [[cdk.support/lookup-entry]] | `:scatter-plot-visual` |
| `tableVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableVisualProperty | [[cdk.support/lookup-entry]] | `:table-visual` |
| `treeMapVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tree-map-visual` |
| `waterfallVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$WaterfallVisualProperty | [[cdk.support/lookup-entry]] | `:waterfall-visual` |
| `wordCloudVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:word-cloud-visual` |
"
  [^CfnTemplate$VisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :bar-chart-visual)]
    (. builder barChartVisual data))
  (when-let [data (lookup-entry config id :box-plot-visual)]
    (. builder boxPlotVisual data))
  (when-let [data (lookup-entry config id :combo-chart-visual)]
    (. builder comboChartVisual data))
  (when-let [data (lookup-entry config id :custom-content-visual)]
    (. builder customContentVisual data))
  (when-let [data (lookup-entry config id :empty-visual)]
    (. builder emptyVisual data))
  (when-let [data (lookup-entry config id :filled-map-visual)]
    (. builder filledMapVisual data))
  (when-let [data (lookup-entry config id :funnel-chart-visual)]
    (. builder funnelChartVisual data))
  (when-let [data (lookup-entry config id :gauge-chart-visual)]
    (. builder gaugeChartVisual data))
  (when-let [data (lookup-entry config id :geospatial-map-visual)]
    (. builder geospatialMapVisual data))
  (when-let [data (lookup-entry config id :heat-map-visual)]
    (. builder heatMapVisual data))
  (when-let [data (lookup-entry config id :histogram-visual)]
    (. builder histogramVisual data))
  (when-let [data (lookup-entry config id :insight-visual)]
    (. builder insightVisual data))
  (when-let [data (lookup-entry config id :kpi-visual)]
    (. builder kpiVisual data))
  (when-let [data (lookup-entry config id :line-chart-visual)]
    (. builder lineChartVisual data))
  (when-let [data (lookup-entry config id :pie-chart-visual)]
    (. builder pieChartVisual data))
  (when-let [data (lookup-entry config id :pivot-table-visual)]
    (. builder pivotTableVisual data))
  (when-let [data (lookup-entry config id :radar-chart-visual)]
    (. builder radarChartVisual data))
  (when-let [data (lookup-entry config id :sankey-diagram-visual)]
    (. builder sankeyDiagramVisual data))
  (when-let [data (lookup-entry config id :scatter-plot-visual)]
    (. builder scatterPlotVisual data))
  (when-let [data (lookup-entry config id :table-visual)]
    (. builder tableVisual data))
  (when-let [data (lookup-entry config id :tree-map-visual)]
    (. builder treeMapVisual data))
  (when-let [data (lookup-entry config id :waterfall-visual)]
    (. builder waterfallVisual data))
  (when-let [data (lookup-entry config id :word-cloud-visual)]
    (. builder wordCloudVisual data))
  (.build builder))


(defn cfn-template-visual-property-builder
  "Creates a  `CfnTemplate$VisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-visual-property-builder (new CfnTemplate$VisualProperty$Builder) id config))


(defn build-cfn-template-visual-subtitle-label-options-property-builder
  "The build-cfn-template-visual-subtitle-label-options-property-builder function updates a CfnTemplate$VisualSubtitleLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$VisualSubtitleLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatText` | software.amazon.awscdk.services.quicksight.CfnTemplate$LongFormatTextProperty | [[cdk.support/lookup-entry]] | `:format-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$VisualSubtitleLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :format-text)]
    (. builder formatText data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-visual-subtitle-label-options-property-builder
  "Creates a  `CfnTemplate$VisualSubtitleLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-visual-subtitle-label-options-property-builder (new CfnTemplate$VisualSubtitleLabelOptionsProperty$Builder) id config))


(defn build-cfn-template-visual-title-label-options-property-builder
  "The build-cfn-template-visual-title-label-options-property-builder function updates a CfnTemplate$VisualTitleLabelOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$VisualTitleLabelOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatText` | software.amazon.awscdk.services.quicksight.CfnTemplate$ShortFormatTextProperty | [[cdk.support/lookup-entry]] | `:format-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
"
  [^CfnTemplate$VisualTitleLabelOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :format-text)]
    (. builder formatText data))
  (when-let [data (lookup-entry config id :visibility)]
    (. builder visibility data))
  (.build builder))


(defn cfn-template-visual-title-label-options-property-builder
  "Creates a  `CfnTemplate$VisualTitleLabelOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-visual-title-label-options-property-builder (new CfnTemplate$VisualTitleLabelOptionsProperty$Builder) id config))


(defn build-cfn-template-waterfall-chart-aggregated-field-wells-property-builder
  "The build-cfn-template-waterfall-chart-aggregated-field-wells-property-builder function updates a CfnTemplate$WaterfallChartAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$WaterfallChartAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `breakdowns` | java.util.List | [[cdk.support/lookup-entry]] | `:breakdowns` |
| `categories` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:categories` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |
"
  [^CfnTemplate$WaterfallChartAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :breakdowns)]
    (. builder breakdowns data))
  (when-let [data (lookup-entry config id :categories)]
    (. builder categories data))
  (when-let [data (lookup-entry config id :values)]
    (. builder values data))
  (.build builder))


(defn cfn-template-waterfall-chart-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$WaterfallChartAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-waterfall-chart-aggregated-field-wells-property-builder (new CfnTemplate$WaterfallChartAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-waterfall-chart-color-configuration-property-builder
  "The build-cfn-template-waterfall-chart-color-configuration-property-builder function updates a CfnTemplate$WaterfallChartColorConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$WaterfallChartColorConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupColorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-color-configuration` |
"
  [^CfnTemplate$WaterfallChartColorConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :group-color-configuration)]
    (. builder groupColorConfiguration data))
  (.build builder))


(defn cfn-template-waterfall-chart-color-configuration-property-builder
  "Creates a  `CfnTemplate$WaterfallChartColorConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-waterfall-chart-color-configuration-property-builder (new CfnTemplate$WaterfallChartColorConfigurationProperty$Builder) id config))


(defn build-cfn-template-waterfall-chart-configuration-property-builder
  "The build-cfn-template-waterfall-chart-configuration-property-builder function updates a CfnTemplate$WaterfallChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$WaterfallChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis-display-options` |
| `categoryAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis-label-options` |
| `colorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-configuration` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$WaterfallChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnTemplate$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$WaterfallChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `waterfallChartOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:waterfall-chart-options` |
"
  [^CfnTemplate$WaterfallChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-axis-display-options)]
    (. builder categoryAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :category-axis-label-options)]
    (. builder categoryAxisLabelOptions data))
  (when-let [data (lookup-entry config id :color-configuration)]
    (. builder colorConfiguration data))
  (when-let [data (lookup-entry config id :data-labels)]
    (. builder dataLabels data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :legend)]
    (. builder legend data))
  (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
    (. builder primaryYAxisDisplayOptions data))
  (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
    (. builder primaryYAxisLabelOptions data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :visual-palette)]
    (. builder visualPalette data))
  (when-let [data (lookup-entry config id :waterfall-chart-options)]
    (. builder waterfallChartOptions data))
  (.build builder))


(defn cfn-template-waterfall-chart-configuration-property-builder
  "Creates a  `CfnTemplate$WaterfallChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-waterfall-chart-configuration-property-builder (new CfnTemplate$WaterfallChartConfigurationProperty$Builder) id config))


(defn build-cfn-template-waterfall-chart-field-wells-property-builder
  "The build-cfn-template-waterfall-chart-field-wells-property-builder function updates a CfnTemplate$WaterfallChartFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$WaterfallChartFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `waterfallChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:waterfall-chart-aggregated-field-wells` |
"
  [^CfnTemplate$WaterfallChartFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :waterfall-chart-aggregated-field-wells)]
    (. builder waterfallChartAggregatedFieldWells data))
  (.build builder))


(defn cfn-template-waterfall-chart-field-wells-property-builder
  "Creates a  `CfnTemplate$WaterfallChartFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-waterfall-chart-field-wells-property-builder (new CfnTemplate$WaterfallChartFieldWellsProperty$Builder) id config))


(defn build-cfn-template-waterfall-chart-group-color-configuration-property-builder
  "The build-cfn-template-waterfall-chart-group-color-configuration-property-builder function updates a CfnTemplate$WaterfallChartGroupColorConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$WaterfallChartGroupColorConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `negativeBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:negative-bar-color` |
| `positiveBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:positive-bar-color` |
| `totalBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:total-bar-color` |
"
  [^CfnTemplate$WaterfallChartGroupColorConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :negative-bar-color)]
    (. builder negativeBarColor data))
  (when-let [data (lookup-entry config id :positive-bar-color)]
    (. builder positiveBarColor data))
  (when-let [data (lookup-entry config id :total-bar-color)]
    (. builder totalBarColor data))
  (.build builder))


(defn cfn-template-waterfall-chart-group-color-configuration-property-builder
  "Creates a  `CfnTemplate$WaterfallChartGroupColorConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-waterfall-chart-group-color-configuration-property-builder (new CfnTemplate$WaterfallChartGroupColorConfigurationProperty$Builder) id config))


(defn build-cfn-template-waterfall-chart-options-property-builder
  "The build-cfn-template-waterfall-chart-options-property-builder function updates a CfnTemplate$WaterfallChartOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$WaterfallChartOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `totalBarLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:total-bar-label` |
"
  [^CfnTemplate$WaterfallChartOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :total-bar-label)]
    (. builder totalBarLabel data))
  (.build builder))


(defn cfn-template-waterfall-chart-options-property-builder
  "Creates a  `CfnTemplate$WaterfallChartOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-waterfall-chart-options-property-builder (new CfnTemplate$WaterfallChartOptionsProperty$Builder) id config))


(defn build-cfn-template-waterfall-chart-sort-configuration-property-builder
  "The build-cfn-template-waterfall-chart-sort-configuration-property-builder function updates a CfnTemplate$WaterfallChartSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$WaterfallChartSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `breakdownItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:breakdown-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
"
  [^CfnTemplate$WaterfallChartSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :breakdown-items-limit)]
    (. builder breakdownItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (.build builder))


(defn cfn-template-waterfall-chart-sort-configuration-property-builder
  "Creates a  `CfnTemplate$WaterfallChartSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-waterfall-chart-sort-configuration-property-builder (new CfnTemplate$WaterfallChartSortConfigurationProperty$Builder) id config))


(defn build-cfn-template-waterfall-visual-property-builder
  "The build-cfn-template-waterfall-visual-property-builder function updates a CfnTemplate$WaterfallVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$WaterfallVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$WaterfallVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-waterfall-visual-property-builder
  "Creates a  `CfnTemplate$WaterfallVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-waterfall-visual-property-builder (new CfnTemplate$WaterfallVisualProperty$Builder) id config))


(defn build-cfn-template-what-if-point-scenario-property-builder
  "The build-cfn-template-what-if-point-scenario-property-builder function updates a CfnTemplate$WhatIfPointScenarioProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$WhatIfPointScenarioProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `date` | java.lang.String | [[cdk.support/lookup-entry]] | `:date` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$WhatIfPointScenarioProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :date)]
    (. builder date data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-what-if-point-scenario-property-builder
  "Creates a  `CfnTemplate$WhatIfPointScenarioProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-what-if-point-scenario-property-builder (new CfnTemplate$WhatIfPointScenarioProperty$Builder) id config))


(defn build-cfn-template-what-if-range-scenario-property-builder
  "The build-cfn-template-what-if-range-scenario-property-builder function updates a CfnTemplate$WhatIfRangeScenarioProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$WhatIfRangeScenarioProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `endDate` | java.lang.String | [[cdk.support/lookup-entry]] | `:end-date` |
| `startDate` | java.lang.String | [[cdk.support/lookup-entry]] | `:start-date` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |
"
  [^CfnTemplate$WhatIfRangeScenarioProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :end-date)]
    (. builder endDate data))
  (when-let [data (lookup-entry config id :start-date)]
    (. builder startDate data))
  (when-let [data (lookup-entry config id :value)]
    (. builder value data))
  (.build builder))


(defn cfn-template-what-if-range-scenario-property-builder
  "Creates a  `CfnTemplate$WhatIfRangeScenarioProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-what-if-range-scenario-property-builder (new CfnTemplate$WhatIfRangeScenarioProperty$Builder) id config))


(defn build-cfn-template-word-cloud-aggregated-field-wells-property-builder
  "The build-cfn-template-word-cloud-aggregated-field-wells-property-builder function updates a CfnTemplate$WordCloudAggregatedFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$WordCloudAggregatedFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-by` |
| `size` | java.util.List | [[cdk.support/lookup-entry]] | `:size` |
"
  [^CfnTemplate$WordCloudAggregatedFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :group-by)]
    (. builder groupBy data))
  (when-let [data (lookup-entry config id :size)]
    (. builder size data))
  (.build builder))


(defn cfn-template-word-cloud-aggregated-field-wells-property-builder
  "Creates a  `CfnTemplate$WordCloudAggregatedFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-word-cloud-aggregated-field-wells-property-builder (new CfnTemplate$WordCloudAggregatedFieldWellsProperty$Builder) id config))


(defn build-cfn-template-word-cloud-chart-configuration-property-builder
  "The build-cfn-template-word-cloud-chart-configuration-property-builder function updates a CfnTemplate$WordCloudChartConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$WordCloudChartConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `wordCloudOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$WordCloudOptionsProperty | [[cdk.support/lookup-entry]] | `:word-cloud-options` |
"
  [^CfnTemplate$WordCloudChartConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-label-options)]
    (. builder categoryLabelOptions data))
  (when-let [data (lookup-entry config id :field-wells)]
    (. builder fieldWells data))
  (when-let [data (lookup-entry config id :sort-configuration)]
    (. builder sortConfiguration data))
  (when-let [data (lookup-entry config id :word-cloud-options)]
    (. builder wordCloudOptions data))
  (.build builder))


(defn cfn-template-word-cloud-chart-configuration-property-builder
  "Creates a  `CfnTemplate$WordCloudChartConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-word-cloud-chart-configuration-property-builder (new CfnTemplate$WordCloudChartConfigurationProperty$Builder) id config))


(defn build-cfn-template-word-cloud-field-wells-property-builder
  "The build-cfn-template-word-cloud-field-wells-property-builder function updates a CfnTemplate$WordCloudFieldWellsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$WordCloudFieldWellsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `wordCloudAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$WordCloudAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:word-cloud-aggregated-field-wells` |
"
  [^CfnTemplate$WordCloudFieldWellsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :word-cloud-aggregated-field-wells)]
    (. builder wordCloudAggregatedFieldWells data))
  (.build builder))


(defn cfn-template-word-cloud-field-wells-property-builder
  "Creates a  `CfnTemplate$WordCloudFieldWellsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-word-cloud-field-wells-property-builder (new CfnTemplate$WordCloudFieldWellsProperty$Builder) id config))


(defn build-cfn-template-word-cloud-options-property-builder
  "The build-cfn-template-word-cloud-options-property-builder function updates a CfnTemplate$WordCloudOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$WordCloudOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cloudLayout` | java.lang.String | [[cdk.support/lookup-entry]] | `:cloud-layout` |
| `maximumStringLength` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-string-length` |
| `wordCasing` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-casing` |
| `wordOrientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-orientation` |
| `wordPadding` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-padding` |
| `wordScaling` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-scaling` |
"
  [^CfnTemplate$WordCloudOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cloud-layout)]
    (. builder cloudLayout data))
  (when-let [data (lookup-entry config id :maximum-string-length)]
    (. builder maximumStringLength data))
  (when-let [data (lookup-entry config id :word-casing)]
    (. builder wordCasing data))
  (when-let [data (lookup-entry config id :word-orientation)]
    (. builder wordOrientation data))
  (when-let [data (lookup-entry config id :word-padding)]
    (. builder wordPadding data))
  (when-let [data (lookup-entry config id :word-scaling)]
    (. builder wordScaling data))
  (.build builder))


(defn cfn-template-word-cloud-options-property-builder
  "Creates a  `CfnTemplate$WordCloudOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-word-cloud-options-property-builder (new CfnTemplate$WordCloudOptionsProperty$Builder) id config))


(defn build-cfn-template-word-cloud-sort-configuration-property-builder
  "The build-cfn-template-word-cloud-sort-configuration-property-builder function updates a CfnTemplate$WordCloudSortConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$WordCloudSortConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
"
  [^CfnTemplate$WordCloudSortConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-items-limit)]
    (. builder categoryItemsLimit data))
  (when-let [data (lookup-entry config id :category-sort)]
    (. builder categorySort data))
  (.build builder))


(defn cfn-template-word-cloud-sort-configuration-property-builder
  "Creates a  `CfnTemplate$WordCloudSortConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-word-cloud-sort-configuration-property-builder (new CfnTemplate$WordCloudSortConfigurationProperty$Builder) id config))


(defn build-cfn-template-word-cloud-visual-property-builder
  "The build-cfn-template-word-cloud-visual-property-builder function updates a CfnTemplate$WordCloudVisualProperty$Builder instance using the provided configuration.
  The function takes the CfnTemplate$WordCloudVisualProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |
"
  [^CfnTemplate$WordCloudVisualProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :chart-configuration)]
    (. builder chartConfiguration data))
  (when-let [data (lookup-entry config id :column-hierarchies)]
    (. builder columnHierarchies data))
  (when-let [data (lookup-entry config id :subtitle)]
    (. builder subtitle data))
  (when-let [data (lookup-entry config id :title)]
    (. builder title data))
  (when-let [data (lookup-entry config id :visual-id)]
    (. builder visualId data))
  (.build builder))


(defn cfn-template-word-cloud-visual-property-builder
  "Creates a  `CfnTemplate$WordCloudVisualProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-template-word-cloud-visual-property-builder (new CfnTemplate$WordCloudVisualProperty$Builder) id config))


(defn build-cfn-theme-border-style-property-builder
  "The build-cfn-theme-border-style-property-builder function updates a CfnTheme$BorderStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnTheme$BorderStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `show` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:show` |
"
  [^CfnTheme$BorderStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :show)]
    (. builder show data))
  (.build builder))


(defn cfn-theme-border-style-property-builder
  "Creates a  `CfnTheme$BorderStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-theme-border-style-property-builder (new CfnTheme$BorderStyleProperty$Builder) id config))


(defn build-cfn-theme-builder
  "The build-cfn-theme-builder function updates a CfnTheme$Builder instance using the provided configuration.
  The function takes the CfnTheme$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `baseThemeId` | java.lang.String | [[cdk.support/lookup-entry]] | `:base-theme-id` |
| `configuration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:configuration` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `permissions` | java.util.List | [[cdk.support/lookup-entry]] | `:permissions` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `themeId` | java.lang.String | [[cdk.support/lookup-entry]] | `:theme-id` |
| `versionDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:version-description` |
"
  [^CfnTheme$Builder builder id config]
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :base-theme-id)]
    (. builder baseThemeId data))
  (when-let [data (lookup-entry config id :configuration)]
    (. builder configuration data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :permissions)]
    (. builder permissions data))
  (when-let [data (lookup-entry config id :tags)]
    (. builder tags data))
  (when-let [data (lookup-entry config id :theme-id)]
    (. builder themeId data))
  (when-let [data (lookup-entry config id :version-description)]
    (. builder versionDescription data))
  (.build builder))


(defn cfn-theme-builder
  "Creates a  `CfnTheme$Builder` instance using a scope and ID, applies the data configuration, then builds it.  Takes the following arguments: 
| Argument | DataType | Description |
|---|---|---|
| scope | software.constructs.Construct | The parent scope construct of the object being built. |
| id | String or Keyword or Symbol | Value to use as both the ID of the object being build and the namespace when looking up configuration values. |
| config | map | Data configuration |"
  [^software.constructs.Construct scope id config]
  (build-cfn-theme-builder (CfnTheme$Builder/create scope (name id)) id config))


(defn build-cfn-theme-data-color-palette-property-builder
  "The build-cfn-theme-data-color-palette-property-builder function updates a CfnTheme$DataColorPaletteProperty$Builder instance using the provided configuration.
  The function takes the CfnTheme$DataColorPaletteProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
| `emptyFillColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:empty-fill-color` |
| `minMaxGradient` | java.util.List | [[cdk.support/lookup-entry]] | `:min-max-gradient` |
"
  [^CfnTheme$DataColorPaletteProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :colors)]
    (. builder colors data))
  (when-let [data (lookup-entry config id :empty-fill-color)]
    (. builder emptyFillColor data))
  (when-let [data (lookup-entry config id :min-max-gradient)]
    (. builder minMaxGradient data))
  (.build builder))


(defn cfn-theme-data-color-palette-property-builder
  "Creates a  `CfnTheme$DataColorPaletteProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-theme-data-color-palette-property-builder (new CfnTheme$DataColorPaletteProperty$Builder) id config))


(defn build-cfn-theme-font-property-builder
  "The build-cfn-theme-font-property-builder function updates a CfnTheme$FontProperty$Builder instance using the provided configuration.
  The function takes the CfnTheme$FontProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontFamily` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-family` |
"
  [^CfnTheme$FontProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :font-family)]
    (. builder fontFamily data))
  (.build builder))


(defn cfn-theme-font-property-builder
  "Creates a  `CfnTheme$FontProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-theme-font-property-builder (new CfnTheme$FontProperty$Builder) id config))


(defn build-cfn-theme-gutter-style-property-builder
  "The build-cfn-theme-gutter-style-property-builder function updates a CfnTheme$GutterStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnTheme$GutterStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `show` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:show` |
"
  [^CfnTheme$GutterStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :show)]
    (. builder show data))
  (.build builder))


(defn cfn-theme-gutter-style-property-builder
  "Creates a  `CfnTheme$GutterStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-theme-gutter-style-property-builder (new CfnTheme$GutterStyleProperty$Builder) id config))


(defn build-cfn-theme-margin-style-property-builder
  "The build-cfn-theme-margin-style-property-builder function updates a CfnTheme$MarginStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnTheme$MarginStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `show` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:show` |
"
  [^CfnTheme$MarginStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :show)]
    (. builder show data))
  (.build builder))


(defn cfn-theme-margin-style-property-builder
  "Creates a  `CfnTheme$MarginStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-theme-margin-style-property-builder (new CfnTheme$MarginStyleProperty$Builder) id config))


(defn build-cfn-theme-props-builder
  "The build-cfn-theme-props-builder function updates a CfnThemeProps$Builder instance using the provided configuration.
  The function takes the CfnThemeProps$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `baseThemeId` | java.lang.String | [[cdk.support/lookup-entry]] | `:base-theme-id` |
| `configuration` | software.amazon.awscdk.services.quicksight.CfnTheme$ThemeConfigurationProperty | [[cdk.support/lookup-entry]] | `:configuration` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `permissions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:permissions` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `themeId` | java.lang.String | [[cdk.support/lookup-entry]] | `:theme-id` |
| `versionDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:version-description` |
"
  [^CfnThemeProps$Builder builder id config]
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :base-theme-id)]
    (. builder baseThemeId data))
  (when-let [data (lookup-entry config id :configuration)]
    (. builder configuration data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :permissions)]
    (. builder permissions data))
  (when-let [data (lookup-entry config id :tags)]
    (. builder tags data))
  (when-let [data (lookup-entry config id :theme-id)]
    (. builder themeId data))
  (when-let [data (lookup-entry config id :version-description)]
    (. builder versionDescription data))
  (.build builder))


(defn cfn-theme-props-builder
  "Creates a  `CfnThemeProps$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-theme-props-builder (new CfnThemeProps$Builder) id config))


(defn build-cfn-theme-resource-permission-property-builder
  "The build-cfn-theme-resource-permission-property-builder function updates a CfnTheme$ResourcePermissionProperty$Builder instance using the provided configuration.
  The function takes the CfnTheme$ResourcePermissionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `principal` | java.lang.String | [[cdk.support/lookup-entry]] | `:principal` |
| `resource` | java.lang.String | [[cdk.support/lookup-entry]] | `:resource` |
"
  [^CfnTheme$ResourcePermissionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :actions)]
    (. builder actions data))
  (when-let [data (lookup-entry config id :principal)]
    (. builder principal data))
  (when-let [data (lookup-entry config id :resource)]
    (. builder resource data))
  (.build builder))


(defn cfn-theme-resource-permission-property-builder
  "Creates a  `CfnTheme$ResourcePermissionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-theme-resource-permission-property-builder (new CfnTheme$ResourcePermissionProperty$Builder) id config))


(defn build-cfn-theme-sheet-style-property-builder
  "The build-cfn-theme-sheet-style-property-builder function updates a CfnTheme$SheetStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnTheme$SheetStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `tile` | software.amazon.awscdk.services.quicksight.CfnTheme$TileStyleProperty | [[cdk.support/lookup-entry]] | `:tile` |
| `tileLayout` | software.amazon.awscdk.services.quicksight.CfnTheme$TileLayoutStyleProperty | [[cdk.support/lookup-entry]] | `:tile-layout` |
"
  [^CfnTheme$SheetStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :tile)]
    (. builder tile data))
  (when-let [data (lookup-entry config id :tile-layout)]
    (. builder tileLayout data))
  (.build builder))


(defn cfn-theme-sheet-style-property-builder
  "Creates a  `CfnTheme$SheetStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-theme-sheet-style-property-builder (new CfnTheme$SheetStyleProperty$Builder) id config))


(defn build-cfn-theme-theme-configuration-property-builder
  "The build-cfn-theme-theme-configuration-property-builder function updates a CfnTheme$ThemeConfigurationProperty$Builder instance using the provided configuration.
  The function takes the CfnTheme$ThemeConfigurationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataColorPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-color-palette` |
| `sheet` | software.amazon.awscdk.services.quicksight.CfnTheme$SheetStyleProperty | [[cdk.support/lookup-entry]] | `:sheet` |
| `typography` | software.amazon.awscdk.services.quicksight.CfnTheme$TypographyProperty | [[cdk.support/lookup-entry]] | `:typography` |
| `uiColorPalette` | software.amazon.awscdk.services.quicksight.CfnTheme$UIColorPaletteProperty | [[cdk.support/lookup-entry]] | `:ui-color-palette` |
"
  [^CfnTheme$ThemeConfigurationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :data-color-palette)]
    (. builder dataColorPalette data))
  (when-let [data (lookup-entry config id :sheet)]
    (. builder sheet data))
  (when-let [data (lookup-entry config id :typography)]
    (. builder typography data))
  (when-let [data (lookup-entry config id :ui-color-palette)]
    (. builder uiColorPalette data))
  (.build builder))


(defn cfn-theme-theme-configuration-property-builder
  "Creates a  `CfnTheme$ThemeConfigurationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-theme-theme-configuration-property-builder (new CfnTheme$ThemeConfigurationProperty$Builder) id config))


(defn build-cfn-theme-theme-error-property-builder
  "The build-cfn-theme-theme-error-property-builder function updates a CfnTheme$ThemeErrorProperty$Builder instance using the provided configuration.
  The function takes the CfnTheme$ThemeErrorProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `message` | java.lang.String | [[cdk.support/lookup-entry]] | `:message` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
"
  [^CfnTheme$ThemeErrorProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :message)]
    (. builder message data))
  (when-let [data (lookup-entry config id :type)]
    (. builder type data))
  (.build builder))


(defn cfn-theme-theme-error-property-builder
  "Creates a  `CfnTheme$ThemeErrorProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-theme-theme-error-property-builder (new CfnTheme$ThemeErrorProperty$Builder) id config))


(defn build-cfn-theme-theme-version-property-builder
  "The build-cfn-theme-theme-version-property-builder function updates a CfnTheme$ThemeVersionProperty$Builder instance using the provided configuration.
  The function takes the CfnTheme$ThemeVersionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arn` | java.lang.String | [[cdk.support/lookup-entry]] | `:arn` |
| `baseThemeId` | java.lang.String | [[cdk.support/lookup-entry]] | `:base-theme-id` |
| `configuration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:configuration` |
| `createdTime` | java.lang.String | [[cdk.support/lookup-entry]] | `:created-time` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `errors` | java.util.List | [[cdk.support/lookup-entry]] | `:errors` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `versionNumber` | java.lang.Number | [[cdk.support/lookup-entry]] | `:version-number` |
"
  [^CfnTheme$ThemeVersionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :arn)]
    (. builder arn data))
  (when-let [data (lookup-entry config id :base-theme-id)]
    (. builder baseThemeId data))
  (when-let [data (lookup-entry config id :configuration)]
    (. builder configuration data))
  (when-let [data (lookup-entry config id :created-time)]
    (. builder createdTime data))
  (when-let [data (lookup-entry config id :description)]
    (. builder description data))
  (when-let [data (lookup-entry config id :errors)]
    (. builder errors data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (when-let [data (lookup-entry config id :version-number)]
    (. builder versionNumber data))
  (.build builder))


(defn cfn-theme-theme-version-property-builder
  "Creates a  `CfnTheme$ThemeVersionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-theme-theme-version-property-builder (new CfnTheme$ThemeVersionProperty$Builder) id config))


(defn build-cfn-theme-tile-layout-style-property-builder
  "The build-cfn-theme-tile-layout-style-property-builder function updates a CfnTheme$TileLayoutStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnTheme$TileLayoutStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `gutter` | software.amazon.awscdk.services.quicksight.CfnTheme$GutterStyleProperty | [[cdk.support/lookup-entry]] | `:gutter` |
| `margin` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:margin` |
"
  [^CfnTheme$TileLayoutStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :gutter)]
    (. builder gutter data))
  (when-let [data (lookup-entry config id :margin)]
    (. builder margin data))
  (.build builder))


(defn cfn-theme-tile-layout-style-property-builder
  "Creates a  `CfnTheme$TileLayoutStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-theme-tile-layout-style-property-builder (new CfnTheme$TileLayoutStyleProperty$Builder) id config))


(defn build-cfn-theme-tile-style-property-builder
  "The build-cfn-theme-tile-style-property-builder function updates a CfnTheme$TileStyleProperty$Builder instance using the provided configuration.
  The function takes the CfnTheme$TileStyleProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `border` | software.amazon.awscdk.services.quicksight.CfnTheme$BorderStyleProperty | [[cdk.support/lookup-entry]] | `:border` |
"
  [^CfnTheme$TileStyleProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :border)]
    (. builder border data))
  (.build builder))


(defn cfn-theme-tile-style-property-builder
  "Creates a  `CfnTheme$TileStyleProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-theme-tile-style-property-builder (new CfnTheme$TileStyleProperty$Builder) id config))


(defn build-cfn-theme-typography-property-builder
  "The build-cfn-theme-typography-property-builder function updates a CfnTheme$TypographyProperty$Builder instance using the provided configuration.
  The function takes the CfnTheme$TypographyProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontFamilies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-families` |
"
  [^CfnTheme$TypographyProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :font-families)]
    (. builder fontFamilies data))
  (.build builder))


(defn cfn-theme-typography-property-builder
  "Creates a  `CfnTheme$TypographyProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-theme-typography-property-builder (new CfnTheme$TypographyProperty$Builder) id config))


(defn build-cfn-theme-ui-color-palette-property-builder
  "The build-cfn-theme-ui-color-palette-property-builder function updates a CfnTheme$UIColorPaletteProperty$Builder instance using the provided configuration.
  The function takes the CfnTheme$UIColorPaletteProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `accent` | java.lang.String | [[cdk.support/lookup-entry]] | `:accent` |
| `accentForeground` | java.lang.String | [[cdk.support/lookup-entry]] | `:accent-foreground` |
| `danger` | java.lang.String | [[cdk.support/lookup-entry]] | `:danger` |
| `dangerForeground` | java.lang.String | [[cdk.support/lookup-entry]] | `:danger-foreground` |
| `dimension` | java.lang.String | [[cdk.support/lookup-entry]] | `:dimension` |
| `dimensionForeground` | java.lang.String | [[cdk.support/lookup-entry]] | `:dimension-foreground` |
| `measure` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure` |
| `measureForeground` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-foreground` |
| `primaryBackground` | java.lang.String | [[cdk.support/lookup-entry]] | `:primary-background` |
| `primaryForeground` | java.lang.String | [[cdk.support/lookup-entry]] | `:primary-foreground` |
| `secondaryBackground` | java.lang.String | [[cdk.support/lookup-entry]] | `:secondary-background` |
| `secondaryForeground` | java.lang.String | [[cdk.support/lookup-entry]] | `:secondary-foreground` |
| `success` | java.lang.String | [[cdk.support/lookup-entry]] | `:success` |
| `successForeground` | java.lang.String | [[cdk.support/lookup-entry]] | `:success-foreground` |
| `warning` | java.lang.String | [[cdk.support/lookup-entry]] | `:warning` |
| `warningForeground` | java.lang.String | [[cdk.support/lookup-entry]] | `:warning-foreground` |
"
  [^CfnTheme$UIColorPaletteProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :accent)]
    (. builder accent data))
  (when-let [data (lookup-entry config id :accent-foreground)]
    (. builder accentForeground data))
  (when-let [data (lookup-entry config id :danger)]
    (. builder danger data))
  (when-let [data (lookup-entry config id :danger-foreground)]
    (. builder dangerForeground data))
  (when-let [data (lookup-entry config id :dimension)]
    (. builder dimension data))
  (when-let [data (lookup-entry config id :dimension-foreground)]
    (. builder dimensionForeground data))
  (when-let [data (lookup-entry config id :measure)]
    (. builder measure data))
  (when-let [data (lookup-entry config id :measure-foreground)]
    (. builder measureForeground data))
  (when-let [data (lookup-entry config id :primary-background)]
    (. builder primaryBackground data))
  (when-let [data (lookup-entry config id :primary-foreground)]
    (. builder primaryForeground data))
  (when-let [data (lookup-entry config id :secondary-background)]
    (. builder secondaryBackground data))
  (when-let [data (lookup-entry config id :secondary-foreground)]
    (. builder secondaryForeground data))
  (when-let [data (lookup-entry config id :success)]
    (. builder success data))
  (when-let [data (lookup-entry config id :success-foreground)]
    (. builder successForeground data))
  (when-let [data (lookup-entry config id :warning)]
    (. builder warning data))
  (when-let [data (lookup-entry config id :warning-foreground)]
    (. builder warningForeground data))
  (.build builder))


(defn cfn-theme-ui-color-palette-property-builder
  "Creates a  `CfnTheme$UIColorPaletteProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-theme-ui-color-palette-property-builder (new CfnTheme$UIColorPaletteProperty$Builder) id config))


(defn build-cfn-topic-builder
  "The build-cfn-topic-builder function updates a CfnTopic$Builder instance using the provided configuration.
  The function takes the CfnTopic$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `dataSets` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-sets` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `topicId` | java.lang.String | [[cdk.support/lookup-entry]] | `:topic-id` |
| `userExperienceVersion` | java.lang.String | [[cdk.support/lookup-entry]] | `:user-experience-version` |
"
  [^CfnTopic$Builder builder id config]
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :data-sets)]
    (. builder dataSets data))
  (when-let [data (lookup-entry config id :description)]
    (. builder description data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :topic-id)]
    (. builder topicId data))
  (when-let [data (lookup-entry config id :user-experience-version)]
    (. builder userExperienceVersion data))
  (.build builder))


(defn cfn-topic-builder
  "Creates a  `CfnTopic$Builder` instance using a scope and ID, applies the data configuration, then builds it.  Takes the following arguments: 
| Argument | DataType | Description |
|---|---|---|
| scope | software.constructs.Construct | The parent scope construct of the object being built. |
| id | String or Keyword or Symbol | Value to use as both the ID of the object being build and the namespace when looking up configuration values. |
| config | map | Data configuration |"
  [^software.constructs.Construct scope id config]
  (build-cfn-topic-builder (CfnTopic$Builder/create scope (name id)) id config))


(defn build-cfn-topic-cell-value-synonym-property-builder
  "The build-cfn-topic-cell-value-synonym-property-builder function updates a CfnTopic$CellValueSynonymProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$CellValueSynonymProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:cell-value` |
| `synonyms` | java.util.List | [[cdk.support/lookup-entry]] | `:synonyms` |
"
  [^CfnTopic$CellValueSynonymProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :cell-value)]
    (. builder cellValue data))
  (when-let [data (lookup-entry config id :synonyms)]
    (. builder synonyms data))
  (.build builder))


(defn cfn-topic-cell-value-synonym-property-builder
  "Creates a  `CfnTopic$CellValueSynonymProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-cell-value-synonym-property-builder (new CfnTopic$CellValueSynonymProperty$Builder) id config))


(defn build-cfn-topic-collective-constant-property-builder
  "The build-cfn-topic-collective-constant-property-builder function updates a CfnTopic$CollectiveConstantProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$CollectiveConstantProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `valueList` | java.util.List | [[cdk.support/lookup-entry]] | `:value-list` |
"
  [^CfnTopic$CollectiveConstantProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :value-list)]
    (. builder valueList data))
  (.build builder))


(defn cfn-topic-collective-constant-property-builder
  "Creates a  `CfnTopic$CollectiveConstantProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-collective-constant-property-builder (new CfnTopic$CollectiveConstantProperty$Builder) id config))


(defn build-cfn-topic-comparative-order-property-builder
  "The build-cfn-topic-comparative-order-property-builder function updates a CfnTopic$ComparativeOrderProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$ComparativeOrderProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `specifedOrder` | java.util.List | [[cdk.support/lookup-entry]] | `:specifed-order` |
| `treatUndefinedSpecifiedValues` | java.lang.String | [[cdk.support/lookup-entry]] | `:treat-undefined-specified-values` |
| `useOrdering` | java.lang.String | [[cdk.support/lookup-entry]] | `:use-ordering` |
"
  [^CfnTopic$ComparativeOrderProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :specifed-order)]
    (. builder specifedOrder data))
  (when-let [data (lookup-entry config id :treat-undefined-specified-values)]
    (. builder treatUndefinedSpecifiedValues data))
  (when-let [data (lookup-entry config id :use-ordering)]
    (. builder useOrdering data))
  (.build builder))


(defn cfn-topic-comparative-order-property-builder
  "Creates a  `CfnTopic$ComparativeOrderProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-comparative-order-property-builder (new CfnTopic$ComparativeOrderProperty$Builder) id config))


(defn build-cfn-topic-data-aggregation-property-builder
  "The build-cfn-topic-data-aggregation-property-builder function updates a CfnTopic$DataAggregationProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$DataAggregationProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `datasetRowDateGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:dataset-row-date-granularity` |
| `defaultDateColumnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:default-date-column-name` |
"
  [^CfnTopic$DataAggregationProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :dataset-row-date-granularity)]
    (. builder datasetRowDateGranularity data))
  (when-let [data (lookup-entry config id :default-date-column-name)]
    (. builder defaultDateColumnName data))
  (.build builder))


(defn cfn-topic-data-aggregation-property-builder
  "Creates a  `CfnTopic$DataAggregationProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-data-aggregation-property-builder (new CfnTopic$DataAggregationProperty$Builder) id config))


(defn build-cfn-topic-dataset-metadata-property-builder
  "The build-cfn-topic-dataset-metadata-property-builder function updates a CfnTopic$DatasetMetadataProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$DatasetMetadataProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `calculatedFields` | java.util.List | [[cdk.support/lookup-entry]] | `:calculated-fields` |
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `dataAggregation` | software.amazon.awscdk.services.quicksight.CfnTopic$DataAggregationProperty | [[cdk.support/lookup-entry]] | `:data-aggregation` |
| `datasetArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:dataset-arn` |
| `datasetDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:dataset-description` |
| `datasetName` | java.lang.String | [[cdk.support/lookup-entry]] | `:dataset-name` |
| `filters` | java.util.List | [[cdk.support/lookup-entry]] | `:filters` |
| `namedEntities` | java.util.List | [[cdk.support/lookup-entry]] | `:named-entities` |
"
  [^CfnTopic$DatasetMetadataProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :calculated-fields)]
    (. builder calculatedFields data))
  (when-let [data (lookup-entry config id :columns)]
    (. builder columns data))
  (when-let [data (lookup-entry config id :data-aggregation)]
    (. builder dataAggregation data))
  (when-let [data (lookup-entry config id :dataset-arn)]
    (. builder datasetArn data))
  (when-let [data (lookup-entry config id :dataset-description)]
    (. builder datasetDescription data))
  (when-let [data (lookup-entry config id :dataset-name)]
    (. builder datasetName data))
  (when-let [data (lookup-entry config id :filters)]
    (. builder filters data))
  (when-let [data (lookup-entry config id :named-entities)]
    (. builder namedEntities data))
  (.build builder))


(defn cfn-topic-dataset-metadata-property-builder
  "Creates a  `CfnTopic$DatasetMetadataProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-dataset-metadata-property-builder (new CfnTopic$DatasetMetadataProperty$Builder) id config))


(defn build-cfn-topic-default-formatting-property-builder
  "The build-cfn-topic-default-formatting-property-builder function updates a CfnTopic$DefaultFormattingProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$DefaultFormattingProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:display-format` |
| `displayFormatOptions` | software.amazon.awscdk.services.quicksight.CfnTopic$DisplayFormatOptionsProperty | [[cdk.support/lookup-entry]] | `:display-format-options` |
"
  [^CfnTopic$DefaultFormattingProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :display-format)]
    (. builder displayFormat data))
  (when-let [data (lookup-entry config id :display-format-options)]
    (. builder displayFormatOptions data))
  (.build builder))


(defn cfn-topic-default-formatting-property-builder
  "Creates a  `CfnTopic$DefaultFormattingProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-default-formatting-property-builder (new CfnTopic$DefaultFormattingProperty$Builder) id config))


(defn build-cfn-topic-display-format-options-property-builder
  "The build-cfn-topic-display-format-options-property-builder function updates a CfnTopic$DisplayFormatOptionsProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$DisplayFormatOptionsProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `blankCellFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:blank-cell-format` |
| `currencySymbol` | java.lang.String | [[cdk.support/lookup-entry]] | `:currency-symbol` |
| `dateFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-format` |
| `decimalSeparator` | java.lang.String | [[cdk.support/lookup-entry]] | `:decimal-separator` |
| `fractionDigits` | java.lang.Number | [[cdk.support/lookup-entry]] | `:fraction-digits` |
| `groupingSeparator` | java.lang.String | [[cdk.support/lookup-entry]] | `:grouping-separator` |
| `negativeFormat` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:negative-format` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |
| `unitScaler` | java.lang.String | [[cdk.support/lookup-entry]] | `:unit-scaler` |
| `useBlankCellFormat` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:use-blank-cell-format` |
| `useGrouping` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:use-grouping` |
"
  [^CfnTopic$DisplayFormatOptionsProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :blank-cell-format)]
    (. builder blankCellFormat data))
  (when-let [data (lookup-entry config id :currency-symbol)]
    (. builder currencySymbol data))
  (when-let [data (lookup-entry config id :date-format)]
    (. builder dateFormat data))
  (when-let [data (lookup-entry config id :decimal-separator)]
    (. builder decimalSeparator data))
  (when-let [data (lookup-entry config id :fraction-digits)]
    (. builder fractionDigits data))
  (when-let [data (lookup-entry config id :grouping-separator)]
    (. builder groupingSeparator data))
  (when-let [data (lookup-entry config id :negative-format)]
    (. builder negativeFormat data))
  (when-let [data (lookup-entry config id :prefix)]
    (. builder prefix data))
  (when-let [data (lookup-entry config id :suffix)]
    (. builder suffix data))
  (when-let [data (lookup-entry config id :unit-scaler)]
    (. builder unitScaler data))
  (when-let [data (lookup-entry config id :use-blank-cell-format)]
    (. builder useBlankCellFormat data))
  (when-let [data (lookup-entry config id :use-grouping)]
    (. builder useGrouping data))
  (.build builder))


(defn cfn-topic-display-format-options-property-builder
  "Creates a  `CfnTopic$DisplayFormatOptionsProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-display-format-options-property-builder (new CfnTopic$DisplayFormatOptionsProperty$Builder) id config))


(defn build-cfn-topic-named-entity-definition-metric-property-builder
  "The build-cfn-topic-named-entity-definition-metric-property-builder function updates a CfnTopic$NamedEntityDefinitionMetricProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$NamedEntityDefinitionMetricProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation` |
| `aggregationFunctionParameters` | java.util.Map | [[cdk.support/lookup-entry]] | `:aggregation-function-parameters` |
"
  [^CfnTopic$NamedEntityDefinitionMetricProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation)]
    (. builder aggregation data))
  (when-let [data (lookup-entry config id :aggregation-function-parameters)]
    (. builder aggregationFunctionParameters data))
  (.build builder))


(defn cfn-topic-named-entity-definition-metric-property-builder
  "Creates a  `CfnTopic$NamedEntityDefinitionMetricProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-named-entity-definition-metric-property-builder (new CfnTopic$NamedEntityDefinitionMetricProperty$Builder) id config))


(defn build-cfn-topic-named-entity-definition-property-builder
  "The build-cfn-topic-named-entity-definition-property-builder function updates a CfnTopic$NamedEntityDefinitionProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$NamedEntityDefinitionProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldName` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-name` |
| `metric` | software.amazon.awscdk.services.quicksight.CfnTopic$NamedEntityDefinitionMetricProperty | [[cdk.support/lookup-entry]] | `:metric` |
| `propertyName` | java.lang.String | [[cdk.support/lookup-entry]] | `:property-name` |
| `propertyRole` | java.lang.String | [[cdk.support/lookup-entry]] | `:property-role` |
| `propertyUsage` | java.lang.String | [[cdk.support/lookup-entry]] | `:property-usage` |
"
  [^CfnTopic$NamedEntityDefinitionProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :field-name)]
    (. builder fieldName data))
  (when-let [data (lookup-entry config id :metric)]
    (. builder metric data))
  (when-let [data (lookup-entry config id :property-name)]
    (. builder propertyName data))
  (when-let [data (lookup-entry config id :property-role)]
    (. builder propertyRole data))
  (when-let [data (lookup-entry config id :property-usage)]
    (. builder propertyUsage data))
  (.build builder))


(defn cfn-topic-named-entity-definition-property-builder
  "Creates a  `CfnTopic$NamedEntityDefinitionProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-named-entity-definition-property-builder (new CfnTopic$NamedEntityDefinitionProperty$Builder) id config))


(defn build-cfn-topic-negative-format-property-builder
  "The build-cfn-topic-negative-format-property-builder function updates a CfnTopic$NegativeFormatProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$NegativeFormatProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |
"
  [^CfnTopic$NegativeFormatProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :prefix)]
    (. builder prefix data))
  (when-let [data (lookup-entry config id :suffix)]
    (. builder suffix data))
  (.build builder))


(defn cfn-topic-negative-format-property-builder
  "Creates a  `CfnTopic$NegativeFormatProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-negative-format-property-builder (new CfnTopic$NegativeFormatProperty$Builder) id config))


(defn build-cfn-topic-props-builder
  "The build-cfn-topic-props-builder function updates a CfnTopicProps$Builder instance using the provided configuration.
  The function takes the CfnTopicProps$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `dataSets` | java.util.List | [[cdk.support/lookup-entry]] | `:data-sets` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `topicId` | java.lang.String | [[cdk.support/lookup-entry]] | `:topic-id` |
| `userExperienceVersion` | java.lang.String | [[cdk.support/lookup-entry]] | `:user-experience-version` |
"
  [^CfnTopicProps$Builder builder id config]
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :data-sets)]
    (. builder dataSets data))
  (when-let [data (lookup-entry config id :description)]
    (. builder description data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :topic-id)]
    (. builder topicId data))
  (when-let [data (lookup-entry config id :user-experience-version)]
    (. builder userExperienceVersion data))
  (.build builder))


(defn cfn-topic-props-builder
  "Creates a  `CfnTopicProps$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-props-builder (new CfnTopicProps$Builder) id config))


(defn build-cfn-topic-range-constant-property-builder
  "The build-cfn-topic-range-constant-property-builder function updates a CfnTopic$RangeConstantProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$RangeConstantProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `maximum` | java.lang.String | [[cdk.support/lookup-entry]] | `:maximum` |
| `minimum` | java.lang.String | [[cdk.support/lookup-entry]] | `:minimum` |
"
  [^CfnTopic$RangeConstantProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :maximum)]
    (. builder maximum data))
  (when-let [data (lookup-entry config id :minimum)]
    (. builder minimum data))
  (.build builder))


(defn cfn-topic-range-constant-property-builder
  "Creates a  `CfnTopic$RangeConstantProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-range-constant-property-builder (new CfnTopic$RangeConstantProperty$Builder) id config))


(defn build-cfn-topic-semantic-entity-type-property-builder
  "The build-cfn-topic-semantic-entity-type-property-builder function updates a CfnTopic$SemanticEntityTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$SemanticEntityTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `subTypeName` | java.lang.String | [[cdk.support/lookup-entry]] | `:sub-type-name` |
| `typeName` | java.lang.String | [[cdk.support/lookup-entry]] | `:type-name` |
| `typeParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:type-parameters` |
"
  [^CfnTopic$SemanticEntityTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :sub-type-name)]
    (. builder subTypeName data))
  (when-let [data (lookup-entry config id :type-name)]
    (. builder typeName data))
  (when-let [data (lookup-entry config id :type-parameters)]
    (. builder typeParameters data))
  (.build builder))


(defn cfn-topic-semantic-entity-type-property-builder
  "Creates a  `CfnTopic$SemanticEntityTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-semantic-entity-type-property-builder (new CfnTopic$SemanticEntityTypeProperty$Builder) id config))


(defn build-cfn-topic-semantic-type-property-builder
  "The build-cfn-topic-semantic-type-property-builder function updates a CfnTopic$SemanticTypeProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$SemanticTypeProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `falseyCellValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:falsey-cell-value` |
| `falseyCellValueSynonyms` | java.util.List | [[cdk.support/lookup-entry]] | `:falsey-cell-value-synonyms` |
| `subTypeName` | java.lang.String | [[cdk.support/lookup-entry]] | `:sub-type-name` |
| `truthyCellValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:truthy-cell-value` |
| `truthyCellValueSynonyms` | java.util.List | [[cdk.support/lookup-entry]] | `:truthy-cell-value-synonyms` |
| `typeName` | java.lang.String | [[cdk.support/lookup-entry]] | `:type-name` |
| `typeParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:type-parameters` |
"
  [^CfnTopic$SemanticTypeProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :falsey-cell-value)]
    (. builder falseyCellValue data))
  (when-let [data (lookup-entry config id :falsey-cell-value-synonyms)]
    (. builder falseyCellValueSynonyms data))
  (when-let [data (lookup-entry config id :sub-type-name)]
    (. builder subTypeName data))
  (when-let [data (lookup-entry config id :truthy-cell-value)]
    (. builder truthyCellValue data))
  (when-let [data (lookup-entry config id :truthy-cell-value-synonyms)]
    (. builder truthyCellValueSynonyms data))
  (when-let [data (lookup-entry config id :type-name)]
    (. builder typeName data))
  (when-let [data (lookup-entry config id :type-parameters)]
    (. builder typeParameters data))
  (.build builder))


(defn cfn-topic-semantic-type-property-builder
  "Creates a  `CfnTopic$SemanticTypeProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-semantic-type-property-builder (new CfnTopic$SemanticTypeProperty$Builder) id config))


(defn build-cfn-topic-topic-calculated-field-property-builder
  "The build-cfn-topic-topic-calculated-field-property-builder function updates a CfnTopic$TopicCalculatedFieldProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$TopicCalculatedFieldProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation` |
| `allowedAggregations` | java.util.List | [[cdk.support/lookup-entry]] | `:allowed-aggregations` |
| `calculatedFieldDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:calculated-field-description` |
| `calculatedFieldName` | java.lang.String | [[cdk.support/lookup-entry]] | `:calculated-field-name` |
| `calculatedFieldSynonyms` | java.util.List | [[cdk.support/lookup-entry]] | `:calculated-field-synonyms` |
| `cellValueSynonyms` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cell-value-synonyms` |
| `columnDataRole` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-data-role` |
| `comparativeOrder` | software.amazon.awscdk.services.quicksight.CfnTopic$ComparativeOrderProperty | [[cdk.support/lookup-entry]] | `:comparative-order` |
| `defaultFormatting` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-formatting` |
| `disableIndexing` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:disable-indexing` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `isIncludedInTopic` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:is-included-in-topic` |
| `neverAggregateInFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:never-aggregate-in-filter` |
| `nonAdditive` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:non-additive` |
| `notAllowedAggregations` | java.util.List | [[cdk.support/lookup-entry]] | `:not-allowed-aggregations` |
| `semanticType` | software.amazon.awscdk.services.quicksight.CfnTopic$SemanticTypeProperty | [[cdk.support/lookup-entry]] | `:semantic-type` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnTopic$TopicCalculatedFieldProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation)]
    (. builder aggregation data))
  (when-let [data (lookup-entry config id :allowed-aggregations)]
    (. builder allowedAggregations data))
  (when-let [data (lookup-entry config id :calculated-field-description)]
    (. builder calculatedFieldDescription data))
  (when-let [data (lookup-entry config id :calculated-field-name)]
    (. builder calculatedFieldName data))
  (when-let [data (lookup-entry config id :calculated-field-synonyms)]
    (. builder calculatedFieldSynonyms data))
  (when-let [data (lookup-entry config id :cell-value-synonyms)]
    (. builder cellValueSynonyms data))
  (when-let [data (lookup-entry config id :column-data-role)]
    (. builder columnDataRole data))
  (when-let [data (lookup-entry config id :comparative-order)]
    (. builder comparativeOrder data))
  (when-let [data (lookup-entry config id :default-formatting)]
    (. builder defaultFormatting data))
  (when-let [data (lookup-entry config id :disable-indexing)]
    (. builder disableIndexing data))
  (when-let [data (lookup-entry config id :expression)]
    (. builder expression data))
  (when-let [data (lookup-entry config id :is-included-in-topic)]
    (. builder isIncludedInTopic data))
  (when-let [data (lookup-entry config id :never-aggregate-in-filter)]
    (. builder neverAggregateInFilter data))
  (when-let [data (lookup-entry config id :non-additive)]
    (. builder nonAdditive data))
  (when-let [data (lookup-entry config id :not-allowed-aggregations)]
    (. builder notAllowedAggregations data))
  (when-let [data (lookup-entry config id :semantic-type)]
    (. builder semanticType data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-topic-topic-calculated-field-property-builder
  "Creates a  `CfnTopic$TopicCalculatedFieldProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-topic-calculated-field-property-builder (new CfnTopic$TopicCalculatedFieldProperty$Builder) id config))


(defn build-cfn-topic-topic-category-filter-constant-property-builder
  "The build-cfn-topic-topic-category-filter-constant-property-builder function updates a CfnTopic$TopicCategoryFilterConstantProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$TopicCategoryFilterConstantProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `collectiveConstant` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:collective-constant` |
| `constantType` | java.lang.String | [[cdk.support/lookup-entry]] | `:constant-type` |
| `singularConstant` | java.lang.String | [[cdk.support/lookup-entry]] | `:singular-constant` |
"
  [^CfnTopic$TopicCategoryFilterConstantProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :collective-constant)]
    (. builder collectiveConstant data))
  (when-let [data (lookup-entry config id :constant-type)]
    (. builder constantType data))
  (when-let [data (lookup-entry config id :singular-constant)]
    (. builder singularConstant data))
  (.build builder))


(defn cfn-topic-topic-category-filter-constant-property-builder
  "Creates a  `CfnTopic$TopicCategoryFilterConstantProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-topic-category-filter-constant-property-builder (new CfnTopic$TopicCategoryFilterConstantProperty$Builder) id config))


(defn build-cfn-topic-topic-category-filter-property-builder
  "The build-cfn-topic-topic-category-filter-property-builder function updates a CfnTopic$TopicCategoryFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$TopicCategoryFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryFilterFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-filter-function` |
| `categoryFilterType` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-filter-type` |
| `constant` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:constant` |
| `inverse` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:inverse` |
"
  [^CfnTopic$TopicCategoryFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-filter-function)]
    (. builder categoryFilterFunction data))
  (when-let [data (lookup-entry config id :category-filter-type)]
    (. builder categoryFilterType data))
  (when-let [data (lookup-entry config id :constant)]
    (. builder constant data))
  (when-let [data (lookup-entry config id :inverse)]
    (. builder inverse data))
  (.build builder))


(defn cfn-topic-topic-category-filter-property-builder
  "Creates a  `CfnTopic$TopicCategoryFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-topic-category-filter-property-builder (new CfnTopic$TopicCategoryFilterProperty$Builder) id config))


(defn build-cfn-topic-topic-column-property-builder
  "The build-cfn-topic-topic-column-property-builder function updates a CfnTopic$TopicColumnProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$TopicColumnProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation` |
| `allowedAggregations` | java.util.List | [[cdk.support/lookup-entry]] | `:allowed-aggregations` |
| `cellValueSynonyms` | java.util.List | [[cdk.support/lookup-entry]] | `:cell-value-synonyms` |
| `columnDataRole` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-data-role` |
| `columnDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-description` |
| `columnFriendlyName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-friendly-name` |
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `columnSynonyms` | java.util.List | [[cdk.support/lookup-entry]] | `:column-synonyms` |
| `comparativeOrder` | software.amazon.awscdk.services.quicksight.CfnTopic$ComparativeOrderProperty | [[cdk.support/lookup-entry]] | `:comparative-order` |
| `defaultFormatting` | software.amazon.awscdk.services.quicksight.CfnTopic$DefaultFormattingProperty | [[cdk.support/lookup-entry]] | `:default-formatting` |
| `disableIndexing` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:disable-indexing` |
| `isIncludedInTopic` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:is-included-in-topic` |
| `neverAggregateInFilter` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:never-aggregate-in-filter` |
| `nonAdditive` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:non-additive` |
| `notAllowedAggregations` | java.util.List | [[cdk.support/lookup-entry]] | `:not-allowed-aggregations` |
| `semanticType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:semantic-type` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnTopic$TopicColumnProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation)]
    (. builder aggregation data))
  (when-let [data (lookup-entry config id :allowed-aggregations)]
    (. builder allowedAggregations data))
  (when-let [data (lookup-entry config id :cell-value-synonyms)]
    (. builder cellValueSynonyms data))
  (when-let [data (lookup-entry config id :column-data-role)]
    (. builder columnDataRole data))
  (when-let [data (lookup-entry config id :column-description)]
    (. builder columnDescription data))
  (when-let [data (lookup-entry config id :column-friendly-name)]
    (. builder columnFriendlyName data))
  (when-let [data (lookup-entry config id :column-name)]
    (. builder columnName data))
  (when-let [data (lookup-entry config id :column-synonyms)]
    (. builder columnSynonyms data))
  (when-let [data (lookup-entry config id :comparative-order)]
    (. builder comparativeOrder data))
  (when-let [data (lookup-entry config id :default-formatting)]
    (. builder defaultFormatting data))
  (when-let [data (lookup-entry config id :disable-indexing)]
    (. builder disableIndexing data))
  (when-let [data (lookup-entry config id :is-included-in-topic)]
    (. builder isIncludedInTopic data))
  (when-let [data (lookup-entry config id :never-aggregate-in-filter)]
    (. builder neverAggregateInFilter data))
  (when-let [data (lookup-entry config id :non-additive)]
    (. builder nonAdditive data))
  (when-let [data (lookup-entry config id :not-allowed-aggregations)]
    (. builder notAllowedAggregations data))
  (when-let [data (lookup-entry config id :semantic-type)]
    (. builder semanticType data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-topic-topic-column-property-builder
  "Creates a  `CfnTopic$TopicColumnProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-topic-column-property-builder (new CfnTopic$TopicColumnProperty$Builder) id config))


(defn build-cfn-topic-topic-date-range-filter-property-builder
  "The build-cfn-topic-topic-date-range-filter-property-builder function updates a CfnTopic$TopicDateRangeFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$TopicDateRangeFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `constant` | software.amazon.awscdk.services.quicksight.CfnTopic$TopicRangeFilterConstantProperty | [[cdk.support/lookup-entry]] | `:constant` |
| `inclusive` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:inclusive` |
"
  [^CfnTopic$TopicDateRangeFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :constant)]
    (. builder constant data))
  (when-let [data (lookup-entry config id :inclusive)]
    (. builder inclusive data))
  (.build builder))


(defn cfn-topic-topic-date-range-filter-property-builder
  "Creates a  `CfnTopic$TopicDateRangeFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-topic-date-range-filter-property-builder (new CfnTopic$TopicDateRangeFilterProperty$Builder) id config))


(defn build-cfn-topic-topic-filter-property-builder
  "The build-cfn-topic-topic-filter-property-builder function updates a CfnTopic$TopicFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$TopicFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-filter` |
| `dateRangeFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-range-filter` |
| `filterClass` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-class` |
| `filterDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-description` |
| `filterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-name` |
| `filterSynonyms` | java.util.List | [[cdk.support/lookup-entry]] | `:filter-synonyms` |
| `filterType` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-type` |
| `numericEqualityFilter` | software.amazon.awscdk.services.quicksight.CfnTopic$TopicNumericEqualityFilterProperty | [[cdk.support/lookup-entry]] | `:numeric-equality-filter` |
| `numericRangeFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-range-filter` |
| `operandFieldName` | java.lang.String | [[cdk.support/lookup-entry]] | `:operand-field-name` |
| `relativeDateFilter` | software.amazon.awscdk.services.quicksight.CfnTopic$TopicRelativeDateFilterProperty | [[cdk.support/lookup-entry]] | `:relative-date-filter` |
"
  [^CfnTopic$TopicFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :category-filter)]
    (. builder categoryFilter data))
  (when-let [data (lookup-entry config id :date-range-filter)]
    (. builder dateRangeFilter data))
  (when-let [data (lookup-entry config id :filter-class)]
    (. builder filterClass data))
  (when-let [data (lookup-entry config id :filter-description)]
    (. builder filterDescription data))
  (when-let [data (lookup-entry config id :filter-name)]
    (. builder filterName data))
  (when-let [data (lookup-entry config id :filter-synonyms)]
    (. builder filterSynonyms data))
  (when-let [data (lookup-entry config id :filter-type)]
    (. builder filterType data))
  (when-let [data (lookup-entry config id :numeric-equality-filter)]
    (. builder numericEqualityFilter data))
  (when-let [data (lookup-entry config id :numeric-range-filter)]
    (. builder numericRangeFilter data))
  (when-let [data (lookup-entry config id :operand-field-name)]
    (. builder operandFieldName data))
  (when-let [data (lookup-entry config id :relative-date-filter)]
    (. builder relativeDateFilter data))
  (.build builder))


(defn cfn-topic-topic-filter-property-builder
  "Creates a  `CfnTopic$TopicFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-topic-filter-property-builder (new CfnTopic$TopicFilterProperty$Builder) id config))


(defn build-cfn-topic-topic-named-entity-property-builder
  "The build-cfn-topic-topic-named-entity-property-builder function updates a CfnTopic$TopicNamedEntityProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$TopicNamedEntityProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `definition` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:definition` |
| `entityDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:entity-description` |
| `entityName` | java.lang.String | [[cdk.support/lookup-entry]] | `:entity-name` |
| `entitySynonyms` | java.util.List | [[cdk.support/lookup-entry]] | `:entity-synonyms` |
| `semanticEntityType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:semantic-entity-type` |
"
  [^CfnTopic$TopicNamedEntityProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :definition)]
    (. builder definition data))
  (when-let [data (lookup-entry config id :entity-description)]
    (. builder entityDescription data))
  (when-let [data (lookup-entry config id :entity-name)]
    (. builder entityName data))
  (when-let [data (lookup-entry config id :entity-synonyms)]
    (. builder entitySynonyms data))
  (when-let [data (lookup-entry config id :semantic-entity-type)]
    (. builder semanticEntityType data))
  (.build builder))


(defn cfn-topic-topic-named-entity-property-builder
  "Creates a  `CfnTopic$TopicNamedEntityProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-topic-named-entity-property-builder (new CfnTopic$TopicNamedEntityProperty$Builder) id config))


(defn build-cfn-topic-topic-numeric-equality-filter-property-builder
  "The build-cfn-topic-topic-numeric-equality-filter-property-builder function updates a CfnTopic$TopicNumericEqualityFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$TopicNumericEqualityFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation` |
| `constant` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:constant` |
"
  [^CfnTopic$TopicNumericEqualityFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation)]
    (. builder aggregation data))
  (when-let [data (lookup-entry config id :constant)]
    (. builder constant data))
  (.build builder))


(defn cfn-topic-topic-numeric-equality-filter-property-builder
  "Creates a  `CfnTopic$TopicNumericEqualityFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-topic-numeric-equality-filter-property-builder (new CfnTopic$TopicNumericEqualityFilterProperty$Builder) id config))


(defn build-cfn-topic-topic-numeric-range-filter-property-builder
  "The build-cfn-topic-topic-numeric-range-filter-property-builder function updates a CfnTopic$TopicNumericRangeFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$TopicNumericRangeFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation` |
| `constant` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:constant` |
| `inclusive` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:inclusive` |
"
  [^CfnTopic$TopicNumericRangeFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :aggregation)]
    (. builder aggregation data))
  (when-let [data (lookup-entry config id :constant)]
    (. builder constant data))
  (when-let [data (lookup-entry config id :inclusive)]
    (. builder inclusive data))
  (.build builder))


(defn cfn-topic-topic-numeric-range-filter-property-builder
  "Creates a  `CfnTopic$TopicNumericRangeFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-topic-numeric-range-filter-property-builder (new CfnTopic$TopicNumericRangeFilterProperty$Builder) id config))


(defn build-cfn-topic-topic-range-filter-constant-property-builder
  "The build-cfn-topic-topic-range-filter-constant-property-builder function updates a CfnTopic$TopicRangeFilterConstantProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$TopicRangeFilterConstantProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `constantType` | java.lang.String | [[cdk.support/lookup-entry]] | `:constant-type` |
| `rangeConstant` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-constant` |
"
  [^CfnTopic$TopicRangeFilterConstantProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :constant-type)]
    (. builder constantType data))
  (when-let [data (lookup-entry config id :range-constant)]
    (. builder rangeConstant data))
  (.build builder))


(defn cfn-topic-topic-range-filter-constant-property-builder
  "Creates a  `CfnTopic$TopicRangeFilterConstantProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-topic-range-filter-constant-property-builder (new CfnTopic$TopicRangeFilterConstantProperty$Builder) id config))


(defn build-cfn-topic-topic-relative-date-filter-property-builder
  "The build-cfn-topic-topic-relative-date-filter-property-builder function updates a CfnTopic$TopicRelativeDateFilterProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$TopicRelativeDateFilterProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `constant` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:constant` |
| `relativeDateFilterFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative-date-filter-function` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
"
  [^CfnTopic$TopicRelativeDateFilterProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :constant)]
    (. builder constant data))
  (when-let [data (lookup-entry config id :relative-date-filter-function)]
    (. builder relativeDateFilterFunction data))
  (when-let [data (lookup-entry config id :time-granularity)]
    (. builder timeGranularity data))
  (.build builder))


(defn cfn-topic-topic-relative-date-filter-property-builder
  "Creates a  `CfnTopic$TopicRelativeDateFilterProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-topic-relative-date-filter-property-builder (new CfnTopic$TopicRelativeDateFilterProperty$Builder) id config))


(defn build-cfn-topic-topic-singular-filter-constant-property-builder
  "The build-cfn-topic-topic-singular-filter-constant-property-builder function updates a CfnTopic$TopicSingularFilterConstantProperty$Builder instance using the provided configuration.
  The function takes the CfnTopic$TopicSingularFilterConstantProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `constantType` | java.lang.String | [[cdk.support/lookup-entry]] | `:constant-type` |
| `singularConstant` | java.lang.String | [[cdk.support/lookup-entry]] | `:singular-constant` |
"
  [^CfnTopic$TopicSingularFilterConstantProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :constant-type)]
    (. builder constantType data))
  (when-let [data (lookup-entry config id :singular-constant)]
    (. builder singularConstant data))
  (.build builder))


(defn cfn-topic-topic-singular-filter-constant-property-builder
  "Creates a  `CfnTopic$TopicSingularFilterConstantProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-topic-topic-singular-filter-constant-property-builder (new CfnTopic$TopicSingularFilterConstantProperty$Builder) id config))


(defn build-cfn-vpc-connection-builder
  "The build-cfn-vpc-connection-builder function updates a CfnVPCConnection$Builder instance using the provided configuration.
  The function takes the CfnVPCConnection$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `dnsResolvers` | java.util.List | [[cdk.support/lookup-entry]] | `:dns-resolvers` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `roleArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:role-arn` |
| `securityGroupIds` | java.util.List | [[cdk.support/lookup-entry]] | `:security-group-ids` |
| `subnetIds` | java.util.List | [[cdk.support/lookup-entry]] | `:subnet-ids` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `vpcConnectionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:vpc-connection-id` |
"
  [^CfnVPCConnection$Builder builder id config]
  (when-let [data (lookup-entry config id :availability-status)]
    (. builder availabilityStatus data))
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :dns-resolvers)]
    (. builder dnsResolvers data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :role-arn)]
    (. builder roleArn data))
  (when-let [data (lookup-entry config id :security-group-ids)]
    (. builder securityGroupIds data))
  (when-let [data (lookup-entry config id :subnet-ids)]
    (. builder subnetIds data))
  (when-let [data (lookup-entry config id :tags)]
    (. builder tags data))
  (when-let [data (lookup-entry config id :vpc-connection-id)]
    (. builder vpcConnectionId data))
  (.build builder))


(defn cfn-vpc-connection-builder
  "Creates a  `CfnVPCConnection$Builder` instance using a scope and ID, applies the data configuration, then builds it.  Takes the following arguments: 
| Argument | DataType | Description |
|---|---|---|
| scope | software.constructs.Construct | The parent scope construct of the object being built. |
| id | String or Keyword or Symbol | Value to use as both the ID of the object being build and the namespace when looking up configuration values. |
| config | map | Data configuration |"
  [^software.constructs.Construct scope id config]
  (build-cfn-vpc-connection-builder (CfnVPCConnection$Builder/create scope (name id)) id config))


(defn build-cfn-vpc-connection-network-interface-property-builder
  "The build-cfn-vpc-connection-network-interface-property-builder function updates a CfnVPCConnection$NetworkInterfaceProperty$Builder instance using the provided configuration.
  The function takes the CfnVPCConnection$NetworkInterfaceProperty$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityZone` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-zone` |
| `errorMessage` | java.lang.String | [[cdk.support/lookup-entry]] | `:error-message` |
| `networkInterfaceId` | java.lang.String | [[cdk.support/lookup-entry]] | `:network-interface-id` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `subnetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:subnet-id` |
"
  [^CfnVPCConnection$NetworkInterfaceProperty$Builder builder id config]
  (when-let [data (lookup-entry config id :availability-zone)]
    (. builder availabilityZone data))
  (when-let [data (lookup-entry config id :error-message)]
    (. builder errorMessage data))
  (when-let [data (lookup-entry config id :network-interface-id)]
    (. builder networkInterfaceId data))
  (when-let [data (lookup-entry config id :status)]
    (. builder status data))
  (when-let [data (lookup-entry config id :subnet-id)]
    (. builder subnetId data))
  (.build builder))


(defn cfn-vpc-connection-network-interface-property-builder
  "Creates a  `CfnVPCConnection$NetworkInterfaceProperty$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-vpc-connection-network-interface-property-builder (new CfnVPCConnection$NetworkInterfaceProperty$Builder) id config))


(defn build-cfn-vpc-connection-props-builder
  "The build-cfn-vpc-connection-props-builder function updates a CfnVPCConnectionProps$Builder instance using the provided configuration.
  The function takes the CfnVPCConnectionProps$Builder instance, an optional namespace to use when looking up a value in the configuration,
  and the configuration itself.

  Fields on the builder are populated by looking up their respective data key, where the namespaced value takes precendence over the non-namespaced value:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `dnsResolvers` | java.util.List | [[cdk.support/lookup-entry]] | `:dns-resolvers` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `roleArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:role-arn` |
| `securityGroupIds` | java.util.List | [[cdk.support/lookup-entry]] | `:security-group-ids` |
| `subnetIds` | java.util.List | [[cdk.support/lookup-entry]] | `:subnet-ids` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `vpcConnectionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:vpc-connection-id` |
"
  [^CfnVPCConnectionProps$Builder builder id config]
  (when-let [data (lookup-entry config id :availability-status)]
    (. builder availabilityStatus data))
  (when-let [data (lookup-entry config id :aws-account-id)]
    (. builder awsAccountId data))
  (when-let [data (lookup-entry config id :dns-resolvers)]
    (. builder dnsResolvers data))
  (when-let [data (lookup-entry config id :name)]
    (. builder name data))
  (when-let [data (lookup-entry config id :role-arn)]
    (. builder roleArn data))
  (when-let [data (lookup-entry config id :security-group-ids)]
    (. builder securityGroupIds data))
  (when-let [data (lookup-entry config id :subnet-ids)]
    (. builder subnetIds data))
  (when-let [data (lookup-entry config id :tags)]
    (. builder tags data))
  (when-let [data (lookup-entry config id :vpc-connection-id)]
    (. builder vpcConnectionId data))
  (.build builder))


(defn cfn-vpc-connection-props-builder
  "Creates a  `CfnVPCConnectionProps$Builder` instance using a no-argument constructor, applies the data configuration, then builds it.  Takes the following arguments: 

| Argument | DataType | Description |
|---|---|---|
| id | String or Keyword or Symbol | Value to use as namespace when looking up configuration values. |
| config | map | Data configuration |"
  [id config]
  (build-cfn-vpc-connection-props-builder (new CfnVPCConnectionProps$Builder) id config))
(ns cdk.api.services.quicksight
  "Functions that represent AWS CDK enums and builders in the software.amazon.awscdk.services.quicksight package. "
  (:require [cdk.support :refer [lookup-entry]])
  (:import [software.amazon.awscdk.services.quicksight CfnAnalysis$AggregationFunctionProperty$Builder
                                                       CfnAnalysis$AggregationSortConfigurationProperty$Builder
                                                       CfnAnalysis$AnalysisDefaultsProperty$Builder
                                                       CfnAnalysis$AnalysisDefinitionProperty$Builder
                                                       CfnAnalysis$AnalysisErrorProperty$Builder
                                                       CfnAnalysis$AnalysisSourceEntityProperty$Builder
                                                       CfnAnalysis$AnalysisSourceTemplateProperty$Builder
                                                       CfnAnalysis$AnchorDateConfigurationProperty$Builder
                                                       CfnAnalysis$ArcAxisConfigurationProperty$Builder
                                                       CfnAnalysis$ArcAxisDisplayRangeProperty$Builder
                                                       CfnAnalysis$ArcConfigurationProperty$Builder
                                                       CfnAnalysis$ArcOptionsProperty$Builder
                                                       CfnAnalysis$AssetOptionsProperty$Builder
                                                       CfnAnalysis$AttributeAggregationFunctionProperty$Builder
                                                       CfnAnalysis$AxisDataOptionsProperty$Builder
                                                       CfnAnalysis$AxisDisplayMinMaxRangeProperty$Builder
                                                       CfnAnalysis$AxisDisplayOptionsProperty$Builder
                                                       CfnAnalysis$AxisDisplayRangeProperty$Builder
                                                       CfnAnalysis$AxisLabelOptionsProperty$Builder
                                                       CfnAnalysis$AxisLabelReferenceOptionsProperty$Builder
                                                       CfnAnalysis$AxisLinearScaleProperty$Builder
                                                       CfnAnalysis$AxisLogarithmicScaleProperty$Builder
                                                       CfnAnalysis$AxisScaleProperty$Builder
                                                       CfnAnalysis$AxisTickLabelOptionsProperty$Builder
                                                       CfnAnalysis$BarChartAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$BarChartConfigurationProperty$Builder
                                                       CfnAnalysis$BarChartFieldWellsProperty$Builder
                                                       CfnAnalysis$BarChartSortConfigurationProperty$Builder
                                                       CfnAnalysis$BarChartVisualProperty$Builder
                                                       CfnAnalysis$BinCountOptionsProperty$Builder
                                                       CfnAnalysis$BinWidthOptionsProperty$Builder
                                                       CfnAnalysis$BodySectionConfigurationProperty$Builder
                                                       CfnAnalysis$BodySectionContentProperty$Builder
                                                       CfnAnalysis$BoxPlotAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$BoxPlotChartConfigurationProperty$Builder
                                                       CfnAnalysis$BoxPlotFieldWellsProperty$Builder
                                                       CfnAnalysis$BoxPlotOptionsProperty$Builder
                                                       CfnAnalysis$BoxPlotSortConfigurationProperty$Builder
                                                       CfnAnalysis$BoxPlotStyleOptionsProperty$Builder
                                                       CfnAnalysis$BoxPlotVisualProperty$Builder
                                                       CfnAnalysis$Builder
                                                       CfnAnalysis$CalculatedFieldProperty$Builder
                                                       CfnAnalysis$CalculatedMeasureFieldProperty$Builder
                                                       CfnAnalysis$CascadingControlConfigurationProperty$Builder
                                                       CfnAnalysis$CascadingControlSourceProperty$Builder
                                                       CfnAnalysis$CategoricalDimensionFieldProperty$Builder
                                                       CfnAnalysis$CategoricalMeasureFieldProperty$Builder
                                                       CfnAnalysis$CategoryDrillDownFilterProperty$Builder
                                                       CfnAnalysis$CategoryFilterConfigurationProperty$Builder
                                                       CfnAnalysis$CategoryFilterProperty$Builder
                                                       CfnAnalysis$ChartAxisLabelOptionsProperty$Builder
                                                       CfnAnalysis$ClusterMarkerConfigurationProperty$Builder
                                                       CfnAnalysis$ClusterMarkerProperty$Builder
                                                       CfnAnalysis$ColorScaleProperty$Builder
                                                       CfnAnalysis$ColorsConfigurationProperty$Builder
                                                       CfnAnalysis$ColumnConfigurationProperty$Builder
                                                       CfnAnalysis$ColumnHierarchyProperty$Builder
                                                       CfnAnalysis$ColumnIdentifierProperty$Builder
                                                       CfnAnalysis$ColumnSortProperty$Builder
                                                       CfnAnalysis$ColumnTooltipItemProperty$Builder
                                                       CfnAnalysis$ComboChartAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$ComboChartConfigurationProperty$Builder
                                                       CfnAnalysis$ComboChartFieldWellsProperty$Builder
                                                       CfnAnalysis$ComboChartSortConfigurationProperty$Builder
                                                       CfnAnalysis$ComboChartVisualProperty$Builder
                                                       CfnAnalysis$ComparisonConfigurationProperty$Builder
                                                       CfnAnalysis$ComparisonFormatConfigurationProperty$Builder
                                                       CfnAnalysis$ComputationProperty$Builder
                                                       CfnAnalysis$ConditionalFormattingColorProperty$Builder
                                                       CfnAnalysis$ConditionalFormattingCustomIconConditionProperty$Builder
                                                       CfnAnalysis$ConditionalFormattingCustomIconOptionsProperty$Builder
                                                       CfnAnalysis$ConditionalFormattingGradientColorProperty$Builder
                                                       CfnAnalysis$ConditionalFormattingIconDisplayConfigurationProperty$Builder
                                                       CfnAnalysis$ConditionalFormattingIconProperty$Builder
                                                       CfnAnalysis$ConditionalFormattingIconSetProperty$Builder
                                                       CfnAnalysis$ConditionalFormattingSolidColorProperty$Builder
                                                       CfnAnalysis$ContributionAnalysisDefaultProperty$Builder
                                                       CfnAnalysis$CurrencyDisplayFormatConfigurationProperty$Builder
                                                       CfnAnalysis$CustomActionFilterOperationProperty$Builder
                                                       CfnAnalysis$CustomActionNavigationOperationProperty$Builder
                                                       CfnAnalysis$CustomActionSetParametersOperationProperty$Builder
                                                       CfnAnalysis$CustomActionURLOperationProperty$Builder
                                                       CfnAnalysis$CustomColorProperty$Builder
                                                       CfnAnalysis$CustomContentConfigurationProperty$Builder
                                                       CfnAnalysis$CustomContentVisualProperty$Builder
                                                       CfnAnalysis$CustomFilterConfigurationProperty$Builder
                                                       CfnAnalysis$CustomFilterListConfigurationProperty$Builder
                                                       CfnAnalysis$CustomNarrativeOptionsProperty$Builder
                                                       CfnAnalysis$CustomParameterValuesProperty$Builder
                                                       CfnAnalysis$CustomValuesConfigurationProperty$Builder
                                                       CfnAnalysis$DataBarsOptionsProperty$Builder
                                                       CfnAnalysis$DataColorProperty$Builder
                                                       CfnAnalysis$DataFieldSeriesItemProperty$Builder
                                                       CfnAnalysis$DataLabelOptionsProperty$Builder
                                                       CfnAnalysis$DataLabelTypeProperty$Builder
                                                       CfnAnalysis$DataPathColorProperty$Builder
                                                       CfnAnalysis$DataPathLabelTypeProperty$Builder
                                                       CfnAnalysis$DataPathSortProperty$Builder
                                                       CfnAnalysis$DataPathTypeProperty$Builder
                                                       CfnAnalysis$DataPathValueProperty$Builder
                                                       CfnAnalysis$DataSetIdentifierDeclarationProperty$Builder
                                                       CfnAnalysis$DataSetReferenceProperty$Builder
                                                       CfnAnalysis$DateAxisOptionsProperty$Builder
                                                       CfnAnalysis$DateDimensionFieldProperty$Builder
                                                       CfnAnalysis$DateMeasureFieldProperty$Builder
                                                       CfnAnalysis$DateTimeDefaultValuesProperty$Builder
                                                       CfnAnalysis$DateTimeFormatConfigurationProperty$Builder
                                                       CfnAnalysis$DateTimeHierarchyProperty$Builder
                                                       CfnAnalysis$DateTimeParameterDeclarationProperty$Builder
                                                       CfnAnalysis$DateTimeParameterProperty$Builder
                                                       CfnAnalysis$DateTimePickerControlDisplayOptionsProperty$Builder
                                                       CfnAnalysis$DateTimeValueWhenUnsetConfigurationProperty$Builder
                                                       CfnAnalysis$DecimalDefaultValuesProperty$Builder
                                                       CfnAnalysis$DecimalParameterDeclarationProperty$Builder
                                                       CfnAnalysis$DecimalParameterProperty$Builder
                                                       CfnAnalysis$DecimalPlacesConfigurationProperty$Builder
                                                       CfnAnalysis$DecimalValueWhenUnsetConfigurationProperty$Builder
                                                       CfnAnalysis$DefaultDateTimePickerControlOptionsProperty$Builder
                                                       CfnAnalysis$DefaultFilterControlConfigurationProperty$Builder
                                                       CfnAnalysis$DefaultFilterControlOptionsProperty$Builder
                                                       CfnAnalysis$DefaultFilterDropDownControlOptionsProperty$Builder
                                                       CfnAnalysis$DefaultFilterListControlOptionsProperty$Builder
                                                       CfnAnalysis$DefaultFreeFormLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$DefaultGridLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$DefaultInteractiveLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$DefaultNewSheetConfigurationProperty$Builder
                                                       CfnAnalysis$DefaultPaginatedLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$DefaultRelativeDateTimeControlOptionsProperty$Builder
                                                       CfnAnalysis$DefaultSectionBasedLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$DefaultSliderControlOptionsProperty$Builder
                                                       CfnAnalysis$DefaultTextAreaControlOptionsProperty$Builder
                                                       CfnAnalysis$DefaultTextFieldControlOptionsProperty$Builder
                                                       CfnAnalysis$DestinationParameterValueConfigurationProperty$Builder
                                                       CfnAnalysis$DimensionFieldProperty$Builder
                                                       CfnAnalysis$DonutCenterOptionsProperty$Builder
                                                       CfnAnalysis$DonutOptionsProperty$Builder
                                                       CfnAnalysis$DrillDownFilterProperty$Builder
                                                       CfnAnalysis$DropDownControlDisplayOptionsProperty$Builder
                                                       CfnAnalysis$DynamicDefaultValueProperty$Builder
                                                       CfnAnalysis$EmptyVisualProperty$Builder
                                                       CfnAnalysis$EntityProperty$Builder
                                                       CfnAnalysis$ExcludePeriodConfigurationProperty$Builder
                                                       CfnAnalysis$ExplicitHierarchyProperty$Builder
                                                       CfnAnalysis$FieldBasedTooltipProperty$Builder
                                                       CfnAnalysis$FieldLabelTypeProperty$Builder
                                                       CfnAnalysis$FieldSeriesItemProperty$Builder
                                                       CfnAnalysis$FieldSortOptionsProperty$Builder
                                                       CfnAnalysis$FieldSortProperty$Builder
                                                       CfnAnalysis$FieldTooltipItemProperty$Builder
                                                       CfnAnalysis$FilledMapAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$FilledMapConditionalFormattingOptionProperty$Builder
                                                       CfnAnalysis$FilledMapConditionalFormattingProperty$Builder
                                                       CfnAnalysis$FilledMapConfigurationProperty$Builder
                                                       CfnAnalysis$FilledMapFieldWellsProperty$Builder
                                                       CfnAnalysis$FilledMapShapeConditionalFormattingProperty$Builder
                                                       CfnAnalysis$FilledMapSortConfigurationProperty$Builder
                                                       CfnAnalysis$FilledMapVisualProperty$Builder
                                                       CfnAnalysis$FilterControlProperty$Builder
                                                       CfnAnalysis$FilterCrossSheetControlProperty$Builder
                                                       CfnAnalysis$FilterDateTimePickerControlProperty$Builder
                                                       CfnAnalysis$FilterDropDownControlProperty$Builder
                                                       CfnAnalysis$FilterGroupProperty$Builder
                                                       CfnAnalysis$FilterListConfigurationProperty$Builder
                                                       CfnAnalysis$FilterListControlProperty$Builder
                                                       CfnAnalysis$FilterOperationSelectedFieldsConfigurationProperty$Builder
                                                       CfnAnalysis$FilterOperationTargetVisualsConfigurationProperty$Builder
                                                       CfnAnalysis$FilterProperty$Builder
                                                       CfnAnalysis$FilterRelativeDateTimeControlProperty$Builder
                                                       CfnAnalysis$FilterScopeConfigurationProperty$Builder
                                                       CfnAnalysis$FilterSelectableValuesProperty$Builder
                                                       CfnAnalysis$FilterSliderControlProperty$Builder
                                                       CfnAnalysis$FilterTextAreaControlProperty$Builder
                                                       CfnAnalysis$FilterTextFieldControlProperty$Builder
                                                       CfnAnalysis$FontConfigurationProperty$Builder
                                                       CfnAnalysis$FontSizeProperty$Builder
                                                       CfnAnalysis$FontWeightProperty$Builder
                                                       CfnAnalysis$ForecastComputationProperty$Builder
                                                       CfnAnalysis$ForecastConfigurationProperty$Builder
                                                       CfnAnalysis$ForecastScenarioProperty$Builder
                                                       CfnAnalysis$FormatConfigurationProperty$Builder
                                                       CfnAnalysis$FreeFormLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnAnalysis$FreeFormLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$FreeFormLayoutElementBackgroundStyleProperty$Builder
                                                       CfnAnalysis$FreeFormLayoutElementBorderStyleProperty$Builder
                                                       CfnAnalysis$FreeFormLayoutElementProperty$Builder
                                                       CfnAnalysis$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder
                                                       CfnAnalysis$FreeFormSectionLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$FunnelChartAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$FunnelChartConfigurationProperty$Builder
                                                       CfnAnalysis$FunnelChartDataLabelOptionsProperty$Builder
                                                       CfnAnalysis$FunnelChartFieldWellsProperty$Builder
                                                       CfnAnalysis$FunnelChartSortConfigurationProperty$Builder
                                                       CfnAnalysis$FunnelChartVisualProperty$Builder
                                                       CfnAnalysis$GaugeChartArcConditionalFormattingProperty$Builder
                                                       CfnAnalysis$GaugeChartConditionalFormattingOptionProperty$Builder
                                                       CfnAnalysis$GaugeChartConditionalFormattingProperty$Builder
                                                       CfnAnalysis$GaugeChartConfigurationProperty$Builder
                                                       CfnAnalysis$GaugeChartFieldWellsProperty$Builder
                                                       CfnAnalysis$GaugeChartOptionsProperty$Builder
                                                       CfnAnalysis$GaugeChartPrimaryValueConditionalFormattingProperty$Builder
                                                       CfnAnalysis$GaugeChartVisualProperty$Builder
                                                       CfnAnalysis$GeospatialCoordinateBoundsProperty$Builder
                                                       CfnAnalysis$GeospatialHeatmapColorScaleProperty$Builder
                                                       CfnAnalysis$GeospatialHeatmapConfigurationProperty$Builder
                                                       CfnAnalysis$GeospatialHeatmapDataColorProperty$Builder
                                                       CfnAnalysis$GeospatialMapAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$GeospatialMapConfigurationProperty$Builder
                                                       CfnAnalysis$GeospatialMapFieldWellsProperty$Builder
                                                       CfnAnalysis$GeospatialMapStyleOptionsProperty$Builder
                                                       CfnAnalysis$GeospatialMapVisualProperty$Builder
                                                       CfnAnalysis$GeospatialPointStyleOptionsProperty$Builder
                                                       CfnAnalysis$GeospatialWindowOptionsProperty$Builder
                                                       CfnAnalysis$GlobalTableBorderOptionsProperty$Builder
                                                       CfnAnalysis$GradientColorProperty$Builder
                                                       CfnAnalysis$GradientStopProperty$Builder
                                                       CfnAnalysis$GridLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnAnalysis$GridLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$GridLayoutElementProperty$Builder
                                                       CfnAnalysis$GridLayoutScreenCanvasSizeOptionsProperty$Builder
                                                       CfnAnalysis$GrowthRateComputationProperty$Builder
                                                       CfnAnalysis$HeaderFooterSectionConfigurationProperty$Builder
                                                       CfnAnalysis$HeatMapAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$HeatMapConfigurationProperty$Builder
                                                       CfnAnalysis$HeatMapFieldWellsProperty$Builder
                                                       CfnAnalysis$HeatMapSortConfigurationProperty$Builder
                                                       CfnAnalysis$HeatMapVisualProperty$Builder
                                                       CfnAnalysis$HistogramAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$HistogramBinOptionsProperty$Builder
                                                       CfnAnalysis$HistogramConfigurationProperty$Builder
                                                       CfnAnalysis$HistogramFieldWellsProperty$Builder
                                                       CfnAnalysis$HistogramVisualProperty$Builder
                                                       CfnAnalysis$InsightConfigurationProperty$Builder
                                                       CfnAnalysis$InsightVisualProperty$Builder
                                                       CfnAnalysis$IntegerDefaultValuesProperty$Builder
                                                       CfnAnalysis$IntegerParameterDeclarationProperty$Builder
                                                       CfnAnalysis$IntegerParameterProperty$Builder
                                                       CfnAnalysis$IntegerValueWhenUnsetConfigurationProperty$Builder
                                                       CfnAnalysis$ItemsLimitConfigurationProperty$Builder
                                                       CfnAnalysis$KPIActualValueConditionalFormattingProperty$Builder
                                                       CfnAnalysis$KPIComparisonValueConditionalFormattingProperty$Builder
                                                       CfnAnalysis$KPIConditionalFormattingOptionProperty$Builder
                                                       CfnAnalysis$KPIConditionalFormattingProperty$Builder
                                                       CfnAnalysis$KPIConfigurationProperty$Builder
                                                       CfnAnalysis$KPIFieldWellsProperty$Builder
                                                       CfnAnalysis$KPIOptionsProperty$Builder
                                                       CfnAnalysis$KPIPrimaryValueConditionalFormattingProperty$Builder
                                                       CfnAnalysis$KPIProgressBarConditionalFormattingProperty$Builder
                                                       CfnAnalysis$KPISortConfigurationProperty$Builder
                                                       CfnAnalysis$KPISparklineOptionsProperty$Builder
                                                       CfnAnalysis$KPIVisualLayoutOptionsProperty$Builder
                                                       CfnAnalysis$KPIVisualProperty$Builder
                                                       CfnAnalysis$KPIVisualStandardLayoutProperty$Builder
                                                       CfnAnalysis$LabelOptionsProperty$Builder
                                                       CfnAnalysis$LayoutConfigurationProperty$Builder
                                                       CfnAnalysis$LayoutProperty$Builder
                                                       CfnAnalysis$LegendOptionsProperty$Builder
                                                       CfnAnalysis$LineChartAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$LineChartConfigurationProperty$Builder
                                                       CfnAnalysis$LineChartDefaultSeriesSettingsProperty$Builder
                                                       CfnAnalysis$LineChartFieldWellsProperty$Builder
                                                       CfnAnalysis$LineChartLineStyleSettingsProperty$Builder
                                                       CfnAnalysis$LineChartMarkerStyleSettingsProperty$Builder
                                                       CfnAnalysis$LineChartSeriesSettingsProperty$Builder
                                                       CfnAnalysis$LineChartSortConfigurationProperty$Builder
                                                       CfnAnalysis$LineChartVisualProperty$Builder
                                                       CfnAnalysis$LineSeriesAxisDisplayOptionsProperty$Builder
                                                       CfnAnalysis$ListControlDisplayOptionsProperty$Builder
                                                       CfnAnalysis$ListControlSearchOptionsProperty$Builder
                                                       CfnAnalysis$ListControlSelectAllOptionsProperty$Builder
                                                       CfnAnalysis$LoadingAnimationProperty$Builder
                                                       CfnAnalysis$LocalNavigationConfigurationProperty$Builder
                                                       CfnAnalysis$LongFormatTextProperty$Builder
                                                       CfnAnalysis$MappedDataSetParameterProperty$Builder
                                                       CfnAnalysis$MaximumLabelTypeProperty$Builder
                                                       CfnAnalysis$MaximumMinimumComputationProperty$Builder
                                                       CfnAnalysis$MeasureFieldProperty$Builder
                                                       CfnAnalysis$MetricComparisonComputationProperty$Builder
                                                       CfnAnalysis$MinimumLabelTypeProperty$Builder
                                                       CfnAnalysis$MissingDataConfigurationProperty$Builder
                                                       CfnAnalysis$NegativeValueConfigurationProperty$Builder
                                                       CfnAnalysis$NullValueFormatConfigurationProperty$Builder
                                                       CfnAnalysis$NumberDisplayFormatConfigurationProperty$Builder
                                                       CfnAnalysis$NumberFormatConfigurationProperty$Builder
                                                       CfnAnalysis$NumericAxisOptionsProperty$Builder
                                                       CfnAnalysis$NumericEqualityDrillDownFilterProperty$Builder
                                                       CfnAnalysis$NumericEqualityFilterProperty$Builder
                                                       CfnAnalysis$NumericFormatConfigurationProperty$Builder
                                                       CfnAnalysis$NumericRangeFilterProperty$Builder
                                                       CfnAnalysis$NumericRangeFilterValueProperty$Builder
                                                       CfnAnalysis$NumericSeparatorConfigurationProperty$Builder
                                                       CfnAnalysis$NumericalAggregationFunctionProperty$Builder
                                                       CfnAnalysis$NumericalDimensionFieldProperty$Builder
                                                       CfnAnalysis$NumericalMeasureFieldProperty$Builder
                                                       CfnAnalysis$PaginationConfigurationProperty$Builder
                                                       CfnAnalysis$PanelConfigurationProperty$Builder
                                                       CfnAnalysis$PanelTitleOptionsProperty$Builder
                                                       CfnAnalysis$ParameterControlProperty$Builder
                                                       CfnAnalysis$ParameterDateTimePickerControlProperty$Builder
                                                       CfnAnalysis$ParameterDeclarationProperty$Builder
                                                       CfnAnalysis$ParameterDropDownControlProperty$Builder
                                                       CfnAnalysis$ParameterListControlProperty$Builder
                                                       CfnAnalysis$ParameterSelectableValuesProperty$Builder
                                                       CfnAnalysis$ParameterSliderControlProperty$Builder
                                                       CfnAnalysis$ParameterTextAreaControlProperty$Builder
                                                       CfnAnalysis$ParameterTextFieldControlProperty$Builder
                                                       CfnAnalysis$ParametersProperty$Builder
                                                       CfnAnalysis$PercentVisibleRangeProperty$Builder
                                                       CfnAnalysis$PercentageDisplayFormatConfigurationProperty$Builder
                                                       CfnAnalysis$PercentileAggregationProperty$Builder
                                                       CfnAnalysis$PeriodOverPeriodComputationProperty$Builder
                                                       CfnAnalysis$PeriodToDateComputationProperty$Builder
                                                       CfnAnalysis$PieChartAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$PieChartConfigurationProperty$Builder
                                                       CfnAnalysis$PieChartFieldWellsProperty$Builder
                                                       CfnAnalysis$PieChartSortConfigurationProperty$Builder
                                                       CfnAnalysis$PieChartVisualProperty$Builder
                                                       CfnAnalysis$PivotFieldSortOptionsProperty$Builder
                                                       CfnAnalysis$PivotTableAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$PivotTableCellConditionalFormattingProperty$Builder
                                                       CfnAnalysis$PivotTableConditionalFormattingOptionProperty$Builder
                                                       CfnAnalysis$PivotTableConditionalFormattingProperty$Builder
                                                       CfnAnalysis$PivotTableConditionalFormattingScopeProperty$Builder
                                                       CfnAnalysis$PivotTableConfigurationProperty$Builder
                                                       CfnAnalysis$PivotTableDataPathOptionProperty$Builder
                                                       CfnAnalysis$PivotTableFieldCollapseStateOptionProperty$Builder
                                                       CfnAnalysis$PivotTableFieldCollapseStateTargetProperty$Builder
                                                       CfnAnalysis$PivotTableFieldOptionProperty$Builder
                                                       CfnAnalysis$PivotTableFieldOptionsProperty$Builder
                                                       CfnAnalysis$PivotTableFieldSubtotalOptionsProperty$Builder
                                                       CfnAnalysis$PivotTableFieldWellsProperty$Builder
                                                       CfnAnalysis$PivotTableOptionsProperty$Builder
                                                       CfnAnalysis$PivotTablePaginatedReportOptionsProperty$Builder
                                                       CfnAnalysis$PivotTableRowsLabelOptionsProperty$Builder
                                                       CfnAnalysis$PivotTableSortByProperty$Builder
                                                       CfnAnalysis$PivotTableSortConfigurationProperty$Builder
                                                       CfnAnalysis$PivotTableTotalOptionsProperty$Builder
                                                       CfnAnalysis$PivotTableVisualProperty$Builder
                                                       CfnAnalysis$PivotTotalOptionsProperty$Builder
                                                       CfnAnalysis$PredefinedHierarchyProperty$Builder
                                                       CfnAnalysis$ProgressBarOptionsProperty$Builder
                                                       CfnAnalysis$RadarChartAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$RadarChartAreaStyleSettingsProperty$Builder
                                                       CfnAnalysis$RadarChartConfigurationProperty$Builder
                                                       CfnAnalysis$RadarChartFieldWellsProperty$Builder
                                                       CfnAnalysis$RadarChartSeriesSettingsProperty$Builder
                                                       CfnAnalysis$RadarChartSortConfigurationProperty$Builder
                                                       CfnAnalysis$RadarChartVisualProperty$Builder
                                                       CfnAnalysis$RangeEndsLabelTypeProperty$Builder
                                                       CfnAnalysis$ReferenceLineCustomLabelConfigurationProperty$Builder
                                                       CfnAnalysis$ReferenceLineDataConfigurationProperty$Builder
                                                       CfnAnalysis$ReferenceLineDynamicDataConfigurationProperty$Builder
                                                       CfnAnalysis$ReferenceLineLabelConfigurationProperty$Builder
                                                       CfnAnalysis$ReferenceLineProperty$Builder
                                                       CfnAnalysis$ReferenceLineStaticDataConfigurationProperty$Builder
                                                       CfnAnalysis$ReferenceLineStyleConfigurationProperty$Builder
                                                       CfnAnalysis$ReferenceLineValueLabelConfigurationProperty$Builder
                                                       CfnAnalysis$RelativeDateTimeControlDisplayOptionsProperty$Builder
                                                       CfnAnalysis$RelativeDatesFilterProperty$Builder
                                                       CfnAnalysis$ResourcePermissionProperty$Builder
                                                       CfnAnalysis$RollingDateConfigurationProperty$Builder
                                                       CfnAnalysis$RowAlternateColorOptionsProperty$Builder
                                                       CfnAnalysis$SameSheetTargetVisualConfigurationProperty$Builder
                                                       CfnAnalysis$SankeyDiagramAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$SankeyDiagramChartConfigurationProperty$Builder
                                                       CfnAnalysis$SankeyDiagramFieldWellsProperty$Builder
                                                       CfnAnalysis$SankeyDiagramSortConfigurationProperty$Builder
                                                       CfnAnalysis$SankeyDiagramVisualProperty$Builder
                                                       CfnAnalysis$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$ScatterPlotConfigurationProperty$Builder
                                                       CfnAnalysis$ScatterPlotFieldWellsProperty$Builder
                                                       CfnAnalysis$ScatterPlotUnaggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$ScatterPlotVisualProperty$Builder
                                                       CfnAnalysis$ScrollBarOptionsProperty$Builder
                                                       CfnAnalysis$SecondaryValueOptionsProperty$Builder
                                                       CfnAnalysis$SectionAfterPageBreakProperty$Builder
                                                       CfnAnalysis$SectionBasedLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnAnalysis$SectionBasedLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder
                                                       CfnAnalysis$SectionLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$SectionPageBreakConfigurationProperty$Builder
                                                       CfnAnalysis$SectionStyleProperty$Builder
                                                       CfnAnalysis$SelectedSheetsFilterScopeConfigurationProperty$Builder
                                                       CfnAnalysis$SeriesItemProperty$Builder
                                                       CfnAnalysis$SetParameterValueConfigurationProperty$Builder
                                                       CfnAnalysis$ShapeConditionalFormatProperty$Builder
                                                       CfnAnalysis$SheetControlInfoIconLabelOptionsProperty$Builder
                                                       CfnAnalysis$SheetControlLayoutConfigurationProperty$Builder
                                                       CfnAnalysis$SheetControlLayoutProperty$Builder
                                                       CfnAnalysis$SheetDefinitionProperty$Builder
                                                       CfnAnalysis$SheetElementConfigurationOverridesProperty$Builder
                                                       CfnAnalysis$SheetElementRenderingRuleProperty$Builder
                                                       CfnAnalysis$SheetProperty$Builder
                                                       CfnAnalysis$SheetTextBoxProperty$Builder
                                                       CfnAnalysis$SheetVisualScopingConfigurationProperty$Builder
                                                       CfnAnalysis$ShortFormatTextProperty$Builder
                                                       CfnAnalysis$SimpleClusterMarkerProperty$Builder
                                                       CfnAnalysis$SliderControlDisplayOptionsProperty$Builder
                                                       CfnAnalysis$SmallMultiplesAxisPropertiesProperty$Builder
                                                       CfnAnalysis$SmallMultiplesOptionsProperty$Builder
                                                       CfnAnalysis$SpacingProperty$Builder
                                                       CfnAnalysis$StringDefaultValuesProperty$Builder
                                                       CfnAnalysis$StringFormatConfigurationProperty$Builder
                                                       CfnAnalysis$StringParameterDeclarationProperty$Builder
                                                       CfnAnalysis$StringParameterProperty$Builder
                                                       CfnAnalysis$StringValueWhenUnsetConfigurationProperty$Builder
                                                       CfnAnalysis$SubtotalOptionsProperty$Builder
                                                       CfnAnalysis$TableAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$TableBorderOptionsProperty$Builder
                                                       CfnAnalysis$TableCellConditionalFormattingProperty$Builder
                                                       CfnAnalysis$TableCellImageSizingConfigurationProperty$Builder
                                                       CfnAnalysis$TableCellStyleProperty$Builder
                                                       CfnAnalysis$TableConditionalFormattingOptionProperty$Builder
                                                       CfnAnalysis$TableConditionalFormattingProperty$Builder
                                                       CfnAnalysis$TableConfigurationProperty$Builder
                                                       CfnAnalysis$TableFieldCustomIconContentProperty$Builder
                                                       CfnAnalysis$TableFieldCustomTextContentProperty$Builder
                                                       CfnAnalysis$TableFieldImageConfigurationProperty$Builder
                                                       CfnAnalysis$TableFieldLinkConfigurationProperty$Builder
                                                       CfnAnalysis$TableFieldLinkContentConfigurationProperty$Builder
                                                       CfnAnalysis$TableFieldOptionProperty$Builder
                                                       CfnAnalysis$TableFieldOptionsProperty$Builder
                                                       CfnAnalysis$TableFieldURLConfigurationProperty$Builder
                                                       CfnAnalysis$TableFieldWellsProperty$Builder
                                                       CfnAnalysis$TableInlineVisualizationProperty$Builder
                                                       CfnAnalysis$TableOptionsProperty$Builder
                                                       CfnAnalysis$TablePaginatedReportOptionsProperty$Builder
                                                       CfnAnalysis$TablePinnedFieldOptionsProperty$Builder
                                                       CfnAnalysis$TableRowConditionalFormattingProperty$Builder
                                                       CfnAnalysis$TableSideBorderOptionsProperty$Builder
                                                       CfnAnalysis$TableSortConfigurationProperty$Builder
                                                       CfnAnalysis$TableStyleTargetProperty$Builder
                                                       CfnAnalysis$TableUnaggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$TableVisualProperty$Builder
                                                       CfnAnalysis$TextAreaControlDisplayOptionsProperty$Builder
                                                       CfnAnalysis$TextConditionalFormatProperty$Builder
                                                       CfnAnalysis$TextControlPlaceholderOptionsProperty$Builder
                                                       CfnAnalysis$TextFieldControlDisplayOptionsProperty$Builder
                                                       CfnAnalysis$ThousandSeparatorOptionsProperty$Builder
                                                       CfnAnalysis$TimeBasedForecastPropertiesProperty$Builder
                                                       CfnAnalysis$TimeEqualityFilterProperty$Builder
                                                       CfnAnalysis$TimeRangeDrillDownFilterProperty$Builder
                                                       CfnAnalysis$TimeRangeFilterProperty$Builder
                                                       CfnAnalysis$TimeRangeFilterValueProperty$Builder
                                                       CfnAnalysis$TooltipItemProperty$Builder
                                                       CfnAnalysis$TooltipOptionsProperty$Builder
                                                       CfnAnalysis$TopBottomFilterProperty$Builder
                                                       CfnAnalysis$TopBottomMoversComputationProperty$Builder
                                                       CfnAnalysis$TopBottomRankedComputationProperty$Builder
                                                       CfnAnalysis$TotalAggregationComputationProperty$Builder
                                                       CfnAnalysis$TotalAggregationFunctionProperty$Builder
                                                       CfnAnalysis$TotalAggregationOptionProperty$Builder
                                                       CfnAnalysis$TotalOptionsProperty$Builder
                                                       CfnAnalysis$TreeMapAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$TreeMapConfigurationProperty$Builder
                                                       CfnAnalysis$TreeMapFieldWellsProperty$Builder
                                                       CfnAnalysis$TreeMapSortConfigurationProperty$Builder
                                                       CfnAnalysis$TreeMapVisualProperty$Builder
                                                       CfnAnalysis$TrendArrowOptionsProperty$Builder
                                                       CfnAnalysis$UnaggregatedFieldProperty$Builder
                                                       CfnAnalysis$UniqueValuesComputationProperty$Builder
                                                       CfnAnalysis$ValidationStrategyProperty$Builder
                                                       CfnAnalysis$VisibleRangeOptionsProperty$Builder
                                                       CfnAnalysis$VisualCustomActionOperationProperty$Builder
                                                       CfnAnalysis$VisualCustomActionProperty$Builder
                                                       CfnAnalysis$VisualPaletteProperty$Builder
                                                       CfnAnalysis$VisualProperty$Builder
                                                       CfnAnalysis$VisualSubtitleLabelOptionsProperty$Builder
                                                       CfnAnalysis$VisualTitleLabelOptionsProperty$Builder
                                                       CfnAnalysis$WaterfallChartAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$WaterfallChartColorConfigurationProperty$Builder
                                                       CfnAnalysis$WaterfallChartConfigurationProperty$Builder
                                                       CfnAnalysis$WaterfallChartFieldWellsProperty$Builder
                                                       CfnAnalysis$WaterfallChartGroupColorConfigurationProperty$Builder
                                                       CfnAnalysis$WaterfallChartOptionsProperty$Builder
                                                       CfnAnalysis$WaterfallChartSortConfigurationProperty$Builder
                                                       CfnAnalysis$WaterfallVisualProperty$Builder
                                                       CfnAnalysis$WhatIfPointScenarioProperty$Builder
                                                       CfnAnalysis$WhatIfRangeScenarioProperty$Builder
                                                       CfnAnalysis$WordCloudAggregatedFieldWellsProperty$Builder
                                                       CfnAnalysis$WordCloudChartConfigurationProperty$Builder
                                                       CfnAnalysis$WordCloudFieldWellsProperty$Builder
                                                       CfnAnalysis$WordCloudOptionsProperty$Builder
                                                       CfnAnalysis$WordCloudSortConfigurationProperty$Builder
                                                       CfnAnalysis$WordCloudVisualProperty$Builder
                                                       CfnAnalysisProps$Builder
                                                       CfnDashboard$AdHocFilteringOptionProperty$Builder
                                                       CfnDashboard$AggregationFunctionProperty$Builder
                                                       CfnDashboard$AggregationSortConfigurationProperty$Builder
                                                       CfnDashboard$AnalysisDefaultsProperty$Builder
                                                       CfnDashboard$AnchorDateConfigurationProperty$Builder
                                                       CfnDashboard$ArcAxisConfigurationProperty$Builder
                                                       CfnDashboard$ArcAxisDisplayRangeProperty$Builder
                                                       CfnDashboard$ArcConfigurationProperty$Builder
                                                       CfnDashboard$ArcOptionsProperty$Builder
                                                       CfnDashboard$AssetOptionsProperty$Builder
                                                       CfnDashboard$AttributeAggregationFunctionProperty$Builder
                                                       CfnDashboard$AxisDataOptionsProperty$Builder
                                                       CfnDashboard$AxisDisplayMinMaxRangeProperty$Builder
                                                       CfnDashboard$AxisDisplayOptionsProperty$Builder
                                                       CfnDashboard$AxisDisplayRangeProperty$Builder
                                                       CfnDashboard$AxisLabelOptionsProperty$Builder
                                                       CfnDashboard$AxisLabelReferenceOptionsProperty$Builder
                                                       CfnDashboard$AxisLinearScaleProperty$Builder
                                                       CfnDashboard$AxisLogarithmicScaleProperty$Builder
                                                       CfnDashboard$AxisScaleProperty$Builder
                                                       CfnDashboard$AxisTickLabelOptionsProperty$Builder
                                                       CfnDashboard$BarChartAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$BarChartConfigurationProperty$Builder
                                                       CfnDashboard$BarChartFieldWellsProperty$Builder
                                                       CfnDashboard$BarChartSortConfigurationProperty$Builder
                                                       CfnDashboard$BarChartVisualProperty$Builder
                                                       CfnDashboard$BinCountOptionsProperty$Builder
                                                       CfnDashboard$BinWidthOptionsProperty$Builder
                                                       CfnDashboard$BodySectionConfigurationProperty$Builder
                                                       CfnDashboard$BodySectionContentProperty$Builder
                                                       CfnDashboard$BoxPlotAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$BoxPlotChartConfigurationProperty$Builder
                                                       CfnDashboard$BoxPlotFieldWellsProperty$Builder
                                                       CfnDashboard$BoxPlotOptionsProperty$Builder
                                                       CfnDashboard$BoxPlotSortConfigurationProperty$Builder
                                                       CfnDashboard$BoxPlotStyleOptionsProperty$Builder
                                                       CfnDashboard$BoxPlotVisualProperty$Builder
                                                       CfnDashboard$Builder
                                                       CfnDashboard$CalculatedFieldProperty$Builder
                                                       CfnDashboard$CalculatedMeasureFieldProperty$Builder
                                                       CfnDashboard$CascadingControlConfigurationProperty$Builder
                                                       CfnDashboard$CascadingControlSourceProperty$Builder
                                                       CfnDashboard$CategoricalDimensionFieldProperty$Builder
                                                       CfnDashboard$CategoricalMeasureFieldProperty$Builder
                                                       CfnDashboard$CategoryDrillDownFilterProperty$Builder
                                                       CfnDashboard$CategoryFilterConfigurationProperty$Builder
                                                       CfnDashboard$CategoryFilterProperty$Builder
                                                       CfnDashboard$ChartAxisLabelOptionsProperty$Builder
                                                       CfnDashboard$ClusterMarkerConfigurationProperty$Builder
                                                       CfnDashboard$ClusterMarkerProperty$Builder
                                                       CfnDashboard$ColorScaleProperty$Builder
                                                       CfnDashboard$ColorsConfigurationProperty$Builder
                                                       CfnDashboard$ColumnConfigurationProperty$Builder
                                                       CfnDashboard$ColumnHierarchyProperty$Builder
                                                       CfnDashboard$ColumnIdentifierProperty$Builder
                                                       CfnDashboard$ColumnSortProperty$Builder
                                                       CfnDashboard$ColumnTooltipItemProperty$Builder
                                                       CfnDashboard$ComboChartAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$ComboChartConfigurationProperty$Builder
                                                       CfnDashboard$ComboChartFieldWellsProperty$Builder
                                                       CfnDashboard$ComboChartSortConfigurationProperty$Builder
                                                       CfnDashboard$ComboChartVisualProperty$Builder
                                                       CfnDashboard$ComparisonConfigurationProperty$Builder
                                                       CfnDashboard$ComparisonFormatConfigurationProperty$Builder
                                                       CfnDashboard$ComputationProperty$Builder
                                                       CfnDashboard$ConditionalFormattingColorProperty$Builder
                                                       CfnDashboard$ConditionalFormattingCustomIconConditionProperty$Builder
                                                       CfnDashboard$ConditionalFormattingCustomIconOptionsProperty$Builder
                                                       CfnDashboard$ConditionalFormattingGradientColorProperty$Builder
                                                       CfnDashboard$ConditionalFormattingIconDisplayConfigurationProperty$Builder
                                                       CfnDashboard$ConditionalFormattingIconProperty$Builder
                                                       CfnDashboard$ConditionalFormattingIconSetProperty$Builder
                                                       CfnDashboard$ConditionalFormattingSolidColorProperty$Builder
                                                       CfnDashboard$ContributionAnalysisDefaultProperty$Builder
                                                       CfnDashboard$CurrencyDisplayFormatConfigurationProperty$Builder
                                                       CfnDashboard$CustomActionFilterOperationProperty$Builder
                                                       CfnDashboard$CustomActionNavigationOperationProperty$Builder
                                                       CfnDashboard$CustomActionSetParametersOperationProperty$Builder
                                                       CfnDashboard$CustomActionURLOperationProperty$Builder
                                                       CfnDashboard$CustomColorProperty$Builder
                                                       CfnDashboard$CustomContentConfigurationProperty$Builder
                                                       CfnDashboard$CustomContentVisualProperty$Builder
                                                       CfnDashboard$CustomFilterConfigurationProperty$Builder
                                                       CfnDashboard$CustomFilterListConfigurationProperty$Builder
                                                       CfnDashboard$CustomNarrativeOptionsProperty$Builder
                                                       CfnDashboard$CustomParameterValuesProperty$Builder
                                                       CfnDashboard$CustomValuesConfigurationProperty$Builder
                                                       CfnDashboard$DashboardErrorProperty$Builder
                                                       CfnDashboard$DashboardPublishOptionsProperty$Builder
                                                       CfnDashboard$DashboardSourceEntityProperty$Builder
                                                       CfnDashboard$DashboardSourceTemplateProperty$Builder
                                                       CfnDashboard$DashboardVersionDefinitionProperty$Builder
                                                       CfnDashboard$DashboardVersionProperty$Builder
                                                       CfnDashboard$DashboardVisualPublishOptionsProperty$Builder
                                                       CfnDashboard$DataBarsOptionsProperty$Builder
                                                       CfnDashboard$DataColorProperty$Builder
                                                       CfnDashboard$DataFieldSeriesItemProperty$Builder
                                                       CfnDashboard$DataLabelOptionsProperty$Builder
                                                       CfnDashboard$DataLabelTypeProperty$Builder
                                                       CfnDashboard$DataPathColorProperty$Builder
                                                       CfnDashboard$DataPathLabelTypeProperty$Builder
                                                       CfnDashboard$DataPathSortProperty$Builder
                                                       CfnDashboard$DataPathTypeProperty$Builder
                                                       CfnDashboard$DataPathValueProperty$Builder
                                                       CfnDashboard$DataPointDrillUpDownOptionProperty$Builder
                                                       CfnDashboard$DataPointMenuLabelOptionProperty$Builder
                                                       CfnDashboard$DataPointTooltipOptionProperty$Builder
                                                       CfnDashboard$DataSetIdentifierDeclarationProperty$Builder
                                                       CfnDashboard$DataSetReferenceProperty$Builder
                                                       CfnDashboard$DateAxisOptionsProperty$Builder
                                                       CfnDashboard$DateDimensionFieldProperty$Builder
                                                       CfnDashboard$DateMeasureFieldProperty$Builder
                                                       CfnDashboard$DateTimeDefaultValuesProperty$Builder
                                                       CfnDashboard$DateTimeFormatConfigurationProperty$Builder
                                                       CfnDashboard$DateTimeHierarchyProperty$Builder
                                                       CfnDashboard$DateTimeParameterDeclarationProperty$Builder
                                                       CfnDashboard$DateTimeParameterProperty$Builder
                                                       CfnDashboard$DateTimePickerControlDisplayOptionsProperty$Builder
                                                       CfnDashboard$DateTimeValueWhenUnsetConfigurationProperty$Builder
                                                       CfnDashboard$DecimalDefaultValuesProperty$Builder
                                                       CfnDashboard$DecimalParameterDeclarationProperty$Builder
                                                       CfnDashboard$DecimalParameterProperty$Builder
                                                       CfnDashboard$DecimalPlacesConfigurationProperty$Builder
                                                       CfnDashboard$DecimalValueWhenUnsetConfigurationProperty$Builder
                                                       CfnDashboard$DefaultDateTimePickerControlOptionsProperty$Builder
                                                       CfnDashboard$DefaultFilterControlConfigurationProperty$Builder
                                                       CfnDashboard$DefaultFilterControlOptionsProperty$Builder
                                                       CfnDashboard$DefaultFilterDropDownControlOptionsProperty$Builder
                                                       CfnDashboard$DefaultFilterListControlOptionsProperty$Builder
                                                       CfnDashboard$DefaultFreeFormLayoutConfigurationProperty$Builder
                                                       CfnDashboard$DefaultGridLayoutConfigurationProperty$Builder
                                                       CfnDashboard$DefaultInteractiveLayoutConfigurationProperty$Builder
                                                       CfnDashboard$DefaultNewSheetConfigurationProperty$Builder
                                                       CfnDashboard$DefaultPaginatedLayoutConfigurationProperty$Builder
                                                       CfnDashboard$DefaultRelativeDateTimeControlOptionsProperty$Builder
                                                       CfnDashboard$DefaultSectionBasedLayoutConfigurationProperty$Builder
                                                       CfnDashboard$DefaultSliderControlOptionsProperty$Builder
                                                       CfnDashboard$DefaultTextAreaControlOptionsProperty$Builder
                                                       CfnDashboard$DefaultTextFieldControlOptionsProperty$Builder
                                                       CfnDashboard$DestinationParameterValueConfigurationProperty$Builder
                                                       CfnDashboard$DimensionFieldProperty$Builder
                                                       CfnDashboard$DonutCenterOptionsProperty$Builder
                                                       CfnDashboard$DonutOptionsProperty$Builder
                                                       CfnDashboard$DrillDownFilterProperty$Builder
                                                       CfnDashboard$DropDownControlDisplayOptionsProperty$Builder
                                                       CfnDashboard$DynamicDefaultValueProperty$Builder
                                                       CfnDashboard$EmptyVisualProperty$Builder
                                                       CfnDashboard$EntityProperty$Builder
                                                       CfnDashboard$ExcludePeriodConfigurationProperty$Builder
                                                       CfnDashboard$ExplicitHierarchyProperty$Builder
                                                       CfnDashboard$ExportHiddenFieldsOptionProperty$Builder
                                                       CfnDashboard$ExportToCSVOptionProperty$Builder
                                                       CfnDashboard$ExportWithHiddenFieldsOptionProperty$Builder
                                                       CfnDashboard$FieldBasedTooltipProperty$Builder
                                                       CfnDashboard$FieldLabelTypeProperty$Builder
                                                       CfnDashboard$FieldSeriesItemProperty$Builder
                                                       CfnDashboard$FieldSortOptionsProperty$Builder
                                                       CfnDashboard$FieldSortProperty$Builder
                                                       CfnDashboard$FieldTooltipItemProperty$Builder
                                                       CfnDashboard$FilledMapAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$FilledMapConditionalFormattingOptionProperty$Builder
                                                       CfnDashboard$FilledMapConditionalFormattingProperty$Builder
                                                       CfnDashboard$FilledMapConfigurationProperty$Builder
                                                       CfnDashboard$FilledMapFieldWellsProperty$Builder
                                                       CfnDashboard$FilledMapShapeConditionalFormattingProperty$Builder
                                                       CfnDashboard$FilledMapSortConfigurationProperty$Builder
                                                       CfnDashboard$FilledMapVisualProperty$Builder
                                                       CfnDashboard$FilterControlProperty$Builder
                                                       CfnDashboard$FilterCrossSheetControlProperty$Builder
                                                       CfnDashboard$FilterDateTimePickerControlProperty$Builder
                                                       CfnDashboard$FilterDropDownControlProperty$Builder
                                                       CfnDashboard$FilterGroupProperty$Builder
                                                       CfnDashboard$FilterListConfigurationProperty$Builder
                                                       CfnDashboard$FilterListControlProperty$Builder
                                                       CfnDashboard$FilterOperationSelectedFieldsConfigurationProperty$Builder
                                                       CfnDashboard$FilterOperationTargetVisualsConfigurationProperty$Builder
                                                       CfnDashboard$FilterProperty$Builder
                                                       CfnDashboard$FilterRelativeDateTimeControlProperty$Builder
                                                       CfnDashboard$FilterScopeConfigurationProperty$Builder
                                                       CfnDashboard$FilterSelectableValuesProperty$Builder
                                                       CfnDashboard$FilterSliderControlProperty$Builder
                                                       CfnDashboard$FilterTextAreaControlProperty$Builder
                                                       CfnDashboard$FilterTextFieldControlProperty$Builder
                                                       CfnDashboard$FontConfigurationProperty$Builder
                                                       CfnDashboard$FontSizeProperty$Builder
                                                       CfnDashboard$FontWeightProperty$Builder
                                                       CfnDashboard$ForecastComputationProperty$Builder
                                                       CfnDashboard$ForecastConfigurationProperty$Builder
                                                       CfnDashboard$ForecastScenarioProperty$Builder
                                                       CfnDashboard$FormatConfigurationProperty$Builder
                                                       CfnDashboard$FreeFormLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnDashboard$FreeFormLayoutConfigurationProperty$Builder
                                                       CfnDashboard$FreeFormLayoutElementBackgroundStyleProperty$Builder
                                                       CfnDashboard$FreeFormLayoutElementBorderStyleProperty$Builder
                                                       CfnDashboard$FreeFormLayoutElementProperty$Builder
                                                       CfnDashboard$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder
                                                       CfnDashboard$FreeFormSectionLayoutConfigurationProperty$Builder
                                                       CfnDashboard$FunnelChartAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$FunnelChartConfigurationProperty$Builder
                                                       CfnDashboard$FunnelChartDataLabelOptionsProperty$Builder
                                                       CfnDashboard$FunnelChartFieldWellsProperty$Builder
                                                       CfnDashboard$FunnelChartSortConfigurationProperty$Builder
                                                       CfnDashboard$FunnelChartVisualProperty$Builder
                                                       CfnDashboard$GaugeChartArcConditionalFormattingProperty$Builder
                                                       CfnDashboard$GaugeChartConditionalFormattingOptionProperty$Builder
                                                       CfnDashboard$GaugeChartConditionalFormattingProperty$Builder
                                                       CfnDashboard$GaugeChartConfigurationProperty$Builder
                                                       CfnDashboard$GaugeChartFieldWellsProperty$Builder
                                                       CfnDashboard$GaugeChartOptionsProperty$Builder
                                                       CfnDashboard$GaugeChartPrimaryValueConditionalFormattingProperty$Builder
                                                       CfnDashboard$GaugeChartVisualProperty$Builder
                                                       CfnDashboard$GeospatialCoordinateBoundsProperty$Builder
                                                       CfnDashboard$GeospatialHeatmapColorScaleProperty$Builder
                                                       CfnDashboard$GeospatialHeatmapConfigurationProperty$Builder
                                                       CfnDashboard$GeospatialHeatmapDataColorProperty$Builder
                                                       CfnDashboard$GeospatialMapAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$GeospatialMapConfigurationProperty$Builder
                                                       CfnDashboard$GeospatialMapFieldWellsProperty$Builder
                                                       CfnDashboard$GeospatialMapStyleOptionsProperty$Builder
                                                       CfnDashboard$GeospatialMapVisualProperty$Builder
                                                       CfnDashboard$GeospatialPointStyleOptionsProperty$Builder
                                                       CfnDashboard$GeospatialWindowOptionsProperty$Builder
                                                       CfnDashboard$GlobalTableBorderOptionsProperty$Builder
                                                       CfnDashboard$GradientColorProperty$Builder
                                                       CfnDashboard$GradientStopProperty$Builder
                                                       CfnDashboard$GridLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnDashboard$GridLayoutConfigurationProperty$Builder
                                                       CfnDashboard$GridLayoutElementProperty$Builder
                                                       CfnDashboard$GridLayoutScreenCanvasSizeOptionsProperty$Builder
                                                       CfnDashboard$GrowthRateComputationProperty$Builder
                                                       CfnDashboard$HeaderFooterSectionConfigurationProperty$Builder
                                                       CfnDashboard$HeatMapAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$HeatMapConfigurationProperty$Builder
                                                       CfnDashboard$HeatMapFieldWellsProperty$Builder
                                                       CfnDashboard$HeatMapSortConfigurationProperty$Builder
                                                       CfnDashboard$HeatMapVisualProperty$Builder
                                                       CfnDashboard$HistogramAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$HistogramBinOptionsProperty$Builder
                                                       CfnDashboard$HistogramConfigurationProperty$Builder
                                                       CfnDashboard$HistogramFieldWellsProperty$Builder
                                                       CfnDashboard$HistogramVisualProperty$Builder
                                                       CfnDashboard$InsightConfigurationProperty$Builder
                                                       CfnDashboard$InsightVisualProperty$Builder
                                                       CfnDashboard$IntegerDefaultValuesProperty$Builder
                                                       CfnDashboard$IntegerParameterDeclarationProperty$Builder
                                                       CfnDashboard$IntegerParameterProperty$Builder
                                                       CfnDashboard$IntegerValueWhenUnsetConfigurationProperty$Builder
                                                       CfnDashboard$ItemsLimitConfigurationProperty$Builder
                                                       CfnDashboard$KPIActualValueConditionalFormattingProperty$Builder
                                                       CfnDashboard$KPIComparisonValueConditionalFormattingProperty$Builder
                                                       CfnDashboard$KPIConditionalFormattingOptionProperty$Builder
                                                       CfnDashboard$KPIConditionalFormattingProperty$Builder
                                                       CfnDashboard$KPIConfigurationProperty$Builder
                                                       CfnDashboard$KPIFieldWellsProperty$Builder
                                                       CfnDashboard$KPIOptionsProperty$Builder
                                                       CfnDashboard$KPIPrimaryValueConditionalFormattingProperty$Builder
                                                       CfnDashboard$KPIProgressBarConditionalFormattingProperty$Builder
                                                       CfnDashboard$KPISortConfigurationProperty$Builder
                                                       CfnDashboard$KPISparklineOptionsProperty$Builder
                                                       CfnDashboard$KPIVisualLayoutOptionsProperty$Builder
                                                       CfnDashboard$KPIVisualProperty$Builder
                                                       CfnDashboard$KPIVisualStandardLayoutProperty$Builder
                                                       CfnDashboard$LabelOptionsProperty$Builder
                                                       CfnDashboard$LayoutConfigurationProperty$Builder
                                                       CfnDashboard$LayoutProperty$Builder
                                                       CfnDashboard$LegendOptionsProperty$Builder
                                                       CfnDashboard$LineChartAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$LineChartConfigurationProperty$Builder
                                                       CfnDashboard$LineChartDefaultSeriesSettingsProperty$Builder
                                                       CfnDashboard$LineChartFieldWellsProperty$Builder
                                                       CfnDashboard$LineChartLineStyleSettingsProperty$Builder
                                                       CfnDashboard$LineChartMarkerStyleSettingsProperty$Builder
                                                       CfnDashboard$LineChartSeriesSettingsProperty$Builder
                                                       CfnDashboard$LineChartSortConfigurationProperty$Builder
                                                       CfnDashboard$LineChartVisualProperty$Builder
                                                       CfnDashboard$LineSeriesAxisDisplayOptionsProperty$Builder
                                                       CfnDashboard$LinkSharingConfigurationProperty$Builder
                                                       CfnDashboard$ListControlDisplayOptionsProperty$Builder
                                                       CfnDashboard$ListControlSearchOptionsProperty$Builder
                                                       CfnDashboard$ListControlSelectAllOptionsProperty$Builder
                                                       CfnDashboard$LoadingAnimationProperty$Builder
                                                       CfnDashboard$LocalNavigationConfigurationProperty$Builder
                                                       CfnDashboard$LongFormatTextProperty$Builder
                                                       CfnDashboard$MappedDataSetParameterProperty$Builder
                                                       CfnDashboard$MaximumLabelTypeProperty$Builder
                                                       CfnDashboard$MaximumMinimumComputationProperty$Builder
                                                       CfnDashboard$MeasureFieldProperty$Builder
                                                       CfnDashboard$MetricComparisonComputationProperty$Builder
                                                       CfnDashboard$MinimumLabelTypeProperty$Builder
                                                       CfnDashboard$MissingDataConfigurationProperty$Builder
                                                       CfnDashboard$NegativeValueConfigurationProperty$Builder
                                                       CfnDashboard$NullValueFormatConfigurationProperty$Builder
                                                       CfnDashboard$NumberDisplayFormatConfigurationProperty$Builder
                                                       CfnDashboard$NumberFormatConfigurationProperty$Builder
                                                       CfnDashboard$NumericAxisOptionsProperty$Builder
                                                       CfnDashboard$NumericEqualityDrillDownFilterProperty$Builder
                                                       CfnDashboard$NumericEqualityFilterProperty$Builder
                                                       CfnDashboard$NumericFormatConfigurationProperty$Builder
                                                       CfnDashboard$NumericRangeFilterProperty$Builder
                                                       CfnDashboard$NumericRangeFilterValueProperty$Builder
                                                       CfnDashboard$NumericSeparatorConfigurationProperty$Builder
                                                       CfnDashboard$NumericalAggregationFunctionProperty$Builder
                                                       CfnDashboard$NumericalDimensionFieldProperty$Builder
                                                       CfnDashboard$NumericalMeasureFieldProperty$Builder
                                                       CfnDashboard$PaginationConfigurationProperty$Builder
                                                       CfnDashboard$PanelConfigurationProperty$Builder
                                                       CfnDashboard$PanelTitleOptionsProperty$Builder
                                                       CfnDashboard$ParameterControlProperty$Builder
                                                       CfnDashboard$ParameterDateTimePickerControlProperty$Builder
                                                       CfnDashboard$ParameterDeclarationProperty$Builder
                                                       CfnDashboard$ParameterDropDownControlProperty$Builder
                                                       CfnDashboard$ParameterListControlProperty$Builder
                                                       CfnDashboard$ParameterSelectableValuesProperty$Builder
                                                       CfnDashboard$ParameterSliderControlProperty$Builder
                                                       CfnDashboard$ParameterTextAreaControlProperty$Builder
                                                       CfnDashboard$ParameterTextFieldControlProperty$Builder
                                                       CfnDashboard$ParametersProperty$Builder
                                                       CfnDashboard$PercentVisibleRangeProperty$Builder
                                                       CfnDashboard$PercentageDisplayFormatConfigurationProperty$Builder
                                                       CfnDashboard$PercentileAggregationProperty$Builder
                                                       CfnDashboard$PeriodOverPeriodComputationProperty$Builder
                                                       CfnDashboard$PeriodToDateComputationProperty$Builder
                                                       CfnDashboard$PieChartAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$PieChartConfigurationProperty$Builder
                                                       CfnDashboard$PieChartFieldWellsProperty$Builder
                                                       CfnDashboard$PieChartSortConfigurationProperty$Builder
                                                       CfnDashboard$PieChartVisualProperty$Builder
                                                       CfnDashboard$PivotFieldSortOptionsProperty$Builder
                                                       CfnDashboard$PivotTableAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$PivotTableCellConditionalFormattingProperty$Builder
                                                       CfnDashboard$PivotTableConditionalFormattingOptionProperty$Builder
                                                       CfnDashboard$PivotTableConditionalFormattingProperty$Builder
                                                       CfnDashboard$PivotTableConditionalFormattingScopeProperty$Builder
                                                       CfnDashboard$PivotTableConfigurationProperty$Builder
                                                       CfnDashboard$PivotTableDataPathOptionProperty$Builder
                                                       CfnDashboard$PivotTableFieldCollapseStateOptionProperty$Builder
                                                       CfnDashboard$PivotTableFieldCollapseStateTargetProperty$Builder
                                                       CfnDashboard$PivotTableFieldOptionProperty$Builder
                                                       CfnDashboard$PivotTableFieldOptionsProperty$Builder
                                                       CfnDashboard$PivotTableFieldSubtotalOptionsProperty$Builder
                                                       CfnDashboard$PivotTableFieldWellsProperty$Builder
                                                       CfnDashboard$PivotTableOptionsProperty$Builder
                                                       CfnDashboard$PivotTablePaginatedReportOptionsProperty$Builder
                                                       CfnDashboard$PivotTableRowsLabelOptionsProperty$Builder
                                                       CfnDashboard$PivotTableSortByProperty$Builder
                                                       CfnDashboard$PivotTableSortConfigurationProperty$Builder
                                                       CfnDashboard$PivotTableTotalOptionsProperty$Builder
                                                       CfnDashboard$PivotTableVisualProperty$Builder
                                                       CfnDashboard$PivotTotalOptionsProperty$Builder
                                                       CfnDashboard$PredefinedHierarchyProperty$Builder
                                                       CfnDashboard$ProgressBarOptionsProperty$Builder
                                                       CfnDashboard$RadarChartAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$RadarChartAreaStyleSettingsProperty$Builder
                                                       CfnDashboard$RadarChartConfigurationProperty$Builder
                                                       CfnDashboard$RadarChartFieldWellsProperty$Builder
                                                       CfnDashboard$RadarChartSeriesSettingsProperty$Builder
                                                       CfnDashboard$RadarChartSortConfigurationProperty$Builder
                                                       CfnDashboard$RadarChartVisualProperty$Builder
                                                       CfnDashboard$RangeEndsLabelTypeProperty$Builder
                                                       CfnDashboard$ReferenceLineCustomLabelConfigurationProperty$Builder
                                                       CfnDashboard$ReferenceLineDataConfigurationProperty$Builder
                                                       CfnDashboard$ReferenceLineDynamicDataConfigurationProperty$Builder
                                                       CfnDashboard$ReferenceLineLabelConfigurationProperty$Builder
                                                       CfnDashboard$ReferenceLineProperty$Builder
                                                       CfnDashboard$ReferenceLineStaticDataConfigurationProperty$Builder
                                                       CfnDashboard$ReferenceLineStyleConfigurationProperty$Builder
                                                       CfnDashboard$ReferenceLineValueLabelConfigurationProperty$Builder
                                                       CfnDashboard$RelativeDateTimeControlDisplayOptionsProperty$Builder
                                                       CfnDashboard$RelativeDatesFilterProperty$Builder
                                                       CfnDashboard$ResourcePermissionProperty$Builder
                                                       CfnDashboard$RollingDateConfigurationProperty$Builder
                                                       CfnDashboard$RowAlternateColorOptionsProperty$Builder
                                                       CfnDashboard$SameSheetTargetVisualConfigurationProperty$Builder
                                                       CfnDashboard$SankeyDiagramAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$SankeyDiagramChartConfigurationProperty$Builder
                                                       CfnDashboard$SankeyDiagramFieldWellsProperty$Builder
                                                       CfnDashboard$SankeyDiagramSortConfigurationProperty$Builder
                                                       CfnDashboard$SankeyDiagramVisualProperty$Builder
                                                       CfnDashboard$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$ScatterPlotConfigurationProperty$Builder
                                                       CfnDashboard$ScatterPlotFieldWellsProperty$Builder
                                                       CfnDashboard$ScatterPlotUnaggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$ScatterPlotVisualProperty$Builder
                                                       CfnDashboard$ScrollBarOptionsProperty$Builder
                                                       CfnDashboard$SecondaryValueOptionsProperty$Builder
                                                       CfnDashboard$SectionAfterPageBreakProperty$Builder
                                                       CfnDashboard$SectionBasedLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnDashboard$SectionBasedLayoutConfigurationProperty$Builder
                                                       CfnDashboard$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder
                                                       CfnDashboard$SectionLayoutConfigurationProperty$Builder
                                                       CfnDashboard$SectionPageBreakConfigurationProperty$Builder
                                                       CfnDashboard$SectionStyleProperty$Builder
                                                       CfnDashboard$SelectedSheetsFilterScopeConfigurationProperty$Builder
                                                       CfnDashboard$SeriesItemProperty$Builder
                                                       CfnDashboard$SetParameterValueConfigurationProperty$Builder
                                                       CfnDashboard$ShapeConditionalFormatProperty$Builder
                                                       CfnDashboard$SheetControlInfoIconLabelOptionsProperty$Builder
                                                       CfnDashboard$SheetControlLayoutConfigurationProperty$Builder
                                                       CfnDashboard$SheetControlLayoutProperty$Builder
                                                       CfnDashboard$SheetControlsOptionProperty$Builder
                                                       CfnDashboard$SheetDefinitionProperty$Builder
                                                       CfnDashboard$SheetElementConfigurationOverridesProperty$Builder
                                                       CfnDashboard$SheetElementRenderingRuleProperty$Builder
                                                       CfnDashboard$SheetLayoutElementMaximizationOptionProperty$Builder
                                                       CfnDashboard$SheetProperty$Builder
                                                       CfnDashboard$SheetTextBoxProperty$Builder
                                                       CfnDashboard$SheetVisualScopingConfigurationProperty$Builder
                                                       CfnDashboard$ShortFormatTextProperty$Builder
                                                       CfnDashboard$SimpleClusterMarkerProperty$Builder
                                                       CfnDashboard$SliderControlDisplayOptionsProperty$Builder
                                                       CfnDashboard$SmallMultiplesAxisPropertiesProperty$Builder
                                                       CfnDashboard$SmallMultiplesOptionsProperty$Builder
                                                       CfnDashboard$SpacingProperty$Builder
                                                       CfnDashboard$StringDefaultValuesProperty$Builder
                                                       CfnDashboard$StringFormatConfigurationProperty$Builder
                                                       CfnDashboard$StringParameterDeclarationProperty$Builder
                                                       CfnDashboard$StringParameterProperty$Builder
                                                       CfnDashboard$StringValueWhenUnsetConfigurationProperty$Builder
                                                       CfnDashboard$SubtotalOptionsProperty$Builder
                                                       CfnDashboard$TableAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$TableBorderOptionsProperty$Builder
                                                       CfnDashboard$TableCellConditionalFormattingProperty$Builder
                                                       CfnDashboard$TableCellImageSizingConfigurationProperty$Builder
                                                       CfnDashboard$TableCellStyleProperty$Builder
                                                       CfnDashboard$TableConditionalFormattingOptionProperty$Builder
                                                       CfnDashboard$TableConditionalFormattingProperty$Builder
                                                       CfnDashboard$TableConfigurationProperty$Builder
                                                       CfnDashboard$TableFieldCustomIconContentProperty$Builder
                                                       CfnDashboard$TableFieldCustomTextContentProperty$Builder
                                                       CfnDashboard$TableFieldImageConfigurationProperty$Builder
                                                       CfnDashboard$TableFieldLinkConfigurationProperty$Builder
                                                       CfnDashboard$TableFieldLinkContentConfigurationProperty$Builder
                                                       CfnDashboard$TableFieldOptionProperty$Builder
                                                       CfnDashboard$TableFieldOptionsProperty$Builder
                                                       CfnDashboard$TableFieldURLConfigurationProperty$Builder
                                                       CfnDashboard$TableFieldWellsProperty$Builder
                                                       CfnDashboard$TableInlineVisualizationProperty$Builder
                                                       CfnDashboard$TableOptionsProperty$Builder
                                                       CfnDashboard$TablePaginatedReportOptionsProperty$Builder
                                                       CfnDashboard$TablePinnedFieldOptionsProperty$Builder
                                                       CfnDashboard$TableRowConditionalFormattingProperty$Builder
                                                       CfnDashboard$TableSideBorderOptionsProperty$Builder
                                                       CfnDashboard$TableSortConfigurationProperty$Builder
                                                       CfnDashboard$TableStyleTargetProperty$Builder
                                                       CfnDashboard$TableUnaggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$TableVisualProperty$Builder
                                                       CfnDashboard$TextAreaControlDisplayOptionsProperty$Builder
                                                       CfnDashboard$TextConditionalFormatProperty$Builder
                                                       CfnDashboard$TextControlPlaceholderOptionsProperty$Builder
                                                       CfnDashboard$TextFieldControlDisplayOptionsProperty$Builder
                                                       CfnDashboard$ThousandSeparatorOptionsProperty$Builder
                                                       CfnDashboard$TimeBasedForecastPropertiesProperty$Builder
                                                       CfnDashboard$TimeEqualityFilterProperty$Builder
                                                       CfnDashboard$TimeRangeDrillDownFilterProperty$Builder
                                                       CfnDashboard$TimeRangeFilterProperty$Builder
                                                       CfnDashboard$TimeRangeFilterValueProperty$Builder
                                                       CfnDashboard$TooltipItemProperty$Builder
                                                       CfnDashboard$TooltipOptionsProperty$Builder
                                                       CfnDashboard$TopBottomFilterProperty$Builder
                                                       CfnDashboard$TopBottomMoversComputationProperty$Builder
                                                       CfnDashboard$TopBottomRankedComputationProperty$Builder
                                                       CfnDashboard$TotalAggregationComputationProperty$Builder
                                                       CfnDashboard$TotalAggregationFunctionProperty$Builder
                                                       CfnDashboard$TotalAggregationOptionProperty$Builder
                                                       CfnDashboard$TotalOptionsProperty$Builder
                                                       CfnDashboard$TreeMapAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$TreeMapConfigurationProperty$Builder
                                                       CfnDashboard$TreeMapFieldWellsProperty$Builder
                                                       CfnDashboard$TreeMapSortConfigurationProperty$Builder
                                                       CfnDashboard$TreeMapVisualProperty$Builder
                                                       CfnDashboard$TrendArrowOptionsProperty$Builder
                                                       CfnDashboard$UnaggregatedFieldProperty$Builder
                                                       CfnDashboard$UniqueValuesComputationProperty$Builder
                                                       CfnDashboard$ValidationStrategyProperty$Builder
                                                       CfnDashboard$VisibleRangeOptionsProperty$Builder
                                                       CfnDashboard$VisualAxisSortOptionProperty$Builder
                                                       CfnDashboard$VisualCustomActionOperationProperty$Builder
                                                       CfnDashboard$VisualCustomActionProperty$Builder
                                                       CfnDashboard$VisualMenuOptionProperty$Builder
                                                       CfnDashboard$VisualPaletteProperty$Builder
                                                       CfnDashboard$VisualProperty$Builder
                                                       CfnDashboard$VisualSubtitleLabelOptionsProperty$Builder
                                                       CfnDashboard$VisualTitleLabelOptionsProperty$Builder
                                                       CfnDashboard$WaterfallChartAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$WaterfallChartColorConfigurationProperty$Builder
                                                       CfnDashboard$WaterfallChartConfigurationProperty$Builder
                                                       CfnDashboard$WaterfallChartFieldWellsProperty$Builder
                                                       CfnDashboard$WaterfallChartGroupColorConfigurationProperty$Builder
                                                       CfnDashboard$WaterfallChartOptionsProperty$Builder
                                                       CfnDashboard$WaterfallChartSortConfigurationProperty$Builder
                                                       CfnDashboard$WaterfallVisualProperty$Builder
                                                       CfnDashboard$WhatIfPointScenarioProperty$Builder
                                                       CfnDashboard$WhatIfRangeScenarioProperty$Builder
                                                       CfnDashboard$WordCloudAggregatedFieldWellsProperty$Builder
                                                       CfnDashboard$WordCloudChartConfigurationProperty$Builder
                                                       CfnDashboard$WordCloudFieldWellsProperty$Builder
                                                       CfnDashboard$WordCloudOptionsProperty$Builder
                                                       CfnDashboard$WordCloudSortConfigurationProperty$Builder
                                                       CfnDashboard$WordCloudVisualProperty$Builder
                                                       CfnDashboardProps$Builder
                                                       CfnDataSet$Builder
                                                       CfnDataSet$CalculatedColumnProperty$Builder
                                                       CfnDataSet$CastColumnTypeOperationProperty$Builder
                                                       CfnDataSet$ColumnDescriptionProperty$Builder
                                                       CfnDataSet$ColumnGroupProperty$Builder
                                                       CfnDataSet$ColumnLevelPermissionRuleProperty$Builder
                                                       CfnDataSet$ColumnTagProperty$Builder
                                                       CfnDataSet$CreateColumnsOperationProperty$Builder
                                                       CfnDataSet$CustomSqlProperty$Builder
                                                       CfnDataSet$DataSetRefreshPropertiesProperty$Builder
                                                       CfnDataSet$DataSetUsageConfigurationProperty$Builder
                                                       CfnDataSet$DatasetParameterProperty$Builder
                                                       CfnDataSet$DateTimeDatasetParameterDefaultValuesProperty$Builder
                                                       CfnDataSet$DateTimeDatasetParameterProperty$Builder
                                                       CfnDataSet$DecimalDatasetParameterDefaultValuesProperty$Builder
                                                       CfnDataSet$DecimalDatasetParameterProperty$Builder
                                                       CfnDataSet$FieldFolderProperty$Builder
                                                       CfnDataSet$FilterOperationProperty$Builder
                                                       CfnDataSet$GeoSpatialColumnGroupProperty$Builder
                                                       CfnDataSet$IncrementalRefreshProperty$Builder
                                                       CfnDataSet$IngestionWaitPolicyProperty$Builder
                                                       CfnDataSet$InputColumnProperty$Builder
                                                       CfnDataSet$IntegerDatasetParameterDefaultValuesProperty$Builder
                                                       CfnDataSet$IntegerDatasetParameterProperty$Builder
                                                       CfnDataSet$JoinInstructionProperty$Builder
                                                       CfnDataSet$JoinKeyPropertiesProperty$Builder
                                                       CfnDataSet$LogicalTableProperty$Builder
                                                       CfnDataSet$LogicalTableSourceProperty$Builder
                                                       CfnDataSet$LookbackWindowProperty$Builder
                                                       CfnDataSet$NewDefaultValuesProperty$Builder
                                                       CfnDataSet$OutputColumnProperty$Builder
                                                       CfnDataSet$OverrideDatasetParameterOperationProperty$Builder
                                                       CfnDataSet$PhysicalTableProperty$Builder
                                                       CfnDataSet$ProjectOperationProperty$Builder
                                                       CfnDataSet$RefreshConfigurationProperty$Builder
                                                       CfnDataSet$RelationalTableProperty$Builder
                                                       CfnDataSet$RenameColumnOperationProperty$Builder
                                                       CfnDataSet$ResourcePermissionProperty$Builder
                                                       CfnDataSet$RowLevelPermissionDataSetProperty$Builder
                                                       CfnDataSet$RowLevelPermissionTagConfigurationProperty$Builder
                                                       CfnDataSet$RowLevelPermissionTagRuleProperty$Builder
                                                       CfnDataSet$S3SourceProperty$Builder
                                                       CfnDataSet$StringDatasetParameterDefaultValuesProperty$Builder
                                                       CfnDataSet$StringDatasetParameterProperty$Builder
                                                       CfnDataSet$TagColumnOperationProperty$Builder
                                                       CfnDataSet$TransformOperationProperty$Builder
                                                       CfnDataSet$UntagColumnOperationProperty$Builder
                                                       CfnDataSet$UploadSettingsProperty$Builder
                                                       CfnDataSetProps$Builder
                                                       CfnDataSource$AmazonElasticsearchParametersProperty$Builder
                                                       CfnDataSource$AmazonOpenSearchParametersProperty$Builder
                                                       CfnDataSource$AthenaParametersProperty$Builder
                                                       CfnDataSource$AuroraParametersProperty$Builder
                                                       CfnDataSource$AuroraPostgreSqlParametersProperty$Builder
                                                       CfnDataSource$Builder
                                                       CfnDataSource$CredentialPairProperty$Builder
                                                       CfnDataSource$DataSourceCredentialsProperty$Builder
                                                       CfnDataSource$DataSourceErrorInfoProperty$Builder
                                                       CfnDataSource$DataSourceParametersProperty$Builder
                                                       CfnDataSource$DatabricksParametersProperty$Builder
                                                       CfnDataSource$IdentityCenterConfigurationProperty$Builder
                                                       CfnDataSource$ManifestFileLocationProperty$Builder
                                                       CfnDataSource$MariaDbParametersProperty$Builder
                                                       CfnDataSource$MySqlParametersProperty$Builder
                                                       CfnDataSource$OracleParametersProperty$Builder
                                                       CfnDataSource$PostgreSqlParametersProperty$Builder
                                                       CfnDataSource$PrestoParametersProperty$Builder
                                                       CfnDataSource$RdsParametersProperty$Builder
                                                       CfnDataSource$RedshiftIAMParametersProperty$Builder
                                                       CfnDataSource$RedshiftParametersProperty$Builder
                                                       CfnDataSource$ResourcePermissionProperty$Builder
                                                       CfnDataSource$S3ParametersProperty$Builder
                                                       CfnDataSource$SnowflakeParametersProperty$Builder
                                                       CfnDataSource$SparkParametersProperty$Builder
                                                       CfnDataSource$SqlServerParametersProperty$Builder
                                                       CfnDataSource$SslPropertiesProperty$Builder
                                                       CfnDataSource$StarburstParametersProperty$Builder
                                                       CfnDataSource$TeradataParametersProperty$Builder
                                                       CfnDataSource$TrinoParametersProperty$Builder
                                                       CfnDataSource$VpcConnectionPropertiesProperty$Builder
                                                       CfnDataSourceProps$Builder
                                                       CfnRefreshSchedule$Builder
                                                       CfnRefreshSchedule$RefreshOnDayProperty$Builder
                                                       CfnRefreshSchedule$RefreshScheduleMapProperty$Builder
                                                       CfnRefreshSchedule$ScheduleFrequencyProperty$Builder
                                                       CfnRefreshScheduleProps$Builder
                                                       CfnTemplate$AggregationFunctionProperty$Builder
                                                       CfnTemplate$AggregationSortConfigurationProperty$Builder
                                                       CfnTemplate$AnalysisDefaultsProperty$Builder
                                                       CfnTemplate$AnchorDateConfigurationProperty$Builder
                                                       CfnTemplate$ArcAxisConfigurationProperty$Builder
                                                       CfnTemplate$ArcAxisDisplayRangeProperty$Builder
                                                       CfnTemplate$ArcConfigurationProperty$Builder
                                                       CfnTemplate$ArcOptionsProperty$Builder
                                                       CfnTemplate$AssetOptionsProperty$Builder
                                                       CfnTemplate$AttributeAggregationFunctionProperty$Builder
                                                       CfnTemplate$AxisDataOptionsProperty$Builder
                                                       CfnTemplate$AxisDisplayMinMaxRangeProperty$Builder
                                                       CfnTemplate$AxisDisplayOptionsProperty$Builder
                                                       CfnTemplate$AxisDisplayRangeProperty$Builder
                                                       CfnTemplate$AxisLabelOptionsProperty$Builder
                                                       CfnTemplate$AxisLabelReferenceOptionsProperty$Builder
                                                       CfnTemplate$AxisLinearScaleProperty$Builder
                                                       CfnTemplate$AxisLogarithmicScaleProperty$Builder
                                                       CfnTemplate$AxisScaleProperty$Builder
                                                       CfnTemplate$AxisTickLabelOptionsProperty$Builder
                                                       CfnTemplate$BarChartAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$BarChartConfigurationProperty$Builder
                                                       CfnTemplate$BarChartFieldWellsProperty$Builder
                                                       CfnTemplate$BarChartSortConfigurationProperty$Builder
                                                       CfnTemplate$BarChartVisualProperty$Builder
                                                       CfnTemplate$BinCountOptionsProperty$Builder
                                                       CfnTemplate$BinWidthOptionsProperty$Builder
                                                       CfnTemplate$BodySectionConfigurationProperty$Builder
                                                       CfnTemplate$BodySectionContentProperty$Builder
                                                       CfnTemplate$BoxPlotAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$BoxPlotChartConfigurationProperty$Builder
                                                       CfnTemplate$BoxPlotFieldWellsProperty$Builder
                                                       CfnTemplate$BoxPlotOptionsProperty$Builder
                                                       CfnTemplate$BoxPlotSortConfigurationProperty$Builder
                                                       CfnTemplate$BoxPlotStyleOptionsProperty$Builder
                                                       CfnTemplate$BoxPlotVisualProperty$Builder
                                                       CfnTemplate$Builder
                                                       CfnTemplate$CalculatedFieldProperty$Builder
                                                       CfnTemplate$CalculatedMeasureFieldProperty$Builder
                                                       CfnTemplate$CascadingControlConfigurationProperty$Builder
                                                       CfnTemplate$CascadingControlSourceProperty$Builder
                                                       CfnTemplate$CategoricalDimensionFieldProperty$Builder
                                                       CfnTemplate$CategoricalMeasureFieldProperty$Builder
                                                       CfnTemplate$CategoryDrillDownFilterProperty$Builder
                                                       CfnTemplate$CategoryFilterConfigurationProperty$Builder
                                                       CfnTemplate$CategoryFilterProperty$Builder
                                                       CfnTemplate$ChartAxisLabelOptionsProperty$Builder
                                                       CfnTemplate$ClusterMarkerConfigurationProperty$Builder
                                                       CfnTemplate$ClusterMarkerProperty$Builder
                                                       CfnTemplate$ColorScaleProperty$Builder
                                                       CfnTemplate$ColorsConfigurationProperty$Builder
                                                       CfnTemplate$ColumnConfigurationProperty$Builder
                                                       CfnTemplate$ColumnGroupColumnSchemaProperty$Builder
                                                       CfnTemplate$ColumnGroupSchemaProperty$Builder
                                                       CfnTemplate$ColumnHierarchyProperty$Builder
                                                       CfnTemplate$ColumnIdentifierProperty$Builder
                                                       CfnTemplate$ColumnSchemaProperty$Builder
                                                       CfnTemplate$ColumnSortProperty$Builder
                                                       CfnTemplate$ColumnTooltipItemProperty$Builder
                                                       CfnTemplate$ComboChartAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$ComboChartConfigurationProperty$Builder
                                                       CfnTemplate$ComboChartFieldWellsProperty$Builder
                                                       CfnTemplate$ComboChartSortConfigurationProperty$Builder
                                                       CfnTemplate$ComboChartVisualProperty$Builder
                                                       CfnTemplate$ComparisonConfigurationProperty$Builder
                                                       CfnTemplate$ComparisonFormatConfigurationProperty$Builder
                                                       CfnTemplate$ComputationProperty$Builder
                                                       CfnTemplate$ConditionalFormattingColorProperty$Builder
                                                       CfnTemplate$ConditionalFormattingCustomIconConditionProperty$Builder
                                                       CfnTemplate$ConditionalFormattingCustomIconOptionsProperty$Builder
                                                       CfnTemplate$ConditionalFormattingGradientColorProperty$Builder
                                                       CfnTemplate$ConditionalFormattingIconDisplayConfigurationProperty$Builder
                                                       CfnTemplate$ConditionalFormattingIconProperty$Builder
                                                       CfnTemplate$ConditionalFormattingIconSetProperty$Builder
                                                       CfnTemplate$ConditionalFormattingSolidColorProperty$Builder
                                                       CfnTemplate$ContributionAnalysisDefaultProperty$Builder
                                                       CfnTemplate$CurrencyDisplayFormatConfigurationProperty$Builder
                                                       CfnTemplate$CustomActionFilterOperationProperty$Builder
                                                       CfnTemplate$CustomActionNavigationOperationProperty$Builder
                                                       CfnTemplate$CustomActionSetParametersOperationProperty$Builder
                                                       CfnTemplate$CustomActionURLOperationProperty$Builder
                                                       CfnTemplate$CustomColorProperty$Builder
                                                       CfnTemplate$CustomContentConfigurationProperty$Builder
                                                       CfnTemplate$CustomContentVisualProperty$Builder
                                                       CfnTemplate$CustomFilterConfigurationProperty$Builder
                                                       CfnTemplate$CustomFilterListConfigurationProperty$Builder
                                                       CfnTemplate$CustomNarrativeOptionsProperty$Builder
                                                       CfnTemplate$CustomParameterValuesProperty$Builder
                                                       CfnTemplate$CustomValuesConfigurationProperty$Builder
                                                       CfnTemplate$DataBarsOptionsProperty$Builder
                                                       CfnTemplate$DataColorProperty$Builder
                                                       CfnTemplate$DataFieldSeriesItemProperty$Builder
                                                       CfnTemplate$DataLabelOptionsProperty$Builder
                                                       CfnTemplate$DataLabelTypeProperty$Builder
                                                       CfnTemplate$DataPathColorProperty$Builder
                                                       CfnTemplate$DataPathLabelTypeProperty$Builder
                                                       CfnTemplate$DataPathSortProperty$Builder
                                                       CfnTemplate$DataPathTypeProperty$Builder
                                                       CfnTemplate$DataPathValueProperty$Builder
                                                       CfnTemplate$DataSetConfigurationProperty$Builder
                                                       CfnTemplate$DataSetReferenceProperty$Builder
                                                       CfnTemplate$DataSetSchemaProperty$Builder
                                                       CfnTemplate$DateAxisOptionsProperty$Builder
                                                       CfnTemplate$DateDimensionFieldProperty$Builder
                                                       CfnTemplate$DateMeasureFieldProperty$Builder
                                                       CfnTemplate$DateTimeDefaultValuesProperty$Builder
                                                       CfnTemplate$DateTimeFormatConfigurationProperty$Builder
                                                       CfnTemplate$DateTimeHierarchyProperty$Builder
                                                       CfnTemplate$DateTimeParameterDeclarationProperty$Builder
                                                       CfnTemplate$DateTimePickerControlDisplayOptionsProperty$Builder
                                                       CfnTemplate$DateTimeValueWhenUnsetConfigurationProperty$Builder
                                                       CfnTemplate$DecimalDefaultValuesProperty$Builder
                                                       CfnTemplate$DecimalParameterDeclarationProperty$Builder
                                                       CfnTemplate$DecimalPlacesConfigurationProperty$Builder
                                                       CfnTemplate$DecimalValueWhenUnsetConfigurationProperty$Builder
                                                       CfnTemplate$DefaultDateTimePickerControlOptionsProperty$Builder
                                                       CfnTemplate$DefaultFilterControlConfigurationProperty$Builder
                                                       CfnTemplate$DefaultFilterControlOptionsProperty$Builder
                                                       CfnTemplate$DefaultFilterDropDownControlOptionsProperty$Builder
                                                       CfnTemplate$DefaultFilterListControlOptionsProperty$Builder
                                                       CfnTemplate$DefaultFreeFormLayoutConfigurationProperty$Builder
                                                       CfnTemplate$DefaultGridLayoutConfigurationProperty$Builder
                                                       CfnTemplate$DefaultInteractiveLayoutConfigurationProperty$Builder
                                                       CfnTemplate$DefaultNewSheetConfigurationProperty$Builder
                                                       CfnTemplate$DefaultPaginatedLayoutConfigurationProperty$Builder
                                                       CfnTemplate$DefaultRelativeDateTimeControlOptionsProperty$Builder
                                                       CfnTemplate$DefaultSectionBasedLayoutConfigurationProperty$Builder
                                                       CfnTemplate$DefaultSliderControlOptionsProperty$Builder
                                                       CfnTemplate$DefaultTextAreaControlOptionsProperty$Builder
                                                       CfnTemplate$DefaultTextFieldControlOptionsProperty$Builder
                                                       CfnTemplate$DestinationParameterValueConfigurationProperty$Builder
                                                       CfnTemplate$DimensionFieldProperty$Builder
                                                       CfnTemplate$DonutCenterOptionsProperty$Builder
                                                       CfnTemplate$DonutOptionsProperty$Builder
                                                       CfnTemplate$DrillDownFilterProperty$Builder
                                                       CfnTemplate$DropDownControlDisplayOptionsProperty$Builder
                                                       CfnTemplate$DynamicDefaultValueProperty$Builder
                                                       CfnTemplate$EmptyVisualProperty$Builder
                                                       CfnTemplate$EntityProperty$Builder
                                                       CfnTemplate$ExcludePeriodConfigurationProperty$Builder
                                                       CfnTemplate$ExplicitHierarchyProperty$Builder
                                                       CfnTemplate$FieldBasedTooltipProperty$Builder
                                                       CfnTemplate$FieldLabelTypeProperty$Builder
                                                       CfnTemplate$FieldSeriesItemProperty$Builder
                                                       CfnTemplate$FieldSortOptionsProperty$Builder
                                                       CfnTemplate$FieldSortProperty$Builder
                                                       CfnTemplate$FieldTooltipItemProperty$Builder
                                                       CfnTemplate$FilledMapAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$FilledMapConditionalFormattingOptionProperty$Builder
                                                       CfnTemplate$FilledMapConditionalFormattingProperty$Builder
                                                       CfnTemplate$FilledMapConfigurationProperty$Builder
                                                       CfnTemplate$FilledMapFieldWellsProperty$Builder
                                                       CfnTemplate$FilledMapShapeConditionalFormattingProperty$Builder
                                                       CfnTemplate$FilledMapSortConfigurationProperty$Builder
                                                       CfnTemplate$FilledMapVisualProperty$Builder
                                                       CfnTemplate$FilterControlProperty$Builder
                                                       CfnTemplate$FilterCrossSheetControlProperty$Builder
                                                       CfnTemplate$FilterDateTimePickerControlProperty$Builder
                                                       CfnTemplate$FilterDropDownControlProperty$Builder
                                                       CfnTemplate$FilterGroupProperty$Builder
                                                       CfnTemplate$FilterListConfigurationProperty$Builder
                                                       CfnTemplate$FilterListControlProperty$Builder
                                                       CfnTemplate$FilterOperationSelectedFieldsConfigurationProperty$Builder
                                                       CfnTemplate$FilterOperationTargetVisualsConfigurationProperty$Builder
                                                       CfnTemplate$FilterProperty$Builder
                                                       CfnTemplate$FilterRelativeDateTimeControlProperty$Builder
                                                       CfnTemplate$FilterScopeConfigurationProperty$Builder
                                                       CfnTemplate$FilterSelectableValuesProperty$Builder
                                                       CfnTemplate$FilterSliderControlProperty$Builder
                                                       CfnTemplate$FilterTextAreaControlProperty$Builder
                                                       CfnTemplate$FilterTextFieldControlProperty$Builder
                                                       CfnTemplate$FontConfigurationProperty$Builder
                                                       CfnTemplate$FontSizeProperty$Builder
                                                       CfnTemplate$FontWeightProperty$Builder
                                                       CfnTemplate$ForecastComputationProperty$Builder
                                                       CfnTemplate$ForecastConfigurationProperty$Builder
                                                       CfnTemplate$ForecastScenarioProperty$Builder
                                                       CfnTemplate$FormatConfigurationProperty$Builder
                                                       CfnTemplate$FreeFormLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnTemplate$FreeFormLayoutConfigurationProperty$Builder
                                                       CfnTemplate$FreeFormLayoutElementBackgroundStyleProperty$Builder
                                                       CfnTemplate$FreeFormLayoutElementBorderStyleProperty$Builder
                                                       CfnTemplate$FreeFormLayoutElementProperty$Builder
                                                       CfnTemplate$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder
                                                       CfnTemplate$FreeFormSectionLayoutConfigurationProperty$Builder
                                                       CfnTemplate$FunnelChartAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$FunnelChartConfigurationProperty$Builder
                                                       CfnTemplate$FunnelChartDataLabelOptionsProperty$Builder
                                                       CfnTemplate$FunnelChartFieldWellsProperty$Builder
                                                       CfnTemplate$FunnelChartSortConfigurationProperty$Builder
                                                       CfnTemplate$FunnelChartVisualProperty$Builder
                                                       CfnTemplate$GaugeChartArcConditionalFormattingProperty$Builder
                                                       CfnTemplate$GaugeChartConditionalFormattingOptionProperty$Builder
                                                       CfnTemplate$GaugeChartConditionalFormattingProperty$Builder
                                                       CfnTemplate$GaugeChartConfigurationProperty$Builder
                                                       CfnTemplate$GaugeChartFieldWellsProperty$Builder
                                                       CfnTemplate$GaugeChartOptionsProperty$Builder
                                                       CfnTemplate$GaugeChartPrimaryValueConditionalFormattingProperty$Builder
                                                       CfnTemplate$GaugeChartVisualProperty$Builder
                                                       CfnTemplate$GeospatialCoordinateBoundsProperty$Builder
                                                       CfnTemplate$GeospatialHeatmapColorScaleProperty$Builder
                                                       CfnTemplate$GeospatialHeatmapConfigurationProperty$Builder
                                                       CfnTemplate$GeospatialHeatmapDataColorProperty$Builder
                                                       CfnTemplate$GeospatialMapAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$GeospatialMapConfigurationProperty$Builder
                                                       CfnTemplate$GeospatialMapFieldWellsProperty$Builder
                                                       CfnTemplate$GeospatialMapStyleOptionsProperty$Builder
                                                       CfnTemplate$GeospatialMapVisualProperty$Builder
                                                       CfnTemplate$GeospatialPointStyleOptionsProperty$Builder
                                                       CfnTemplate$GeospatialWindowOptionsProperty$Builder
                                                       CfnTemplate$GlobalTableBorderOptionsProperty$Builder
                                                       CfnTemplate$GradientColorProperty$Builder
                                                       CfnTemplate$GradientStopProperty$Builder
                                                       CfnTemplate$GridLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnTemplate$GridLayoutConfigurationProperty$Builder
                                                       CfnTemplate$GridLayoutElementProperty$Builder
                                                       CfnTemplate$GridLayoutScreenCanvasSizeOptionsProperty$Builder
                                                       CfnTemplate$GrowthRateComputationProperty$Builder
                                                       CfnTemplate$HeaderFooterSectionConfigurationProperty$Builder
                                                       CfnTemplate$HeatMapAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$HeatMapConfigurationProperty$Builder
                                                       CfnTemplate$HeatMapFieldWellsProperty$Builder
                                                       CfnTemplate$HeatMapSortConfigurationProperty$Builder
                                                       CfnTemplate$HeatMapVisualProperty$Builder
                                                       CfnTemplate$HistogramAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$HistogramBinOptionsProperty$Builder
                                                       CfnTemplate$HistogramConfigurationProperty$Builder
                                                       CfnTemplate$HistogramFieldWellsProperty$Builder
                                                       CfnTemplate$HistogramVisualProperty$Builder
                                                       CfnTemplate$InsightConfigurationProperty$Builder
                                                       CfnTemplate$InsightVisualProperty$Builder
                                                       CfnTemplate$IntegerDefaultValuesProperty$Builder
                                                       CfnTemplate$IntegerParameterDeclarationProperty$Builder
                                                       CfnTemplate$IntegerValueWhenUnsetConfigurationProperty$Builder
                                                       CfnTemplate$ItemsLimitConfigurationProperty$Builder
                                                       CfnTemplate$KPIActualValueConditionalFormattingProperty$Builder
                                                       CfnTemplate$KPIComparisonValueConditionalFormattingProperty$Builder
                                                       CfnTemplate$KPIConditionalFormattingOptionProperty$Builder
                                                       CfnTemplate$KPIConditionalFormattingProperty$Builder
                                                       CfnTemplate$KPIConfigurationProperty$Builder
                                                       CfnTemplate$KPIFieldWellsProperty$Builder
                                                       CfnTemplate$KPIOptionsProperty$Builder
                                                       CfnTemplate$KPIPrimaryValueConditionalFormattingProperty$Builder
                                                       CfnTemplate$KPIProgressBarConditionalFormattingProperty$Builder
                                                       CfnTemplate$KPISortConfigurationProperty$Builder
                                                       CfnTemplate$KPISparklineOptionsProperty$Builder
                                                       CfnTemplate$KPIVisualLayoutOptionsProperty$Builder
                                                       CfnTemplate$KPIVisualProperty$Builder
                                                       CfnTemplate$KPIVisualStandardLayoutProperty$Builder
                                                       CfnTemplate$LabelOptionsProperty$Builder
                                                       CfnTemplate$LayoutConfigurationProperty$Builder
                                                       CfnTemplate$LayoutProperty$Builder
                                                       CfnTemplate$LegendOptionsProperty$Builder
                                                       CfnTemplate$LineChartAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$LineChartConfigurationProperty$Builder
                                                       CfnTemplate$LineChartDefaultSeriesSettingsProperty$Builder
                                                       CfnTemplate$LineChartFieldWellsProperty$Builder
                                                       CfnTemplate$LineChartLineStyleSettingsProperty$Builder
                                                       CfnTemplate$LineChartMarkerStyleSettingsProperty$Builder
                                                       CfnTemplate$LineChartSeriesSettingsProperty$Builder
                                                       CfnTemplate$LineChartSortConfigurationProperty$Builder
                                                       CfnTemplate$LineChartVisualProperty$Builder
                                                       CfnTemplate$LineSeriesAxisDisplayOptionsProperty$Builder
                                                       CfnTemplate$ListControlDisplayOptionsProperty$Builder
                                                       CfnTemplate$ListControlSearchOptionsProperty$Builder
                                                       CfnTemplate$ListControlSelectAllOptionsProperty$Builder
                                                       CfnTemplate$LoadingAnimationProperty$Builder
                                                       CfnTemplate$LocalNavigationConfigurationProperty$Builder
                                                       CfnTemplate$LongFormatTextProperty$Builder
                                                       CfnTemplate$MappedDataSetParameterProperty$Builder
                                                       CfnTemplate$MaximumLabelTypeProperty$Builder
                                                       CfnTemplate$MaximumMinimumComputationProperty$Builder
                                                       CfnTemplate$MeasureFieldProperty$Builder
                                                       CfnTemplate$MetricComparisonComputationProperty$Builder
                                                       CfnTemplate$MinimumLabelTypeProperty$Builder
                                                       CfnTemplate$MissingDataConfigurationProperty$Builder
                                                       CfnTemplate$NegativeValueConfigurationProperty$Builder
                                                       CfnTemplate$NullValueFormatConfigurationProperty$Builder
                                                       CfnTemplate$NumberDisplayFormatConfigurationProperty$Builder
                                                       CfnTemplate$NumberFormatConfigurationProperty$Builder
                                                       CfnTemplate$NumericAxisOptionsProperty$Builder
                                                       CfnTemplate$NumericEqualityDrillDownFilterProperty$Builder
                                                       CfnTemplate$NumericEqualityFilterProperty$Builder
                                                       CfnTemplate$NumericFormatConfigurationProperty$Builder
                                                       CfnTemplate$NumericRangeFilterProperty$Builder
                                                       CfnTemplate$NumericRangeFilterValueProperty$Builder
                                                       CfnTemplate$NumericSeparatorConfigurationProperty$Builder
                                                       CfnTemplate$NumericalAggregationFunctionProperty$Builder
                                                       CfnTemplate$NumericalDimensionFieldProperty$Builder
                                                       CfnTemplate$NumericalMeasureFieldProperty$Builder
                                                       CfnTemplate$PaginationConfigurationProperty$Builder
                                                       CfnTemplate$PanelConfigurationProperty$Builder
                                                       CfnTemplate$PanelTitleOptionsProperty$Builder
                                                       CfnTemplate$ParameterControlProperty$Builder
                                                       CfnTemplate$ParameterDateTimePickerControlProperty$Builder
                                                       CfnTemplate$ParameterDeclarationProperty$Builder
                                                       CfnTemplate$ParameterDropDownControlProperty$Builder
                                                       CfnTemplate$ParameterListControlProperty$Builder
                                                       CfnTemplate$ParameterSelectableValuesProperty$Builder
                                                       CfnTemplate$ParameterSliderControlProperty$Builder
                                                       CfnTemplate$ParameterTextAreaControlProperty$Builder
                                                       CfnTemplate$ParameterTextFieldControlProperty$Builder
                                                       CfnTemplate$PercentVisibleRangeProperty$Builder
                                                       CfnTemplate$PercentageDisplayFormatConfigurationProperty$Builder
                                                       CfnTemplate$PercentileAggregationProperty$Builder
                                                       CfnTemplate$PeriodOverPeriodComputationProperty$Builder
                                                       CfnTemplate$PeriodToDateComputationProperty$Builder
                                                       CfnTemplate$PieChartAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$PieChartConfigurationProperty$Builder
                                                       CfnTemplate$PieChartFieldWellsProperty$Builder
                                                       CfnTemplate$PieChartSortConfigurationProperty$Builder
                                                       CfnTemplate$PieChartVisualProperty$Builder
                                                       CfnTemplate$PivotFieldSortOptionsProperty$Builder
                                                       CfnTemplate$PivotTableAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$PivotTableCellConditionalFormattingProperty$Builder
                                                       CfnTemplate$PivotTableConditionalFormattingOptionProperty$Builder
                                                       CfnTemplate$PivotTableConditionalFormattingProperty$Builder
                                                       CfnTemplate$PivotTableConditionalFormattingScopeProperty$Builder
                                                       CfnTemplate$PivotTableConfigurationProperty$Builder
                                                       CfnTemplate$PivotTableDataPathOptionProperty$Builder
                                                       CfnTemplate$PivotTableFieldCollapseStateOptionProperty$Builder
                                                       CfnTemplate$PivotTableFieldCollapseStateTargetProperty$Builder
                                                       CfnTemplate$PivotTableFieldOptionProperty$Builder
                                                       CfnTemplate$PivotTableFieldOptionsProperty$Builder
                                                       CfnTemplate$PivotTableFieldSubtotalOptionsProperty$Builder
                                                       CfnTemplate$PivotTableFieldWellsProperty$Builder
                                                       CfnTemplate$PivotTableOptionsProperty$Builder
                                                       CfnTemplate$PivotTablePaginatedReportOptionsProperty$Builder
                                                       CfnTemplate$PivotTableRowsLabelOptionsProperty$Builder
                                                       CfnTemplate$PivotTableSortByProperty$Builder
                                                       CfnTemplate$PivotTableSortConfigurationProperty$Builder
                                                       CfnTemplate$PivotTableTotalOptionsProperty$Builder
                                                       CfnTemplate$PivotTableVisualProperty$Builder
                                                       CfnTemplate$PivotTotalOptionsProperty$Builder
                                                       CfnTemplate$PredefinedHierarchyProperty$Builder
                                                       CfnTemplate$ProgressBarOptionsProperty$Builder
                                                       CfnTemplate$RadarChartAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$RadarChartAreaStyleSettingsProperty$Builder
                                                       CfnTemplate$RadarChartConfigurationProperty$Builder
                                                       CfnTemplate$RadarChartFieldWellsProperty$Builder
                                                       CfnTemplate$RadarChartSeriesSettingsProperty$Builder
                                                       CfnTemplate$RadarChartSortConfigurationProperty$Builder
                                                       CfnTemplate$RadarChartVisualProperty$Builder
                                                       CfnTemplate$RangeEndsLabelTypeProperty$Builder
                                                       CfnTemplate$ReferenceLineCustomLabelConfigurationProperty$Builder
                                                       CfnTemplate$ReferenceLineDataConfigurationProperty$Builder
                                                       CfnTemplate$ReferenceLineDynamicDataConfigurationProperty$Builder
                                                       CfnTemplate$ReferenceLineLabelConfigurationProperty$Builder
                                                       CfnTemplate$ReferenceLineProperty$Builder
                                                       CfnTemplate$ReferenceLineStaticDataConfigurationProperty$Builder
                                                       CfnTemplate$ReferenceLineStyleConfigurationProperty$Builder
                                                       CfnTemplate$ReferenceLineValueLabelConfigurationProperty$Builder
                                                       CfnTemplate$RelativeDateTimeControlDisplayOptionsProperty$Builder
                                                       CfnTemplate$RelativeDatesFilterProperty$Builder
                                                       CfnTemplate$ResourcePermissionProperty$Builder
                                                       CfnTemplate$RollingDateConfigurationProperty$Builder
                                                       CfnTemplate$RowAlternateColorOptionsProperty$Builder
                                                       CfnTemplate$SameSheetTargetVisualConfigurationProperty$Builder
                                                       CfnTemplate$SankeyDiagramAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$SankeyDiagramChartConfigurationProperty$Builder
                                                       CfnTemplate$SankeyDiagramFieldWellsProperty$Builder
                                                       CfnTemplate$SankeyDiagramSortConfigurationProperty$Builder
                                                       CfnTemplate$SankeyDiagramVisualProperty$Builder
                                                       CfnTemplate$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$ScatterPlotConfigurationProperty$Builder
                                                       CfnTemplate$ScatterPlotFieldWellsProperty$Builder
                                                       CfnTemplate$ScatterPlotUnaggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$ScatterPlotVisualProperty$Builder
                                                       CfnTemplate$ScrollBarOptionsProperty$Builder
                                                       CfnTemplate$SecondaryValueOptionsProperty$Builder
                                                       CfnTemplate$SectionAfterPageBreakProperty$Builder
                                                       CfnTemplate$SectionBasedLayoutCanvasSizeOptionsProperty$Builder
                                                       CfnTemplate$SectionBasedLayoutConfigurationProperty$Builder
                                                       CfnTemplate$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder
                                                       CfnTemplate$SectionLayoutConfigurationProperty$Builder
                                                       CfnTemplate$SectionPageBreakConfigurationProperty$Builder
                                                       CfnTemplate$SectionStyleProperty$Builder
                                                       CfnTemplate$SelectedSheetsFilterScopeConfigurationProperty$Builder
                                                       CfnTemplate$SeriesItemProperty$Builder
                                                       CfnTemplate$SetParameterValueConfigurationProperty$Builder
                                                       CfnTemplate$ShapeConditionalFormatProperty$Builder
                                                       CfnTemplate$SheetControlInfoIconLabelOptionsProperty$Builder
                                                       CfnTemplate$SheetControlLayoutConfigurationProperty$Builder
                                                       CfnTemplate$SheetControlLayoutProperty$Builder
                                                       CfnTemplate$SheetDefinitionProperty$Builder
                                                       CfnTemplate$SheetElementConfigurationOverridesProperty$Builder
                                                       CfnTemplate$SheetElementRenderingRuleProperty$Builder
                                                       CfnTemplate$SheetProperty$Builder
                                                       CfnTemplate$SheetTextBoxProperty$Builder
                                                       CfnTemplate$SheetVisualScopingConfigurationProperty$Builder
                                                       CfnTemplate$ShortFormatTextProperty$Builder
                                                       CfnTemplate$SimpleClusterMarkerProperty$Builder
                                                       CfnTemplate$SliderControlDisplayOptionsProperty$Builder
                                                       CfnTemplate$SmallMultiplesAxisPropertiesProperty$Builder
                                                       CfnTemplate$SmallMultiplesOptionsProperty$Builder
                                                       CfnTemplate$SpacingProperty$Builder
                                                       CfnTemplate$StringDefaultValuesProperty$Builder
                                                       CfnTemplate$StringFormatConfigurationProperty$Builder
                                                       CfnTemplate$StringParameterDeclarationProperty$Builder
                                                       CfnTemplate$StringValueWhenUnsetConfigurationProperty$Builder
                                                       CfnTemplate$SubtotalOptionsProperty$Builder
                                                       CfnTemplate$TableAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$TableBorderOptionsProperty$Builder
                                                       CfnTemplate$TableCellConditionalFormattingProperty$Builder
                                                       CfnTemplate$TableCellImageSizingConfigurationProperty$Builder
                                                       CfnTemplate$TableCellStyleProperty$Builder
                                                       CfnTemplate$TableConditionalFormattingOptionProperty$Builder
                                                       CfnTemplate$TableConditionalFormattingProperty$Builder
                                                       CfnTemplate$TableConfigurationProperty$Builder
                                                       CfnTemplate$TableFieldCustomIconContentProperty$Builder
                                                       CfnTemplate$TableFieldCustomTextContentProperty$Builder
                                                       CfnTemplate$TableFieldImageConfigurationProperty$Builder
                                                       CfnTemplate$TableFieldLinkConfigurationProperty$Builder
                                                       CfnTemplate$TableFieldLinkContentConfigurationProperty$Builder
                                                       CfnTemplate$TableFieldOptionProperty$Builder
                                                       CfnTemplate$TableFieldOptionsProperty$Builder
                                                       CfnTemplate$TableFieldURLConfigurationProperty$Builder
                                                       CfnTemplate$TableFieldWellsProperty$Builder
                                                       CfnTemplate$TableInlineVisualizationProperty$Builder
                                                       CfnTemplate$TableOptionsProperty$Builder
                                                       CfnTemplate$TablePaginatedReportOptionsProperty$Builder
                                                       CfnTemplate$TablePinnedFieldOptionsProperty$Builder
                                                       CfnTemplate$TableRowConditionalFormattingProperty$Builder
                                                       CfnTemplate$TableSideBorderOptionsProperty$Builder
                                                       CfnTemplate$TableSortConfigurationProperty$Builder
                                                       CfnTemplate$TableStyleTargetProperty$Builder
                                                       CfnTemplate$TableUnaggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$TableVisualProperty$Builder
                                                       CfnTemplate$TemplateErrorProperty$Builder
                                                       CfnTemplate$TemplateSourceAnalysisProperty$Builder
                                                       CfnTemplate$TemplateSourceEntityProperty$Builder
                                                       CfnTemplate$TemplateSourceTemplateProperty$Builder
                                                       CfnTemplate$TemplateVersionDefinitionProperty$Builder
                                                       CfnTemplate$TemplateVersionProperty$Builder
                                                       CfnTemplate$TextAreaControlDisplayOptionsProperty$Builder
                                                       CfnTemplate$TextConditionalFormatProperty$Builder
                                                       CfnTemplate$TextControlPlaceholderOptionsProperty$Builder
                                                       CfnTemplate$TextFieldControlDisplayOptionsProperty$Builder
                                                       CfnTemplate$ThousandSeparatorOptionsProperty$Builder
                                                       CfnTemplate$TimeBasedForecastPropertiesProperty$Builder
                                                       CfnTemplate$TimeEqualityFilterProperty$Builder
                                                       CfnTemplate$TimeRangeDrillDownFilterProperty$Builder
                                                       CfnTemplate$TimeRangeFilterProperty$Builder
                                                       CfnTemplate$TimeRangeFilterValueProperty$Builder
                                                       CfnTemplate$TooltipItemProperty$Builder
                                                       CfnTemplate$TooltipOptionsProperty$Builder
                                                       CfnTemplate$TopBottomFilterProperty$Builder
                                                       CfnTemplate$TopBottomMoversComputationProperty$Builder
                                                       CfnTemplate$TopBottomRankedComputationProperty$Builder
                                                       CfnTemplate$TotalAggregationComputationProperty$Builder
                                                       CfnTemplate$TotalAggregationFunctionProperty$Builder
                                                       CfnTemplate$TotalAggregationOptionProperty$Builder
                                                       CfnTemplate$TotalOptionsProperty$Builder
                                                       CfnTemplate$TreeMapAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$TreeMapConfigurationProperty$Builder
                                                       CfnTemplate$TreeMapFieldWellsProperty$Builder
                                                       CfnTemplate$TreeMapSortConfigurationProperty$Builder
                                                       CfnTemplate$TreeMapVisualProperty$Builder
                                                       CfnTemplate$TrendArrowOptionsProperty$Builder
                                                       CfnTemplate$UnaggregatedFieldProperty$Builder
                                                       CfnTemplate$UniqueValuesComputationProperty$Builder
                                                       CfnTemplate$ValidationStrategyProperty$Builder
                                                       CfnTemplate$VisibleRangeOptionsProperty$Builder
                                                       CfnTemplate$VisualCustomActionOperationProperty$Builder
                                                       CfnTemplate$VisualCustomActionProperty$Builder
                                                       CfnTemplate$VisualPaletteProperty$Builder
                                                       CfnTemplate$VisualProperty$Builder
                                                       CfnTemplate$VisualSubtitleLabelOptionsProperty$Builder
                                                       CfnTemplate$VisualTitleLabelOptionsProperty$Builder
                                                       CfnTemplate$WaterfallChartAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$WaterfallChartColorConfigurationProperty$Builder
                                                       CfnTemplate$WaterfallChartConfigurationProperty$Builder
                                                       CfnTemplate$WaterfallChartFieldWellsProperty$Builder
                                                       CfnTemplate$WaterfallChartGroupColorConfigurationProperty$Builder
                                                       CfnTemplate$WaterfallChartOptionsProperty$Builder
                                                       CfnTemplate$WaterfallChartSortConfigurationProperty$Builder
                                                       CfnTemplate$WaterfallVisualProperty$Builder
                                                       CfnTemplate$WhatIfPointScenarioProperty$Builder
                                                       CfnTemplate$WhatIfRangeScenarioProperty$Builder
                                                       CfnTemplate$WordCloudAggregatedFieldWellsProperty$Builder
                                                       CfnTemplate$WordCloudChartConfigurationProperty$Builder
                                                       CfnTemplate$WordCloudFieldWellsProperty$Builder
                                                       CfnTemplate$WordCloudOptionsProperty$Builder
                                                       CfnTemplate$WordCloudSortConfigurationProperty$Builder
                                                       CfnTemplate$WordCloudVisualProperty$Builder
                                                       CfnTemplateProps$Builder
                                                       CfnTheme$BorderStyleProperty$Builder
                                                       CfnTheme$Builder
                                                       CfnTheme$DataColorPaletteProperty$Builder
                                                       CfnTheme$FontProperty$Builder
                                                       CfnTheme$GutterStyleProperty$Builder
                                                       CfnTheme$MarginStyleProperty$Builder
                                                       CfnTheme$ResourcePermissionProperty$Builder
                                                       CfnTheme$SheetStyleProperty$Builder
                                                       CfnTheme$ThemeConfigurationProperty$Builder
                                                       CfnTheme$ThemeErrorProperty$Builder
                                                       CfnTheme$ThemeVersionProperty$Builder
                                                       CfnTheme$TileLayoutStyleProperty$Builder
                                                       CfnTheme$TileStyleProperty$Builder
                                                       CfnTheme$TypographyProperty$Builder
                                                       CfnTheme$UIColorPaletteProperty$Builder
                                                       CfnThemeProps$Builder
                                                       CfnTopic$Builder
                                                       CfnTopic$CellValueSynonymProperty$Builder
                                                       CfnTopic$CollectiveConstantProperty$Builder
                                                       CfnTopic$ComparativeOrderProperty$Builder
                                                       CfnTopic$DataAggregationProperty$Builder
                                                       CfnTopic$DatasetMetadataProperty$Builder
                                                       CfnTopic$DefaultFormattingProperty$Builder
                                                       CfnTopic$DisplayFormatOptionsProperty$Builder
                                                       CfnTopic$NamedEntityDefinitionMetricProperty$Builder
                                                       CfnTopic$NamedEntityDefinitionProperty$Builder
                                                       CfnTopic$NegativeFormatProperty$Builder
                                                       CfnTopic$RangeConstantProperty$Builder
                                                       CfnTopic$SemanticEntityTypeProperty$Builder
                                                       CfnTopic$SemanticTypeProperty$Builder
                                                       CfnTopic$TopicCalculatedFieldProperty$Builder
                                                       CfnTopic$TopicCategoryFilterConstantProperty$Builder
                                                       CfnTopic$TopicCategoryFilterProperty$Builder
                                                       CfnTopic$TopicColumnProperty$Builder
                                                       CfnTopic$TopicDateRangeFilterProperty$Builder
                                                       CfnTopic$TopicFilterProperty$Builder
                                                       CfnTopic$TopicNamedEntityProperty$Builder
                                                       CfnTopic$TopicNumericEqualityFilterProperty$Builder
                                                       CfnTopic$TopicNumericRangeFilterProperty$Builder
                                                       CfnTopic$TopicRangeFilterConstantProperty$Builder
                                                       CfnTopic$TopicRelativeDateFilterProperty$Builder
                                                       CfnTopic$TopicSingularFilterConstantProperty$Builder
                                                       CfnTopicProps$Builder
                                                       CfnVPCConnection$Builder
                                                       CfnVPCConnection$NetworkInterfaceProperty$Builder
                                                       CfnVPCConnectionProps$Builder]))


(defn cfn-analysis-aggregation-function-property-builder
  "The cfn-analysis-aggregation-function-property-builder function buildes out new instances of 
CfnAnalysis$AggregationFunctionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `attributeAggregationFunction` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AttributeAggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:attribute-aggregation-function` |
| `categoricalAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:categorical-aggregation-function` |
| `dateAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-aggregation-function` |
| `numericalAggregationFunction` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumericalAggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:numerical-aggregation-function` |"
  [stack id config]
  (let [builder (CfnAnalysis$AggregationFunctionProperty$Builder.)]
    (when-let [data (lookup-entry config id :attribute-aggregation-function)]
      (. builder attributeAggregationFunction data))
    (when-let [data (lookup-entry config id :categorical-aggregation-function)]
      (. builder categoricalAggregationFunction data))
    (when-let [data (lookup-entry config id :date-aggregation-function)]
      (. builder dateAggregationFunction data))
    (when-let [data (lookup-entry config id :numerical-aggregation-function)]
      (. builder numericalAggregationFunction data))
    (.build builder)))


(defn cfn-analysis-aggregation-sort-configuration-property-builder
  "The cfn-analysis-aggregation-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$AggregationSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `sortDirection` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-direction` |"
  [stack id config]
  (let [builder (CfnAnalysis$AggregationSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :sort-direction)]
      (. builder sortDirection data))
    (.build builder)))


(defn cfn-analysis-analysis-defaults-property-builder
  "The cfn-analysis-analysis-defaults-property-builder function buildes out new instances of 
CfnAnalysis$AnalysisDefaultsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultNewSheetConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DefaultNewSheetConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-new-sheet-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$AnalysisDefaultsProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-new-sheet-configuration)]
      (. builder defaultNewSheetConfiguration data))
    (.build builder)))


(defn cfn-analysis-analysis-definition-property-builder
  "The cfn-analysis-analysis-definition-property-builder function buildes out new instances of 
CfnAnalysis$AnalysisDefinitionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `analysisDefaults` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AnalysisDefaultsProperty | [[cdk.support/lookup-entry]] | `:analysis-defaults` |
| `calculatedFields` | java.util.List | [[cdk.support/lookup-entry]] | `:calculated-fields` |
| `columnConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:column-configurations` |
| `dataSetIdentifierDeclarations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-set-identifier-declarations` |
| `filterGroups` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-groups` |
| `options` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:options` |
| `parameterDeclarations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameter-declarations` |
| `sheets` | java.util.List | [[cdk.support/lookup-entry]] | `:sheets` |"
  [stack id config]
  (let [builder (CfnAnalysis$AnalysisDefinitionProperty$Builder.)]
    (when-let [data (lookup-entry config id :analysis-defaults)]
      (. builder analysisDefaults data))
    (when-let [data (lookup-entry config id :calculated-fields)]
      (. builder calculatedFields data))
    (when-let [data (lookup-entry config id :column-configurations)]
      (. builder columnConfigurations data))
    (when-let [data (lookup-entry config id :data-set-identifier-declarations)]
      (. builder dataSetIdentifierDeclarations data))
    (when-let [data (lookup-entry config id :filter-groups)]
      (. builder filterGroups data))
    (when-let [data (lookup-entry config id :options)]
      (. builder options data))
    (when-let [data (lookup-entry config id :parameter-declarations)]
      (. builder parameterDeclarations data))
    (when-let [data (lookup-entry config id :sheets)]
      (. builder sheets data))
    (.build builder)))


(defn cfn-analysis-analysis-error-property-builder
  "The cfn-analysis-analysis-error-property-builder function buildes out new instances of 
CfnAnalysis$AnalysisErrorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `message` | java.lang.String | [[cdk.support/lookup-entry]] | `:message` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `violatedEntities` | java.util.List | [[cdk.support/lookup-entry]] | `:violated-entities` |"
  [stack id config]
  (let [builder (CfnAnalysis$AnalysisErrorProperty$Builder.)]
    (when-let [data (lookup-entry config id :message)]
      (. builder message data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :violated-entities)]
      (. builder violatedEntities data))
    (.build builder)))


(defn cfn-analysis-analysis-source-entity-property-builder
  "The cfn-analysis-analysis-source-entity-property-builder function buildes out new instances of 
CfnAnalysis$AnalysisSourceEntityProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sourceTemplate` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-template` |"
  [stack id config]
  (let [builder (CfnAnalysis$AnalysisSourceEntityProperty$Builder.)]
    (when-let [data (lookup-entry config id :source-template)]
      (. builder sourceTemplate data))
    (.build builder)))


(defn cfn-analysis-analysis-source-template-property-builder
  "The cfn-analysis-analysis-source-template-property-builder function buildes out new instances of 
CfnAnalysis$AnalysisSourceTemplateProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arn` | java.lang.String | [[cdk.support/lookup-entry]] | `:arn` |
| `dataSetReferences` | java.util.List | [[cdk.support/lookup-entry]] | `:data-set-references` |"
  [stack id config]
  (let [builder (CfnAnalysis$AnalysisSourceTemplateProperty$Builder.)]
    (when-let [data (lookup-entry config id :arn)]
      (. builder arn data))
    (when-let [data (lookup-entry config id :data-set-references)]
      (. builder dataSetReferences data))
    (.build builder)))


(defn cfn-analysis-anchor-date-configuration-property-builder
  "The cfn-analysis-anchor-date-configuration-property-builder function buildes out new instances of 
CfnAnalysis$AnchorDateConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `anchorOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:anchor-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |"
  [stack id config]
  (let [builder (CfnAnalysis$AnchorDateConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :anchor-option)]
      (. builder anchorOption data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (.build builder)))


(defn cfn-analysis-arc-axis-configuration-property-builder
  "The cfn-analysis-arc-axis-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ArcAxisConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `range` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range` |
| `reserveRange` | java.lang.Number | [[cdk.support/lookup-entry]] | `:reserve-range` |"
  [stack id config]
  (let [builder (CfnAnalysis$ArcAxisConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :range)]
      (. builder range data))
    (when-let [data (lookup-entry config id :reserve-range)]
      (. builder reserveRange data))
    (.build builder)))


(defn cfn-analysis-arc-axis-display-range-property-builder
  "The cfn-analysis-arc-axis-display-range-property-builder function buildes out new instances of 
CfnAnalysis$ArcAxisDisplayRangeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `max` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max` |
| `min` | java.lang.Number | [[cdk.support/lookup-entry]] | `:min` |"
  [stack id config]
  (let [builder (CfnAnalysis$ArcAxisDisplayRangeProperty$Builder.)]
    (when-let [data (lookup-entry config id :max)]
      (. builder max data))
    (when-let [data (lookup-entry config id :min)]
      (. builder min data))
    (.build builder)))


(defn cfn-analysis-arc-configuration-property-builder
  "The cfn-analysis-arc-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ArcConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:arc-angle` |
| `arcThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:arc-thickness` |"
  [stack id config]
  (let [builder (CfnAnalysis$ArcConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :arc-angle)]
      (. builder arcAngle data))
    (when-let [data (lookup-entry config id :arc-thickness)]
      (. builder arcThickness data))
    (.build builder)))


(defn cfn-analysis-arc-options-property-builder
  "The cfn-analysis-arc-options-property-builder function buildes out new instances of 
CfnAnalysis$ArcOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:arc-thickness` |"
  [stack id config]
  (let [builder (CfnAnalysis$ArcOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :arc-thickness)]
      (. builder arcThickness data))
    (.build builder)))


(defn cfn-analysis-asset-options-property-builder
  "The cfn-analysis-asset-options-property-builder function buildes out new instances of 
CfnAnalysis$AssetOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `timezone` | java.lang.String | [[cdk.support/lookup-entry]] | `:timezone` |
| `weekStart` | java.lang.String | [[cdk.support/lookup-entry]] | `:week-start` |"
  [stack id config]
  (let [builder (CfnAnalysis$AssetOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :timezone)]
      (. builder timezone data))
    (when-let [data (lookup-entry config id :week-start)]
      (. builder weekStart data))
    (.build builder)))


(defn cfn-analysis-attribute-aggregation-function-property-builder
  "The cfn-analysis-attribute-aggregation-function-property-builder function buildes out new instances of 
CfnAnalysis$AttributeAggregationFunctionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleAttributeAggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-attribute-aggregation` |
| `valueForMultipleValues` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-for-multiple-values` |"
  [stack id config]
  (let [builder (CfnAnalysis$AttributeAggregationFunctionProperty$Builder.)]
    (when-let [data (lookup-entry config id :simple-attribute-aggregation)]
      (. builder simpleAttributeAggregation data))
    (when-let [data (lookup-entry config id :value-for-multiple-values)]
      (. builder valueForMultipleValues data))
    (.build builder)))


(defn cfn-analysis-axis-data-options-property-builder
  "The cfn-analysis-axis-data-options-property-builder function buildes out new instances of 
CfnAnalysis$AxisDataOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateAxisOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-axis-options` |
| `numericAxisOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-axis-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$AxisDataOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-axis-options)]
      (. builder dateAxisOptions data))
    (when-let [data (lookup-entry config id :numeric-axis-options)]
      (. builder numericAxisOptions data))
    (.build builder)))


(defn cfn-analysis-axis-display-min-max-range-property-builder
  "The cfn-analysis-axis-display-min-max-range-property-builder function buildes out new instances of 
CfnAnalysis$AxisDisplayMinMaxRangeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `maximum` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum` |
| `minimum` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum` |"
  [stack id config]
  (let [builder (CfnAnalysis$AxisDisplayMinMaxRangeProperty$Builder.)]
    (when-let [data (lookup-entry config id :maximum)]
      (. builder maximum data))
    (when-let [data (lookup-entry config id :minimum)]
      (. builder minimum data))
    (.build builder)))


(defn cfn-analysis-axis-display-options-property-builder
  "The cfn-analysis-axis-display-options-property-builder function buildes out new instances of 
CfnAnalysis$AxisDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisLineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-line-visibility` |
| `axisOffset` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-offset` |
| `dataOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDataOptionsProperty | [[cdk.support/lookup-entry]] | `:data-options` |
| `gridLineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:grid-line-visibility` |
| `scrollbarOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ScrollBarOptionsProperty | [[cdk.support/lookup-entry]] | `:scrollbar-options` |
| `tickLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisTickLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:tick-label-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$AxisDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-line-visibility)]
      (. builder axisLineVisibility data))
    (when-let [data (lookup-entry config id :axis-offset)]
      (. builder axisOffset data))
    (when-let [data (lookup-entry config id :data-options)]
      (. builder dataOptions data))
    (when-let [data (lookup-entry config id :grid-line-visibility)]
      (. builder gridLineVisibility data))
    (when-let [data (lookup-entry config id :scrollbar-options)]
      (. builder scrollbarOptions data))
    (when-let [data (lookup-entry config id :tick-label-options)]
      (. builder tickLabelOptions data))
    (.build builder)))


(defn cfn-analysis-axis-display-range-property-builder
  "The cfn-analysis-axis-display-range-property-builder function buildes out new instances of 
CfnAnalysis$AxisDisplayRangeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataDriven` | java.lang.Object | [[cdk.support/lookup-entry]] | `:data-driven` |
| `minMax` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:min-max` |"
  [stack id config]
  (let [builder (CfnAnalysis$AxisDisplayRangeProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-driven)]
      (. builder dataDriven data))
    (when-let [data (lookup-entry config id :min-max)]
      (. builder minMax data))
    (.build builder)))


(defn cfn-analysis-axis-label-options-property-builder
  "The cfn-analysis-axis-label-options-property-builder function buildes out new instances of 
CfnAnalysis$AxisLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `applyTo` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:apply-to` |
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$AxisLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :apply-to)]
      (. builder applyTo data))
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (.build builder)))


(defn cfn-analysis-axis-label-reference-options-property-builder
  "The cfn-analysis-axis-label-reference-options-property-builder function buildes out new instances of 
CfnAnalysis$AxisLabelReferenceOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$AxisLabelReferenceOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (.build builder)))


(defn cfn-analysis-axis-linear-scale-property-builder
  "The cfn-analysis-axis-linear-scale-property-builder function buildes out new instances of 
CfnAnalysis$AxisLinearScaleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `stepCount` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-count` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |"
  [stack id config]
  (let [builder (CfnAnalysis$AxisLinearScaleProperty$Builder.)]
    (when-let [data (lookup-entry config id :step-count)]
      (. builder stepCount data))
    (when-let [data (lookup-entry config id :step-size)]
      (. builder stepSize data))
    (.build builder)))


(defn cfn-analysis-axis-logarithmic-scale-property-builder
  "The cfn-analysis-axis-logarithmic-scale-property-builder function buildes out new instances of 
CfnAnalysis$AxisLogarithmicScaleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `base` | java.lang.Number | [[cdk.support/lookup-entry]] | `:base` |"
  [stack id config]
  (let [builder (CfnAnalysis$AxisLogarithmicScaleProperty$Builder.)]
    (when-let [data (lookup-entry config id :base)]
      (. builder base data))
    (.build builder)))


(defn cfn-analysis-axis-scale-property-builder
  "The cfn-analysis-axis-scale-property-builder function buildes out new instances of 
CfnAnalysis$AxisScaleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `linear` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisLinearScaleProperty | [[cdk.support/lookup-entry]] | `:linear` |
| `logarithmic` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisLogarithmicScaleProperty | [[cdk.support/lookup-entry]] | `:logarithmic` |"
  [stack id config]
  (let [builder (CfnAnalysis$AxisScaleProperty$Builder.)]
    (when-let [data (lookup-entry config id :linear)]
      (. builder linear data))
    (when-let [data (lookup-entry config id :logarithmic)]
      (. builder logarithmic data))
    (.build builder)))


(defn cfn-analysis-axis-tick-label-options-property-builder
  "The cfn-analysis-axis-tick-label-options-property-builder function buildes out new instances of 
CfnAnalysis$AxisTickLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `labelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:label-options` |
| `rotationAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:rotation-angle` |"
  [stack id config]
  (let [builder (CfnAnalysis$AxisTickLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :label-options)]
      (. builder labelOptions data))
    (when-let [data (lookup-entry config id :rotation-angle)]
      (. builder rotationAngle data))
    (.build builder)))


(defn cfn-analysis-bar-chart-aggregated-field-wells-property-builder
  "The cfn-analysis-bar-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$BarChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | java.util.List | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `smallMultiples` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$BarChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :small-multiples)]
      (. builder smallMultiples data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-bar-chart-configuration-property-builder
  "The cfn-analysis-bar-chart-configuration-property-builder function buildes out new instances of 
CfnAnalysis$BarChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barsArrangement` | java.lang.String | [[cdk.support/lookup-entry]] | `:bars-arrangement` |
| `categoryAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `contributionAnalysisDefaults` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `orientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:orientation` |
| `referenceLines` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `smallMultiplesOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SmallMultiplesOptionsProperty | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$BarChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-axis` |
| `valueLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnAnalysis$BarChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :bars-arrangement)]
      (. builder barsArrangement data))
    (when-let [data (lookup-entry config id :category-axis)]
      (. builder categoryAxis data))
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :color-label-options)]
      (. builder colorLabelOptions data))
    (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
      (. builder contributionAnalysisDefaults data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :orientation)]
      (. builder orientation data))
    (when-let [data (lookup-entry config id :reference-lines)]
      (. builder referenceLines data))
    (when-let [data (lookup-entry config id :small-multiples-options)]
      (. builder smallMultiplesOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :value-axis)]
      (. builder valueAxis data))
    (when-let [data (lookup-entry config id :value-label-options)]
      (. builder valueLabelOptions data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-analysis-bar-chart-field-wells-property-builder
  "The cfn-analysis-bar-chart-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$BarChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bar-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$BarChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bar-chart-aggregated-field-wells)]
      (. builder barChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-bar-chart-sort-configuration-property-builder
  "The cfn-analysis-bar-chart-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$BarChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | java.util.List | [[cdk.support/lookup-entry]] | `:color-sort` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |"
  [stack id config]
  (let [builder (CfnAnalysis$BarChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :color-items-limit)]
      (. builder colorItemsLimit data))
    (when-let [data (lookup-entry config id :color-sort)]
      (. builder colorSort data))
    (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
      (. builder smallMultiplesLimitConfiguration data))
    (when-let [data (lookup-entry config id :small-multiples-sort)]
      (. builder smallMultiplesSort data))
    (.build builder)))


(defn cfn-analysis-bar-chart-visual-property-builder
  "The cfn-analysis-bar-chart-visual-property-builder function buildes out new instances of 
CfnAnalysis$BarChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$BarChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$BarChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-bin-count-options-property-builder
  "The cfn-analysis-bin-count-options-property-builder function buildes out new instances of 
CfnAnalysis$BinCountOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$BinCountOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-bin-width-options-property-builder
  "The cfn-analysis-bin-width-options-property-builder function buildes out new instances of 
CfnAnalysis$BinWidthOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binCountLimit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:bin-count-limit` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$BinWidthOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bin-count-limit)]
      (. builder binCountLimit data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-body-section-configuration-property-builder
  "The cfn-analysis-body-section-configuration-property-builder function buildes out new instances of 
CfnAnalysis$BodySectionConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | software.amazon.awscdk.services.quicksight.CfnAnalysis$BodySectionContentProperty | [[cdk.support/lookup-entry]] | `:content` |
| `pageBreakConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:page-break-configuration` |
| `sectionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:section-id` |
| `style` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style` |"
  [stack id config]
  (let [builder (CfnAnalysis$BodySectionConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :content)]
      (. builder content data))
    (when-let [data (lookup-entry config id :page-break-configuration)]
      (. builder pageBreakConfiguration data))
    (when-let [data (lookup-entry config id :section-id)]
      (. builder sectionId data))
    (when-let [data (lookup-entry config id :style)]
      (. builder style data))
    (.build builder)))


(defn cfn-analysis-body-section-content-property-builder
  "The cfn-analysis-body-section-content-property-builder function buildes out new instances of 
CfnAnalysis$BodySectionContentProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `layout` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SectionLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:layout` |"
  [stack id config]
  (let [builder (CfnAnalysis$BodySectionContentProperty$Builder.)]
    (when-let [data (lookup-entry config id :layout)]
      (. builder layout data))
    (.build builder)))


(defn cfn-analysis-box-plot-aggregated-field-wells-property-builder
  "The cfn-analysis-box-plot-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$BoxPlotAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-by` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$BoxPlotAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :group-by)]
      (. builder groupBy data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-box-plot-chart-configuration-property-builder
  "The cfn-analysis-box-plot-chart-configuration-property-builder function buildes out new instances of 
CfnAnalysis$BoxPlotChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `boxPlotOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$BoxPlotOptionsProperty | [[cdk.support/lookup-entry]] | `:box-plot-options` |
| `categoryAxis` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | java.util.List | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnAnalysis$BoxPlotChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :box-plot-options)]
      (. builder boxPlotOptions data))
    (when-let [data (lookup-entry config id :category-axis)]
      (. builder categoryAxis data))
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
      (. builder primaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
      (. builder primaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :reference-lines)]
      (. builder referenceLines data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-analysis-box-plot-field-wells-property-builder
  "The cfn-analysis-box-plot-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$BoxPlotFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `boxPlotAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$BoxPlotAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:box-plot-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$BoxPlotFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :box-plot-aggregated-field-wells)]
      (. builder boxPlotAggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-box-plot-options-property-builder
  "The cfn-analysis-box-plot-options-property-builder function buildes out new instances of 
CfnAnalysis$BoxPlotOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `allDataPointsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:all-data-points-visibility` |
| `outlierVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:outlier-visibility` |
| `styleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$BoxPlotOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :all-data-points-visibility)]
      (. builder allDataPointsVisibility data))
    (when-let [data (lookup-entry config id :outlier-visibility)]
      (. builder outlierVisibility data))
    (when-let [data (lookup-entry config id :style-options)]
      (. builder styleOptions data))
    (.build builder)))


(defn cfn-analysis-box-plot-sort-configuration-property-builder
  "The cfn-analysis-box-plot-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$BoxPlotSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `paginationConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PaginationConfigurationProperty | [[cdk.support/lookup-entry]] | `:pagination-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$BoxPlotSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :pagination-configuration)]
      (. builder paginationConfiguration data))
    (.build builder)))


(defn cfn-analysis-box-plot-style-options-property-builder
  "The cfn-analysis-box-plot-style-options-property-builder function buildes out new instances of 
CfnAnalysis$BoxPlotStyleOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fillStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:fill-style` |"
  [stack id config]
  (let [builder (CfnAnalysis$BoxPlotStyleOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :fill-style)]
      (. builder fillStyle data))
    (.build builder)))


(defn cfn-analysis-box-plot-visual-property-builder
  "The cfn-analysis-box-plot-visual-property-builder function buildes out new instances of 
CfnAnalysis$BoxPlotVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$BoxPlotChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$BoxPlotVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-builder
  "The cfn-analysis-builder function buildes out new instances of 
CfnAnalysis$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `analysisId` | java.lang.String | [[cdk.support/lookup-entry]] | `:analysis-id` |
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `definition` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:definition` |
| `errors` | java.util.List | [[cdk.support/lookup-entry]] | `:errors` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameters` |
| `permissions` | java.util.List | [[cdk.support/lookup-entry]] | `:permissions` |
| `sheets` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sheets` |
| `sourceEntity` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AnalysisSourceEntityProperty | [[cdk.support/lookup-entry]] | `:source-entity` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `themeArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:theme-arn` |
| `validationStrategy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:validation-strategy` |"
  [stack id config]
  (let [builder (CfnAnalysis$Builder/create stack id)]
    (when-let [data (lookup-entry config id :analysis-id)]
      (. builder analysisId data))
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :definition)]
      (. builder definition data))
    (when-let [data (lookup-entry config id :errors)]
      (. builder errors data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :parameters)]
      (. builder parameters data))
    (when-let [data (lookup-entry config id :permissions)]
      (. builder permissions data))
    (when-let [data (lookup-entry config id :sheets)]
      (. builder sheets data))
    (when-let [data (lookup-entry config id :source-entity)]
      (. builder sourceEntity data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (when-let [data (lookup-entry config id :tags)]
      (. builder tags data))
    (when-let [data (lookup-entry config id :theme-arn)]
      (. builder themeArn data))
    (when-let [data (lookup-entry config id :validation-strategy)]
      (. builder validationStrategy data))
    (.build builder)))


(defn cfn-analysis-calculated-field-property-builder
  "The cfn-analysis-calculated-field-property-builder function buildes out new instances of 
CfnAnalysis$CalculatedFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |"
  [stack id config]
  (let [builder (CfnAnalysis$CalculatedFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (.build builder)))


(defn cfn-analysis-calculated-measure-field-property-builder
  "The cfn-analysis-calculated-measure-field-property-builder function buildes out new instances of 
CfnAnalysis$CalculatedMeasureFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$CalculatedMeasureFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (.build builder)))


(defn cfn-analysis-cascading-control-configuration-property-builder
  "The cfn-analysis-cascading-control-configuration-property-builder function buildes out new instances of 
CfnAnalysis$CascadingControlConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sourceControls` | java.util.List | [[cdk.support/lookup-entry]] | `:source-controls` |"
  [stack id config]
  (let [builder (CfnAnalysis$CascadingControlConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :source-controls)]
      (. builder sourceControls data))
    (.build builder)))


(defn cfn-analysis-cascading-control-source-property-builder
  "The cfn-analysis-cascading-control-source-property-builder function buildes out new instances of 
CfnAnalysis$CascadingControlSourceProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnToMatch` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-to-match` |
| `sourceSheetControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-sheet-control-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$CascadingControlSourceProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-to-match)]
      (. builder columnToMatch data))
    (when-let [data (lookup-entry config id :source-sheet-control-id)]
      (. builder sourceSheetControlId data))
    (.build builder)))


(defn cfn-analysis-categorical-dimension-field-property-builder
  "The cfn-analysis-categorical-dimension-field-property-builder function buildes out new instances of 
CfnAnalysis$CategoricalDimensionFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$StringFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$CategoricalDimensionFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-analysis-categorical-measure-field-property-builder
  "The cfn-analysis-categorical-measure-field-property-builder function buildes out new instances of 
CfnAnalysis$CategoricalMeasureFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$CategoricalMeasureFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (.build builder)))


(defn cfn-analysis-category-drill-down-filter-property-builder
  "The cfn-analysis-category-drill-down-filter-property-builder function buildes out new instances of 
CfnAnalysis$CategoryDrillDownFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |"
  [stack id config]
  (let [builder (CfnAnalysis$CategoryDrillDownFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-values)]
      (. builder categoryValues data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (.build builder)))


(defn cfn-analysis-category-filter-configuration-property-builder
  "The cfn-analysis-category-filter-configuration-property-builder function buildes out new instances of 
CfnAnalysis$CategoryFilterConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customFilterConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CustomFilterConfigurationProperty | [[cdk.support/lookup-entry]] | `:custom-filter-configuration` |
| `customFilterListConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CustomFilterListConfigurationProperty | [[cdk.support/lookup-entry]] | `:custom-filter-list-configuration` |
| `filterListConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-list-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$CategoryFilterConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-filter-configuration)]
      (. builder customFilterConfiguration data))
    (when-let [data (lookup-entry config id :custom-filter-list-configuration)]
      (. builder customFilterListConfiguration data))
    (when-let [data (lookup-entry config id :filter-list-configuration)]
      (. builder filterListConfiguration data))
    (.build builder)))


(defn cfn-analysis-category-filter-property-builder
  "The cfn-analysis-category-filter-property-builder function buildes out new instances of 
CfnAnalysis$CategoryFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `configuration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:configuration` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$CategoryFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :configuration)]
      (. builder configuration data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (.build builder)))


(defn cfn-analysis-chart-axis-label-options-property-builder
  "The cfn-analysis-chart-axis-label-options-property-builder function buildes out new instances of 
CfnAnalysis$ChartAxisLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:axis-label-options` |
| `sortIconVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-icon-visibility` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$ChartAxisLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-label-options)]
      (. builder axisLabelOptions data))
    (when-let [data (lookup-entry config id :sort-icon-visibility)]
      (. builder sortIconVisibility data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-cluster-marker-configuration-property-builder
  "The cfn-analysis-cluster-marker-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ClusterMarkerConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `clusterMarker` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cluster-marker` |"
  [stack id config]
  (let [builder (CfnAnalysis$ClusterMarkerConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :cluster-marker)]
      (. builder clusterMarker data))
    (.build builder)))


(defn cfn-analysis-cluster-marker-property-builder
  "The cfn-analysis-cluster-marker-property-builder function buildes out new instances of 
CfnAnalysis$ClusterMarkerProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleClusterMarker` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:simple-cluster-marker` |"
  [stack id config]
  (let [builder (CfnAnalysis$ClusterMarkerProperty$Builder.)]
    (when-let [data (lookup-entry config id :simple-cluster-marker)]
      (. builder simpleClusterMarker data))
    (.build builder)))


(defn cfn-analysis-color-scale-property-builder
  "The cfn-analysis-color-scale-property-builder function buildes out new instances of 
CfnAnalysis$ColorScaleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorFillType` | java.lang.String | [[cdk.support/lookup-entry]] | `:color-fill-type` |
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
| `nullValueColor` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataColorProperty | [[cdk.support/lookup-entry]] | `:null-value-color` |"
  [stack id config]
  (let [builder (CfnAnalysis$ColorScaleProperty$Builder.)]
    (when-let [data (lookup-entry config id :color-fill-type)]
      (. builder colorFillType data))
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :null-value-color)]
      (. builder nullValueColor data))
    (.build builder)))


(defn cfn-analysis-colors-configuration-property-builder
  "The cfn-analysis-colors-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ColorsConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customColors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-colors` |"
  [stack id config]
  (let [builder (CfnAnalysis$ColorsConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-colors)]
      (. builder customColors data))
    (.build builder)))


(defn cfn-analysis-column-configuration-property-builder
  "The cfn-analysis-column-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ColumnConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorsConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColorsConfigurationProperty | [[cdk.support/lookup-entry]] | `:colors-configuration` |
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `role` | java.lang.String | [[cdk.support/lookup-entry]] | `:role` |"
  [stack id config]
  (let [builder (CfnAnalysis$ColumnConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :colors-configuration)]
      (. builder colorsConfiguration data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (when-let [data (lookup-entry config id :role)]
      (. builder role data))
    (.build builder)))


(defn cfn-analysis-column-hierarchy-property-builder
  "The cfn-analysis-column-hierarchy-property-builder function buildes out new instances of 
CfnAnalysis$ColumnHierarchyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeHierarchy` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DateTimeHierarchyProperty | [[cdk.support/lookup-entry]] | `:date-time-hierarchy` |
| `explicitHierarchy` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ExplicitHierarchyProperty | [[cdk.support/lookup-entry]] | `:explicit-hierarchy` |
| `predefinedHierarchy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:predefined-hierarchy` |"
  [stack id config]
  (let [builder (CfnAnalysis$ColumnHierarchyProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-hierarchy)]
      (. builder dateTimeHierarchy data))
    (when-let [data (lookup-entry config id :explicit-hierarchy)]
      (. builder explicitHierarchy data))
    (when-let [data (lookup-entry config id :predefined-hierarchy)]
      (. builder predefinedHierarchy data))
    (.build builder)))


(defn cfn-analysis-column-identifier-property-builder
  "The cfn-analysis-column-identifier-property-builder function buildes out new instances of 
CfnAnalysis$ColumnIdentifierProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |"
  [stack id config]
  (let [builder (CfnAnalysis$ColumnIdentifierProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-name)]
      (. builder columnName data))
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (.build builder)))


(defn cfn-analysis-column-sort-property-builder
  "The cfn-analysis-column-sort-property-builder function buildes out new instances of 
CfnAnalysis$ColumnSortProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `sortBy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-by` |"
  [stack id config]
  (let [builder (CfnAnalysis$ColumnSortProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :direction)]
      (. builder direction data))
    (when-let [data (lookup-entry config id :sort-by)]
      (. builder sortBy data))
    (.build builder)))


(defn cfn-analysis-column-tooltip-item-property-builder
  "The cfn-analysis-column-tooltip-item-property-builder function buildes out new instances of 
CfnAnalysis$ColumnTooltipItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregation` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `label` | java.lang.String | [[cdk.support/lookup-entry]] | `:label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$ColumnTooltipItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation)]
      (. builder aggregation data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :label)]
      (. builder label data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-combo-chart-aggregated-field-wells-property-builder
  "The cfn-analysis-combo-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$ComboChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bar-values` |
| `category` | java.util.List | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `lineValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-values` |"
  [stack id config]
  (let [builder (CfnAnalysis$ComboChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bar-values)]
      (. builder barValues data))
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :line-values)]
      (. builder lineValues data))
    (.build builder)))


(defn cfn-analysis-combo-chart-configuration-property-builder
  "The cfn-analysis-combo-chart-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ComboChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barDataLabels` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:bar-data-labels` |
| `barsArrangement` | java.lang.String | [[cdk.support/lookup-entry]] | `:bars-arrangement` |
| `categoryAxis` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `lineDataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-data-labels` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | java.util.List | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `secondaryYAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:secondary-y-axis-display-options` |
| `secondaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:secondary-y-axis-label-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ComboChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnAnalysis$ComboChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :bar-data-labels)]
      (. builder barDataLabels data))
    (when-let [data (lookup-entry config id :bars-arrangement)]
      (. builder barsArrangement data))
    (when-let [data (lookup-entry config id :category-axis)]
      (. builder categoryAxis data))
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :color-label-options)]
      (. builder colorLabelOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :line-data-labels)]
      (. builder lineDataLabels data))
    (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
      (. builder primaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
      (. builder primaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :reference-lines)]
      (. builder referenceLines data))
    (when-let [data (lookup-entry config id :secondary-y-axis-display-options)]
      (. builder secondaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :secondary-y-axis-label-options)]
      (. builder secondaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-analysis-combo-chart-field-wells-property-builder
  "The cfn-analysis-combo-chart-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$ComboChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comboChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:combo-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$ComboChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :combo-chart-aggregated-field-wells)]
      (. builder comboChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-combo-chart-sort-configuration-property-builder
  "The cfn-analysis-combo-chart-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ComboChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | java.util.List | [[cdk.support/lookup-entry]] | `:color-sort` |"
  [stack id config]
  (let [builder (CfnAnalysis$ComboChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :color-items-limit)]
      (. builder colorItemsLimit data))
    (when-let [data (lookup-entry config id :color-sort)]
      (. builder colorSort data))
    (.build builder)))


(defn cfn-analysis-combo-chart-visual-property-builder
  "The cfn-analysis-combo-chart-visual-property-builder function buildes out new instances of 
CfnAnalysis$ComboChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ComboChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$ComboChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-comparison-configuration-property-builder
  "The cfn-analysis-comparison-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ComparisonConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comparisonFormat` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:comparison-format` |
| `comparisonMethod` | java.lang.String | [[cdk.support/lookup-entry]] | `:comparison-method` |"
  [stack id config]
  (let [builder (CfnAnalysis$ComparisonConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :comparison-format)]
      (. builder comparisonFormat data))
    (when-let [data (lookup-entry config id :comparison-method)]
      (. builder comparisonMethod data))
    (.build builder)))


(defn cfn-analysis-comparison-format-configuration-property-builder
  "The cfn-analysis-comparison-format-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ComparisonFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `numberDisplayFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:number-display-format-configuration` |
| `percentageDisplayFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PercentageDisplayFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:percentage-display-format-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$ComparisonFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :number-display-format-configuration)]
      (. builder numberDisplayFormatConfiguration data))
    (when-let [data (lookup-entry config id :percentage-display-format-configuration)]
      (. builder percentageDisplayFormatConfiguration data))
    (.build builder)))


(defn cfn-analysis-computation-property-builder
  "The cfn-analysis-computation-property-builder function buildes out new instances of 
CfnAnalysis$ComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `forecast` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:forecast` |
| `growthRate` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GrowthRateComputationProperty | [[cdk.support/lookup-entry]] | `:growth-rate` |
| `maximumMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:maximum-minimum` |
| `metricComparison` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MetricComparisonComputationProperty | [[cdk.support/lookup-entry]] | `:metric-comparison` |
| `periodOverPeriod` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:period-over-period` |
| `periodToDate` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PeriodToDateComputationProperty | [[cdk.support/lookup-entry]] | `:period-to-date` |
| `topBottomMovers` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TopBottomMoversComputationProperty | [[cdk.support/lookup-entry]] | `:top-bottom-movers` |
| `topBottomRanked` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TopBottomRankedComputationProperty | [[cdk.support/lookup-entry]] | `:top-bottom-ranked` |
| `totalAggregation` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TotalAggregationComputationProperty | [[cdk.support/lookup-entry]] | `:total-aggregation` |
| `uniqueValues` | software.amazon.awscdk.services.quicksight.CfnAnalysis$UniqueValuesComputationProperty | [[cdk.support/lookup-entry]] | `:unique-values` |"
  [stack id config]
  (let [builder (CfnAnalysis$ComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :forecast)]
      (. builder forecast data))
    (when-let [data (lookup-entry config id :growth-rate)]
      (. builder growthRate data))
    (when-let [data (lookup-entry config id :maximum-minimum)]
      (. builder maximumMinimum data))
    (when-let [data (lookup-entry config id :metric-comparison)]
      (. builder metricComparison data))
    (when-let [data (lookup-entry config id :period-over-period)]
      (. builder periodOverPeriod data))
    (when-let [data (lookup-entry config id :period-to-date)]
      (. builder periodToDate data))
    (when-let [data (lookup-entry config id :top-bottom-movers)]
      (. builder topBottomMovers data))
    (when-let [data (lookup-entry config id :top-bottom-ranked)]
      (. builder topBottomRanked data))
    (when-let [data (lookup-entry config id :total-aggregation)]
      (. builder totalAggregation data))
    (when-let [data (lookup-entry config id :unique-values)]
      (. builder uniqueValues data))
    (.build builder)))


(defn cfn-analysis-conditional-formatting-color-property-builder
  "The cfn-analysis-conditional-formatting-color-property-builder function buildes out new instances of 
CfnAnalysis$ConditionalFormattingColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `gradient` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:gradient` |
| `solid` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingSolidColorProperty | [[cdk.support/lookup-entry]] | `:solid` |"
  [stack id config]
  (let [builder (CfnAnalysis$ConditionalFormattingColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :gradient)]
      (. builder gradient data))
    (when-let [data (lookup-entry config id :solid)]
      (. builder solid data))
    (.build builder)))


(defn cfn-analysis-conditional-formatting-custom-icon-condition-property-builder
  "The cfn-analysis-conditional-formatting-custom-icon-condition-property-builder function buildes out new instances of 
CfnAnalysis$ConditionalFormattingCustomIconConditionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `displayConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-configuration` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `iconOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingCustomIconOptionsProperty | [[cdk.support/lookup-entry]] | `:icon-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$ConditionalFormattingCustomIconConditionProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :display-configuration)]
      (. builder displayConfiguration data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (when-let [data (lookup-entry config id :icon-options)]
      (. builder iconOptions data))
    (.build builder)))


(defn cfn-analysis-conditional-formatting-custom-icon-options-property-builder
  "The cfn-analysis-conditional-formatting-custom-icon-options-property-builder function buildes out new instances of 
CfnAnalysis$ConditionalFormattingCustomIconOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon` |
| `unicodeIcon` | java.lang.String | [[cdk.support/lookup-entry]] | `:unicode-icon` |"
  [stack id config]
  (let [builder (CfnAnalysis$ConditionalFormattingCustomIconOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :unicode-icon)]
      (. builder unicodeIcon data))
    (.build builder)))


(defn cfn-analysis-conditional-formatting-gradient-color-property-builder
  "The cfn-analysis-conditional-formatting-gradient-color-property-builder function buildes out new instances of 
CfnAnalysis$ConditionalFormattingGradientColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |"
  [stack id config]
  (let [builder (CfnAnalysis$ConditionalFormattingGradientColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (.build builder)))


(defn cfn-analysis-conditional-formatting-icon-display-configuration-property-builder
  "The cfn-analysis-conditional-formatting-icon-display-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ConditionalFormattingIconDisplayConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `iconDisplayOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon-display-option` |"
  [stack id config]
  (let [builder (CfnAnalysis$ConditionalFormattingIconDisplayConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon-display-option)]
      (. builder iconDisplayOption data))
    (.build builder)))


(defn cfn-analysis-conditional-formatting-icon-property-builder
  "The cfn-analysis-conditional-formatting-icon-property-builder function buildes out new instances of 
CfnAnalysis$ConditionalFormattingIconProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customCondition` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingCustomIconConditionProperty | [[cdk.support/lookup-entry]] | `:custom-condition` |
| `iconSet` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon-set` |"
  [stack id config]
  (let [builder (CfnAnalysis$ConditionalFormattingIconProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-condition)]
      (. builder customCondition data))
    (when-let [data (lookup-entry config id :icon-set)]
      (. builder iconSet data))
    (.build builder)))


(defn cfn-analysis-conditional-formatting-icon-set-property-builder
  "The cfn-analysis-conditional-formatting-icon-set-property-builder function buildes out new instances of 
CfnAnalysis$ConditionalFormattingIconSetProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `iconSetType` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon-set-type` |"
  [stack id config]
  (let [builder (CfnAnalysis$ConditionalFormattingIconSetProperty$Builder.)]
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (when-let [data (lookup-entry config id :icon-set-type)]
      (. builder iconSetType data))
    (.build builder)))


(defn cfn-analysis-conditional-formatting-solid-color-property-builder
  "The cfn-analysis-conditional-formatting-solid-color-property-builder function buildes out new instances of 
CfnAnalysis$ConditionalFormattingSolidColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |"
  [stack id config]
  (let [builder (CfnAnalysis$ConditionalFormattingSolidColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (.build builder)))


(defn cfn-analysis-contribution-analysis-default-property-builder
  "The cfn-analysis-contribution-analysis-default-property-builder function buildes out new instances of 
CfnAnalysis$ContributionAnalysisDefaultProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contributorDimensions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:contributor-dimensions` |
| `measureFieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-field-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$ContributionAnalysisDefaultProperty$Builder.)]
    (when-let [data (lookup-entry config id :contributor-dimensions)]
      (. builder contributorDimensions data))
    (when-let [data (lookup-entry config id :measure-field-id)]
      (. builder measureFieldId data))
    (.build builder)))


(defn cfn-analysis-currency-display-format-configuration-property-builder
  "The cfn-analysis-currency-display-format-configuration-property-builder function buildes out new instances of 
CfnAnalysis$CurrencyDisplayFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NegativeValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numberScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:number-scale` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |
| `symbol` | java.lang.String | [[cdk.support/lookup-entry]] | `:symbol` |"
  [stack id config]
  (let [builder (CfnAnalysis$CurrencyDisplayFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :decimal-places-configuration)]
      (. builder decimalPlacesConfiguration data))
    (when-let [data (lookup-entry config id :negative-value-configuration)]
      (. builder negativeValueConfiguration data))
    (when-let [data (lookup-entry config id :null-value-format-configuration)]
      (. builder nullValueFormatConfiguration data))
    (when-let [data (lookup-entry config id :number-scale)]
      (. builder numberScale data))
    (when-let [data (lookup-entry config id :prefix)]
      (. builder prefix data))
    (when-let [data (lookup-entry config id :separator-configuration)]
      (. builder separatorConfiguration data))
    (when-let [data (lookup-entry config id :suffix)]
      (. builder suffix data))
    (when-let [data (lookup-entry config id :symbol)]
      (. builder symbol data))
    (.build builder)))


(defn cfn-analysis-custom-action-filter-operation-property-builder
  "The cfn-analysis-custom-action-filter-operation-property-builder function buildes out new instances of 
CfnAnalysis$CustomActionFilterOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `selectedFieldsConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-fields-configuration` |
| `targetVisualsConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilterOperationTargetVisualsConfigurationProperty | [[cdk.support/lookup-entry]] | `:target-visuals-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$CustomActionFilterOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :selected-fields-configuration)]
      (. builder selectedFieldsConfiguration data))
    (when-let [data (lookup-entry config id :target-visuals-configuration)]
      (. builder targetVisualsConfiguration data))
    (.build builder)))


(defn cfn-analysis-custom-action-navigation-operation-property-builder
  "The cfn-analysis-custom-action-navigation-operation-property-builder function buildes out new instances of 
CfnAnalysis$CustomActionNavigationOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `localNavigationConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:local-navigation-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$CustomActionNavigationOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :local-navigation-configuration)]
      (. builder localNavigationConfiguration data))
    (.build builder)))


(defn cfn-analysis-custom-action-set-parameters-operation-property-builder
  "The cfn-analysis-custom-action-set-parameters-operation-property-builder function buildes out new instances of 
CfnAnalysis$CustomActionSetParametersOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameterValueConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:parameter-value-configurations` |"
  [stack id config]
  (let [builder (CfnAnalysis$CustomActionSetParametersOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :parameter-value-configurations)]
      (. builder parameterValueConfigurations data))
    (.build builder)))


(defn cfn-analysis-custom-action-url-operation-property-builder
  "The cfn-analysis-custom-action-url-operation-property-builder function buildes out new instances of 
CfnAnalysis$CustomActionURLOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `urlTarget` | java.lang.String | [[cdk.support/lookup-entry]] | `:url-target` |
| `urlTemplate` | java.lang.String | [[cdk.support/lookup-entry]] | `:url-template` |"
  [stack id config]
  (let [builder (CfnAnalysis$CustomActionURLOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :url-target)]
      (. builder urlTarget data))
    (when-let [data (lookup-entry config id :url-template)]
      (. builder urlTemplate data))
    (.build builder)))


(defn cfn-analysis-custom-color-property-builder
  "The cfn-analysis-custom-color-property-builder function buildes out new instances of 
CfnAnalysis$CustomColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `specialValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:special-value` |"
  [stack id config]
  (let [builder (CfnAnalysis$CustomColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :field-value)]
      (. builder fieldValue data))
    (when-let [data (lookup-entry config id :special-value)]
      (. builder specialValue data))
    (.build builder)))


(defn cfn-analysis-custom-content-configuration-property-builder
  "The cfn-analysis-custom-content-configuration-property-builder function buildes out new instances of 
CfnAnalysis$CustomContentConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-type` |
| `contentUrl` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-url` |
| `imageScaling` | java.lang.String | [[cdk.support/lookup-entry]] | `:image-scaling` |"
  [stack id config]
  (let [builder (CfnAnalysis$CustomContentConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :content-type)]
      (. builder contentType data))
    (when-let [data (lookup-entry config id :content-url)]
      (. builder contentUrl data))
    (when-let [data (lookup-entry config id :image-scaling)]
      (. builder imageScaling data))
    (.build builder)))


(defn cfn-analysis-custom-content-visual-property-builder
  "The cfn-analysis-custom-content-visual-property-builder function buildes out new instances of 
CfnAnalysis$CustomContentVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CustomContentConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$CustomContentVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-custom-filter-configuration-property-builder
  "The cfn-analysis-custom-filter-configuration-property-builder function buildes out new instances of 
CfnAnalysis$CustomFilterConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-value` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$CustomFilterConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-value)]
      (. builder categoryValue data))
    (when-let [data (lookup-entry config id :match-operator)]
      (. builder matchOperator data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (.build builder)))


(defn cfn-analysis-custom-filter-list-configuration-property-builder
  "The cfn-analysis-custom-filter-list-configuration-property-builder function buildes out new instances of 
CfnAnalysis$CustomFilterListConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$CustomFilterListConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-values)]
      (. builder categoryValues data))
    (when-let [data (lookup-entry config id :match-operator)]
      (. builder matchOperator data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (.build builder)))


(defn cfn-analysis-custom-narrative-options-property-builder
  "The cfn-analysis-custom-narrative-options-property-builder function buildes out new instances of 
CfnAnalysis$CustomNarrativeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `narrative` | java.lang.String | [[cdk.support/lookup-entry]] | `:narrative` |"
  [stack id config]
  (let [builder (CfnAnalysis$CustomNarrativeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :narrative)]
      (. builder narrative data))
    (.build builder)))


(defn cfn-analysis-custom-parameter-values-property-builder
  "The cfn-analysis-custom-parameter-values-property-builder function buildes out new instances of 
CfnAnalysis$CustomParameterValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeValues` | java.util.List | [[cdk.support/lookup-entry]] | `:date-time-values` |
| `decimalValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-values` |
| `integerValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:integer-values` |
| `stringValues` | java.util.List | [[cdk.support/lookup-entry]] | `:string-values` |"
  [stack id config]
  (let [builder (CfnAnalysis$CustomParameterValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-values)]
      (. builder dateTimeValues data))
    (when-let [data (lookup-entry config id :decimal-values)]
      (. builder decimalValues data))
    (when-let [data (lookup-entry config id :integer-values)]
      (. builder integerValues data))
    (when-let [data (lookup-entry config id :string-values)]
      (. builder stringValues data))
    (.build builder)))


(defn cfn-analysis-custom-values-configuration-property-builder
  "The cfn-analysis-custom-values-configuration-property-builder function buildes out new instances of 
CfnAnalysis$CustomValuesConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValues` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CustomParameterValuesProperty | [[cdk.support/lookup-entry]] | `:custom-values` |
| `includeNullValue` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:include-null-value` |"
  [stack id config]
  (let [builder (CfnAnalysis$CustomValuesConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-values)]
      (. builder customValues data))
    (when-let [data (lookup-entry config id :include-null-value)]
      (. builder includeNullValue data))
    (.build builder)))


(defn cfn-analysis-data-bars-options-property-builder
  "The cfn-analysis-data-bars-options-property-builder function buildes out new instances of 
CfnAnalysis$DataBarsOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `negativeColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:negative-color` |
| `positiveColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:positive-color` |"
  [stack id config]
  (let [builder (CfnAnalysis$DataBarsOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :negative-color)]
      (. builder negativeColor data))
    (when-let [data (lookup-entry config id :positive-color)]
      (. builder positiveColor data))
    (.build builder)))


(defn cfn-analysis-data-color-property-builder
  "The cfn-analysis-data-color-property-builder function buildes out new instances of 
CfnAnalysis$DataColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `dataValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:data-value` |"
  [stack id config]
  (let [builder (CfnAnalysis$DataColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :data-value)]
      (. builder dataValue data))
    (.build builder)))


(defn cfn-analysis-data-field-series-item-property-builder
  "The cfn-analysis-data-field-series-item-property-builder function buildes out new instances of 
CfnAnalysis$DataFieldSeriesItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `settings` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LineChartSeriesSettingsProperty | [[cdk.support/lookup-entry]] | `:settings` |"
  [stack id config]
  (let [builder (CfnAnalysis$DataFieldSeriesItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-binding)]
      (. builder axisBinding data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :field-value)]
      (. builder fieldValue data))
    (when-let [data (lookup-entry config id :settings)]
      (. builder settings data))
    (.build builder)))


(defn cfn-analysis-data-label-options-property-builder
  "The cfn-analysis-data-label-options-property-builder function buildes out new instances of 
CfnAnalysis$DataLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-label-visibility` |
| `dataLabelTypes` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-label-types` |
| `labelColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-color` |
| `labelContent` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-content` |
| `labelFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label-font-configuration` |
| `measureLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-label-visibility` |
| `overlap` | java.lang.String | [[cdk.support/lookup-entry]] | `:overlap` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$DataLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-label-visibility)]
      (. builder categoryLabelVisibility data))
    (when-let [data (lookup-entry config id :data-label-types)]
      (. builder dataLabelTypes data))
    (when-let [data (lookup-entry config id :label-color)]
      (. builder labelColor data))
    (when-let [data (lookup-entry config id :label-content)]
      (. builder labelContent data))
    (when-let [data (lookup-entry config id :label-font-configuration)]
      (. builder labelFontConfiguration data))
    (when-let [data (lookup-entry config id :measure-label-visibility)]
      (. builder measureLabelVisibility data))
    (when-let [data (lookup-entry config id :overlap)]
      (. builder overlap data))
    (when-let [data (lookup-entry config id :position)]
      (. builder position data))
    (when-let [data (lookup-entry config id :totals-visibility)]
      (. builder totalsVisibility data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-data-label-type-property-builder
  "The cfn-analysis-data-label-type-property-builder function buildes out new instances of 
CfnAnalysis$DataLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathLabelType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-path-label-type` |
| `fieldLabelType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-label-type` |
| `maximumLabelType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:maximum-label-type` |
| `minimumLabelType` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MinimumLabelTypeProperty | [[cdk.support/lookup-entry]] | `:minimum-label-type` |
| `rangeEndsLabelType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-ends-label-type` |"
  [stack id config]
  (let [builder (CfnAnalysis$DataLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-path-label-type)]
      (. builder dataPathLabelType data))
    (when-let [data (lookup-entry config id :field-label-type)]
      (. builder fieldLabelType data))
    (when-let [data (lookup-entry config id :maximum-label-type)]
      (. builder maximumLabelType data))
    (when-let [data (lookup-entry config id :minimum-label-type)]
      (. builder minimumLabelType data))
    (when-let [data (lookup-entry config id :range-ends-label-type)]
      (. builder rangeEndsLabelType data))
    (.build builder)))


(defn cfn-analysis-data-path-color-property-builder
  "The cfn-analysis-data-path-color-property-builder function buildes out new instances of 
CfnAnalysis$DataPathColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `element` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:element` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnAnalysis$DataPathColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :element)]
      (. builder element data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-analysis-data-path-label-type-property-builder
  "The cfn-analysis-data-path-label-type-property-builder function buildes out new instances of 
CfnAnalysis$DataPathLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$DataPathLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :field-value)]
      (. builder fieldValue data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-data-path-sort-property-builder
  "The cfn-analysis-data-path-sort-property-builder function buildes out new instances of 
CfnAnalysis$DataPathSortProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `sortPaths` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-paths` |"
  [stack id config]
  (let [builder (CfnAnalysis$DataPathSortProperty$Builder.)]
    (when-let [data (lookup-entry config id :direction)]
      (. builder direction data))
    (when-let [data (lookup-entry config id :sort-paths)]
      (. builder sortPaths data))
    (.build builder)))


(defn cfn-analysis-data-path-type-property-builder
  "The cfn-analysis-data-path-type-property-builder function buildes out new instances of 
CfnAnalysis$DataPathTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pivotTableDataPathType` | java.lang.String | [[cdk.support/lookup-entry]] | `:pivot-table-data-path-type` |"
  [stack id config]
  (let [builder (CfnAnalysis$DataPathTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :pivot-table-data-path-type)]
      (. builder pivotTableDataPathType data))
    (.build builder)))


(defn cfn-analysis-data-path-value-property-builder
  "The cfn-analysis-data-path-value-property-builder function buildes out new instances of 
CfnAnalysis$DataPathValueProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-path-type` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |"
  [stack id config]
  (let [builder (CfnAnalysis$DataPathValueProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-path-type)]
      (. builder dataPathType data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :field-value)]
      (. builder fieldValue data))
    (.build builder)))


(defn cfn-analysis-data-set-identifier-declaration-property-builder
  "The cfn-analysis-data-set-identifier-declaration-property-builder function buildes out new instances of 
CfnAnalysis$DataSetIdentifierDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-arn` |
| `identifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:identifier` |"
  [stack id config]
  (let [builder (CfnAnalysis$DataSetIdentifierDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-set-arn)]
      (. builder dataSetArn data))
    (when-let [data (lookup-entry config id :identifier)]
      (. builder identifier data))
    (.build builder)))


(defn cfn-analysis-data-set-reference-property-builder
  "The cfn-analysis-data-set-reference-property-builder function buildes out new instances of 
CfnAnalysis$DataSetReferenceProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-arn` |
| `dataSetPlaceholder` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-placeholder` |"
  [stack id config]
  (let [builder (CfnAnalysis$DataSetReferenceProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-set-arn)]
      (. builder dataSetArn data))
    (when-let [data (lookup-entry config id :data-set-placeholder)]
      (. builder dataSetPlaceholder data))
    (.build builder)))


(defn cfn-analysis-date-axis-options-property-builder
  "The cfn-analysis-date-axis-options-property-builder function buildes out new instances of 
CfnAnalysis$DateAxisOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `missingDateVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:missing-date-visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$DateAxisOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :missing-date-visibility)]
      (. builder missingDateVisibility data))
    (.build builder)))


(defn cfn-analysis-date-dimension-field-property-builder
  "The cfn-analysis-date-dimension-field-property-builder function buildes out new instances of 
CfnAnalysis$DateDimensionFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `dateGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-granularity` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$DateDimensionFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :date-granularity)]
      (. builder dateGranularity data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-analysis-date-measure-field-property-builder
  "The cfn-analysis-date-measure-field-property-builder function buildes out new instances of 
CfnAnalysis$DateMeasureFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DateTimeFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$DateMeasureFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (.build builder)))


(defn cfn-analysis-date-time-default-values-property-builder
  "The cfn-analysis-date-time-default-values-property-builder function buildes out new instances of 
CfnAnalysis$DateTimeDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DynamicDefaultValueProperty | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `rollingDate` | software.amazon.awscdk.services.quicksight.CfnAnalysis$RollingDateConfigurationProperty | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |"
  [stack id config]
  (let [builder (CfnAnalysis$DateTimeDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :dynamic-value)]
      (. builder dynamicValue data))
    (when-let [data (lookup-entry config id :rolling-date)]
      (. builder rollingDate data))
    (when-let [data (lookup-entry config id :static-values)]
      (. builder staticValues data))
    (.build builder)))


(defn cfn-analysis-date-time-format-configuration-property-builder
  "The cfn-analysis-date-time-format-configuration-property-builder function buildes out new instances of 
CfnAnalysis$DateTimeFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numericFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumericFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:numeric-format-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$DateTimeFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-format)]
      (. builder dateTimeFormat data))
    (when-let [data (lookup-entry config id :null-value-format-configuration)]
      (. builder nullValueFormatConfiguration data))
    (when-let [data (lookup-entry config id :numeric-format-configuration)]
      (. builder numericFormatConfiguration data))
    (.build builder)))


(defn cfn-analysis-date-time-hierarchy-property-builder
  "The cfn-analysis-date-time-hierarchy-property-builder function buildes out new instances of 
CfnAnalysis$DateTimeHierarchyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `drillDownFilters` | java.util.List | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$DateTimeHierarchyProperty$Builder.)]
    (when-let [data (lookup-entry config id :drill-down-filters)]
      (. builder drillDownFilters data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-analysis-date-time-parameter-declaration-property-builder
  "The cfn-analysis-date-time-parameter-declaration-property-builder function buildes out new instances of 
CfnAnalysis$DateTimeParameterDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DateTimeDefaultValuesProperty | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
| `valueWhenUnset` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DateTimeValueWhenUnsetConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-when-unset` |"
  [stack id config]
  (let [builder (CfnAnalysis$DateTimeParameterDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-values)]
      (. builder defaultValues data))
    (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
      (. builder mappedDataSetParameters data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (when-let [data (lookup-entry config id :value-when-unset)]
      (. builder valueWhenUnset data))
    (.build builder)))


(defn cfn-analysis-date-time-parameter-property-builder
  "The cfn-analysis-date-time-parameter-property-builder function buildes out new instances of 
CfnAnalysis$DateTimeParameterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$DateTimeParameterProperty$Builder.)]
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-date-time-picker-control-display-options-property-builder
  "The cfn-analysis-date-time-picker-control-display-options-property-builder function buildes out new instances of 
CfnAnalysis$DateTimePickerControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$DateTimePickerControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-format)]
      (. builder dateTimeFormat data))
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-analysis-date-time-value-when-unset-configuration-property-builder
  "The cfn-analysis-date-time-value-when-unset-configuration-property-builder function buildes out new instances of 
CfnAnalysis$DateTimeValueWhenUnsetConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |"
  [stack id config]
  (let [builder (CfnAnalysis$DateTimeValueWhenUnsetConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-value)]
      (. builder customValue data))
    (when-let [data (lookup-entry config id :value-when-unset-option)]
      (. builder valueWhenUnsetOption data))
    (.build builder)))


(defn cfn-analysis-decimal-default-values-property-builder
  "The cfn-analysis-decimal-default-values-property-builder function buildes out new instances of 
CfnAnalysis$DecimalDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |"
  [stack id config]
  (let [builder (CfnAnalysis$DecimalDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :dynamic-value)]
      (. builder dynamicValue data))
    (when-let [data (lookup-entry config id :static-values)]
      (. builder staticValues data))
    (.build builder)))


(defn cfn-analysis-decimal-parameter-declaration-property-builder
  "The cfn-analysis-decimal-parameter-declaration-property-builder function buildes out new instances of 
CfnAnalysis$DecimalParameterDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DecimalDefaultValuesProperty | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-when-unset` |"
  [stack id config]
  (let [builder (CfnAnalysis$DecimalParameterDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-values)]
      (. builder defaultValues data))
    (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
      (. builder mappedDataSetParameters data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :parameter-value-type)]
      (. builder parameterValueType data))
    (when-let [data (lookup-entry config id :value-when-unset)]
      (. builder valueWhenUnset data))
    (.build builder)))


(defn cfn-analysis-decimal-parameter-property-builder
  "The cfn-analysis-decimal-parameter-property-builder function buildes out new instances of 
CfnAnalysis$DecimalParameterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$DecimalParameterProperty$Builder.)]
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-decimal-places-configuration-property-builder
  "The cfn-analysis-decimal-places-configuration-property-builder function buildes out new instances of 
CfnAnalysis$DecimalPlacesConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlaces` | java.lang.Number | [[cdk.support/lookup-entry]] | `:decimal-places` |"
  [stack id config]
  (let [builder (CfnAnalysis$DecimalPlacesConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :decimal-places)]
      (. builder decimalPlaces data))
    (.build builder)))


(defn cfn-analysis-decimal-value-when-unset-configuration-property-builder
  "The cfn-analysis-decimal-value-when-unset-configuration-property-builder function buildes out new instances of 
CfnAnalysis$DecimalValueWhenUnsetConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |"
  [stack id config]
  (let [builder (CfnAnalysis$DecimalValueWhenUnsetConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-value)]
      (. builder customValue data))
    (when-let [data (lookup-entry config id :value-when-unset-option)]
      (. builder valueWhenUnsetOption data))
    (.build builder)))


(defn cfn-analysis-default-date-time-picker-control-options-property-builder
  "The cfn-analysis-default-date-time-picker-control-options-property-builder function buildes out new instances of 
CfnAnalysis$DefaultDateTimePickerControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DateTimePickerControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnAnalysis$DefaultDateTimePickerControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-analysis-default-filter-control-configuration-property-builder
  "The cfn-analysis-default-filter-control-configuration-property-builder function buildes out new instances of 
CfnAnalysis$DefaultFilterControlConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `controlOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:control-options` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnAnalysis$DefaultFilterControlConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :control-options)]
      (. builder controlOptions data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-analysis-default-filter-control-options-property-builder
  "The cfn-analysis-default-filter-control-options-property-builder function buildes out new instances of 
CfnAnalysis$DefaultFilterControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultDateTimePickerOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-date-time-picker-options` |
| `defaultDropdownOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-dropdown-options` |
| `defaultListOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-list-options` |
| `defaultRelativeDateTimeOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DefaultRelativeDateTimeControlOptionsProperty | [[cdk.support/lookup-entry]] | `:default-relative-date-time-options` |
| `defaultSliderOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-slider-options` |
| `defaultTextAreaOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-text-area-options` |
| `defaultTextFieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-text-field-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$DefaultFilterControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-date-time-picker-options)]
      (. builder defaultDateTimePickerOptions data))
    (when-let [data (lookup-entry config id :default-dropdown-options)]
      (. builder defaultDropdownOptions data))
    (when-let [data (lookup-entry config id :default-list-options)]
      (. builder defaultListOptions data))
    (when-let [data (lookup-entry config id :default-relative-date-time-options)]
      (. builder defaultRelativeDateTimeOptions data))
    (when-let [data (lookup-entry config id :default-slider-options)]
      (. builder defaultSliderOptions data))
    (when-let [data (lookup-entry config id :default-text-area-options)]
      (. builder defaultTextAreaOptions data))
    (when-let [data (lookup-entry config id :default-text-field-options)]
      (. builder defaultTextFieldOptions data))
    (.build builder)))


(defn cfn-analysis-default-filter-drop-down-control-options-property-builder
  "The cfn-analysis-default-filter-drop-down-control-options-property-builder function buildes out new instances of 
CfnAnalysis$DefaultFilterDropDownControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DropDownControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnAnalysis$DefaultFilterDropDownControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-analysis-default-filter-list-control-options-property-builder
  "The cfn-analysis-default-filter-list-control-options-property-builder function buildes out new instances of 
CfnAnalysis$DefaultFilterListControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ListControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnAnalysis$DefaultFilterListControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-analysis-default-free-form-layout-configuration-property-builder
  "The cfn-analysis-default-free-form-layout-configuration-property-builder function buildes out new instances of 
CfnAnalysis$DefaultFreeFormLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$DefaultFreeFormLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (.build builder)))


(defn cfn-analysis-default-grid-layout-configuration-property-builder
  "The cfn-analysis-default-grid-layout-configuration-property-builder function buildes out new instances of 
CfnAnalysis$DefaultGridLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$DefaultGridLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (.build builder)))


(defn cfn-analysis-default-interactive-layout-configuration-property-builder
  "The cfn-analysis-default-interactive-layout-configuration-property-builder function buildes out new instances of 
CfnAnalysis$DefaultInteractiveLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeForm` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DefaultFreeFormLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:free-form` |
| `grid` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DefaultGridLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:grid` |"
  [stack id config]
  (let [builder (CfnAnalysis$DefaultInteractiveLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :free-form)]
      (. builder freeForm data))
    (when-let [data (lookup-entry config id :grid)]
      (. builder grid data))
    (.build builder)))


(defn cfn-analysis-default-new-sheet-configuration-property-builder
  "The cfn-analysis-default-new-sheet-configuration-property-builder function buildes out new instances of 
CfnAnalysis$DefaultNewSheetConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `interactiveLayoutConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:interactive-layout-configuration` |
| `paginatedLayoutConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DefaultPaginatedLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:paginated-layout-configuration` |
| `sheetContentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-content-type` |"
  [stack id config]
  (let [builder (CfnAnalysis$DefaultNewSheetConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :interactive-layout-configuration)]
      (. builder interactiveLayoutConfiguration data))
    (when-let [data (lookup-entry config id :paginated-layout-configuration)]
      (. builder paginatedLayoutConfiguration data))
    (when-let [data (lookup-entry config id :sheet-content-type)]
      (. builder sheetContentType data))
    (.build builder)))


(defn cfn-analysis-default-paginated-layout-configuration-property-builder
  "The cfn-analysis-default-paginated-layout-configuration-property-builder function buildes out new instances of 
CfnAnalysis$DefaultPaginatedLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sectionBased` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DefaultSectionBasedLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:section-based` |"
  [stack id config]
  (let [builder (CfnAnalysis$DefaultPaginatedLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :section-based)]
      (. builder sectionBased data))
    (.build builder)))


(defn cfn-analysis-default-relative-date-time-control-options-property-builder
  "The cfn-analysis-default-relative-date-time-control-options-property-builder function buildes out new instances of 
CfnAnalysis$DefaultRelativeDateTimeControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$RelativeDateTimeControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$DefaultRelativeDateTimeControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (.build builder)))


(defn cfn-analysis-default-section-based-layout-configuration-property-builder
  "The cfn-analysis-default-section-based-layout-configuration-property-builder function buildes out new instances of 
CfnAnalysis$DefaultSectionBasedLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SectionBasedLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$DefaultSectionBasedLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (.build builder)))


(defn cfn-analysis-default-slider-control-options-property-builder
  "The cfn-analysis-default-slider-control-options-property-builder function buildes out new instances of 
CfnAnalysis$DefaultSliderControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SliderControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnAnalysis$DefaultSliderControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :maximum-value)]
      (. builder maximumValue data))
    (when-let [data (lookup-entry config id :minimum-value)]
      (. builder minimumValue data))
    (when-let [data (lookup-entry config id :step-size)]
      (. builder stepSize data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-analysis-default-text-area-control-options-property-builder
  "The cfn-analysis-default-text-area-control-options-property-builder function buildes out new instances of 
CfnAnalysis$DefaultTextAreaControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$DefaultTextAreaControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :delimiter)]
      (. builder delimiter data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (.build builder)))


(defn cfn-analysis-default-text-field-control-options-property-builder
  "The cfn-analysis-default-text-field-control-options-property-builder function buildes out new instances of 
CfnAnalysis$DefaultTextFieldControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TextFieldControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$DefaultTextFieldControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (.build builder)))


(defn cfn-analysis-destination-parameter-value-configuration-property-builder
  "The cfn-analysis-destination-parameter-value-configuration-property-builder function buildes out new instances of 
CfnAnalysis$DestinationParameterValueConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValuesConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-values-configuration` |
| `selectAllValueOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-value-options` |
| `sourceColumn` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-column` |
| `sourceField` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-field` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |"
  [stack id config]
  (let [builder (CfnAnalysis$DestinationParameterValueConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-values-configuration)]
      (. builder customValuesConfiguration data))
    (when-let [data (lookup-entry config id :select-all-value-options)]
      (. builder selectAllValueOptions data))
    (when-let [data (lookup-entry config id :source-column)]
      (. builder sourceColumn data))
    (when-let [data (lookup-entry config id :source-field)]
      (. builder sourceField data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (.build builder)))


(defn cfn-analysis-dimension-field-property-builder
  "The cfn-analysis-dimension-field-property-builder function buildes out new instances of 
CfnAnalysis$DimensionFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoricalDimensionField` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CategoricalDimensionFieldProperty | [[cdk.support/lookup-entry]] | `:categorical-dimension-field` |
| `dateDimensionField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-dimension-field` |
| `numericalDimensionField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numerical-dimension-field` |"
  [stack id config]
  (let [builder (CfnAnalysis$DimensionFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :categorical-dimension-field)]
      (. builder categoricalDimensionField data))
    (when-let [data (lookup-entry config id :date-dimension-field)]
      (. builder dateDimensionField data))
    (when-let [data (lookup-entry config id :numerical-dimension-field)]
      (. builder numericalDimensionField data))
    (.build builder)))


(defn cfn-analysis-donut-center-options-property-builder
  "The cfn-analysis-donut-center-options-property-builder function buildes out new instances of 
CfnAnalysis$DonutCenterOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `labelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$DonutCenterOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :label-visibility)]
      (. builder labelVisibility data))
    (.build builder)))


(defn cfn-analysis-donut-options-property-builder
  "The cfn-analysis-donut-options-property-builder function buildes out new instances of 
CfnAnalysis$DonutOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:arc-options` |
| `donutCenterOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DonutCenterOptionsProperty | [[cdk.support/lookup-entry]] | `:donut-center-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$DonutOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :arc-options)]
      (. builder arcOptions data))
    (when-let [data (lookup-entry config id :donut-center-options)]
      (. builder donutCenterOptions data))
    (.build builder)))


(defn cfn-analysis-drill-down-filter-property-builder
  "The cfn-analysis-drill-down-filter-property-builder function buildes out new instances of 
CfnAnalysis$DrillDownFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryFilter` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CategoryDrillDownFilterProperty | [[cdk.support/lookup-entry]] | `:category-filter` |
| `numericEqualityFilter` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumericEqualityDrillDownFilterProperty | [[cdk.support/lookup-entry]] | `:numeric-equality-filter` |
| `timeRangeFilter` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TimeRangeDrillDownFilterProperty | [[cdk.support/lookup-entry]] | `:time-range-filter` |"
  [stack id config]
  (let [builder (CfnAnalysis$DrillDownFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-filter)]
      (. builder categoryFilter data))
    (when-let [data (lookup-entry config id :numeric-equality-filter)]
      (. builder numericEqualityFilter data))
    (when-let [data (lookup-entry config id :time-range-filter)]
      (. builder timeRangeFilter data))
    (.build builder)))


(defn cfn-analysis-drop-down-control-display-options-property-builder
  "The cfn-analysis-drop-down-control-display-options-property-builder function buildes out new instances of 
CfnAnalysis$DropDownControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `selectAllOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ListControlSelectAllOptionsProperty | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$DropDownControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-analysis-dynamic-default-value-property-builder
  "The cfn-analysis-dynamic-default-value-property-builder function buildes out new instances of 
CfnAnalysis$DynamicDefaultValueProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValueColumn` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-value-column` |
| `groupNameColumn` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-name-column` |
| `userNameColumn` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:user-name-column` |"
  [stack id config]
  (let [builder (CfnAnalysis$DynamicDefaultValueProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-value-column)]
      (. builder defaultValueColumn data))
    (when-let [data (lookup-entry config id :group-name-column)]
      (. builder groupNameColumn data))
    (when-let [data (lookup-entry config id :user-name-column)]
      (. builder userNameColumn data))
    (.build builder)))


(defn cfn-analysis-empty-visual-property-builder
  "The cfn-analysis-empty-visual-property-builder function buildes out new instances of 
CfnAnalysis$EmptyVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$EmptyVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-entity-property-builder
  "The cfn-analysis-entity-property-builder function buildes out new instances of 
CfnAnalysis$EntityProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `path` | java.lang.String | [[cdk.support/lookup-entry]] | `:path` |"
  [stack id config]
  (let [builder (CfnAnalysis$EntityProperty$Builder.)]
    (when-let [data (lookup-entry config id :path)]
      (. builder path data))
    (.build builder)))


(defn cfn-analysis-exclude-period-configuration-property-builder
  "The cfn-analysis-exclude-period-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ExcludePeriodConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `amount` | java.lang.Number | [[cdk.support/lookup-entry]] | `:amount` |
| `granularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:granularity` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |"
  [stack id config]
  (let [builder (CfnAnalysis$ExcludePeriodConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :amount)]
      (. builder amount data))
    (when-let [data (lookup-entry config id :granularity)]
      (. builder granularity data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (.build builder)))


(defn cfn-analysis-explicit-hierarchy-property-builder
  "The cfn-analysis-explicit-hierarchy-property-builder function buildes out new instances of 
CfnAnalysis$ExplicitHierarchyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:columns` |
| `drillDownFilters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$ExplicitHierarchyProperty$Builder.)]
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (when-let [data (lookup-entry config id :drill-down-filters)]
      (. builder drillDownFilters data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-analysis-field-based-tooltip-property-builder
  "The cfn-analysis-field-based-tooltip-property-builder function buildes out new instances of 
CfnAnalysis$FieldBasedTooltipProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-visibility` |
| `tooltipFields` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip-fields` |
| `tooltipTitleType` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-title-type` |"
  [stack id config]
  (let [builder (CfnAnalysis$FieldBasedTooltipProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-visibility)]
      (. builder aggregationVisibility data))
    (when-let [data (lookup-entry config id :tooltip-fields)]
      (. builder tooltipFields data))
    (when-let [data (lookup-entry config id :tooltip-title-type)]
      (. builder tooltipTitleType data))
    (.build builder)))


(defn cfn-analysis-field-label-type-property-builder
  "The cfn-analysis-field-label-type-property-builder function buildes out new instances of 
CfnAnalysis$FieldLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$FieldLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-field-series-item-property-builder
  "The cfn-analysis-field-series-item-property-builder function buildes out new instances of 
CfnAnalysis$FieldSeriesItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `settings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:settings` |"
  [stack id config]
  (let [builder (CfnAnalysis$FieldSeriesItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-binding)]
      (. builder axisBinding data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :settings)]
      (. builder settings data))
    (.build builder)))


(defn cfn-analysis-field-sort-options-property-builder
  "The cfn-analysis-field-sort-options-property-builder function buildes out new instances of 
CfnAnalysis$FieldSortOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-sort` |
| `fieldSort` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FieldSortProperty | [[cdk.support/lookup-entry]] | `:field-sort` |"
  [stack id config]
  (let [builder (CfnAnalysis$FieldSortOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-sort)]
      (. builder columnSort data))
    (when-let [data (lookup-entry config id :field-sort)]
      (. builder fieldSort data))
    (.build builder)))


(defn cfn-analysis-field-sort-property-builder
  "The cfn-analysis-field-sort-property-builder function buildes out new instances of 
CfnAnalysis$FieldSortProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$FieldSortProperty$Builder.)]
    (when-let [data (lookup-entry config id :direction)]
      (. builder direction data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (.build builder)))


(defn cfn-analysis-field-tooltip-item-property-builder
  "The cfn-analysis-field-tooltip-item-property-builder function buildes out new instances of 
CfnAnalysis$FieldTooltipItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `label` | java.lang.String | [[cdk.support/lookup-entry]] | `:label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$FieldTooltipItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :label)]
      (. builder label data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-filled-map-aggregated-field-wells-property-builder
  "The cfn-analysis-filled-map-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$FilledMapAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `geospatial` | java.util.List | [[cdk.support/lookup-entry]] | `:geospatial` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilledMapAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :geospatial)]
      (. builder geospatial data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-filled-map-conditional-formatting-option-property-builder
  "The cfn-analysis-filled-map-conditional-formatting-option-property-builder function buildes out new instances of 
CfnAnalysis$FilledMapConditionalFormattingOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `shape` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:shape` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilledMapConditionalFormattingOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :shape)]
      (. builder shape data))
    (.build builder)))


(defn cfn-analysis-filled-map-conditional-formatting-property-builder
  "The cfn-analysis-filled-map-conditional-formatting-property-builder function buildes out new instances of 
CfnAnalysis$FilledMapConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilledMapConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :conditional-formatting-options)]
      (. builder conditionalFormattingOptions data))
    (.build builder)))


(defn cfn-analysis-filled-map-configuration-property-builder
  "The cfn-analysis-filled-map-configuration-property-builder function buildes out new instances of 
CfnAnalysis$FilledMapConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilledMapFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `mapStyleOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GeospatialMapStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:map-style-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilledMapSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `windowOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GeospatialWindowOptionsProperty | [[cdk.support/lookup-entry]] | `:window-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilledMapConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :map-style-options)]
      (. builder mapStyleOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :window-options)]
      (. builder windowOptions data))
    (.build builder)))


(defn cfn-analysis-filled-map-field-wells-property-builder
  "The cfn-analysis-filled-map-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$FilledMapFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `filledMapAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filled-map-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilledMapFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :filled-map-aggregated-field-wells)]
      (. builder filledMapAggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-filled-map-shape-conditional-formatting-property-builder
  "The cfn-analysis-filled-map-shape-conditional-formatting-property-builder function buildes out new instances of 
CfnAnalysis$FilledMapShapeConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `format` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ShapeConditionalFormatProperty | [[cdk.support/lookup-entry]] | `:format` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilledMapShapeConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format)]
      (. builder format data))
    (.build builder)))


(defn cfn-analysis-filled-map-sort-configuration-property-builder
  "The cfn-analysis-filled-map-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$FilledMapSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilledMapSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (.build builder)))


(defn cfn-analysis-filled-map-visual-property-builder
  "The cfn-analysis-filled-map-visual-property-builder function buildes out new instances of 
CfnAnalysis$FilledMapVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilledMapConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilledMapVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :conditional-formatting)]
      (. builder conditionalFormatting data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-filter-control-property-builder
  "The cfn-analysis-filter-control-property-builder function buildes out new instances of 
CfnAnalysis$FilterControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `crossSheet` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cross-sheet` |
| `dateTimePicker` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilterDateTimePickerControlProperty | [[cdk.support/lookup-entry]] | `:date-time-picker` |
| `dropdown` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilterDropDownControlProperty | [[cdk.support/lookup-entry]] | `:dropdown` |
| `list` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:list` |
| `relativeDateTime` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilterRelativeDateTimeControlProperty | [[cdk.support/lookup-entry]] | `:relative-date-time` |
| `slider` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:slider` |
| `textArea` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilterTextAreaControlProperty | [[cdk.support/lookup-entry]] | `:text-area` |
| `textField` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilterTextFieldControlProperty | [[cdk.support/lookup-entry]] | `:text-field` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilterControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cross-sheet)]
      (. builder crossSheet data))
    (when-let [data (lookup-entry config id :date-time-picker)]
      (. builder dateTimePicker data))
    (when-let [data (lookup-entry config id :dropdown)]
      (. builder dropdown data))
    (when-let [data (lookup-entry config id :list)]
      (. builder list data))
    (when-let [data (lookup-entry config id :relative-date-time)]
      (. builder relativeDateTime data))
    (when-let [data (lookup-entry config id :slider)]
      (. builder slider data))
    (when-let [data (lookup-entry config id :text-area)]
      (. builder textArea data))
    (when-let [data (lookup-entry config id :text-field)]
      (. builder textField data))
    (.build builder)))


(defn cfn-analysis-filter-cross-sheet-control-property-builder
  "The cfn-analysis-filter-cross-sheet-control-property-builder function buildes out new instances of 
CfnAnalysis$FilterCrossSheetControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilterCrossSheetControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cascading-control-configuration)]
      (. builder cascadingControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (.build builder)))


(defn cfn-analysis-filter-date-time-picker-control-property-builder
  "The cfn-analysis-filter-date-time-picker-control-property-builder function buildes out new instances of 
CfnAnalysis$FilterDateTimePickerControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DateTimePickerControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilterDateTimePickerControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-analysis-filter-drop-down-control-property-builder
  "The cfn-analysis-filter-drop-down-control-property-builder function buildes out new instances of 
CfnAnalysis$FilterDropDownControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `selectableValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilterDropDownControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cascading-control-configuration)]
      (. builder cascadingControlConfiguration data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-analysis-filter-group-property-builder
  "The cfn-analysis-filter-group-property-builder function buildes out new instances of 
CfnAnalysis$FilterGroupProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `crossDataset` | java.lang.String | [[cdk.support/lookup-entry]] | `:cross-dataset` |
| `filterGroupId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-group-id` |
| `filters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filters` |
| `scopeConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scope-configuration` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilterGroupProperty$Builder.)]
    (when-let [data (lookup-entry config id :cross-dataset)]
      (. builder crossDataset data))
    (when-let [data (lookup-entry config id :filter-group-id)]
      (. builder filterGroupId data))
    (when-let [data (lookup-entry config id :filters)]
      (. builder filters data))
    (when-let [data (lookup-entry config id :scope-configuration)]
      (. builder scopeConfiguration data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (.build builder)))


(defn cfn-analysis-filter-list-configuration-property-builder
  "The cfn-analysis-filter-list-configuration-property-builder function buildes out new instances of 
CfnAnalysis$FilterListConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilterListConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-values)]
      (. builder categoryValues data))
    (when-let [data (lookup-entry config id :match-operator)]
      (. builder matchOperator data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (.build builder)))


(defn cfn-analysis-filter-list-control-property-builder
  "The cfn-analysis-filter-list-control-property-builder function buildes out new instances of 
CfnAnalysis$FilterListControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `selectableValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilterListControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cascading-control-configuration)]
      (. builder cascadingControlConfiguration data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-analysis-filter-operation-selected-fields-configuration-property-builder
  "The cfn-analysis-filter-operation-selected-fields-configuration-property-builder function buildes out new instances of 
CfnAnalysis$FilterOperationSelectedFieldsConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `selectedColumns` | java.util.List | [[cdk.support/lookup-entry]] | `:selected-columns` |
| `selectedFieldOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-field-options` |
| `selectedFields` | java.util.List | [[cdk.support/lookup-entry]] | `:selected-fields` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilterOperationSelectedFieldsConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :selected-columns)]
      (. builder selectedColumns data))
    (when-let [data (lookup-entry config id :selected-field-options)]
      (. builder selectedFieldOptions data))
    (when-let [data (lookup-entry config id :selected-fields)]
      (. builder selectedFields data))
    (.build builder)))


(defn cfn-analysis-filter-operation-target-visuals-configuration-property-builder
  "The cfn-analysis-filter-operation-target-visuals-configuration-property-builder function buildes out new instances of 
CfnAnalysis$FilterOperationTargetVisualsConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sameSheetTargetVisualConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SameSheetTargetVisualConfigurationProperty | [[cdk.support/lookup-entry]] | `:same-sheet-target-visual-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilterOperationTargetVisualsConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :same-sheet-target-visual-configuration)]
      (. builder sameSheetTargetVisualConfiguration data))
    (.build builder)))


(defn cfn-analysis-filter-property-builder
  "The cfn-analysis-filter-property-builder function buildes out new instances of 
CfnAnalysis$FilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryFilter` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CategoryFilterProperty | [[cdk.support/lookup-entry]] | `:category-filter` |
| `numericEqualityFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-equality-filter` |
| `numericRangeFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-range-filter` |
| `relativeDatesFilter` | software.amazon.awscdk.services.quicksight.CfnAnalysis$RelativeDatesFilterProperty | [[cdk.support/lookup-entry]] | `:relative-dates-filter` |
| `timeEqualityFilter` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TimeEqualityFilterProperty | [[cdk.support/lookup-entry]] | `:time-equality-filter` |
| `timeRangeFilter` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TimeRangeFilterProperty | [[cdk.support/lookup-entry]] | `:time-range-filter` |
| `topBottomFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:top-bottom-filter` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-filter)]
      (. builder categoryFilter data))
    (when-let [data (lookup-entry config id :numeric-equality-filter)]
      (. builder numericEqualityFilter data))
    (when-let [data (lookup-entry config id :numeric-range-filter)]
      (. builder numericRangeFilter data))
    (when-let [data (lookup-entry config id :relative-dates-filter)]
      (. builder relativeDatesFilter data))
    (when-let [data (lookup-entry config id :time-equality-filter)]
      (. builder timeEqualityFilter data))
    (when-let [data (lookup-entry config id :time-range-filter)]
      (. builder timeRangeFilter data))
    (when-let [data (lookup-entry config id :top-bottom-filter)]
      (. builder topBottomFilter data))
    (.build builder)))


(defn cfn-analysis-filter-relative-date-time-control-property-builder
  "The cfn-analysis-filter-relative-date-time-control-property-builder function buildes out new instances of 
CfnAnalysis$FilterRelativeDateTimeControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilterRelativeDateTimeControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-analysis-filter-scope-configuration-property-builder
  "The cfn-analysis-filter-scope-configuration-property-builder function buildes out new instances of 
CfnAnalysis$FilterScopeConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `allSheets` | java.lang.Object | [[cdk.support/lookup-entry]] | `:all-sheets` |
| `selectedSheets` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SelectedSheetsFilterScopeConfigurationProperty | [[cdk.support/lookup-entry]] | `:selected-sheets` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilterScopeConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :all-sheets)]
      (. builder allSheets data))
    (when-let [data (lookup-entry config id :selected-sheets)]
      (. builder selectedSheets data))
    (.build builder)))


(defn cfn-analysis-filter-selectable-values-property-builder
  "The cfn-analysis-filter-selectable-values-property-builder function buildes out new instances of 
CfnAnalysis$FilterSelectableValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilterSelectableValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-filter-slider-control-property-builder
  "The cfn-analysis-filter-slider-control-property-builder function buildes out new instances of 
CfnAnalysis$FilterSliderControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilterSliderControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :maximum-value)]
      (. builder maximumValue data))
    (when-let [data (lookup-entry config id :minimum-value)]
      (. builder minimumValue data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :step-size)]
      (. builder stepSize data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-analysis-filter-text-area-control-property-builder
  "The cfn-analysis-filter-text-area-control-property-builder function buildes out new instances of 
CfnAnalysis$FilterTextAreaControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TextAreaControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilterTextAreaControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :delimiter)]
      (. builder delimiter data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-analysis-filter-text-field-control-property-builder
  "The cfn-analysis-filter-text-field-control-property-builder function buildes out new instances of 
CfnAnalysis$FilterTextFieldControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnAnalysis$FilterTextFieldControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-analysis-font-configuration-property-builder
  "The cfn-analysis-font-configuration-property-builder function buildes out new instances of 
CfnAnalysis$FontConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-color` |
| `fontDecoration` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-decoration` |
| `fontSize` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FontSizeProperty | [[cdk.support/lookup-entry]] | `:font-size` |
| `fontStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-style` |
| `fontWeight` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FontWeightProperty | [[cdk.support/lookup-entry]] | `:font-weight` |"
  [stack id config]
  (let [builder (CfnAnalysis$FontConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :font-color)]
      (. builder fontColor data))
    (when-let [data (lookup-entry config id :font-decoration)]
      (. builder fontDecoration data))
    (when-let [data (lookup-entry config id :font-size)]
      (. builder fontSize data))
    (when-let [data (lookup-entry config id :font-style)]
      (. builder fontStyle data))
    (when-let [data (lookup-entry config id :font-weight)]
      (. builder fontWeight data))
    (.build builder)))


(defn cfn-analysis-font-size-property-builder
  "The cfn-analysis-font-size-property-builder function buildes out new instances of 
CfnAnalysis$FontSizeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `relative` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative` |"
  [stack id config]
  (let [builder (CfnAnalysis$FontSizeProperty$Builder.)]
    (when-let [data (lookup-entry config id :relative)]
      (. builder relative data))
    (.build builder)))


(defn cfn-analysis-font-weight-property-builder
  "The cfn-analysis-font-weight-property-builder function buildes out new instances of 
CfnAnalysis$FontWeightProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |"
  [stack id config]
  (let [builder (CfnAnalysis$FontWeightProperty$Builder.)]
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (.build builder)))


(defn cfn-analysis-forecast-computation-property-builder
  "The cfn-analysis-forecast-computation-property-builder function buildes out new instances of 
CfnAnalysis$ForecastComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `customSeasonalityValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-seasonality-value` |
| `lowerBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:lower-boundary` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodsBackward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-backward` |
| `periodsForward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-forward` |
| `predictionInterval` | java.lang.Number | [[cdk.support/lookup-entry]] | `:prediction-interval` |
| `seasonality` | java.lang.String | [[cdk.support/lookup-entry]] | `:seasonality` |
| `time` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |
| `upperBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:upper-boundary` |
| `value` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$ForecastComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :custom-seasonality-value)]
      (. builder customSeasonalityValue data))
    (when-let [data (lookup-entry config id :lower-boundary)]
      (. builder lowerBoundary data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :periods-backward)]
      (. builder periodsBackward data))
    (when-let [data (lookup-entry config id :periods-forward)]
      (. builder periodsForward data))
    (when-let [data (lookup-entry config id :prediction-interval)]
      (. builder predictionInterval data))
    (when-let [data (lookup-entry config id :seasonality)]
      (. builder seasonality data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :upper-boundary)]
      (. builder upperBoundary data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-forecast-configuration-property-builder
  "The cfn-analysis-forecast-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ForecastConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `forecastProperties` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:forecast-properties` |
| `scenario` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scenario` |"
  [stack id config]
  (let [builder (CfnAnalysis$ForecastConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :forecast-properties)]
      (. builder forecastProperties data))
    (when-let [data (lookup-entry config id :scenario)]
      (. builder scenario data))
    (.build builder)))


(defn cfn-analysis-forecast-scenario-property-builder
  "The cfn-analysis-forecast-scenario-property-builder function buildes out new instances of 
CfnAnalysis$ForecastScenarioProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `whatIfPointScenario` | software.amazon.awscdk.services.quicksight.CfnAnalysis$WhatIfPointScenarioProperty | [[cdk.support/lookup-entry]] | `:what-if-point-scenario` |
| `whatIfRangeScenario` | software.amazon.awscdk.services.quicksight.CfnAnalysis$WhatIfRangeScenarioProperty | [[cdk.support/lookup-entry]] | `:what-if-range-scenario` |"
  [stack id config]
  (let [builder (CfnAnalysis$ForecastScenarioProperty$Builder.)]
    (when-let [data (lookup-entry config id :what-if-point-scenario)]
      (. builder whatIfPointScenario data))
    (when-let [data (lookup-entry config id :what-if-range-scenario)]
      (. builder whatIfRangeScenario data))
    (.build builder)))


(defn cfn-analysis-format-configuration-property-builder
  "The cfn-analysis-format-configuration-property-builder function buildes out new instances of 
CfnAnalysis$FormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-time-format-configuration` |
| `numberFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:number-format-configuration` |
| `stringFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:string-format-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$FormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-format-configuration)]
      (. builder dateTimeFormatConfiguration data))
    (when-let [data (lookup-entry config id :number-format-configuration)]
      (. builder numberFormatConfiguration data))
    (when-let [data (lookup-entry config id :string-format-configuration)]
      (. builder stringFormatConfiguration data))
    (.build builder)))


(defn cfn-analysis-free-form-layout-canvas-size-options-property-builder
  "The cfn-analysis-free-form-layout-canvas-size-options-property-builder function buildes out new instances of 
CfnAnalysis$FreeFormLayoutCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `screenCanvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:screen-canvas-size-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$FreeFormLayoutCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :screen-canvas-size-options)]
      (. builder screenCanvasSizeOptions data))
    (.build builder)))


(defn cfn-analysis-free-form-layout-configuration-property-builder
  "The cfn-analysis-free-form-layout-configuration-property-builder function buildes out new instances of 
CfnAnalysis$FreeFormLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FreeFormLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `elements` | java.util.List | [[cdk.support/lookup-entry]] | `:elements` |"
  [stack id config]
  (let [builder (CfnAnalysis$FreeFormLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (when-let [data (lookup-entry config id :elements)]
      (. builder elements data))
    (.build builder)))


(defn cfn-analysis-free-form-layout-element-background-style-property-builder
  "The cfn-analysis-free-form-layout-element-background-style-property-builder function buildes out new instances of 
CfnAnalysis$FreeFormLayoutElementBackgroundStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$FreeFormLayoutElementBackgroundStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-free-form-layout-element-border-style-property-builder
  "The cfn-analysis-free-form-layout-element-border-style-property-builder function buildes out new instances of 
CfnAnalysis$FreeFormLayoutElementBorderStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$FreeFormLayoutElementBorderStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-free-form-layout-element-property-builder
  "The cfn-analysis-free-form-layout-element-property-builder function buildes out new instances of 
CfnAnalysis$FreeFormLayoutElementProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FreeFormLayoutElementBackgroundStyleProperty | [[cdk.support/lookup-entry]] | `:background-style` |
| `borderStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FreeFormLayoutElementBorderStyleProperty | [[cdk.support/lookup-entry]] | `:border-style` |
| `elementId` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-id` |
| `elementType` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-type` |
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `loadingAnimation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:loading-animation` |
| `renderingRules` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rendering-rules` |
| `selectedBorderStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FreeFormLayoutElementBorderStyleProperty | [[cdk.support/lookup-entry]] | `:selected-border-style` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |
| `xAxisLocation` | java.lang.String | [[cdk.support/lookup-entry]] | `:x-axis-location` |
| `yAxisLocation` | java.lang.String | [[cdk.support/lookup-entry]] | `:y-axis-location` |"
  [stack id config]
  (let [builder (CfnAnalysis$FreeFormLayoutElementProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-style)]
      (. builder backgroundStyle data))
    (when-let [data (lookup-entry config id :border-style)]
      (. builder borderStyle data))
    (when-let [data (lookup-entry config id :element-id)]
      (. builder elementId data))
    (when-let [data (lookup-entry config id :element-type)]
      (. builder elementType data))
    (when-let [data (lookup-entry config id :height)]
      (. builder height data))
    (when-let [data (lookup-entry config id :loading-animation)]
      (. builder loadingAnimation data))
    (when-let [data (lookup-entry config id :rendering-rules)]
      (. builder renderingRules data))
    (when-let [data (lookup-entry config id :selected-border-style)]
      (. builder selectedBorderStyle data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (when-let [data (lookup-entry config id :width)]
      (. builder width data))
    (when-let [data (lookup-entry config id :x-axis-location)]
      (. builder xAxisLocation data))
    (when-let [data (lookup-entry config id :y-axis-location)]
      (. builder yAxisLocation data))
    (.build builder)))


(defn cfn-analysis-free-form-layout-screen-canvas-size-options-property-builder
  "The cfn-analysis-free-form-layout-screen-canvas-size-options-property-builder function buildes out new instances of 
CfnAnalysis$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `optimizedViewPortWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:optimized-view-port-width` |"
  [stack id config]
  (let [builder (CfnAnalysis$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :optimized-view-port-width)]
      (. builder optimizedViewPortWidth data))
    (.build builder)))


(defn cfn-analysis-free-form-section-layout-configuration-property-builder
  "The cfn-analysis-free-form-section-layout-configuration-property-builder function buildes out new instances of 
CfnAnalysis$FreeFormSectionLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `elements` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:elements` |"
  [stack id config]
  (let [builder (CfnAnalysis$FreeFormSectionLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :elements)]
      (. builder elements data))
    (.build builder)))


(defn cfn-analysis-funnel-chart-aggregated-field-wells-property-builder
  "The cfn-analysis-funnel-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$FunnelChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$FunnelChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-funnel-chart-configuration-property-builder
  "The cfn-analysis-funnel-chart-configuration-property-builder function buildes out new instances of 
CfnAnalysis$FunnelChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `dataLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FunnelChartDataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-label-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FunnelChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FunnelChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnAnalysis$FunnelChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :data-label-options)]
      (. builder dataLabelOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :value-label-options)]
      (. builder valueLabelOptions data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-analysis-funnel-chart-data-label-options-property-builder
  "The cfn-analysis-funnel-chart-data-label-options-property-builder function buildes out new instances of 
CfnAnalysis$FunnelChartDataLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-label-visibility` |
| `labelColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-color` |
| `labelFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label-font-configuration` |
| `measureDataLabelStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-data-label-style` |
| `measureLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-label-visibility` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$FunnelChartDataLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-label-visibility)]
      (. builder categoryLabelVisibility data))
    (when-let [data (lookup-entry config id :label-color)]
      (. builder labelColor data))
    (when-let [data (lookup-entry config id :label-font-configuration)]
      (. builder labelFontConfiguration data))
    (when-let [data (lookup-entry config id :measure-data-label-style)]
      (. builder measureDataLabelStyle data))
    (when-let [data (lookup-entry config id :measure-label-visibility)]
      (. builder measureLabelVisibility data))
    (when-let [data (lookup-entry config id :position)]
      (. builder position data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-funnel-chart-field-wells-property-builder
  "The cfn-analysis-funnel-chart-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$FunnelChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `funnelChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:funnel-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$FunnelChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :funnel-chart-aggregated-field-wells)]
      (. builder funnelChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-funnel-chart-sort-configuration-property-builder
  "The cfn-analysis-funnel-chart-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$FunnelChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |"
  [stack id config]
  (let [builder (CfnAnalysis$FunnelChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (.build builder)))


(defn cfn-analysis-funnel-chart-visual-property-builder
  "The cfn-analysis-funnel-chart-visual-property-builder function buildes out new instances of 
CfnAnalysis$FunnelChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$FunnelChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-gauge-chart-arc-conditional-formatting-property-builder
  "The cfn-analysis-gauge-chart-arc-conditional-formatting-property-builder function buildes out new instances of 
CfnAnalysis$GaugeChartArcConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `foregroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:foreground-color` |"
  [stack id config]
  (let [builder (CfnAnalysis$GaugeChartArcConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :foreground-color)]
      (. builder foregroundColor data))
    (.build builder)))


(defn cfn-analysis-gauge-chart-conditional-formatting-option-property-builder
  "The cfn-analysis-gauge-chart-conditional-formatting-option-property-builder function buildes out new instances of 
CfnAnalysis$GaugeChartConditionalFormattingOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arc` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GaugeChartArcConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:arc` |
| `primaryValue` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GaugeChartPrimaryValueConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:primary-value` |"
  [stack id config]
  (let [builder (CfnAnalysis$GaugeChartConditionalFormattingOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :arc)]
      (. builder arc data))
    (when-let [data (lookup-entry config id :primary-value)]
      (. builder primaryValue data))
    (.build builder)))


(defn cfn-analysis-gauge-chart-conditional-formatting-property-builder
  "The cfn-analysis-gauge-chart-conditional-formatting-property-builder function buildes out new instances of 
CfnAnalysis$GaugeChartConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$GaugeChartConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :conditional-formatting-options)]
      (. builder conditionalFormattingOptions data))
    (.build builder)))


(defn cfn-analysis-gauge-chart-configuration-property-builder
  "The cfn-analysis-gauge-chart-configuration-property-builder function buildes out new instances of 
CfnAnalysis$GaugeChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `gaugeChartOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:gauge-chart-options` |
| `tooltipOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip-options` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnAnalysis$GaugeChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :gauge-chart-options)]
      (. builder gaugeChartOptions data))
    (when-let [data (lookup-entry config id :tooltip-options)]
      (. builder tooltipOptions data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-analysis-gauge-chart-field-wells-property-builder
  "The cfn-analysis-gauge-chart-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$GaugeChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetValues` | java.util.List | [[cdk.support/lookup-entry]] | `:target-values` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$GaugeChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :target-values)]
      (. builder targetValues data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-gauge-chart-options-property-builder
  "The cfn-analysis-gauge-chart-options-property-builder function buildes out new instances of 
CfnAnalysis$GaugeChartOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arc` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:arc` |
| `arcAxis` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ArcAxisConfigurationProperty | [[cdk.support/lookup-entry]] | `:arc-axis` |
| `comparison` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:comparison` |
| `primaryValueDisplayType` | java.lang.String | [[cdk.support/lookup-entry]] | `:primary-value-display-type` |
| `primaryValueFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-value-font-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$GaugeChartOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :arc)]
      (. builder arc data))
    (when-let [data (lookup-entry config id :arc-axis)]
      (. builder arcAxis data))
    (when-let [data (lookup-entry config id :comparison)]
      (. builder comparison data))
    (when-let [data (lookup-entry config id :primary-value-display-type)]
      (. builder primaryValueDisplayType data))
    (when-let [data (lookup-entry config id :primary-value-font-configuration)]
      (. builder primaryValueFontConfiguration data))
    (.build builder)))


(defn cfn-analysis-gauge-chart-primary-value-conditional-formatting-property-builder
  "The cfn-analysis-gauge-chart-primary-value-conditional-formatting-property-builder function buildes out new instances of 
CfnAnalysis$GaugeChartPrimaryValueConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingIconProperty | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnAnalysis$GaugeChartPrimaryValueConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-analysis-gauge-chart-visual-property-builder
  "The cfn-analysis-gauge-chart-visual-property-builder function buildes out new instances of 
CfnAnalysis$GaugeChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GaugeChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GaugeChartConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$GaugeChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :conditional-formatting)]
      (. builder conditionalFormatting data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-geospatial-coordinate-bounds-property-builder
  "The cfn-analysis-geospatial-coordinate-bounds-property-builder function buildes out new instances of 
CfnAnalysis$GeospatialCoordinateBoundsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `east` | java.lang.Number | [[cdk.support/lookup-entry]] | `:east` |
| `north` | java.lang.Number | [[cdk.support/lookup-entry]] | `:north` |
| `south` | java.lang.Number | [[cdk.support/lookup-entry]] | `:south` |
| `west` | java.lang.Number | [[cdk.support/lookup-entry]] | `:west` |"
  [stack id config]
  (let [builder (CfnAnalysis$GeospatialCoordinateBoundsProperty$Builder.)]
    (when-let [data (lookup-entry config id :east)]
      (. builder east data))
    (when-let [data (lookup-entry config id :north)]
      (. builder north data))
    (when-let [data (lookup-entry config id :south)]
      (. builder south data))
    (when-let [data (lookup-entry config id :west)]
      (. builder west data))
    (.build builder)))


(defn cfn-analysis-geospatial-heatmap-color-scale-property-builder
  "The cfn-analysis-geospatial-heatmap-color-scale-property-builder function buildes out new instances of 
CfnAnalysis$GeospatialHeatmapColorScaleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |"
  [stack id config]
  (let [builder (CfnAnalysis$GeospatialHeatmapColorScaleProperty$Builder.)]
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (.build builder)))


(defn cfn-analysis-geospatial-heatmap-configuration-property-builder
  "The cfn-analysis-geospatial-heatmap-configuration-property-builder function buildes out new instances of 
CfnAnalysis$GeospatialHeatmapConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatmapColor` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GeospatialHeatmapColorScaleProperty | [[cdk.support/lookup-entry]] | `:heatmap-color` |"
  [stack id config]
  (let [builder (CfnAnalysis$GeospatialHeatmapConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :heatmap-color)]
      (. builder heatmapColor data))
    (.build builder)))


(defn cfn-analysis-geospatial-heatmap-data-color-property-builder
  "The cfn-analysis-geospatial-heatmap-data-color-property-builder function buildes out new instances of 
CfnAnalysis$GeospatialHeatmapDataColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |"
  [stack id config]
  (let [builder (CfnAnalysis$GeospatialHeatmapDataColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (.build builder)))


(defn cfn-analysis-geospatial-map-aggregated-field-wells-property-builder
  "The cfn-analysis-geospatial-map-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$GeospatialMapAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `geospatial` | java.util.List | [[cdk.support/lookup-entry]] | `:geospatial` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$GeospatialMapAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :geospatial)]
      (. builder geospatial data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-geospatial-map-configuration-property-builder
  "The cfn-analysis-geospatial-map-configuration-property-builder function buildes out new instances of 
CfnAnalysis$GeospatialMapConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `mapStyleOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GeospatialMapStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:map-style-options` |
| `pointStyleOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GeospatialPointStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:point-style-options` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `windowOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GeospatialWindowOptionsProperty | [[cdk.support/lookup-entry]] | `:window-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$GeospatialMapConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :map-style-options)]
      (. builder mapStyleOptions data))
    (when-let [data (lookup-entry config id :point-style-options)]
      (. builder pointStyleOptions data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (when-let [data (lookup-entry config id :window-options)]
      (. builder windowOptions data))
    (.build builder)))


(defn cfn-analysis-geospatial-map-field-wells-property-builder
  "The cfn-analysis-geospatial-map-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$GeospatialMapFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `geospatialMapAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GeospatialMapAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:geospatial-map-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$GeospatialMapFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :geospatial-map-aggregated-field-wells)]
      (. builder geospatialMapAggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-geospatial-map-style-options-property-builder
  "The cfn-analysis-geospatial-map-style-options-property-builder function buildes out new instances of 
CfnAnalysis$GeospatialMapStyleOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `baseMapStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:base-map-style` |"
  [stack id config]
  (let [builder (CfnAnalysis$GeospatialMapStyleOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :base-map-style)]
      (. builder baseMapStyle data))
    (.build builder)))


(defn cfn-analysis-geospatial-map-visual-property-builder
  "The cfn-analysis-geospatial-map-visual-property-builder function buildes out new instances of 
CfnAnalysis$GeospatialMapVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$GeospatialMapVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-geospatial-point-style-options-property-builder
  "The cfn-analysis-geospatial-point-style-options-property-builder function buildes out new instances of 
CfnAnalysis$GeospatialPointStyleOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `clusterMarkerConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cluster-marker-configuration` |
| `heatmapConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heatmap-configuration` |
| `selectedPointStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-point-style` |"
  [stack id config]
  (let [builder (CfnAnalysis$GeospatialPointStyleOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :cluster-marker-configuration)]
      (. builder clusterMarkerConfiguration data))
    (when-let [data (lookup-entry config id :heatmap-configuration)]
      (. builder heatmapConfiguration data))
    (when-let [data (lookup-entry config id :selected-point-style)]
      (. builder selectedPointStyle data))
    (.build builder)))


(defn cfn-analysis-geospatial-window-options-property-builder
  "The cfn-analysis-geospatial-window-options-property-builder function buildes out new instances of 
CfnAnalysis$GeospatialWindowOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bounds` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bounds` |
| `mapZoomMode` | java.lang.String | [[cdk.support/lookup-entry]] | `:map-zoom-mode` |"
  [stack id config]
  (let [builder (CfnAnalysis$GeospatialWindowOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bounds)]
      (. builder bounds data))
    (when-let [data (lookup-entry config id :map-zoom-mode)]
      (. builder mapZoomMode data))
    (.build builder)))


(defn cfn-analysis-global-table-border-options-property-builder
  "The cfn-analysis-global-table-border-options-property-builder function buildes out new instances of 
CfnAnalysis$GlobalTableBorderOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sideSpecificBorder` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableSideBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:side-specific-border` |
| `uniformBorder` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:uniform-border` |"
  [stack id config]
  (let [builder (CfnAnalysis$GlobalTableBorderOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :side-specific-border)]
      (. builder sideSpecificBorder data))
    (when-let [data (lookup-entry config id :uniform-border)]
      (. builder uniformBorder data))
    (.build builder)))


(defn cfn-analysis-gradient-color-property-builder
  "The cfn-analysis-gradient-color-property-builder function buildes out new instances of 
CfnAnalysis$GradientColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `stops` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:stops` |"
  [stack id config]
  (let [builder (CfnAnalysis$GradientColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :stops)]
      (. builder stops data))
    (.build builder)))


(defn cfn-analysis-gradient-stop-property-builder
  "The cfn-analysis-gradient-stop-property-builder function buildes out new instances of 
CfnAnalysis$GradientStopProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `dataValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:data-value` |
| `gradientOffset` | java.lang.Number | [[cdk.support/lookup-entry]] | `:gradient-offset` |"
  [stack id config]
  (let [builder (CfnAnalysis$GradientStopProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :data-value)]
      (. builder dataValue data))
    (when-let [data (lookup-entry config id :gradient-offset)]
      (. builder gradientOffset data))
    (.build builder)))


(defn cfn-analysis-grid-layout-canvas-size-options-property-builder
  "The cfn-analysis-grid-layout-canvas-size-options-property-builder function buildes out new instances of 
CfnAnalysis$GridLayoutCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `screenCanvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GridLayoutScreenCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:screen-canvas-size-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$GridLayoutCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :screen-canvas-size-options)]
      (. builder screenCanvasSizeOptions data))
    (.build builder)))


(defn cfn-analysis-grid-layout-configuration-property-builder
  "The cfn-analysis-grid-layout-configuration-property-builder function buildes out new instances of 
CfnAnalysis$GridLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `elements` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:elements` |"
  [stack id config]
  (let [builder (CfnAnalysis$GridLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (when-let [data (lookup-entry config id :elements)]
      (. builder elements data))
    (.build builder)))


(defn cfn-analysis-grid-layout-element-property-builder
  "The cfn-analysis-grid-layout-element-property-builder function buildes out new instances of 
CfnAnalysis$GridLayoutElementProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnIndex` | java.lang.Number | [[cdk.support/lookup-entry]] | `:column-index` |
| `columnSpan` | java.lang.Number | [[cdk.support/lookup-entry]] | `:column-span` |
| `elementId` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-id` |
| `elementType` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-type` |
| `rowIndex` | java.lang.Number | [[cdk.support/lookup-entry]] | `:row-index` |
| `rowSpan` | java.lang.Number | [[cdk.support/lookup-entry]] | `:row-span` |"
  [stack id config]
  (let [builder (CfnAnalysis$GridLayoutElementProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-index)]
      (. builder columnIndex data))
    (when-let [data (lookup-entry config id :column-span)]
      (. builder columnSpan data))
    (when-let [data (lookup-entry config id :element-id)]
      (. builder elementId data))
    (when-let [data (lookup-entry config id :element-type)]
      (. builder elementType data))
    (when-let [data (lookup-entry config id :row-index)]
      (. builder rowIndex data))
    (when-let [data (lookup-entry config id :row-span)]
      (. builder rowSpan data))
    (.build builder)))


(defn cfn-analysis-grid-layout-screen-canvas-size-options-property-builder
  "The cfn-analysis-grid-layout-screen-canvas-size-options-property-builder function buildes out new instances of 
CfnAnalysis$GridLayoutScreenCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `optimizedViewPortWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:optimized-view-port-width` |
| `resizeOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:resize-option` |"
  [stack id config]
  (let [builder (CfnAnalysis$GridLayoutScreenCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :optimized-view-port-width)]
      (. builder optimizedViewPortWidth data))
    (when-let [data (lookup-entry config id :resize-option)]
      (. builder resizeOption data))
    (.build builder)))


(defn cfn-analysis-growth-rate-computation-property-builder
  "The cfn-analysis-growth-rate-computation-property-builder function buildes out new instances of 
CfnAnalysis$GrowthRateComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:period-size` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$GrowthRateComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :period-size)]
      (. builder periodSize data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-header-footer-section-configuration-property-builder
  "The cfn-analysis-header-footer-section-configuration-property-builder function buildes out new instances of 
CfnAnalysis$HeaderFooterSectionConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `layout` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SectionLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:layout` |
| `sectionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:section-id` |
| `style` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style` |"
  [stack id config]
  (let [builder (CfnAnalysis$HeaderFooterSectionConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :layout)]
      (. builder layout data))
    (when-let [data (lookup-entry config id :section-id)]
      (. builder sectionId data))
    (when-let [data (lookup-entry config id :style)]
      (. builder style data))
    (.build builder)))


(defn cfn-analysis-heat-map-aggregated-field-wells-property-builder
  "The cfn-analysis-heat-map-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$HeatMapAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `rows` | java.util.List | [[cdk.support/lookup-entry]] | `:rows` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$HeatMapAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (when-let [data (lookup-entry config id :rows)]
      (. builder rows data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-heat-map-configuration-property-builder
  "The cfn-analysis-heat-map-configuration-property-builder function buildes out new instances of 
CfnAnalysis$HeatMapConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorScale` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-scale` |
| `columnLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-label-options` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `rowLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-label-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |"
  [stack id config]
  (let [builder (CfnAnalysis$HeatMapConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :color-scale)]
      (. builder colorScale data))
    (when-let [data (lookup-entry config id :column-label-options)]
      (. builder columnLabelOptions data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :row-label-options)]
      (. builder rowLabelOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (.build builder)))


(defn cfn-analysis-heat-map-field-wells-property-builder
  "The cfn-analysis-heat-map-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$HeatMapFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatMapAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$HeatMapAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:heat-map-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$HeatMapFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :heat-map-aggregated-field-wells)]
      (. builder heatMapAggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-heat-map-sort-configuration-property-builder
  "The cfn-analysis-heat-map-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$HeatMapSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatMapColumnItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:heat-map-column-items-limit-configuration` |
| `heatMapColumnSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heat-map-column-sort` |
| `heatMapRowItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:heat-map-row-items-limit-configuration` |
| `heatMapRowSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heat-map-row-sort` |"
  [stack id config]
  (let [builder (CfnAnalysis$HeatMapSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :heat-map-column-items-limit-configuration)]
      (. builder heatMapColumnItemsLimitConfiguration data))
    (when-let [data (lookup-entry config id :heat-map-column-sort)]
      (. builder heatMapColumnSort data))
    (when-let [data (lookup-entry config id :heat-map-row-items-limit-configuration)]
      (. builder heatMapRowItemsLimitConfiguration data))
    (when-let [data (lookup-entry config id :heat-map-row-sort)]
      (. builder heatMapRowSort data))
    (.build builder)))


(defn cfn-analysis-heat-map-visual-property-builder
  "The cfn-analysis-heat-map-visual-property-builder function buildes out new instances of 
CfnAnalysis$HeatMapVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$HeatMapVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-histogram-aggregated-field-wells-property-builder
  "The cfn-analysis-histogram-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$HistogramAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$HistogramAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-histogram-bin-options-property-builder
  "The cfn-analysis-histogram-bin-options-property-builder function buildes out new instances of 
CfnAnalysis$HistogramBinOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binCount` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bin-count` |
| `binWidth` | software.amazon.awscdk.services.quicksight.CfnAnalysis$BinWidthOptionsProperty | [[cdk.support/lookup-entry]] | `:bin-width` |
| `selectedBinType` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-bin-type` |
| `startValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:start-value` |"
  [stack id config]
  (let [builder (CfnAnalysis$HistogramBinOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bin-count)]
      (. builder binCount data))
    (when-let [data (lookup-entry config id :bin-width)]
      (. builder binWidth data))
    (when-let [data (lookup-entry config id :selected-bin-type)]
      (. builder selectedBinType data))
    (when-let [data (lookup-entry config id :start-value)]
      (. builder startValue data))
    (.build builder)))


(defn cfn-analysis-histogram-configuration-property-builder
  "The cfn-analysis-histogram-configuration-property-builder function buildes out new instances of 
CfnAnalysis$HistogramConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$HistogramBinOptionsProperty | [[cdk.support/lookup-entry]] | `:bin-options` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |
| `yAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:y-axis-display-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$HistogramConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :bin-options)]
      (. builder binOptions data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (when-let [data (lookup-entry config id :x-axis-display-options)]
      (. builder xAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :x-axis-label-options)]
      (. builder xAxisLabelOptions data))
    (when-let [data (lookup-entry config id :y-axis-display-options)]
      (. builder yAxisDisplayOptions data))
    (.build builder)))


(defn cfn-analysis-histogram-field-wells-property-builder
  "The cfn-analysis-histogram-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$HistogramFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `histogramAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$HistogramAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:histogram-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$HistogramFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :histogram-aggregated-field-wells)]
      (. builder histogramAggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-histogram-visual-property-builder
  "The cfn-analysis-histogram-visual-property-builder function buildes out new instances of 
CfnAnalysis$HistogramVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$HistogramVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-insight-configuration-property-builder
  "The cfn-analysis-insight-configuration-property-builder function buildes out new instances of 
CfnAnalysis$InsightConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computations` | java.util.List | [[cdk.support/lookup-entry]] | `:computations` |
| `customNarrative` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-narrative` |"
  [stack id config]
  (let [builder (CfnAnalysis$InsightConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computations)]
      (. builder computations data))
    (when-let [data (lookup-entry config id :custom-narrative)]
      (. builder customNarrative data))
    (.build builder)))


(defn cfn-analysis-insight-visual-property-builder
  "The cfn-analysis-insight-visual-property-builder function buildes out new instances of 
CfnAnalysis$InsightVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `insightConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:insight-configuration` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$InsightVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :insight-configuration)]
      (. builder insightConfiguration data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-integer-default-values-property-builder
  "The cfn-analysis-integer-default-values-property-builder function buildes out new instances of 
CfnAnalysis$IntegerDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DynamicDefaultValueProperty | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |"
  [stack id config]
  (let [builder (CfnAnalysis$IntegerDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :dynamic-value)]
      (. builder dynamicValue data))
    (when-let [data (lookup-entry config id :static-values)]
      (. builder staticValues data))
    (.build builder)))


(defn cfn-analysis-integer-parameter-declaration-property-builder
  "The cfn-analysis-integer-parameter-declaration-property-builder function buildes out new instances of 
CfnAnalysis$IntegerParameterDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-when-unset` |"
  [stack id config]
  (let [builder (CfnAnalysis$IntegerParameterDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-values)]
      (. builder defaultValues data))
    (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
      (. builder mappedDataSetParameters data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :parameter-value-type)]
      (. builder parameterValueType data))
    (when-let [data (lookup-entry config id :value-when-unset)]
      (. builder valueWhenUnset data))
    (.build builder)))


(defn cfn-analysis-integer-parameter-property-builder
  "The cfn-analysis-integer-parameter-property-builder function buildes out new instances of 
CfnAnalysis$IntegerParameterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$IntegerParameterProperty$Builder.)]
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-integer-value-when-unset-configuration-property-builder
  "The cfn-analysis-integer-value-when-unset-configuration-property-builder function buildes out new instances of 
CfnAnalysis$IntegerValueWhenUnsetConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |"
  [stack id config]
  (let [builder (CfnAnalysis$IntegerValueWhenUnsetConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-value)]
      (. builder customValue data))
    (when-let [data (lookup-entry config id :value-when-unset-option)]
      (. builder valueWhenUnsetOption data))
    (.build builder)))


(defn cfn-analysis-items-limit-configuration-property-builder
  "The cfn-analysis-items-limit-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ItemsLimitConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `itemsLimit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:items-limit` |
| `otherCategories` | java.lang.String | [[cdk.support/lookup-entry]] | `:other-categories` |"
  [stack id config]
  (let [builder (CfnAnalysis$ItemsLimitConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :items-limit)]
      (. builder itemsLimit data))
    (when-let [data (lookup-entry config id :other-categories)]
      (. builder otherCategories data))
    (.build builder)))


(defn cfn-analysis-kpi-actual-value-conditional-formatting-property-builder
  "The cfn-analysis-kpi-actual-value-conditional-formatting-property-builder function buildes out new instances of 
CfnAnalysis$KPIActualValueConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnAnalysis$KPIActualValueConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-analysis-kpi-comparison-value-conditional-formatting-property-builder
  "The cfn-analysis-kpi-comparison-value-conditional-formatting-property-builder function buildes out new instances of 
CfnAnalysis$KPIComparisonValueConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingIconProperty | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnAnalysis$KPIComparisonValueConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-analysis-kpi-conditional-formatting-option-property-builder
  "The cfn-analysis-kpi-conditional-formatting-option-property-builder function buildes out new instances of 
CfnAnalysis$KPIConditionalFormattingOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actualValue` | software.amazon.awscdk.services.quicksight.CfnAnalysis$KPIActualValueConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:actual-value` |
| `comparisonValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:comparison-value` |
| `primaryValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-value` |
| `progressBar` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:progress-bar` |"
  [stack id config]
  (let [builder (CfnAnalysis$KPIConditionalFormattingOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :actual-value)]
      (. builder actualValue data))
    (when-let [data (lookup-entry config id :comparison-value)]
      (. builder comparisonValue data))
    (when-let [data (lookup-entry config id :primary-value)]
      (. builder primaryValue data))
    (when-let [data (lookup-entry config id :progress-bar)]
      (. builder progressBar data))
    (.build builder)))


(defn cfn-analysis-kpi-conditional-formatting-property-builder
  "The cfn-analysis-kpi-conditional-formatting-property-builder function buildes out new instances of 
CfnAnalysis$KPIConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$KPIConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :conditional-formatting-options)]
      (. builder conditionalFormattingOptions data))
    (.build builder)))


(defn cfn-analysis-kpi-configuration-property-builder
  "The cfn-analysis-kpi-configuration-property-builder function buildes out new instances of 
CfnAnalysis$KPIConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$KPIFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `kpiOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:kpi-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$KPIConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :kpi-options)]
      (. builder kpiOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (.build builder)))


(defn cfn-analysis-kpi-field-wells-property-builder
  "The cfn-analysis-kpi-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$KPIFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target-values` |
| `trendGroups` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:trend-groups` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$KPIFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :target-values)]
      (. builder targetValues data))
    (when-let [data (lookup-entry config id :trend-groups)]
      (. builder trendGroups data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-kpi-options-property-builder
  "The cfn-analysis-kpi-options-property-builder function buildes out new instances of 
CfnAnalysis$KPIOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comparison` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ComparisonConfigurationProperty | [[cdk.support/lookup-entry]] | `:comparison` |
| `primaryValueDisplayType` | java.lang.String | [[cdk.support/lookup-entry]] | `:primary-value-display-type` |
| `primaryValueFontConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:primary-value-font-configuration` |
| `progressBar` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:progress-bar` |
| `secondaryValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-value` |
| `secondaryValueFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-value-font-configuration` |
| `sparkline` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sparkline` |
| `trendArrows` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TrendArrowOptionsProperty | [[cdk.support/lookup-entry]] | `:trend-arrows` |
| `visualLayoutOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$KPIVisualLayoutOptionsProperty | [[cdk.support/lookup-entry]] | `:visual-layout-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$KPIOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :comparison)]
      (. builder comparison data))
    (when-let [data (lookup-entry config id :primary-value-display-type)]
      (. builder primaryValueDisplayType data))
    (when-let [data (lookup-entry config id :primary-value-font-configuration)]
      (. builder primaryValueFontConfiguration data))
    (when-let [data (lookup-entry config id :progress-bar)]
      (. builder progressBar data))
    (when-let [data (lookup-entry config id :secondary-value)]
      (. builder secondaryValue data))
    (when-let [data (lookup-entry config id :secondary-value-font-configuration)]
      (. builder secondaryValueFontConfiguration data))
    (when-let [data (lookup-entry config id :sparkline)]
      (. builder sparkline data))
    (when-let [data (lookup-entry config id :trend-arrows)]
      (. builder trendArrows data))
    (when-let [data (lookup-entry config id :visual-layout-options)]
      (. builder visualLayoutOptions data))
    (.build builder)))


(defn cfn-analysis-kpi-primary-value-conditional-formatting-property-builder
  "The cfn-analysis-kpi-primary-value-conditional-formatting-property-builder function buildes out new instances of 
CfnAnalysis$KPIPrimaryValueConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingIconProperty | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnAnalysis$KPIPrimaryValueConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-analysis-kpi-progress-bar-conditional-formatting-property-builder
  "The cfn-analysis-kpi-progress-bar-conditional-formatting-property-builder function buildes out new instances of 
CfnAnalysis$KPIProgressBarConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `foregroundColor` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:foreground-color` |"
  [stack id config]
  (let [builder (CfnAnalysis$KPIProgressBarConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :foreground-color)]
      (. builder foregroundColor data))
    (.build builder)))


(defn cfn-analysis-kpi-sort-configuration-property-builder
  "The cfn-analysis-kpi-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$KPISortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `trendGroupSort` | java.util.List | [[cdk.support/lookup-entry]] | `:trend-group-sort` |"
  [stack id config]
  (let [builder (CfnAnalysis$KPISortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :trend-group-sort)]
      (. builder trendGroupSort data))
    (.build builder)))


(defn cfn-analysis-kpi-sparkline-options-property-builder
  "The cfn-analysis-kpi-sparkline-options-property-builder function buildes out new instances of 
CfnAnalysis$KPISparklineOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `tooltipVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-visibility` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$KPISparklineOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :tooltip-visibility)]
      (. builder tooltipVisibility data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-kpi-visual-layout-options-property-builder
  "The cfn-analysis-kpi-visual-layout-options-property-builder function buildes out new instances of 
CfnAnalysis$KPIVisualLayoutOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `standardLayout` | software.amazon.awscdk.services.quicksight.CfnAnalysis$KPIVisualStandardLayoutProperty | [[cdk.support/lookup-entry]] | `:standard-layout` |"
  [stack id config]
  (let [builder (CfnAnalysis$KPIVisualLayoutOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :standard-layout)]
      (. builder standardLayout data))
    (.build builder)))


(defn cfn-analysis-kpi-visual-property-builder
  "The cfn-analysis-kpi-visual-property-builder function buildes out new instances of 
CfnAnalysis$KPIVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `conditionalFormatting` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$KPIVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :conditional-formatting)]
      (. builder conditionalFormatting data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-kpi-visual-standard-layout-property-builder
  "The cfn-analysis-kpi-visual-standard-layout-property-builder function buildes out new instances of 
CfnAnalysis$KPIVisualStandardLayoutProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnAnalysis$KPIVisualStandardLayoutProperty$Builder.)]
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-analysis-label-options-property-builder
  "The cfn-analysis-label-options-property-builder function buildes out new instances of 
CfnAnalysis$LabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$LabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-layout-configuration-property-builder
  "The cfn-analysis-layout-configuration-property-builder function buildes out new instances of 
CfnAnalysis$LayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeFormLayout` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FreeFormLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:free-form-layout` |
| `gridLayout` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GridLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:grid-layout` |
| `sectionBasedLayout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:section-based-layout` |"
  [stack id config]
  (let [builder (CfnAnalysis$LayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :free-form-layout)]
      (. builder freeFormLayout data))
    (when-let [data (lookup-entry config id :grid-layout)]
      (. builder gridLayout data))
    (when-let [data (lookup-entry config id :section-based-layout)]
      (. builder sectionBasedLayout data))
    (.build builder)))


(defn cfn-analysis-layout-property-builder
  "The cfn-analysis-layout-property-builder function buildes out new instances of 
CfnAnalysis$LayoutProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configuration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$LayoutProperty$Builder.)]
    (when-let [data (lookup-entry config id :configuration)]
      (. builder configuration data))
    (.build builder)))


(defn cfn-analysis-legend-options-property-builder
  "The cfn-analysis-legend-options-property-builder function buildes out new instances of 
CfnAnalysis$LegendOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |"
  [stack id config]
  (let [builder (CfnAnalysis$LegendOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :height)]
      (. builder height data))
    (when-let [data (lookup-entry config id :position)]
      (. builder position data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (when-let [data (lookup-entry config id :width)]
      (. builder width data))
    (.build builder)))


(defn cfn-analysis-line-chart-aggregated-field-wells-property-builder
  "The cfn-analysis-line-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$LineChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `smallMultiples` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$LineChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :small-multiples)]
      (. builder smallMultiples data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-line-chart-configuration-property-builder
  "The cfn-analysis-line-chart-configuration-property-builder function buildes out new instances of 
CfnAnalysis$LineChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contributionAnalysisDefaults` | java.util.List | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `defaultSeriesSettings` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LineChartDefaultSeriesSettingsProperty | [[cdk.support/lookup-entry]] | `:default-series-settings` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `forecastConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:forecast-configurations` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LineSeriesAxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `secondaryYAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LineSeriesAxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:secondary-y-axis-display-options` |
| `secondaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:secondary-y-axis-label-options` |
| `series` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:series` |
| `smallMultiplesOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$LineChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
      (. builder contributionAnalysisDefaults data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :default-series-settings)]
      (. builder defaultSeriesSettings data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :forecast-configurations)]
      (. builder forecastConfigurations data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
      (. builder primaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
      (. builder primaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :reference-lines)]
      (. builder referenceLines data))
    (when-let [data (lookup-entry config id :secondary-y-axis-display-options)]
      (. builder secondaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :secondary-y-axis-label-options)]
      (. builder secondaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :series)]
      (. builder series data))
    (when-let [data (lookup-entry config id :small-multiples-options)]
      (. builder smallMultiplesOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (when-let [data (lookup-entry config id :x-axis-display-options)]
      (. builder xAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :x-axis-label-options)]
      (. builder xAxisLabelOptions data))
    (.build builder)))


(defn cfn-analysis-line-chart-default-series-settings-property-builder
  "The cfn-analysis-line-chart-default-series-settings-property-builder function buildes out new instances of 
CfnAnalysis$LineChartDefaultSeriesSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `lineStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-style-settings` |
| `markerStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:marker-style-settings` |"
  [stack id config]
  (let [builder (CfnAnalysis$LineChartDefaultSeriesSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-binding)]
      (. builder axisBinding data))
    (when-let [data (lookup-entry config id :line-style-settings)]
      (. builder lineStyleSettings data))
    (when-let [data (lookup-entry config id :marker-style-settings)]
      (. builder markerStyleSettings data))
    (.build builder)))


(defn cfn-analysis-line-chart-field-wells-property-builder
  "The cfn-analysis-line-chart-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$LineChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$LineChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :line-chart-aggregated-field-wells)]
      (. builder lineChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-line-chart-line-style-settings-property-builder
  "The cfn-analysis-line-chart-line-style-settings-property-builder function buildes out new instances of 
CfnAnalysis$LineChartLineStyleSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineInterpolation` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-interpolation` |
| `lineStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-style` |
| `lineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-visibility` |
| `lineWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-width` |"
  [stack id config]
  (let [builder (CfnAnalysis$LineChartLineStyleSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :line-interpolation)]
      (. builder lineInterpolation data))
    (when-let [data (lookup-entry config id :line-style)]
      (. builder lineStyle data))
    (when-let [data (lookup-entry config id :line-visibility)]
      (. builder lineVisibility data))
    (when-let [data (lookup-entry config id :line-width)]
      (. builder lineWidth data))
    (.build builder)))


(defn cfn-analysis-line-chart-marker-style-settings-property-builder
  "The cfn-analysis-line-chart-marker-style-settings-property-builder function buildes out new instances of 
CfnAnalysis$LineChartMarkerStyleSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `markerColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-color` |
| `markerShape` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-shape` |
| `markerSize` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-size` |
| `markerVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$LineChartMarkerStyleSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :marker-color)]
      (. builder markerColor data))
    (when-let [data (lookup-entry config id :marker-shape)]
      (. builder markerShape data))
    (when-let [data (lookup-entry config id :marker-size)]
      (. builder markerSize data))
    (when-let [data (lookup-entry config id :marker-visibility)]
      (. builder markerVisibility data))
    (.build builder)))


(defn cfn-analysis-line-chart-series-settings-property-builder
  "The cfn-analysis-line-chart-series-settings-property-builder function buildes out new instances of 
CfnAnalysis$LineChartSeriesSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-style-settings` |
| `markerStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:marker-style-settings` |"
  [stack id config]
  (let [builder (CfnAnalysis$LineChartSeriesSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :line-style-settings)]
      (. builder lineStyleSettings data))
    (when-let [data (lookup-entry config id :marker-style-settings)]
      (. builder markerStyleSettings data))
    (.build builder)))


(defn cfn-analysis-line-chart-sort-configuration-property-builder
  "The cfn-analysis-line-chart-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$LineChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit-configuration` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:color-items-limit-configuration` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |"
  [stack id config]
  (let [builder (CfnAnalysis$LineChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit-configuration)]
      (. builder categoryItemsLimitConfiguration data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :color-items-limit-configuration)]
      (. builder colorItemsLimitConfiguration data))
    (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
      (. builder smallMultiplesLimitConfiguration data))
    (when-let [data (lookup-entry config id :small-multiples-sort)]
      (. builder smallMultiplesSort data))
    (.build builder)))


(defn cfn-analysis-line-chart-visual-property-builder
  "The cfn-analysis-line-chart-visual-property-builder function buildes out new instances of 
CfnAnalysis$LineChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LineChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$LineChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-line-series-axis-display-options-property-builder
  "The cfn-analysis-line-series-axis-display-options-property-builder function buildes out new instances of 
CfnAnalysis$LineSeriesAxisDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:axis-options` |
| `missingDataConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:missing-data-configurations` |"
  [stack id config]
  (let [builder (CfnAnalysis$LineSeriesAxisDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-options)]
      (. builder axisOptions data))
    (when-let [data (lookup-entry config id :missing-data-configurations)]
      (. builder missingDataConfigurations data))
    (.build builder)))


(defn cfn-analysis-list-control-display-options-property-builder
  "The cfn-analysis-list-control-display-options-property-builder function buildes out new instances of 
CfnAnalysis$ListControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `searchOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ListControlSearchOptionsProperty | [[cdk.support/lookup-entry]] | `:search-options` |
| `selectAllOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ListControlSelectAllOptionsProperty | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `titleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$ListControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :search-options)]
      (. builder searchOptions data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-analysis-list-control-search-options-property-builder
  "The cfn-analysis-list-control-search-options-property-builder function buildes out new instances of 
CfnAnalysis$ListControlSearchOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$ListControlSearchOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-list-control-select-all-options-property-builder
  "The cfn-analysis-list-control-select-all-options-property-builder function buildes out new instances of 
CfnAnalysis$ListControlSelectAllOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$ListControlSelectAllOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-loading-animation-property-builder
  "The cfn-analysis-loading-animation-property-builder function buildes out new instances of 
CfnAnalysis$LoadingAnimationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$LoadingAnimationProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-local-navigation-configuration-property-builder
  "The cfn-analysis-local-navigation-configuration-property-builder function buildes out new instances of 
CfnAnalysis$LocalNavigationConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetSheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:target-sheet-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$LocalNavigationConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :target-sheet-id)]
      (. builder targetSheetId data))
    (.build builder)))


(defn cfn-analysis-long-format-text-property-builder
  "The cfn-analysis-long-format-text-property-builder function buildes out new instances of 
CfnAnalysis$LongFormatTextProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `plainText` | java.lang.String | [[cdk.support/lookup-entry]] | `:plain-text` |
| `richText` | java.lang.String | [[cdk.support/lookup-entry]] | `:rich-text` |"
  [stack id config]
  (let [builder (CfnAnalysis$LongFormatTextProperty$Builder.)]
    (when-let [data (lookup-entry config id :plain-text)]
      (. builder plainText data))
    (when-let [data (lookup-entry config id :rich-text)]
      (. builder richText data))
    (.build builder)))


(defn cfn-analysis-mapped-data-set-parameter-property-builder
  "The cfn-analysis-mapped-data-set-parameter-property-builder function buildes out new instances of 
CfnAnalysis$MappedDataSetParameterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `dataSetParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-parameter-name` |"
  [stack id config]
  (let [builder (CfnAnalysis$MappedDataSetParameterProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :data-set-parameter-name)]
      (. builder dataSetParameterName data))
    (.build builder)))


(defn cfn-analysis-maximum-label-type-property-builder
  "The cfn-analysis-maximum-label-type-property-builder function buildes out new instances of 
CfnAnalysis$MaximumLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$MaximumLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-maximum-minimum-computation-property-builder
  "The cfn-analysis-maximum-minimum-computation-property-builder function buildes out new instances of 
CfnAnalysis$MaximumMinimumComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `time` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$MaximumMinimumComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-measure-field-property-builder
  "The cfn-analysis-measure-field-property-builder function buildes out new instances of 
CfnAnalysis$MeasureFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `calculatedMeasureField` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CalculatedMeasureFieldProperty | [[cdk.support/lookup-entry]] | `:calculated-measure-field` |
| `categoricalMeasureField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:categorical-measure-field` |
| `dateMeasureField` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DateMeasureFieldProperty | [[cdk.support/lookup-entry]] | `:date-measure-field` |
| `numericalMeasureField` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumericalMeasureFieldProperty | [[cdk.support/lookup-entry]] | `:numerical-measure-field` |"
  [stack id config]
  (let [builder (CfnAnalysis$MeasureFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :calculated-measure-field)]
      (. builder calculatedMeasureField data))
    (when-let [data (lookup-entry config id :categorical-measure-field)]
      (. builder categoricalMeasureField data))
    (when-let [data (lookup-entry config id :date-measure-field)]
      (. builder dateMeasureField data))
    (when-let [data (lookup-entry config id :numerical-measure-field)]
      (. builder numericalMeasureField data))
    (.build builder)))


(defn cfn-analysis-metric-comparison-computation-property-builder
  "The cfn-analysis-metric-comparison-computation-property-builder function buildes out new instances of 
CfnAnalysis$MetricComparisonComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `fromValue` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:from-value` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `targetValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target-value` |
| `time` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |"
  [stack id config]
  (let [builder (CfnAnalysis$MetricComparisonComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :from-value)]
      (. builder fromValue data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :target-value)]
      (. builder targetValue data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (.build builder)))


(defn cfn-analysis-minimum-label-type-property-builder
  "The cfn-analysis-minimum-label-type-property-builder function buildes out new instances of 
CfnAnalysis$MinimumLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$MinimumLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-missing-data-configuration-property-builder
  "The cfn-analysis-missing-data-configuration-property-builder function buildes out new instances of 
CfnAnalysis$MissingDataConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treatmentOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:treatment-option` |"
  [stack id config]
  (let [builder (CfnAnalysis$MissingDataConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :treatment-option)]
      (. builder treatmentOption data))
    (.build builder)))


(defn cfn-analysis-negative-value-configuration-property-builder
  "The cfn-analysis-negative-value-configuration-property-builder function buildes out new instances of 
CfnAnalysis$NegativeValueConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayMode` | java.lang.String | [[cdk.support/lookup-entry]] | `:display-mode` |"
  [stack id config]
  (let [builder (CfnAnalysis$NegativeValueConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-mode)]
      (. builder displayMode data))
    (.build builder)))


(defn cfn-analysis-null-value-format-configuration-property-builder
  "The cfn-analysis-null-value-format-configuration-property-builder function buildes out new instances of 
CfnAnalysis$NullValueFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `nullString` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-string` |"
  [stack id config]
  (let [builder (CfnAnalysis$NullValueFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :null-string)]
      (. builder nullString data))
    (.build builder)))


(defn cfn-analysis-number-display-format-configuration-property-builder
  "The cfn-analysis-number-display-format-configuration-property-builder function buildes out new instances of 
CfnAnalysis$NumberDisplayFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NegativeValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numberScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:number-scale` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumericSeparatorConfigurationProperty | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |"
  [stack id config]
  (let [builder (CfnAnalysis$NumberDisplayFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :decimal-places-configuration)]
      (. builder decimalPlacesConfiguration data))
    (when-let [data (lookup-entry config id :negative-value-configuration)]
      (. builder negativeValueConfiguration data))
    (when-let [data (lookup-entry config id :null-value-format-configuration)]
      (. builder nullValueFormatConfiguration data))
    (when-let [data (lookup-entry config id :number-scale)]
      (. builder numberScale data))
    (when-let [data (lookup-entry config id :prefix)]
      (. builder prefix data))
    (when-let [data (lookup-entry config id :separator-configuration)]
      (. builder separatorConfiguration data))
    (when-let [data (lookup-entry config id :suffix)]
      (. builder suffix data))
    (.build builder)))


(defn cfn-analysis-number-format-configuration-property-builder
  "The cfn-analysis-number-format-configuration-property-builder function buildes out new instances of 
CfnAnalysis$NumberFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$NumberFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (.build builder)))


(defn cfn-analysis-numeric-axis-options-property-builder
  "The cfn-analysis-numeric-axis-options-property-builder function buildes out new instances of 
CfnAnalysis$NumericAxisOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `range` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range` |
| `scale` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scale` |"
  [stack id config]
  (let [builder (CfnAnalysis$NumericAxisOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :range)]
      (. builder range data))
    (when-let [data (lookup-entry config id :scale)]
      (. builder scale data))
    (.build builder)))


(defn cfn-analysis-numeric-equality-drill-down-filter-property-builder
  "The cfn-analysis-numeric-equality-drill-down-filter-property-builder function buildes out new instances of 
CfnAnalysis$NumericEqualityDrillDownFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$NumericEqualityDrillDownFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-numeric-equality-filter-property-builder
  "The cfn-analysis-numeric-equality-filter-property-builder function buildes out new instances of 
CfnAnalysis$NumericEqualityFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$NumericEqualityFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :match-operator)]
      (. builder matchOperator data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-numeric-format-configuration-property-builder
  "The cfn-analysis-numeric-format-configuration-property-builder function buildes out new instances of 
CfnAnalysis$NumericFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `currencyDisplayFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:currency-display-format-configuration` |
| `numberDisplayFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumberDisplayFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:number-display-format-configuration` |
| `percentageDisplayFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:percentage-display-format-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$NumericFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :currency-display-format-configuration)]
      (. builder currencyDisplayFormatConfiguration data))
    (when-let [data (lookup-entry config id :number-display-format-configuration)]
      (. builder numberDisplayFormatConfiguration data))
    (when-let [data (lookup-entry config id :percentage-display-format-configuration)]
      (. builder percentageDisplayFormatConfiguration data))
    (.build builder)))


(defn cfn-analysis-numeric-range-filter-property-builder
  "The cfn-analysis-numeric-range-filter-property-builder function buildes out new instances of 
CfnAnalysis$NumericRangeFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `includeMaximum` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:include-maximum` |
| `includeMinimum` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:include-minimum` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `rangeMaximum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-maximum` |
| `rangeMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-minimum` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$NumericRangeFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :include-maximum)]
      (. builder includeMaximum data))
    (when-let [data (lookup-entry config id :include-minimum)]
      (. builder includeMinimum data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :range-maximum)]
      (. builder rangeMaximum data))
    (when-let [data (lookup-entry config id :range-minimum)]
      (. builder rangeMinimum data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (.build builder)))


(defn cfn-analysis-numeric-range-filter-value-property-builder
  "The cfn-analysis-numeric-range-filter-value-property-builder function buildes out new instances of 
CfnAnalysis$NumericRangeFilterValueProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameter` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter` |
| `staticValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:static-value` |"
  [stack id config]
  (let [builder (CfnAnalysis$NumericRangeFilterValueProperty$Builder.)]
    (when-let [data (lookup-entry config id :parameter)]
      (. builder parameter data))
    (when-let [data (lookup-entry config id :static-value)]
      (. builder staticValue data))
    (.build builder)))


(defn cfn-analysis-numeric-separator-configuration-property-builder
  "The cfn-analysis-numeric-separator-configuration-property-builder function buildes out new instances of 
CfnAnalysis$NumericSeparatorConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalSeparator` | java.lang.String | [[cdk.support/lookup-entry]] | `:decimal-separator` |
| `thousandsSeparator` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:thousands-separator` |"
  [stack id config]
  (let [builder (CfnAnalysis$NumericSeparatorConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :decimal-separator)]
      (. builder decimalSeparator data))
    (when-let [data (lookup-entry config id :thousands-separator)]
      (. builder thousandsSeparator data))
    (.build builder)))


(defn cfn-analysis-numerical-aggregation-function-property-builder
  "The cfn-analysis-numerical-aggregation-function-property-builder function buildes out new instances of 
CfnAnalysis$NumericalAggregationFunctionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentileAggregation` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PercentileAggregationProperty | [[cdk.support/lookup-entry]] | `:percentile-aggregation` |
| `simpleNumericalAggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-numerical-aggregation` |"
  [stack id config]
  (let [builder (CfnAnalysis$NumericalAggregationFunctionProperty$Builder.)]
    (when-let [data (lookup-entry config id :percentile-aggregation)]
      (. builder percentileAggregation data))
    (when-let [data (lookup-entry config id :simple-numerical-aggregation)]
      (. builder simpleNumericalAggregation data))
    (.build builder)))


(defn cfn-analysis-numerical-dimension-field-property-builder
  "The cfn-analysis-numerical-dimension-field-property-builder function buildes out new instances of 
CfnAnalysis$NumericalDimensionFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumberFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$NumericalDimensionFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-analysis-numerical-measure-field-property-builder
  "The cfn-analysis-numerical-measure-field-property-builder function buildes out new instances of 
CfnAnalysis$NumericalMeasureFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumericalAggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NumberFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$NumericalMeasureFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (.build builder)))


(defn cfn-analysis-pagination-configuration-property-builder
  "The cfn-analysis-pagination-configuration-property-builder function buildes out new instances of 
CfnAnalysis$PaginationConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pageNumber` | java.lang.Number | [[cdk.support/lookup-entry]] | `:page-number` |
| `pageSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:page-size` |"
  [stack id config]
  (let [builder (CfnAnalysis$PaginationConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :page-number)]
      (. builder pageNumber data))
    (when-let [data (lookup-entry config id :page-size)]
      (. builder pageSize data))
    (.build builder)))


(defn cfn-analysis-panel-configuration-property-builder
  "The cfn-analysis-panel-configuration-property-builder function buildes out new instances of 
CfnAnalysis$PanelConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-color` |
| `backgroundVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-visibility` |
| `borderColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-color` |
| `borderStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-style` |
| `borderThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-thickness` |
| `borderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-visibility` |
| `gutterSpacing` | java.lang.String | [[cdk.support/lookup-entry]] | `:gutter-spacing` |
| `gutterVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:gutter-visibility` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PanelTitleOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnAnalysis$PanelConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-color)]
      (. builder backgroundColor data))
    (when-let [data (lookup-entry config id :background-visibility)]
      (. builder backgroundVisibility data))
    (when-let [data (lookup-entry config id :border-color)]
      (. builder borderColor data))
    (when-let [data (lookup-entry config id :border-style)]
      (. builder borderStyle data))
    (when-let [data (lookup-entry config id :border-thickness)]
      (. builder borderThickness data))
    (when-let [data (lookup-entry config id :border-visibility)]
      (. builder borderVisibility data))
    (when-let [data (lookup-entry config id :gutter-spacing)]
      (. builder gutterSpacing data))
    (when-let [data (lookup-entry config id :gutter-visibility)]
      (. builder gutterVisibility data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-analysis-panel-title-options-property-builder
  "The cfn-analysis-panel-title-options-property-builder function buildes out new instances of 
CfnAnalysis$PanelTitleOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `horizontalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-text-alignment` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$PanelTitleOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (when-let [data (lookup-entry config id :horizontal-text-alignment)]
      (. builder horizontalTextAlignment data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-parameter-control-property-builder
  "The cfn-analysis-parameter-control-property-builder function buildes out new instances of 
CfnAnalysis$ParameterControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimePicker` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ParameterDateTimePickerControlProperty | [[cdk.support/lookup-entry]] | `:date-time-picker` |
| `dropdown` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ParameterDropDownControlProperty | [[cdk.support/lookup-entry]] | `:dropdown` |
| `list` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:list` |
| `slider` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:slider` |
| `textArea` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-area` |
| `textField` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ParameterTextFieldControlProperty | [[cdk.support/lookup-entry]] | `:text-field` |"
  [stack id config]
  (let [builder (CfnAnalysis$ParameterControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-picker)]
      (. builder dateTimePicker data))
    (when-let [data (lookup-entry config id :dropdown)]
      (. builder dropdown data))
    (when-let [data (lookup-entry config id :list)]
      (. builder list data))
    (when-let [data (lookup-entry config id :slider)]
      (. builder slider data))
    (when-let [data (lookup-entry config id :text-area)]
      (. builder textArea data))
    (when-let [data (lookup-entry config id :text-field)]
      (. builder textField data))
    (.build builder)))


(defn cfn-analysis-parameter-date-time-picker-control-property-builder
  "The cfn-analysis-parameter-date-time-picker-control-property-builder function buildes out new instances of 
CfnAnalysis$ParameterDateTimePickerControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnAnalysis$ParameterDateTimePickerControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-analysis-parameter-declaration-property-builder
  "The cfn-analysis-parameter-declaration-property-builder function buildes out new instances of 
CfnAnalysis$ParameterDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeParameterDeclaration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DateTimeParameterDeclarationProperty | [[cdk.support/lookup-entry]] | `:date-time-parameter-declaration` |
| `decimalParameterDeclaration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DecimalParameterDeclarationProperty | [[cdk.support/lookup-entry]] | `:decimal-parameter-declaration` |
| `integerParameterDeclaration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:integer-parameter-declaration` |
| `stringParameterDeclaration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:string-parameter-declaration` |"
  [stack id config]
  (let [builder (CfnAnalysis$ParameterDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-parameter-declaration)]
      (. builder dateTimeParameterDeclaration data))
    (when-let [data (lookup-entry config id :decimal-parameter-declaration)]
      (. builder decimalParameterDeclaration data))
    (when-let [data (lookup-entry config id :integer-parameter-declaration)]
      (. builder integerParameterDeclaration data))
    (when-let [data (lookup-entry config id :string-parameter-declaration)]
      (. builder stringParameterDeclaration data))
    (.build builder)))


(defn cfn-analysis-parameter-drop-down-control-property-builder
  "The cfn-analysis-parameter-drop-down-control-property-builder function buildes out new instances of 
CfnAnalysis$ParameterDropDownControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `selectableValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnAnalysis$ParameterDropDownControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cascading-control-configuration)]
      (. builder cascadingControlConfiguration data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-analysis-parameter-list-control-property-builder
  "The cfn-analysis-parameter-list-control-property-builder function buildes out new instances of 
CfnAnalysis$ParameterListControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ListControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ParameterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnAnalysis$ParameterListControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cascading-control-configuration)]
      (. builder cascadingControlConfiguration data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-analysis-parameter-selectable-values-property-builder
  "The cfn-analysis-parameter-selectable-values-property-builder function buildes out new instances of 
CfnAnalysis$ParameterSelectableValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `linkToDataSetColumn` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:link-to-data-set-column` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$ParameterSelectableValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :link-to-data-set-column)]
      (. builder linkToDataSetColumn data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-parameter-slider-control-property-builder
  "The cfn-analysis-parameter-slider-control-property-builder function buildes out new instances of 
CfnAnalysis$ParameterSliderControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SliderControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnAnalysis$ParameterSliderControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :maximum-value)]
      (. builder maximumValue data))
    (when-let [data (lookup-entry config id :minimum-value)]
      (. builder minimumValue data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :step-size)]
      (. builder stepSize data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-analysis-parameter-text-area-control-property-builder
  "The cfn-analysis-parameter-text-area-control-property-builder function buildes out new instances of 
CfnAnalysis$ParameterTextAreaControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TextAreaControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnAnalysis$ParameterTextAreaControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :delimiter)]
      (. builder delimiter data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-analysis-parameter-text-field-control-property-builder
  "The cfn-analysis-parameter-text-field-control-property-builder function buildes out new instances of 
CfnAnalysis$ParameterTextFieldControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnAnalysis$ParameterTextFieldControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-analysis-parameters-property-builder
  "The cfn-analysis-parameters-property-builder function buildes out new instances of 
CfnAnalysis$ParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:date-time-parameters` |
| `decimalParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-parameters` |
| `integerParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:integer-parameters` |
| `stringParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:string-parameters` |"
  [stack id config]
  (let [builder (CfnAnalysis$ParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-parameters)]
      (. builder dateTimeParameters data))
    (when-let [data (lookup-entry config id :decimal-parameters)]
      (. builder decimalParameters data))
    (when-let [data (lookup-entry config id :integer-parameters)]
      (. builder integerParameters data))
    (when-let [data (lookup-entry config id :string-parameters)]
      (. builder stringParameters data))
    (.build builder)))


(defn cfn-analysis-percent-visible-range-property-builder
  "The cfn-analysis-percent-visible-range-property-builder function buildes out new instances of 
CfnAnalysis$PercentVisibleRangeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `from` | java.lang.Number | [[cdk.support/lookup-entry]] | `:from` |
| `to` | java.lang.Number | [[cdk.support/lookup-entry]] | `:to` |"
  [stack id config]
  (let [builder (CfnAnalysis$PercentVisibleRangeProperty$Builder.)]
    (when-let [data (lookup-entry config id :from)]
      (. builder from data))
    (when-let [data (lookup-entry config id :to)]
      (. builder to data))
    (.build builder)))


(defn cfn-analysis-percentage-display-format-configuration-property-builder
  "The cfn-analysis-percentage-display-format-configuration-property-builder function buildes out new instances of 
CfnAnalysis$PercentageDisplayFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DecimalPlacesConfigurationProperty | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |"
  [stack id config]
  (let [builder (CfnAnalysis$PercentageDisplayFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :decimal-places-configuration)]
      (. builder decimalPlacesConfiguration data))
    (when-let [data (lookup-entry config id :negative-value-configuration)]
      (. builder negativeValueConfiguration data))
    (when-let [data (lookup-entry config id :null-value-format-configuration)]
      (. builder nullValueFormatConfiguration data))
    (when-let [data (lookup-entry config id :prefix)]
      (. builder prefix data))
    (when-let [data (lookup-entry config id :separator-configuration)]
      (. builder separatorConfiguration data))
    (when-let [data (lookup-entry config id :suffix)]
      (. builder suffix data))
    (.build builder)))


(defn cfn-analysis-percentile-aggregation-property-builder
  "The cfn-analysis-percentile-aggregation-property-builder function buildes out new instances of 
CfnAnalysis$PercentileAggregationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentileValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:percentile-value` |"
  [stack id config]
  (let [builder (CfnAnalysis$PercentileAggregationProperty$Builder.)]
    (when-let [data (lookup-entry config id :percentile-value)]
      (. builder percentileValue data))
    (.build builder)))


(defn cfn-analysis-period-over-period-computation-property-builder
  "The cfn-analysis-period-over-period-computation-property-builder function buildes out new instances of 
CfnAnalysis$PeriodOverPeriodComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `time` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$PeriodOverPeriodComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-period-to-date-computation-property-builder
  "The cfn-analysis-period-to-date-computation-property-builder function buildes out new instances of 
CfnAnalysis$PeriodToDateComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodTimeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:period-time-granularity` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$PeriodToDateComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :period-time-granularity)]
      (. builder periodTimeGranularity data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-pie-chart-aggregated-field-wells-property-builder
  "The cfn-analysis-pie-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$PieChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `smallMultiples` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$PieChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :small-multiples)]
      (. builder smallMultiples data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-pie-chart-configuration-property-builder
  "The cfn-analysis-pie-chart-configuration-property-builder function buildes out new instances of 
CfnAnalysis$PieChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `contributionAnalysisDefaults` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `donutOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:donut-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PieChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `smallMultiplesOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PieChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnAnalysis$PieChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
      (. builder contributionAnalysisDefaults data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :donut-options)]
      (. builder donutOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :small-multiples-options)]
      (. builder smallMultiplesOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :value-label-options)]
      (. builder valueLabelOptions data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-analysis-pie-chart-field-wells-property-builder
  "The cfn-analysis-pie-chart-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$PieChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pieChartAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PieChartAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:pie-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$PieChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :pie-chart-aggregated-field-wells)]
      (. builder pieChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-pie-chart-sort-configuration-property-builder
  "The cfn-analysis-pie-chart-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$PieChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |"
  [stack id config]
  (let [builder (CfnAnalysis$PieChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
      (. builder smallMultiplesLimitConfiguration data))
    (when-let [data (lookup-entry config id :small-multiples-sort)]
      (. builder smallMultiplesSort data))
    (.build builder)))


(defn cfn-analysis-pie-chart-visual-property-builder
  "The cfn-analysis-pie-chart-visual-property-builder function buildes out new instances of 
CfnAnalysis$PieChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PieChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$PieChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-pivot-field-sort-options-property-builder
  "The cfn-analysis-pivot-field-sort-options-property-builder function buildes out new instances of 
CfnAnalysis$PivotFieldSortOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `sortBy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-by` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotFieldSortOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :sort-by)]
      (. builder sortBy data))
    (.build builder)))


(defn cfn-analysis-pivot-table-aggregated-field-wells-property-builder
  "The cfn-analysis-pivot-table-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `rows` | java.util.List | [[cdk.support/lookup-entry]] | `:rows` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (when-let [data (lookup-entry config id :rows)]
      (. builder rows data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-pivot-table-cell-conditional-formatting-property-builder
  "The cfn-analysis-pivot-table-cell-conditional-formatting-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableCellConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `scope` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scope` |
| `scopes` | java.util.List | [[cdk.support/lookup-entry]] | `:scopes` |
| `textFormat` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TextConditionalFormatProperty | [[cdk.support/lookup-entry]] | `:text-format` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableCellConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :scope)]
      (. builder scope data))
    (when-let [data (lookup-entry config id :scopes)]
      (. builder scopes data))
    (when-let [data (lookup-entry config id :text-format)]
      (. builder textFormat data))
    (.build builder)))


(defn cfn-analysis-pivot-table-conditional-formatting-option-property-builder
  "The cfn-analysis-pivot-table-conditional-formatting-option-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableConditionalFormattingOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cell` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cell` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableConditionalFormattingOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :cell)]
      (. builder cell data))
    (.build builder)))


(defn cfn-analysis-pivot-table-conditional-formatting-property-builder
  "The cfn-analysis-pivot-table-conditional-formatting-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :conditional-formatting-options)]
      (. builder conditionalFormattingOptions data))
    (.build builder)))


(defn cfn-analysis-pivot-table-conditional-formatting-scope-property-builder
  "The cfn-analysis-pivot-table-conditional-formatting-scope-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableConditionalFormattingScopeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `role` | java.lang.String | [[cdk.support/lookup-entry]] | `:role` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableConditionalFormattingScopeProperty$Builder.)]
    (when-let [data (lookup-entry config id :role)]
      (. builder role data))
    (.build builder)))


(defn cfn-analysis-pivot-table-configuration-property-builder
  "The cfn-analysis-pivot-table-configuration-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PivotTableFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `paginatedReportOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PivotTablePaginatedReportOptionsProperty | [[cdk.support/lookup-entry]] | `:paginated-report-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tableOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PivotTableOptionsProperty | [[cdk.support/lookup-entry]] | `:table-options` |
| `totalOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PivotTableTotalOptionsProperty | [[cdk.support/lookup-entry]] | `:total-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-options)]
      (. builder fieldOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :paginated-report-options)]
      (. builder paginatedReportOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :table-options)]
      (. builder tableOptions data))
    (when-let [data (lookup-entry config id :total-options)]
      (. builder totalOptions data))
    (.build builder)))


(defn cfn-analysis-pivot-table-data-path-option-property-builder
  "The cfn-analysis-pivot-table-data-path-option-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableDataPathOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathList` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-path-list` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableDataPathOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-path-list)]
      (. builder dataPathList data))
    (when-let [data (lookup-entry config id :width)]
      (. builder width data))
    (.build builder)))


(defn cfn-analysis-pivot-table-field-collapse-state-option-property-builder
  "The cfn-analysis-pivot-table-field-collapse-state-option-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableFieldCollapseStateOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `state` | java.lang.String | [[cdk.support/lookup-entry]] | `:state` |
| `target` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableFieldCollapseStateOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :state)]
      (. builder state data))
    (when-let [data (lookup-entry config id :target)]
      (. builder target data))
    (.build builder)))


(defn cfn-analysis-pivot-table-field-collapse-state-target-property-builder
  "The cfn-analysis-pivot-table-field-collapse-state-target-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableFieldCollapseStateTargetProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldDataPathValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-data-path-values` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableFieldCollapseStateTargetProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-data-path-values)]
      (. builder fieldDataPathValues data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (.build builder)))


(defn cfn-analysis-pivot-table-field-option-property-builder
  "The cfn-analysis-pivot-table-field-option-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableFieldOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableFieldOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-pivot-table-field-options-property-builder
  "The cfn-analysis-pivot-table-field-options-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableFieldOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `collapseStateOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:collapse-state-options` |
| `dataPathOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:data-path-options` |
| `selectedFieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-field-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableFieldOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :collapse-state-options)]
      (. builder collapseStateOptions data))
    (when-let [data (lookup-entry config id :data-path-options)]
      (. builder dataPathOptions data))
    (when-let [data (lookup-entry config id :selected-field-options)]
      (. builder selectedFieldOptions data))
    (.build builder)))


(defn cfn-analysis-pivot-table-field-subtotal-options-property-builder
  "The cfn-analysis-pivot-table-field-subtotal-options-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableFieldSubtotalOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableFieldSubtotalOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (.build builder)))


(defn cfn-analysis-pivot-table-field-wells-property-builder
  "The cfn-analysis-pivot-table-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pivotTableAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PivotTableAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:pivot-table-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :pivot-table-aggregated-field-wells)]
      (. builder pivotTableAggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-pivot-table-options-property-builder
  "The cfn-analysis-pivot-table-options-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:cell-style` |
| `collapsedRowDimensionsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:collapsed-row-dimensions-visibility` |
| `columnHeaderStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:column-header-style` |
| `columnNamesVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-names-visibility` |
| `defaultCellWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:default-cell-width` |
| `metricPlacement` | java.lang.String | [[cdk.support/lookup-entry]] | `:metric-placement` |
| `rowAlternateColorOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$RowAlternateColorOptionsProperty | [[cdk.support/lookup-entry]] | `:row-alternate-color-options` |
| `rowFieldNamesStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:row-field-names-style` |
| `rowHeaderStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-header-style` |
| `rowsLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rows-label-options` |
| `rowsLayout` | java.lang.String | [[cdk.support/lookup-entry]] | `:rows-layout` |
| `singleMetricVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:single-metric-visibility` |
| `toggleButtonsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:toggle-buttons-visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :cell-style)]
      (. builder cellStyle data))
    (when-let [data (lookup-entry config id :collapsed-row-dimensions-visibility)]
      (. builder collapsedRowDimensionsVisibility data))
    (when-let [data (lookup-entry config id :column-header-style)]
      (. builder columnHeaderStyle data))
    (when-let [data (lookup-entry config id :column-names-visibility)]
      (. builder columnNamesVisibility data))
    (when-let [data (lookup-entry config id :default-cell-width)]
      (. builder defaultCellWidth data))
    (when-let [data (lookup-entry config id :metric-placement)]
      (. builder metricPlacement data))
    (when-let [data (lookup-entry config id :row-alternate-color-options)]
      (. builder rowAlternateColorOptions data))
    (when-let [data (lookup-entry config id :row-field-names-style)]
      (. builder rowFieldNamesStyle data))
    (when-let [data (lookup-entry config id :row-header-style)]
      (. builder rowHeaderStyle data))
    (when-let [data (lookup-entry config id :rows-label-options)]
      (. builder rowsLabelOptions data))
    (when-let [data (lookup-entry config id :rows-layout)]
      (. builder rowsLayout data))
    (when-let [data (lookup-entry config id :single-metric-visibility)]
      (. builder singleMetricVisibility data))
    (when-let [data (lookup-entry config id :toggle-buttons-visibility)]
      (. builder toggleButtonsVisibility data))
    (.build builder)))


(defn cfn-analysis-pivot-table-paginated-report-options-property-builder
  "The cfn-analysis-pivot-table-paginated-report-options-property-builder function buildes out new instances of 
CfnAnalysis$PivotTablePaginatedReportOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `overflowColumnHeaderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:overflow-column-header-visibility` |
| `verticalOverflowVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-overflow-visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTablePaginatedReportOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :overflow-column-header-visibility)]
      (. builder overflowColumnHeaderVisibility data))
    (when-let [data (lookup-entry config id :vertical-overflow-visibility)]
      (. builder verticalOverflowVisibility data))
    (.build builder)))


(defn cfn-analysis-pivot-table-rows-label-options-property-builder
  "The cfn-analysis-pivot-table-rows-label-options-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableRowsLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableRowsLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-pivot-table-sort-by-property-builder
  "The cfn-analysis-pivot-table-sort-by-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableSortByProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `dataPath` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataPathSortProperty | [[cdk.support/lookup-entry]] | `:data-path` |
| `field` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FieldSortProperty | [[cdk.support/lookup-entry]] | `:field` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableSortByProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :data-path)]
      (. builder dataPath data))
    (when-let [data (lookup-entry config id :field)]
      (. builder field data))
    (.build builder)))


(defn cfn-analysis-pivot-table-sort-configuration-property-builder
  "The cfn-analysis-pivot-table-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldSortOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-sort-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-sort-options)]
      (. builder fieldSortOptions data))
    (.build builder)))


(defn cfn-analysis-pivot-table-total-options-property-builder
  "The cfn-analysis-pivot-table-total-options-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableTotalOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnSubtotalOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-subtotal-options` |
| `columnTotalOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-total-options` |
| `rowSubtotalOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-subtotal-options` |
| `rowTotalOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PivotTotalOptionsProperty | [[cdk.support/lookup-entry]] | `:row-total-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableTotalOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-subtotal-options)]
      (. builder columnSubtotalOptions data))
    (when-let [data (lookup-entry config id :column-total-options)]
      (. builder columnTotalOptions data))
    (when-let [data (lookup-entry config id :row-subtotal-options)]
      (. builder rowSubtotalOptions data))
    (when-let [data (lookup-entry config id :row-total-options)]
      (. builder rowTotalOptions data))
    (.build builder)))


(defn cfn-analysis-pivot-table-visual-property-builder
  "The cfn-analysis-pivot-table-visual-property-builder function buildes out new instances of 
CfnAnalysis$PivotTableVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTableVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :conditional-formatting)]
      (. builder conditionalFormatting data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-pivot-total-options-property-builder
  "The cfn-analysis-pivot-total-options-property-builder function buildes out new instances of 
CfnAnalysis$PivotTotalOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `metricHeaderCellStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:metric-header-cell-style` |
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scrollStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:scroll-status` |
| `totalAggregationOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:total-aggregation-options` |
| `totalCellStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `valueCellStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-cell-style` |"
  [stack id config]
  (let [builder (CfnAnalysis$PivotTotalOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :metric-header-cell-style)]
      (. builder metricHeaderCellStyle data))
    (when-let [data (lookup-entry config id :placement)]
      (. builder placement data))
    (when-let [data (lookup-entry config id :scroll-status)]
      (. builder scrollStatus data))
    (when-let [data (lookup-entry config id :total-aggregation-options)]
      (. builder totalAggregationOptions data))
    (when-let [data (lookup-entry config id :total-cell-style)]
      (. builder totalCellStyle data))
    (when-let [data (lookup-entry config id :totals-visibility)]
      (. builder totalsVisibility data))
    (when-let [data (lookup-entry config id :value-cell-style)]
      (. builder valueCellStyle data))
    (.build builder)))


(defn cfn-analysis-predefined-hierarchy-property-builder
  "The cfn-analysis-predefined-hierarchy-property-builder function buildes out new instances of 
CfnAnalysis$PredefinedHierarchyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:columns` |
| `drillDownFilters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$PredefinedHierarchyProperty$Builder.)]
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (when-let [data (lookup-entry config id :drill-down-filters)]
      (. builder drillDownFilters data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-analysis-progress-bar-options-property-builder
  "The cfn-analysis-progress-bar-options-property-builder function buildes out new instances of 
CfnAnalysis$ProgressBarOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$ProgressBarOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-props-builder
  "The cfn-analysis-props-builder function buildes out new instances of 
CfnAnalysisProps$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `analysisId` | java.lang.String | [[cdk.support/lookup-entry]] | `:analysis-id` |
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `definition` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AnalysisDefinitionProperty | [[cdk.support/lookup-entry]] | `:definition` |
| `errors` | java.util.List | [[cdk.support/lookup-entry]] | `:errors` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameters` |
| `permissions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:permissions` |
| `sheets` | java.util.List | [[cdk.support/lookup-entry]] | `:sheets` |
| `sourceEntity` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-entity` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `themeArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:theme-arn` |
| `validationStrategy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:validation-strategy` |"
  [stack id config]
  (let [builder (CfnAnalysisProps$Builder.)]
    (when-let [data (lookup-entry config id :analysis-id)]
      (. builder analysisId data))
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :definition)]
      (. builder definition data))
    (when-let [data (lookup-entry config id :errors)]
      (. builder errors data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :parameters)]
      (. builder parameters data))
    (when-let [data (lookup-entry config id :permissions)]
      (. builder permissions data))
    (when-let [data (lookup-entry config id :sheets)]
      (. builder sheets data))
    (when-let [data (lookup-entry config id :source-entity)]
      (. builder sourceEntity data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (when-let [data (lookup-entry config id :tags)]
      (. builder tags data))
    (when-let [data (lookup-entry config id :theme-arn)]
      (. builder themeArn data))
    (when-let [data (lookup-entry config id :validation-strategy)]
      (. builder validationStrategy data))
    (.build builder)))


(defn cfn-analysis-radar-chart-aggregated-field-wells-property-builder
  "The cfn-analysis-radar-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$RadarChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `color` | java.util.List | [[cdk.support/lookup-entry]] | `:color` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$RadarChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-radar-chart-area-style-settings-property-builder
  "The cfn-analysis-radar-chart-area-style-settings-property-builder function buildes out new instances of 
CfnAnalysis$RadarChartAreaStyleSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$RadarChartAreaStyleSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-radar-chart-configuration-property-builder
  "The cfn-analysis-radar-chart-configuration-property-builder function buildes out new instances of 
CfnAnalysis$RadarChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `alternateBandColorsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-colors-visibility` |
| `alternateBandEvenColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-even-color` |
| `alternateBandOddColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-odd-color` |
| `axesRangeScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:axes-range-scale` |
| `baseSeriesSettings` | software.amazon.awscdk.services.quicksight.CfnAnalysis$RadarChartSeriesSettingsProperty | [[cdk.support/lookup-entry]] | `:base-series-settings` |
| `categoryAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-axis` |
| `colorLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `shape` | java.lang.String | [[cdk.support/lookup-entry]] | `:shape` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `startAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:start-angle` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnAnalysis$RadarChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :alternate-band-colors-visibility)]
      (. builder alternateBandColorsVisibility data))
    (when-let [data (lookup-entry config id :alternate-band-even-color)]
      (. builder alternateBandEvenColor data))
    (when-let [data (lookup-entry config id :alternate-band-odd-color)]
      (. builder alternateBandOddColor data))
    (when-let [data (lookup-entry config id :axes-range-scale)]
      (. builder axesRangeScale data))
    (when-let [data (lookup-entry config id :base-series-settings)]
      (. builder baseSeriesSettings data))
    (when-let [data (lookup-entry config id :category-axis)]
      (. builder categoryAxis data))
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :color-axis)]
      (. builder colorAxis data))
    (when-let [data (lookup-entry config id :color-label-options)]
      (. builder colorLabelOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :shape)]
      (. builder shape data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :start-angle)]
      (. builder startAngle data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-analysis-radar-chart-field-wells-property-builder
  "The cfn-analysis-radar-chart-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$RadarChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `radarChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:radar-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$RadarChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :radar-chart-aggregated-field-wells)]
      (. builder radarChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-radar-chart-series-settings-property-builder
  "The cfn-analysis-radar-chart-series-settings-property-builder function buildes out new instances of 
CfnAnalysis$RadarChartSeriesSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `areaStyleSettings` | software.amazon.awscdk.services.quicksight.CfnAnalysis$RadarChartAreaStyleSettingsProperty | [[cdk.support/lookup-entry]] | `:area-style-settings` |"
  [stack id config]
  (let [builder (CfnAnalysis$RadarChartSeriesSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :area-style-settings)]
      (. builder areaStyleSettings data))
    (.build builder)))


(defn cfn-analysis-radar-chart-sort-configuration-property-builder
  "The cfn-analysis-radar-chart-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$RadarChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | java.util.List | [[cdk.support/lookup-entry]] | `:color-sort` |"
  [stack id config]
  (let [builder (CfnAnalysis$RadarChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :color-items-limit)]
      (. builder colorItemsLimit data))
    (when-let [data (lookup-entry config id :color-sort)]
      (. builder colorSort data))
    (.build builder)))


(defn cfn-analysis-radar-chart-visual-property-builder
  "The cfn-analysis-radar-chart-visual-property-builder function buildes out new instances of 
CfnAnalysis$RadarChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$RadarChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-range-ends-label-type-property-builder
  "The cfn-analysis-range-ends-label-type-property-builder function buildes out new instances of 
CfnAnalysis$RangeEndsLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$RangeEndsLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-reference-line-custom-label-configuration-property-builder
  "The cfn-analysis-reference-line-custom-label-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ReferenceLineCustomLabelConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |"
  [stack id config]
  (let [builder (CfnAnalysis$ReferenceLineCustomLabelConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (.build builder)))


(defn cfn-analysis-reference-line-data-configuration-property-builder
  "The cfn-analysis-reference-line-data-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ReferenceLineDataConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `dynamicConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-configuration` |
| `seriesType` | java.lang.String | [[cdk.support/lookup-entry]] | `:series-type` |
| `staticConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ReferenceLineStaticDataConfigurationProperty | [[cdk.support/lookup-entry]] | `:static-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$ReferenceLineDataConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-binding)]
      (. builder axisBinding data))
    (when-let [data (lookup-entry config id :dynamic-configuration)]
      (. builder dynamicConfiguration data))
    (when-let [data (lookup-entry config id :series-type)]
      (. builder seriesType data))
    (when-let [data (lookup-entry config id :static-configuration)]
      (. builder staticConfiguration data))
    (.build builder)))


(defn cfn-analysis-reference-line-dynamic-data-configuration-property-builder
  "The cfn-analysis-reference-line-dynamic-data-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ReferenceLineDynamicDataConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `calculation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:calculation` |
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `measureAggregationFunction` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:measure-aggregation-function` |"
  [stack id config]
  (let [builder (CfnAnalysis$ReferenceLineDynamicDataConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :calculation)]
      (. builder calculation data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :measure-aggregation-function)]
      (. builder measureAggregationFunction data))
    (.build builder)))


(defn cfn-analysis-reference-line-label-configuration-property-builder
  "The cfn-analysis-reference-line-label-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ReferenceLineLabelConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabelConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-label-configuration` |
| `fontColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-color` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `horizontalPosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-position` |
| `valueLabelConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ReferenceLineValueLabelConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-label-configuration` |
| `verticalPosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-position` |"
  [stack id config]
  (let [builder (CfnAnalysis$ReferenceLineLabelConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label-configuration)]
      (. builder customLabelConfiguration data))
    (when-let [data (lookup-entry config id :font-color)]
      (. builder fontColor data))
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (when-let [data (lookup-entry config id :horizontal-position)]
      (. builder horizontalPosition data))
    (when-let [data (lookup-entry config id :value-label-configuration)]
      (. builder valueLabelConfiguration data))
    (when-let [data (lookup-entry config id :vertical-position)]
      (. builder verticalPosition data))
    (.build builder)))


(defn cfn-analysis-reference-line-property-builder
  "The cfn-analysis-reference-line-property-builder function buildes out new instances of 
CfnAnalysis$ReferenceLineProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ReferenceLineDataConfigurationProperty | [[cdk.support/lookup-entry]] | `:data-configuration` |
| `labelConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ReferenceLineLabelConfigurationProperty | [[cdk.support/lookup-entry]] | `:label-configuration` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `styleConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ReferenceLineStyleConfigurationProperty | [[cdk.support/lookup-entry]] | `:style-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$ReferenceLineProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-configuration)]
      (. builder dataConfiguration data))
    (when-let [data (lookup-entry config id :label-configuration)]
      (. builder labelConfiguration data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (when-let [data (lookup-entry config id :style-configuration)]
      (. builder styleConfiguration data))
    (.build builder)))


(defn cfn-analysis-reference-line-static-data-configuration-property-builder
  "The cfn-analysis-reference-line-static-data-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ReferenceLineStaticDataConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$ReferenceLineStaticDataConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-reference-line-style-configuration-property-builder
  "The cfn-analysis-reference-line-style-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ReferenceLineStyleConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `pattern` | java.lang.String | [[cdk.support/lookup-entry]] | `:pattern` |"
  [stack id config]
  (let [builder (CfnAnalysis$ReferenceLineStyleConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :pattern)]
      (. builder pattern data))
    (.build builder)))


(defn cfn-analysis-reference-line-value-label-configuration-property-builder
  "The cfn-analysis-reference-line-value-label-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ReferenceLineValueLabelConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `relativePosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative-position` |"
  [stack id config]
  (let [builder (CfnAnalysis$ReferenceLineValueLabelConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (when-let [data (lookup-entry config id :relative-position)]
      (. builder relativePosition data))
    (.build builder)))


(defn cfn-analysis-relative-date-time-control-display-options-property-builder
  "The cfn-analysis-relative-date-time-control-display-options-property-builder function buildes out new instances of 
CfnAnalysis$RelativeDateTimeControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$RelativeDateTimeControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-format)]
      (. builder dateTimeFormat data))
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-analysis-relative-dates-filter-property-builder
  "The cfn-analysis-relative-dates-filter-property-builder function buildes out new instances of 
CfnAnalysis$RelativeDatesFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `anchorDateConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:anchor-date-configuration` |
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `excludePeriodConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ExcludePeriodConfigurationProperty | [[cdk.support/lookup-entry]] | `:exclude-period-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `minimumGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:minimum-granularity` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `relativeDateType` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative-date-type` |
| `relativeDateValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:relative-date-value` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnAnalysis$RelativeDatesFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :anchor-date-configuration)]
      (. builder anchorDateConfiguration data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :exclude-period-configuration)]
      (. builder excludePeriodConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :minimum-granularity)]
      (. builder minimumGranularity data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (when-let [data (lookup-entry config id :relative-date-type)]
      (. builder relativeDateType data))
    (when-let [data (lookup-entry config id :relative-date-value)]
      (. builder relativeDateValue data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-analysis-resource-permission-property-builder
  "The cfn-analysis-resource-permission-property-builder function buildes out new instances of 
CfnAnalysis$ResourcePermissionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `principal` | java.lang.String | [[cdk.support/lookup-entry]] | `:principal` |
| `resource` | java.lang.String | [[cdk.support/lookup-entry]] | `:resource` |"
  [stack id config]
  (let [builder (CfnAnalysis$ResourcePermissionProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :principal)]
      (. builder principal data))
    (when-let [data (lookup-entry config id :resource)]
      (. builder resource data))
    (.build builder)))


(defn cfn-analysis-rolling-date-configuration-property-builder
  "The cfn-analysis-rolling-date-configuration-property-builder function buildes out new instances of 
CfnAnalysis$RollingDateConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |"
  [stack id config]
  (let [builder (CfnAnalysis$RollingDateConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (.build builder)))


(defn cfn-analysis-row-alternate-color-options-property-builder
  "The cfn-analysis-row-alternate-color-options-property-builder function buildes out new instances of 
CfnAnalysis$RowAlternateColorOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `rowAlternateColors` | java.util.List | [[cdk.support/lookup-entry]] | `:row-alternate-colors` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `usePrimaryBackgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:use-primary-background-color` |"
  [stack id config]
  (let [builder (CfnAnalysis$RowAlternateColorOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :row-alternate-colors)]
      (. builder rowAlternateColors data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (when-let [data (lookup-entry config id :use-primary-background-color)]
      (. builder usePrimaryBackgroundColor data))
    (.build builder)))


(defn cfn-analysis-same-sheet-target-visual-configuration-property-builder
  "The cfn-analysis-same-sheet-target-visual-configuration-property-builder function buildes out new instances of 
CfnAnalysis$SameSheetTargetVisualConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetVisualOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:target-visual-options` |
| `targetVisuals` | java.util.List | [[cdk.support/lookup-entry]] | `:target-visuals` |"
  [stack id config]
  (let [builder (CfnAnalysis$SameSheetTargetVisualConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :target-visual-options)]
      (. builder targetVisualOptions data))
    (when-let [data (lookup-entry config id :target-visuals)]
      (. builder targetVisuals data))
    (.build builder)))


(defn cfn-analysis-sankey-diagram-aggregated-field-wells-property-builder
  "The cfn-analysis-sankey-diagram-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$SankeyDiagramAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destination` | java.util.List | [[cdk.support/lookup-entry]] | `:destination` |
| `source` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source` |
| `weight` | java.util.List | [[cdk.support/lookup-entry]] | `:weight` |"
  [stack id config]
  (let [builder (CfnAnalysis$SankeyDiagramAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :destination)]
      (. builder destination data))
    (when-let [data (lookup-entry config id :source)]
      (. builder source data))
    (when-let [data (lookup-entry config id :weight)]
      (. builder weight data))
    (.build builder)))


(defn cfn-analysis-sankey-diagram-chart-configuration-property-builder
  "The cfn-analysis-sankey-diagram-chart-configuration-property-builder function buildes out new instances of 
CfnAnalysis$SankeyDiagramChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SankeyDiagramFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SankeyDiagramSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$SankeyDiagramChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (.build builder)))


(defn cfn-analysis-sankey-diagram-field-wells-property-builder
  "The cfn-analysis-sankey-diagram-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$SankeyDiagramFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sankeyDiagramAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SankeyDiagramAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:sankey-diagram-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$SankeyDiagramFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :sankey-diagram-aggregated-field-wells)]
      (. builder sankeyDiagramAggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-sankey-diagram-sort-configuration-property-builder
  "The cfn-analysis-sankey-diagram-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$SankeyDiagramSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destinationItemsLimit` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:destination-items-limit` |
| `sourceItemsLimit` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:source-items-limit` |
| `weightSort` | java.util.List | [[cdk.support/lookup-entry]] | `:weight-sort` |"
  [stack id config]
  (let [builder (CfnAnalysis$SankeyDiagramSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :destination-items-limit)]
      (. builder destinationItemsLimit data))
    (when-let [data (lookup-entry config id :source-items-limit)]
      (. builder sourceItemsLimit data))
    (when-let [data (lookup-entry config id :weight-sort)]
      (. builder weightSort data))
    (.build builder)))


(defn cfn-analysis-sankey-diagram-visual-property-builder
  "The cfn-analysis-sankey-diagram-visual-property-builder function buildes out new instances of 
CfnAnalysis$SankeyDiagramVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SankeyDiagramChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$SankeyDiagramVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-scatter-plot-categorically-aggregated-field-wells-property-builder
  "The cfn-analysis-scatter-plot-categorically-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `label` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label` |
| `size` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:size` |
| `xAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:y-axis` |"
  [stack id config]
  (let [builder (CfnAnalysis$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :label)]
      (. builder label data))
    (when-let [data (lookup-entry config id :size)]
      (. builder size data))
    (when-let [data (lookup-entry config id :x-axis)]
      (. builder xAxis data))
    (when-let [data (lookup-entry config id :y-axis)]
      (. builder yAxis data))
    (.build builder)))


(defn cfn-analysis-scatter-plot-configuration-property-builder
  "The cfn-analysis-scatter-plot-configuration-property-builder function buildes out new instances of 
CfnAnalysis$ScatterPlotConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |
| `yAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:y-axis-display-options` |
| `yAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:y-axis-label-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$ScatterPlotConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (when-let [data (lookup-entry config id :x-axis-display-options)]
      (. builder xAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :x-axis-label-options)]
      (. builder xAxisLabelOptions data))
    (when-let [data (lookup-entry config id :y-axis-display-options)]
      (. builder yAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :y-axis-label-options)]
      (. builder yAxisLabelOptions data))
    (.build builder)))


(defn cfn-analysis-scatter-plot-field-wells-property-builder
  "The cfn-analysis-scatter-plot-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$ScatterPlotFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `scatterPlotCategoricallyAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scatter-plot-categorically-aggregated-field-wells` |
| `scatterPlotUnaggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scatter-plot-unaggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$ScatterPlotFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :scatter-plot-categorically-aggregated-field-wells)]
      (. builder scatterPlotCategoricallyAggregatedFieldWells data))
    (when-let [data (lookup-entry config id :scatter-plot-unaggregated-field-wells)]
      (. builder scatterPlotUnaggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-scatter-plot-unaggregated-field-wells-property-builder
  "The cfn-analysis-scatter-plot-unaggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$ScatterPlotUnaggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `label` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label` |
| `size` | java.util.List | [[cdk.support/lookup-entry]] | `:size` |
| `xAxis` | java.util.List | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | java.util.List | [[cdk.support/lookup-entry]] | `:y-axis` |"
  [stack id config]
  (let [builder (CfnAnalysis$ScatterPlotUnaggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :label)]
      (. builder label data))
    (when-let [data (lookup-entry config id :size)]
      (. builder size data))
    (when-let [data (lookup-entry config id :x-axis)]
      (. builder xAxis data))
    (when-let [data (lookup-entry config id :y-axis)]
      (. builder yAxis data))
    (.build builder)))


(defn cfn-analysis-scatter-plot-visual-property-builder
  "The cfn-analysis-scatter-plot-visual-property-builder function buildes out new instances of 
CfnAnalysis$ScatterPlotVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ScatterPlotConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$ScatterPlotVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-scroll-bar-options-property-builder
  "The cfn-analysis-scroll-bar-options-property-builder function buildes out new instances of 
CfnAnalysis$ScrollBarOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `visibleRange` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visible-range` |"
  [stack id config]
  (let [builder (CfnAnalysis$ScrollBarOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (when-let [data (lookup-entry config id :visible-range)]
      (. builder visibleRange data))
    (.build builder)))


(defn cfn-analysis-secondary-value-options-property-builder
  "The cfn-analysis-secondary-value-options-property-builder function buildes out new instances of 
CfnAnalysis$SecondaryValueOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$SecondaryValueOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-section-after-page-break-property-builder
  "The cfn-analysis-section-after-page-break-property-builder function buildes out new instances of 
CfnAnalysis$SectionAfterPageBreakProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |"
  [stack id config]
  (let [builder (CfnAnalysis$SectionAfterPageBreakProperty$Builder.)]
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (.build builder)))


(defn cfn-analysis-section-based-layout-canvas-size-options-property-builder
  "The cfn-analysis-section-based-layout-canvas-size-options-property-builder function buildes out new instances of 
CfnAnalysis$SectionBasedLayoutCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paperCanvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SectionBasedLayoutPaperCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:paper-canvas-size-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$SectionBasedLayoutCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :paper-canvas-size-options)]
      (. builder paperCanvasSizeOptions data))
    (.build builder)))


(defn cfn-analysis-section-based-layout-configuration-property-builder
  "The cfn-analysis-section-based-layout-configuration-property-builder function buildes out new instances of 
CfnAnalysis$SectionBasedLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bodySections` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:body-sections` |
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `footerSections` | java.util.List | [[cdk.support/lookup-entry]] | `:footer-sections` |
| `headerSections` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:header-sections` |"
  [stack id config]
  (let [builder (CfnAnalysis$SectionBasedLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :body-sections)]
      (. builder bodySections data))
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (when-let [data (lookup-entry config id :footer-sections)]
      (. builder footerSections data))
    (when-let [data (lookup-entry config id :header-sections)]
      (. builder headerSections data))
    (.build builder)))


(defn cfn-analysis-section-based-layout-paper-canvas-size-options-property-builder
  "The cfn-analysis-section-based-layout-paper-canvas-size-options-property-builder function buildes out new instances of 
CfnAnalysis$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paperMargin` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SpacingProperty | [[cdk.support/lookup-entry]] | `:paper-margin` |
| `paperOrientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:paper-orientation` |
| `paperSize` | java.lang.String | [[cdk.support/lookup-entry]] | `:paper-size` |"
  [stack id config]
  (let [builder (CfnAnalysis$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :paper-margin)]
      (. builder paperMargin data))
    (when-let [data (lookup-entry config id :paper-orientation)]
      (. builder paperOrientation data))
    (when-let [data (lookup-entry config id :paper-size)]
      (. builder paperSize data))
    (.build builder)))


(defn cfn-analysis-section-layout-configuration-property-builder
  "The cfn-analysis-section-layout-configuration-property-builder function buildes out new instances of 
CfnAnalysis$SectionLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeFormLayout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:free-form-layout` |"
  [stack id config]
  (let [builder (CfnAnalysis$SectionLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :free-form-layout)]
      (. builder freeFormLayout data))
    (.build builder)))


(defn cfn-analysis-section-page-break-configuration-property-builder
  "The cfn-analysis-section-page-break-configuration-property-builder function buildes out new instances of 
CfnAnalysis$SectionPageBreakConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `after` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:after` |"
  [stack id config]
  (let [builder (CfnAnalysis$SectionPageBreakConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :after)]
      (. builder after data))
    (.build builder)))


(defn cfn-analysis-section-style-property-builder
  "The cfn-analysis-section-style-property-builder function buildes out new instances of 
CfnAnalysis$SectionStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `padding` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SpacingProperty | [[cdk.support/lookup-entry]] | `:padding` |"
  [stack id config]
  (let [builder (CfnAnalysis$SectionStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :height)]
      (. builder height data))
    (when-let [data (lookup-entry config id :padding)]
      (. builder padding data))
    (.build builder)))


(defn cfn-analysis-selected-sheets-filter-scope-configuration-property-builder
  "The cfn-analysis-selected-sheets-filter-scope-configuration-property-builder function buildes out new instances of 
CfnAnalysis$SelectedSheetsFilterScopeConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sheetVisualScopingConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:sheet-visual-scoping-configurations` |"
  [stack id config]
  (let [builder (CfnAnalysis$SelectedSheetsFilterScopeConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :sheet-visual-scoping-configurations)]
      (. builder sheetVisualScopingConfigurations data))
    (.build builder)))


(defn cfn-analysis-series-item-property-builder
  "The cfn-analysis-series-item-property-builder function buildes out new instances of 
CfnAnalysis$SeriesItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataFieldSeriesItem` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-field-series-item` |
| `fieldSeriesItem` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-series-item` |"
  [stack id config]
  (let [builder (CfnAnalysis$SeriesItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-field-series-item)]
      (. builder dataFieldSeriesItem data))
    (when-let [data (lookup-entry config id :field-series-item)]
      (. builder fieldSeriesItem data))
    (.build builder)))


(defn cfn-analysis-set-parameter-value-configuration-property-builder
  "The cfn-analysis-set-parameter-value-configuration-property-builder function buildes out new instances of 
CfnAnalysis$SetParameterValueConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destinationParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:destination-parameter-name` |
| `value` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DestinationParameterValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$SetParameterValueConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :destination-parameter-name)]
      (. builder destinationParameterName data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-shape-conditional-format-property-builder
  "The cfn-analysis-shape-conditional-format-property-builder function buildes out new instances of 
CfnAnalysis$ShapeConditionalFormatProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:background-color` |"
  [stack id config]
  (let [builder (CfnAnalysis$ShapeConditionalFormatProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-color)]
      (. builder backgroundColor data))
    (.build builder)))


(defn cfn-analysis-sheet-control-info-icon-label-options-property-builder
  "The cfn-analysis-sheet-control-info-icon-label-options-property-builder function buildes out new instances of 
CfnAnalysis$SheetControlInfoIconLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconText` | java.lang.String | [[cdk.support/lookup-entry]] | `:info-icon-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$SheetControlInfoIconLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-text)]
      (. builder infoIconText data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-sheet-control-layout-configuration-property-builder
  "The cfn-analysis-sheet-control-layout-configuration-property-builder function buildes out new instances of 
CfnAnalysis$SheetControlLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `gridLayout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:grid-layout` |"
  [stack id config]
  (let [builder (CfnAnalysis$SheetControlLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :grid-layout)]
      (. builder gridLayout data))
    (.build builder)))


(defn cfn-analysis-sheet-control-layout-property-builder
  "The cfn-analysis-sheet-control-layout-property-builder function buildes out new instances of 
CfnAnalysis$SheetControlLayoutProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configuration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SheetControlLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$SheetControlLayoutProperty$Builder.)]
    (when-let [data (lookup-entry config id :configuration)]
      (. builder configuration data))
    (.build builder)))


(defn cfn-analysis-sheet-definition-property-builder
  "The cfn-analysis-sheet-definition-property-builder function buildes out new instances of 
CfnAnalysis$SheetDefinitionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-type` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `filterControls` | java.util.List | [[cdk.support/lookup-entry]] | `:filter-controls` |
| `layouts` | java.util.List | [[cdk.support/lookup-entry]] | `:layouts` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterControls` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameter-controls` |
| `sheetControlLayouts` | java.util.List | [[cdk.support/lookup-entry]] | `:sheet-control-layouts` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |
| `textBoxes` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-boxes` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `visuals` | java.util.List | [[cdk.support/lookup-entry]] | `:visuals` |"
  [stack id config]
  (let [builder (CfnAnalysis$SheetDefinitionProperty$Builder.)]
    (when-let [data (lookup-entry config id :content-type)]
      (. builder contentType data))
    (when-let [data (lookup-entry config id :description)]
      (. builder description data))
    (when-let [data (lookup-entry config id :filter-controls)]
      (. builder filterControls data))
    (when-let [data (lookup-entry config id :layouts)]
      (. builder layouts data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :parameter-controls)]
      (. builder parameterControls data))
    (when-let [data (lookup-entry config id :sheet-control-layouts)]
      (. builder sheetControlLayouts data))
    (when-let [data (lookup-entry config id :sheet-id)]
      (. builder sheetId data))
    (when-let [data (lookup-entry config id :text-boxes)]
      (. builder textBoxes data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visuals)]
      (. builder visuals data))
    (.build builder)))


(defn cfn-analysis-sheet-element-configuration-overrides-property-builder
  "The cfn-analysis-sheet-element-configuration-overrides-property-builder function buildes out new instances of 
CfnAnalysis$SheetElementConfigurationOverridesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$SheetElementConfigurationOverridesProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-sheet-element-rendering-rule-property-builder
  "The cfn-analysis-sheet-element-rendering-rule-property-builder function buildes out new instances of 
CfnAnalysis$SheetElementRenderingRuleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configurationOverrides` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SheetElementConfigurationOverridesProperty | [[cdk.support/lookup-entry]] | `:configuration-overrides` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |"
  [stack id config]
  (let [builder (CfnAnalysis$SheetElementRenderingRuleProperty$Builder.)]
    (when-let [data (lookup-entry config id :configuration-overrides)]
      (. builder configurationOverrides data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (.build builder)))


(defn cfn-analysis-sheet-property-builder
  "The cfn-analysis-sheet-property-builder function buildes out new instances of 
CfnAnalysis$SheetProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$SheetProperty$Builder.)]
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :sheet-id)]
      (. builder sheetId data))
    (.build builder)))


(defn cfn-analysis-sheet-text-box-property-builder
  "The cfn-analysis-sheet-text-box-property-builder function buildes out new instances of 
CfnAnalysis$SheetTextBoxProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | java.lang.String | [[cdk.support/lookup-entry]] | `:content` |
| `sheetTextBoxId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-text-box-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$SheetTextBoxProperty$Builder.)]
    (when-let [data (lookup-entry config id :content)]
      (. builder content data))
    (when-let [data (lookup-entry config id :sheet-text-box-id)]
      (. builder sheetTextBoxId data))
    (.build builder)))


(defn cfn-analysis-sheet-visual-scoping-configuration-property-builder
  "The cfn-analysis-sheet-visual-scoping-configuration-property-builder function buildes out new instances of 
CfnAnalysis$SheetVisualScopingConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `scope` | java.lang.String | [[cdk.support/lookup-entry]] | `:scope` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |
| `visualIds` | java.util.List | [[cdk.support/lookup-entry]] | `:visual-ids` |"
  [stack id config]
  (let [builder (CfnAnalysis$SheetVisualScopingConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :scope)]
      (. builder scope data))
    (when-let [data (lookup-entry config id :sheet-id)]
      (. builder sheetId data))
    (when-let [data (lookup-entry config id :visual-ids)]
      (. builder visualIds data))
    (.build builder)))


(defn cfn-analysis-short-format-text-property-builder
  "The cfn-analysis-short-format-text-property-builder function buildes out new instances of 
CfnAnalysis$ShortFormatTextProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `plainText` | java.lang.String | [[cdk.support/lookup-entry]] | `:plain-text` |
| `richText` | java.lang.String | [[cdk.support/lookup-entry]] | `:rich-text` |"
  [stack id config]
  (let [builder (CfnAnalysis$ShortFormatTextProperty$Builder.)]
    (when-let [data (lookup-entry config id :plain-text)]
      (. builder plainText data))
    (when-let [data (lookup-entry config id :rich-text)]
      (. builder richText data))
    (.build builder)))


(defn cfn-analysis-simple-cluster-marker-property-builder
  "The cfn-analysis-simple-cluster-marker-property-builder function buildes out new instances of 
CfnAnalysis$SimpleClusterMarkerProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |"
  [stack id config]
  (let [builder (CfnAnalysis$SimpleClusterMarkerProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (.build builder)))


(defn cfn-analysis-slider-control-display-options-property-builder
  "The cfn-analysis-slider-control-display-options-property-builder function buildes out new instances of 
CfnAnalysis$SliderControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$SliderControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-analysis-small-multiples-axis-properties-property-builder
  "The cfn-analysis-small-multiples-axis-properties-property-builder function buildes out new instances of 
CfnAnalysis$SmallMultiplesAxisPropertiesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scale` | java.lang.String | [[cdk.support/lookup-entry]] | `:scale` |"
  [stack id config]
  (let [builder (CfnAnalysis$SmallMultiplesAxisPropertiesProperty$Builder.)]
    (when-let [data (lookup-entry config id :placement)]
      (. builder placement data))
    (when-let [data (lookup-entry config id :scale)]
      (. builder scale data))
    (.build builder)))


(defn cfn-analysis-small-multiples-options-property-builder
  "The cfn-analysis-small-multiples-options-property-builder function buildes out new instances of 
CfnAnalysis$SmallMultiplesOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `maxVisibleColumns` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max-visible-columns` |
| `maxVisibleRows` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max-visible-rows` |
| `panelConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:panel-configuration` |
| `xAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SmallMultiplesAxisPropertiesProperty | [[cdk.support/lookup-entry]] | `:y-axis` |"
  [stack id config]
  (let [builder (CfnAnalysis$SmallMultiplesOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :max-visible-columns)]
      (. builder maxVisibleColumns data))
    (when-let [data (lookup-entry config id :max-visible-rows)]
      (. builder maxVisibleRows data))
    (when-let [data (lookup-entry config id :panel-configuration)]
      (. builder panelConfiguration data))
    (when-let [data (lookup-entry config id :x-axis)]
      (. builder xAxis data))
    (when-let [data (lookup-entry config id :y-axis)]
      (. builder yAxis data))
    (.build builder)))


(defn cfn-analysis-spacing-property-builder
  "The cfn-analysis-spacing-property-builder function buildes out new instances of 
CfnAnalysis$SpacingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bottom` | java.lang.String | [[cdk.support/lookup-entry]] | `:bottom` |
| `left` | java.lang.String | [[cdk.support/lookup-entry]] | `:left` |
| `right` | java.lang.String | [[cdk.support/lookup-entry]] | `:right` |
| `top` | java.lang.String | [[cdk.support/lookup-entry]] | `:top` |"
  [stack id config]
  (let [builder (CfnAnalysis$SpacingProperty$Builder.)]
    (when-let [data (lookup-entry config id :bottom)]
      (. builder bottom data))
    (when-let [data (lookup-entry config id :left)]
      (. builder left data))
    (when-let [data (lookup-entry config id :right)]
      (. builder right data))
    (when-let [data (lookup-entry config id :top)]
      (. builder top data))
    (.build builder)))


(defn cfn-analysis-string-default-values-property-builder
  "The cfn-analysis-string-default-values-property-builder function buildes out new instances of 
CfnAnalysis$StringDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |"
  [stack id config]
  (let [builder (CfnAnalysis$StringDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :dynamic-value)]
      (. builder dynamicValue data))
    (when-let [data (lookup-entry config id :static-values)]
      (. builder staticValues data))
    (.build builder)))


(defn cfn-analysis-string-format-configuration-property-builder
  "The cfn-analysis-string-format-configuration-property-builder function buildes out new instances of 
CfnAnalysis$StringFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numericFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-format-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$StringFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :null-value-format-configuration)]
      (. builder nullValueFormatConfiguration data))
    (when-let [data (lookup-entry config id :numeric-format-configuration)]
      (. builder numericFormatConfiguration data))
    (.build builder)))


(defn cfn-analysis-string-parameter-declaration-property-builder
  "The cfn-analysis-string-parameter-declaration-property-builder function buildes out new instances of 
CfnAnalysis$StringParameterDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.services.quicksight.CfnAnalysis$StringDefaultValuesProperty | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.services.quicksight.CfnAnalysis$StringValueWhenUnsetConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-when-unset` |"
  [stack id config]
  (let [builder (CfnAnalysis$StringParameterDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-values)]
      (. builder defaultValues data))
    (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
      (. builder mappedDataSetParameters data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :parameter-value-type)]
      (. builder parameterValueType data))
    (when-let [data (lookup-entry config id :value-when-unset)]
      (. builder valueWhenUnset data))
    (.build builder)))


(defn cfn-analysis-string-parameter-property-builder
  "The cfn-analysis-string-parameter-property-builder function buildes out new instances of 
CfnAnalysis$StringParameterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$StringParameterProperty$Builder.)]
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-string-value-when-unset-configuration-property-builder
  "The cfn-analysis-string-value-when-unset-configuration-property-builder function buildes out new instances of 
CfnAnalysis$StringValueWhenUnsetConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |"
  [stack id config]
  (let [builder (CfnAnalysis$StringValueWhenUnsetConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-value)]
      (. builder customValue data))
    (when-let [data (lookup-entry config id :value-when-unset-option)]
      (. builder valueWhenUnsetOption data))
    (.build builder)))


(defn cfn-analysis-subtotal-options-property-builder
  "The cfn-analysis-subtotal-options-property-builder function buildes out new instances of 
CfnAnalysis$SubtotalOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldLevel` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-level` |
| `fieldLevelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-level-options` |
| `metricHeaderCellStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:metric-header-cell-style` |
| `styleTargets` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style-targets` |
| `totalCellStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `valueCellStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-cell-style` |"
  [stack id config]
  (let [builder (CfnAnalysis$SubtotalOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :field-level)]
      (. builder fieldLevel data))
    (when-let [data (lookup-entry config id :field-level-options)]
      (. builder fieldLevelOptions data))
    (when-let [data (lookup-entry config id :metric-header-cell-style)]
      (. builder metricHeaderCellStyle data))
    (when-let [data (lookup-entry config id :style-targets)]
      (. builder styleTargets data))
    (when-let [data (lookup-entry config id :total-cell-style)]
      (. builder totalCellStyle data))
    (when-let [data (lookup-entry config id :totals-visibility)]
      (. builder totalsVisibility data))
    (when-let [data (lookup-entry config id :value-cell-style)]
      (. builder valueCellStyle data))
    (.build builder)))


(defn cfn-analysis-table-aggregated-field-wells-property-builder
  "The cfn-analysis-table-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$TableAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-by` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :group-by)]
      (. builder groupBy data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-table-border-options-property-builder
  "The cfn-analysis-table-border-options-property-builder function buildes out new instances of 
CfnAnalysis$TableBorderOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `style` | java.lang.String | [[cdk.support/lookup-entry]] | `:style` |
| `thickness` | java.lang.Number | [[cdk.support/lookup-entry]] | `:thickness` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableBorderOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :style)]
      (. builder style data))
    (when-let [data (lookup-entry config id :thickness)]
      (. builder thickness data))
    (.build builder)))


(defn cfn-analysis-table-cell-conditional-formatting-property-builder
  "The cfn-analysis-table-cell-conditional-formatting-property-builder function buildes out new instances of 
CfnAnalysis$TableCellConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `textFormat` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TextConditionalFormatProperty | [[cdk.support/lookup-entry]] | `:text-format` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableCellConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :text-format)]
      (. builder textFormat data))
    (.build builder)))


(defn cfn-analysis-table-cell-image-sizing-configuration-property-builder
  "The cfn-analysis-table-cell-image-sizing-configuration-property-builder function buildes out new instances of 
CfnAnalysis$TableCellImageSizingConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `tableCellImageScalingConfiguration` | java.lang.String | [[cdk.support/lookup-entry]] | `:table-cell-image-scaling-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableCellImageSizingConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :table-cell-image-scaling-configuration)]
      (. builder tableCellImageScalingConfiguration data))
    (.build builder)))


(defn cfn-analysis-table-cell-style-property-builder
  "The cfn-analysis-table-cell-style-property-builder function buildes out new instances of 
CfnAnalysis$TableCellStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-color` |
| `border` | software.amazon.awscdk.services.quicksight.CfnAnalysis$GlobalTableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:border` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `height` | java.lang.Number | [[cdk.support/lookup-entry]] | `:height` |
| `horizontalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-text-alignment` |
| `textWrap` | java.lang.String | [[cdk.support/lookup-entry]] | `:text-wrap` |
| `verticalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-text-alignment` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableCellStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-color)]
      (. builder backgroundColor data))
    (when-let [data (lookup-entry config id :border)]
      (. builder border data))
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (when-let [data (lookup-entry config id :height)]
      (. builder height data))
    (when-let [data (lookup-entry config id :horizontal-text-alignment)]
      (. builder horizontalTextAlignment data))
    (when-let [data (lookup-entry config id :text-wrap)]
      (. builder textWrap data))
    (when-let [data (lookup-entry config id :vertical-text-alignment)]
      (. builder verticalTextAlignment data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-table-conditional-formatting-option-property-builder
  "The cfn-analysis-table-conditional-formatting-option-property-builder function buildes out new instances of 
CfnAnalysis$TableConditionalFormattingOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cell` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cell` |
| `row` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableConditionalFormattingOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :cell)]
      (. builder cell data))
    (when-let [data (lookup-entry config id :row)]
      (. builder row data))
    (.build builder)))


(defn cfn-analysis-table-conditional-formatting-property-builder
  "The cfn-analysis-table-conditional-formatting-property-builder function buildes out new instances of 
CfnAnalysis$TableConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :conditional-formatting-options)]
      (. builder conditionalFormattingOptions data))
    (.build builder)))


(defn cfn-analysis-table-configuration-property-builder
  "The cfn-analysis-table-configuration-property-builder function buildes out new instances of 
CfnAnalysis$TableConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableFieldOptionsProperty | [[cdk.support/lookup-entry]] | `:field-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `paginatedReportOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TablePaginatedReportOptionsProperty | [[cdk.support/lookup-entry]] | `:paginated-report-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tableInlineVisualizations` | java.util.List | [[cdk.support/lookup-entry]] | `:table-inline-visualizations` |
| `tableOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:table-options` |
| `totalOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TotalOptionsProperty | [[cdk.support/lookup-entry]] | `:total-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-options)]
      (. builder fieldOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :paginated-report-options)]
      (. builder paginatedReportOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :table-inline-visualizations)]
      (. builder tableInlineVisualizations data))
    (when-let [data (lookup-entry config id :table-options)]
      (. builder tableOptions data))
    (when-let [data (lookup-entry config id :total-options)]
      (. builder totalOptions data))
    (.build builder)))


(defn cfn-analysis-table-field-custom-icon-content-property-builder
  "The cfn-analysis-table-field-custom-icon-content-property-builder function buildes out new instances of 
CfnAnalysis$TableFieldCustomIconContentProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableFieldCustomIconContentProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (.build builder)))


(defn cfn-analysis-table-field-custom-text-content-property-builder
  "The cfn-analysis-table-field-custom-text-content-property-builder function buildes out new instances of 
CfnAnalysis$TableFieldCustomTextContentProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `value` | java.lang.String | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableFieldCustomTextContentProperty$Builder.)]
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-table-field-image-configuration-property-builder
  "The cfn-analysis-table-field-image-configuration-property-builder function buildes out new instances of 
CfnAnalysis$TableFieldImageConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sizingOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellImageSizingConfigurationProperty | [[cdk.support/lookup-entry]] | `:sizing-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableFieldImageConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :sizing-options)]
      (. builder sizingOptions data))
    (.build builder)))


(defn cfn-analysis-table-field-link-configuration-property-builder
  "The cfn-analysis-table-field-link-configuration-property-builder function buildes out new instances of 
CfnAnalysis$TableFieldLinkConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableFieldLinkContentConfigurationProperty | [[cdk.support/lookup-entry]] | `:content` |
| `target` | java.lang.String | [[cdk.support/lookup-entry]] | `:target` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableFieldLinkConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :content)]
      (. builder content data))
    (when-let [data (lookup-entry config id :target)]
      (. builder target data))
    (.build builder)))


(defn cfn-analysis-table-field-link-content-configuration-property-builder
  "The cfn-analysis-table-field-link-content-configuration-property-builder function buildes out new instances of 
CfnAnalysis$TableFieldLinkContentConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customIconContent` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-icon-content` |
| `customTextContent` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-text-content` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableFieldLinkContentConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-icon-content)]
      (. builder customIconContent data))
    (when-let [data (lookup-entry config id :custom-text-content)]
      (. builder customTextContent data))
    (.build builder)))


(defn cfn-analysis-table-field-option-property-builder
  "The cfn-analysis-table-field-option-property-builder function buildes out new instances of 
CfnAnalysis$TableFieldOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `urlStyling` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:url-styling` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableFieldOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :url-styling)]
      (. builder urlStyling data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (when-let [data (lookup-entry config id :width)]
      (. builder width data))
    (.build builder)))


(defn cfn-analysis-table-field-options-property-builder
  "The cfn-analysis-table-field-options-property-builder function buildes out new instances of 
CfnAnalysis$TableFieldOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `order` | java.util.List | [[cdk.support/lookup-entry]] | `:order` |
| `pinnedFieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:pinned-field-options` |
| `selectedFieldOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:selected-field-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableFieldOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :order)]
      (. builder order data))
    (when-let [data (lookup-entry config id :pinned-field-options)]
      (. builder pinnedFieldOptions data))
    (when-let [data (lookup-entry config id :selected-field-options)]
      (. builder selectedFieldOptions data))
    (.build builder)))


(defn cfn-analysis-table-field-url-configuration-property-builder
  "The cfn-analysis-table-field-url-configuration-property-builder function buildes out new instances of 
CfnAnalysis$TableFieldURLConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `imageConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableFieldImageConfigurationProperty | [[cdk.support/lookup-entry]] | `:image-configuration` |
| `linkConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:link-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableFieldURLConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :image-configuration)]
      (. builder imageConfiguration data))
    (when-let [data (lookup-entry config id :link-configuration)]
      (. builder linkConfiguration data))
    (.build builder)))


(defn cfn-analysis-table-field-wells-property-builder
  "The cfn-analysis-table-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$TableFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `tableAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:table-aggregated-field-wells` |
| `tableUnaggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:table-unaggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :table-aggregated-field-wells)]
      (. builder tableAggregatedFieldWells data))
    (when-let [data (lookup-entry config id :table-unaggregated-field-wells)]
      (. builder tableUnaggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-table-inline-visualization-property-builder
  "The cfn-analysis-table-inline-visualization-property-builder function buildes out new instances of 
CfnAnalysis$TableInlineVisualizationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataBars` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DataBarsOptionsProperty | [[cdk.support/lookup-entry]] | `:data-bars` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableInlineVisualizationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-bars)]
      (. builder dataBars data))
    (.build builder)))


(defn cfn-analysis-table-options-property-builder
  "The cfn-analysis-table-options-property-builder function buildes out new instances of 
CfnAnalysis$TableOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:cell-style` |
| `headerStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:header-style` |
| `orientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:orientation` |
| `rowAlternateColorOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-alternate-color-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :cell-style)]
      (. builder cellStyle data))
    (when-let [data (lookup-entry config id :header-style)]
      (. builder headerStyle data))
    (when-let [data (lookup-entry config id :orientation)]
      (. builder orientation data))
    (when-let [data (lookup-entry config id :row-alternate-color-options)]
      (. builder rowAlternateColorOptions data))
    (.build builder)))


(defn cfn-analysis-table-paginated-report-options-property-builder
  "The cfn-analysis-table-paginated-report-options-property-builder function buildes out new instances of 
CfnAnalysis$TablePaginatedReportOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `overflowColumnHeaderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:overflow-column-header-visibility` |
| `verticalOverflowVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-overflow-visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$TablePaginatedReportOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :overflow-column-header-visibility)]
      (. builder overflowColumnHeaderVisibility data))
    (when-let [data (lookup-entry config id :vertical-overflow-visibility)]
      (. builder verticalOverflowVisibility data))
    (.build builder)))


(defn cfn-analysis-table-pinned-field-options-property-builder
  "The cfn-analysis-table-pinned-field-options-property-builder function buildes out new instances of 
CfnAnalysis$TablePinnedFieldOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pinnedLeftFields` | java.util.List | [[cdk.support/lookup-entry]] | `:pinned-left-fields` |"
  [stack id config]
  (let [builder (CfnAnalysis$TablePinnedFieldOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :pinned-left-fields)]
      (. builder pinnedLeftFields data))
    (.build builder)))


(defn cfn-analysis-table-row-conditional-formatting-property-builder
  "The cfn-analysis-table-row-conditional-formatting-property-builder function buildes out new instances of 
CfnAnalysis$TableRowConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:background-color` |
| `textColor` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableRowConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-color)]
      (. builder backgroundColor data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-analysis-table-side-border-options-property-builder
  "The cfn-analysis-table-side-border-options-property-builder function buildes out new instances of 
CfnAnalysis$TableSideBorderOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bottom` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bottom` |
| `innerHorizontal` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:inner-horizontal` |
| `innerVertical` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:inner-vertical` |
| `left` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:left` |
| `right` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:right` |
| `top` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:top` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableSideBorderOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bottom)]
      (. builder bottom data))
    (when-let [data (lookup-entry config id :inner-horizontal)]
      (. builder innerHorizontal data))
    (when-let [data (lookup-entry config id :inner-vertical)]
      (. builder innerVertical data))
    (when-let [data (lookup-entry config id :left)]
      (. builder left data))
    (when-let [data (lookup-entry config id :right)]
      (. builder right data))
    (when-let [data (lookup-entry config id :top)]
      (. builder top data))
    (.build builder)))


(defn cfn-analysis-table-sort-configuration-property-builder
  "The cfn-analysis-table-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$TableSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paginationConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:pagination-configuration` |
| `rowSort` | java.util.List | [[cdk.support/lookup-entry]] | `:row-sort` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :pagination-configuration)]
      (. builder paginationConfiguration data))
    (when-let [data (lookup-entry config id :row-sort)]
      (. builder rowSort data))
    (.build builder)))


(defn cfn-analysis-table-style-target-property-builder
  "The cfn-analysis-table-style-target-property-builder function buildes out new instances of 
CfnAnalysis$TableStyleTargetProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellType` | java.lang.String | [[cdk.support/lookup-entry]] | `:cell-type` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableStyleTargetProperty$Builder.)]
    (when-let [data (lookup-entry config id :cell-type)]
      (. builder cellType data))
    (.build builder)))


(defn cfn-analysis-table-unaggregated-field-wells-property-builder
  "The cfn-analysis-table-unaggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$TableUnaggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableUnaggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-table-visual-property-builder
  "The cfn-analysis-table-visual-property-builder function buildes out new instances of 
CfnAnalysis$TableVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$TableVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :conditional-formatting)]
      (. builder conditionalFormatting data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-text-area-control-display-options-property-builder
  "The cfn-analysis-text-area-control-display-options-property-builder function buildes out new instances of 
CfnAnalysis$TextAreaControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `placeholderOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TextControlPlaceholderOptionsProperty | [[cdk.support/lookup-entry]] | `:placeholder-options` |
| `titleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$TextAreaControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :placeholder-options)]
      (. builder placeholderOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-analysis-text-conditional-format-property-builder
  "The cfn-analysis-text-conditional-format-property-builder function buildes out new instances of 
CfnAnalysis$TextConditionalFormatProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:background-color` |
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnAnalysis$TextConditionalFormatProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-color)]
      (. builder backgroundColor data))
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-analysis-text-control-placeholder-options-property-builder
  "The cfn-analysis-text-control-placeholder-options-property-builder function buildes out new instances of 
CfnAnalysis$TextControlPlaceholderOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$TextControlPlaceholderOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-text-field-control-display-options-property-builder
  "The cfn-analysis-text-field-control-display-options-property-builder function buildes out new instances of 
CfnAnalysis$TextFieldControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `placeholderOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:placeholder-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$TextFieldControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :placeholder-options)]
      (. builder placeholderOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-analysis-thousand-separator-options-property-builder
  "The cfn-analysis-thousand-separator-options-property-builder function buildes out new instances of 
CfnAnalysis$ThousandSeparatorOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `symbol` | java.lang.String | [[cdk.support/lookup-entry]] | `:symbol` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$ThousandSeparatorOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :symbol)]
      (. builder symbol data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-time-based-forecast-properties-property-builder
  "The cfn-analysis-time-based-forecast-properties-property-builder function buildes out new instances of 
CfnAnalysis$TimeBasedForecastPropertiesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lowerBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:lower-boundary` |
| `periodsBackward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-backward` |
| `periodsForward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-forward` |
| `predictionInterval` | java.lang.Number | [[cdk.support/lookup-entry]] | `:prediction-interval` |
| `seasonality` | java.lang.Number | [[cdk.support/lookup-entry]] | `:seasonality` |
| `upperBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:upper-boundary` |"
  [stack id config]
  (let [builder (CfnAnalysis$TimeBasedForecastPropertiesProperty$Builder.)]
    (when-let [data (lookup-entry config id :lower-boundary)]
      (. builder lowerBoundary data))
    (when-let [data (lookup-entry config id :periods-backward)]
      (. builder periodsBackward data))
    (when-let [data (lookup-entry config id :periods-forward)]
      (. builder periodsForward data))
    (when-let [data (lookup-entry config id :prediction-interval)]
      (. builder predictionInterval data))
    (when-let [data (lookup-entry config id :seasonality)]
      (. builder seasonality data))
    (when-let [data (lookup-entry config id :upper-boundary)]
      (. builder upperBoundary data))
    (.build builder)))


(defn cfn-analysis-time-equality-filter-property-builder
  "The cfn-analysis-time-equality-filter-property-builder function buildes out new instances of 
CfnAnalysis$TimeEqualityFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `rollingDate` | software.amazon.awscdk.services.quicksight.CfnAnalysis$RollingDateConfigurationProperty | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
| `value` | java.lang.String | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$TimeEqualityFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (when-let [data (lookup-entry config id :rolling-date)]
      (. builder rollingDate data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-time-range-drill-down-filter-property-builder
  "The cfn-analysis-time-range-drill-down-filter-property-builder function buildes out new instances of 
CfnAnalysis$TimeRangeDrillDownFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `rangeMaximum` | java.lang.String | [[cdk.support/lookup-entry]] | `:range-maximum` |
| `rangeMinimum` | java.lang.String | [[cdk.support/lookup-entry]] | `:range-minimum` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnAnalysis$TimeRangeDrillDownFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :range-maximum)]
      (. builder rangeMaximum data))
    (when-let [data (lookup-entry config id :range-minimum)]
      (. builder rangeMinimum data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-analysis-time-range-filter-property-builder
  "The cfn-analysis-time-range-filter-property-builder function buildes out new instances of 
CfnAnalysis$TimeRangeFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `excludePeriodConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:exclude-period-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `includeMaximum` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:include-maximum` |
| `includeMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-minimum` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `rangeMaximumValue` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TimeRangeFilterValueProperty | [[cdk.support/lookup-entry]] | `:range-maximum-value` |
| `rangeMinimumValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-minimum-value` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnAnalysis$TimeRangeFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :exclude-period-configuration)]
      (. builder excludePeriodConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :include-maximum)]
      (. builder includeMaximum data))
    (when-let [data (lookup-entry config id :include-minimum)]
      (. builder includeMinimum data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :range-maximum-value)]
      (. builder rangeMaximumValue data))
    (when-let [data (lookup-entry config id :range-minimum-value)]
      (. builder rangeMinimumValue data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-analysis-time-range-filter-value-property-builder
  "The cfn-analysis-time-range-filter-value-property-builder function buildes out new instances of 
CfnAnalysis$TimeRangeFilterValueProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameter` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter` |
| `rollingDate` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `staticValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:static-value` |"
  [stack id config]
  (let [builder (CfnAnalysis$TimeRangeFilterValueProperty$Builder.)]
    (when-let [data (lookup-entry config id :parameter)]
      (. builder parameter data))
    (when-let [data (lookup-entry config id :rolling-date)]
      (. builder rollingDate data))
    (when-let [data (lookup-entry config id :static-value)]
      (. builder staticValue data))
    (.build builder)))


(defn cfn-analysis-tooltip-item-property-builder
  "The cfn-analysis-tooltip-item-property-builder function buildes out new instances of 
CfnAnalysis$TooltipItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnTooltipItem` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnTooltipItemProperty | [[cdk.support/lookup-entry]] | `:column-tooltip-item` |
| `fieldTooltipItem` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-tooltip-item` |"
  [stack id config]
  (let [builder (CfnAnalysis$TooltipItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-tooltip-item)]
      (. builder columnTooltipItem data))
    (when-let [data (lookup-entry config id :field-tooltip-item)]
      (. builder fieldTooltipItem data))
    (.build builder)))


(defn cfn-analysis-tooltip-options-property-builder
  "The cfn-analysis-tooltip-options-property-builder function buildes out new instances of 
CfnAnalysis$TooltipOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldBasedTooltip` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FieldBasedTooltipProperty | [[cdk.support/lookup-entry]] | `:field-based-tooltip` |
| `selectedTooltipType` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-tooltip-type` |
| `tooltipVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$TooltipOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-based-tooltip)]
      (. builder fieldBasedTooltip data))
    (when-let [data (lookup-entry config id :selected-tooltip-type)]
      (. builder selectedTooltipType data))
    (when-let [data (lookup-entry config id :tooltip-visibility)]
      (. builder tooltipVisibility data))
    (.build builder)))


(defn cfn-analysis-top-bottom-filter-property-builder
  "The cfn-analysis-top-bottom-filter-property-builder function buildes out new instances of 
CfnAnalysis$TopBottomFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationSortConfigurations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:aggregation-sort-configurations` |
| `column` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `limit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:limit` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnAnalysis$TopBottomFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-sort-configurations)]
      (. builder aggregationSortConfigurations data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :limit)]
      (. builder limit data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-analysis-top-bottom-movers-computation-property-builder
  "The cfn-analysis-top-bottom-movers-computation-property-builder function buildes out new instances of 
CfnAnalysis$TopBottomMoversComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `moverSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:mover-size` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `sortOrder` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-order` |
| `time` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$TopBottomMoversComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :mover-size)]
      (. builder moverSize data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :sort-order)]
      (. builder sortOrder data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-top-bottom-ranked-computation-property-builder
  "The cfn-analysis-top-bottom-ranked-computation-property-builder function buildes out new instances of 
CfnAnalysis$TopBottomRankedComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.services.quicksight.CfnAnalysis$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `resultSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:result-size` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$TopBottomRankedComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :result-size)]
      (. builder resultSize data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-total-aggregation-computation-property-builder
  "The cfn-analysis-total-aggregation-computation-property-builder function buildes out new instances of 
CfnAnalysis$TotalAggregationComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `value` | software.amazon.awscdk.services.quicksight.CfnAnalysis$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$TotalAggregationComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-total-aggregation-function-property-builder
  "The cfn-analysis-total-aggregation-function-property-builder function buildes out new instances of 
CfnAnalysis$TotalAggregationFunctionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleTotalAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-total-aggregation-function` |"
  [stack id config]
  (let [builder (CfnAnalysis$TotalAggregationFunctionProperty$Builder.)]
    (when-let [data (lookup-entry config id :simple-total-aggregation-function)]
      (. builder simpleTotalAggregationFunction data))
    (.build builder)))


(defn cfn-analysis-total-aggregation-option-property-builder
  "The cfn-analysis-total-aggregation-option-property-builder function buildes out new instances of 
CfnAnalysis$TotalAggregationOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `totalAggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-aggregation-function` |"
  [stack id config]
  (let [builder (CfnAnalysis$TotalAggregationOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :total-aggregation-function)]
      (. builder totalAggregationFunction data))
    (.build builder)))


(defn cfn-analysis-total-options-property-builder
  "The cfn-analysis-total-options-property-builder function buildes out new instances of 
CfnAnalysis$TotalOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scrollStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:scroll-status` |
| `totalAggregationOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:total-aggregation-options` |
| `totalCellStyle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$TotalOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :placement)]
      (. builder placement data))
    (when-let [data (lookup-entry config id :scroll-status)]
      (. builder scrollStatus data))
    (when-let [data (lookup-entry config id :total-aggregation-options)]
      (. builder totalAggregationOptions data))
    (when-let [data (lookup-entry config id :total-cell-style)]
      (. builder totalCellStyle data))
    (when-let [data (lookup-entry config id :totals-visibility)]
      (. builder totalsVisibility data))
    (.build builder)))


(defn cfn-analysis-tree-map-aggregated-field-wells-property-builder
  "The cfn-analysis-tree-map-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$TreeMapAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `groups` | java.util.List | [[cdk.support/lookup-entry]] | `:groups` |
| `sizes` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sizes` |"
  [stack id config]
  (let [builder (CfnAnalysis$TreeMapAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :groups)]
      (. builder groups data))
    (when-let [data (lookup-entry config id :sizes)]
      (. builder sizes data))
    (.build builder)))


(defn cfn-analysis-tree-map-configuration-property-builder
  "The cfn-analysis-tree-map-configuration-property-builder function buildes out new instances of 
CfnAnalysis$TreeMapConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `colorScale` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ColorScaleProperty | [[cdk.support/lookup-entry]] | `:color-scale` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TreeMapFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `groupLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-label-options` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `sizeLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:size-label-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TreeMapSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |"
  [stack id config]
  (let [builder (CfnAnalysis$TreeMapConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :color-label-options)]
      (. builder colorLabelOptions data))
    (when-let [data (lookup-entry config id :color-scale)]
      (. builder colorScale data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :group-label-options)]
      (. builder groupLabelOptions data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :size-label-options)]
      (. builder sizeLabelOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (.build builder)))


(defn cfn-analysis-tree-map-field-wells-property-builder
  "The cfn-analysis-tree-map-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$TreeMapFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treeMapAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tree-map-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$TreeMapFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :tree-map-aggregated-field-wells)]
      (. builder treeMapAggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-tree-map-sort-configuration-property-builder
  "The cfn-analysis-tree-map-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$TreeMapSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treeMapGroupItemsLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tree-map-group-items-limit-configuration` |
| `treeMapSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tree-map-sort` |"
  [stack id config]
  (let [builder (CfnAnalysis$TreeMapSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :tree-map-group-items-limit-configuration)]
      (. builder treeMapGroupItemsLimitConfiguration data))
    (when-let [data (lookup-entry config id :tree-map-sort)]
      (. builder treeMapSort data))
    (.build builder)))


(defn cfn-analysis-tree-map-visual-property-builder
  "The cfn-analysis-tree-map-visual-property-builder function buildes out new instances of 
CfnAnalysis$TreeMapVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$TreeMapVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-trend-arrow-options-property-builder
  "The cfn-analysis-trend-arrow-options-property-builder function buildes out new instances of 
CfnAnalysis$TrendArrowOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$TrendArrowOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-unaggregated-field-property-builder
  "The cfn-analysis-unaggregated-field-property-builder function buildes out new instances of 
CfnAnalysis$UnaggregatedFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$UnaggregatedFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (.build builder)))


(defn cfn-analysis-unique-values-computation-property-builder
  "The cfn-analysis-unique-values-computation-property-builder function buildes out new instances of 
CfnAnalysis$UniqueValuesComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |"
  [stack id config]
  (let [builder (CfnAnalysis$UniqueValuesComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (.build builder)))


(defn cfn-analysis-validation-strategy-property-builder
  "The cfn-analysis-validation-strategy-property-builder function buildes out new instances of 
CfnAnalysis$ValidationStrategyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `mode` | java.lang.String | [[cdk.support/lookup-entry]] | `:mode` |"
  [stack id config]
  (let [builder (CfnAnalysis$ValidationStrategyProperty$Builder.)]
    (when-let [data (lookup-entry config id :mode)]
      (. builder mode data))
    (.build builder)))


(defn cfn-analysis-visible-range-options-property-builder
  "The cfn-analysis-visible-range-options-property-builder function buildes out new instances of 
CfnAnalysis$VisibleRangeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentRange` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:percent-range` |"
  [stack id config]
  (let [builder (CfnAnalysis$VisibleRangeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :percent-range)]
      (. builder percentRange data))
    (.build builder)))


(defn cfn-analysis-visual-custom-action-operation-property-builder
  "The cfn-analysis-visual-custom-action-operation-property-builder function buildes out new instances of 
CfnAnalysis$VisualCustomActionOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `filterOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-operation` |
| `navigationOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:navigation-operation` |
| `setParametersOperation` | software.amazon.awscdk.services.quicksight.CfnAnalysis$CustomActionSetParametersOperationProperty | [[cdk.support/lookup-entry]] | `:set-parameters-operation` |
| `urlOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:url-operation` |"
  [stack id config]
  (let [builder (CfnAnalysis$VisualCustomActionOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :filter-operation)]
      (. builder filterOperation data))
    (when-let [data (lookup-entry config id :navigation-operation)]
      (. builder navigationOperation data))
    (when-let [data (lookup-entry config id :set-parameters-operation)]
      (. builder setParametersOperation data))
    (when-let [data (lookup-entry config id :url-operation)]
      (. builder urlOperation data))
    (.build builder)))


(defn cfn-analysis-visual-custom-action-property-builder
  "The cfn-analysis-visual-custom-action-property-builder function buildes out new instances of 
CfnAnalysis$VisualCustomActionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actionOperations` | java.util.List | [[cdk.support/lookup-entry]] | `:action-operations` |
| `customActionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-action-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `trigger` | java.lang.String | [[cdk.support/lookup-entry]] | `:trigger` |"
  [stack id config]
  (let [builder (CfnAnalysis$VisualCustomActionProperty$Builder.)]
    (when-let [data (lookup-entry config id :action-operations)]
      (. builder actionOperations data))
    (when-let [data (lookup-entry config id :custom-action-id)]
      (. builder customActionId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (when-let [data (lookup-entry config id :trigger)]
      (. builder trigger data))
    (.build builder)))


(defn cfn-analysis-visual-palette-property-builder
  "The cfn-analysis-visual-palette-property-builder function buildes out new instances of 
CfnAnalysis$VisualPaletteProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `chartColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:chart-color` |
| `colorMap` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-map` |"
  [stack id config]
  (let [builder (CfnAnalysis$VisualPaletteProperty$Builder.)]
    (when-let [data (lookup-entry config id :chart-color)]
      (. builder chartColor data))
    (when-let [data (lookup-entry config id :color-map)]
      (. builder colorMap data))
    (.build builder)))


(defn cfn-analysis-visual-property-builder
  "The cfn-analysis-visual-property-builder function buildes out new instances of 
CfnAnalysis$VisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bar-chart-visual` |
| `boxPlotVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:box-plot-visual` |
| `comboChartVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ComboChartVisualProperty | [[cdk.support/lookup-entry]] | `:combo-chart-visual` |
| `customContentVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-content-visual` |
| `emptyVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$EmptyVisualProperty | [[cdk.support/lookup-entry]] | `:empty-visual` |
| `filledMapVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FilledMapVisualProperty | [[cdk.support/lookup-entry]] | `:filled-map-visual` |
| `funnelChartVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$FunnelChartVisualProperty | [[cdk.support/lookup-entry]] | `:funnel-chart-visual` |
| `gaugeChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:gauge-chart-visual` |
| `geospatialMapVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:geospatial-map-visual` |
| `heatMapVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$HeatMapVisualProperty | [[cdk.support/lookup-entry]] | `:heat-map-visual` |
| `histogramVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:histogram-visual` |
| `insightVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:insight-visual` |
| `kpiVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:kpi-visual` |
| `lineChartVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LineChartVisualProperty | [[cdk.support/lookup-entry]] | `:line-chart-visual` |
| `pieChartVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$PieChartVisualProperty | [[cdk.support/lookup-entry]] | `:pie-chart-visual` |
| `pivotTableVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:pivot-table-visual` |
| `radarChartVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$RadarChartVisualProperty | [[cdk.support/lookup-entry]] | `:radar-chart-visual` |
| `sankeyDiagramVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sankey-diagram-visual` |
| `scatterPlotVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scatter-plot-visual` |
| `tableVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:table-visual` |
| `treeMapVisual` | software.amazon.awscdk.services.quicksight.CfnAnalysis$TreeMapVisualProperty | [[cdk.support/lookup-entry]] | `:tree-map-visual` |
| `waterfallVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:waterfall-visual` |
| `wordCloudVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:word-cloud-visual` |"
  [stack id config]
  (let [builder (CfnAnalysis$VisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :bar-chart-visual)]
      (. builder barChartVisual data))
    (when-let [data (lookup-entry config id :box-plot-visual)]
      (. builder boxPlotVisual data))
    (when-let [data (lookup-entry config id :combo-chart-visual)]
      (. builder comboChartVisual data))
    (when-let [data (lookup-entry config id :custom-content-visual)]
      (. builder customContentVisual data))
    (when-let [data (lookup-entry config id :empty-visual)]
      (. builder emptyVisual data))
    (when-let [data (lookup-entry config id :filled-map-visual)]
      (. builder filledMapVisual data))
    (when-let [data (lookup-entry config id :funnel-chart-visual)]
      (. builder funnelChartVisual data))
    (when-let [data (lookup-entry config id :gauge-chart-visual)]
      (. builder gaugeChartVisual data))
    (when-let [data (lookup-entry config id :geospatial-map-visual)]
      (. builder geospatialMapVisual data))
    (when-let [data (lookup-entry config id :heat-map-visual)]
      (. builder heatMapVisual data))
    (when-let [data (lookup-entry config id :histogram-visual)]
      (. builder histogramVisual data))
    (when-let [data (lookup-entry config id :insight-visual)]
      (. builder insightVisual data))
    (when-let [data (lookup-entry config id :kpi-visual)]
      (. builder kpiVisual data))
    (when-let [data (lookup-entry config id :line-chart-visual)]
      (. builder lineChartVisual data))
    (when-let [data (lookup-entry config id :pie-chart-visual)]
      (. builder pieChartVisual data))
    (when-let [data (lookup-entry config id :pivot-table-visual)]
      (. builder pivotTableVisual data))
    (when-let [data (lookup-entry config id :radar-chart-visual)]
      (. builder radarChartVisual data))
    (when-let [data (lookup-entry config id :sankey-diagram-visual)]
      (. builder sankeyDiagramVisual data))
    (when-let [data (lookup-entry config id :scatter-plot-visual)]
      (. builder scatterPlotVisual data))
    (when-let [data (lookup-entry config id :table-visual)]
      (. builder tableVisual data))
    (when-let [data (lookup-entry config id :tree-map-visual)]
      (. builder treeMapVisual data))
    (when-let [data (lookup-entry config id :waterfall-visual)]
      (. builder waterfallVisual data))
    (when-let [data (lookup-entry config id :word-cloud-visual)]
      (. builder wordCloudVisual data))
    (.build builder)))


(defn cfn-analysis-visual-subtitle-label-options-property-builder
  "The cfn-analysis-visual-subtitle-label-options-property-builder function buildes out new instances of 
CfnAnalysis$VisualSubtitleLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatText` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$VisualSubtitleLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :format-text)]
      (. builder formatText data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-visual-title-label-options-property-builder
  "The cfn-analysis-visual-title-label-options-property-builder function buildes out new instances of 
CfnAnalysis$VisualTitleLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatText` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ShortFormatTextProperty | [[cdk.support/lookup-entry]] | `:format-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnAnalysis$VisualTitleLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :format-text)]
      (. builder formatText data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-analysis-waterfall-chart-aggregated-field-wells-property-builder
  "The cfn-analysis-waterfall-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$WaterfallChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `breakdowns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:breakdowns` |
| `categories` | java.util.List | [[cdk.support/lookup-entry]] | `:categories` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnAnalysis$WaterfallChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :breakdowns)]
      (. builder breakdowns data))
    (when-let [data (lookup-entry config id :categories)]
      (. builder categories data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-analysis-waterfall-chart-color-configuration-property-builder
  "The cfn-analysis-waterfall-chart-color-configuration-property-builder function buildes out new instances of 
CfnAnalysis$WaterfallChartColorConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupColorConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$WaterfallChartGroupColorConfigurationProperty | [[cdk.support/lookup-entry]] | `:group-color-configuration` |"
  [stack id config]
  (let [builder (CfnAnalysis$WaterfallChartColorConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :group-color-configuration)]
      (. builder groupColorConfiguration data))
    (.build builder)))


(defn cfn-analysis-waterfall-chart-configuration-property-builder
  "The cfn-analysis-waterfall-chart-configuration-property-builder function buildes out new instances of 
CfnAnalysis$WaterfallChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis-display-options` |
| `categoryAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis-label-options` |
| `colorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-configuration` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnAnalysis$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `waterfallChartOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$WaterfallChartOptionsProperty | [[cdk.support/lookup-entry]] | `:waterfall-chart-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$WaterfallChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-axis-display-options)]
      (. builder categoryAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :category-axis-label-options)]
      (. builder categoryAxisLabelOptions data))
    (when-let [data (lookup-entry config id :color-configuration)]
      (. builder colorConfiguration data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
      (. builder primaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
      (. builder primaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (when-let [data (lookup-entry config id :waterfall-chart-options)]
      (. builder waterfallChartOptions data))
    (.build builder)))


(defn cfn-analysis-waterfall-chart-field-wells-property-builder
  "The cfn-analysis-waterfall-chart-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$WaterfallChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `waterfallChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:waterfall-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$WaterfallChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :waterfall-chart-aggregated-field-wells)]
      (. builder waterfallChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-waterfall-chart-group-color-configuration-property-builder
  "The cfn-analysis-waterfall-chart-group-color-configuration-property-builder function buildes out new instances of 
CfnAnalysis$WaterfallChartGroupColorConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `negativeBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:negative-bar-color` |
| `positiveBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:positive-bar-color` |
| `totalBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:total-bar-color` |"
  [stack id config]
  (let [builder (CfnAnalysis$WaterfallChartGroupColorConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :negative-bar-color)]
      (. builder negativeBarColor data))
    (when-let [data (lookup-entry config id :positive-bar-color)]
      (. builder positiveBarColor data))
    (when-let [data (lookup-entry config id :total-bar-color)]
      (. builder totalBarColor data))
    (.build builder)))


(defn cfn-analysis-waterfall-chart-options-property-builder
  "The cfn-analysis-waterfall-chart-options-property-builder function buildes out new instances of 
CfnAnalysis$WaterfallChartOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `totalBarLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:total-bar-label` |"
  [stack id config]
  (let [builder (CfnAnalysis$WaterfallChartOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :total-bar-label)]
      (. builder totalBarLabel data))
    (.build builder)))


(defn cfn-analysis-waterfall-chart-sort-configuration-property-builder
  "The cfn-analysis-waterfall-chart-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$WaterfallChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `breakdownItemsLimit` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:breakdown-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |"
  [stack id config]
  (let [builder (CfnAnalysis$WaterfallChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :breakdown-items-limit)]
      (. builder breakdownItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (.build builder)))


(defn cfn-analysis-waterfall-visual-property-builder
  "The cfn-analysis-waterfall-visual-property-builder function buildes out new instances of 
CfnAnalysis$WaterfallVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$WaterfallChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$WaterfallVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-analysis-what-if-point-scenario-property-builder
  "The cfn-analysis-what-if-point-scenario-property-builder function buildes out new instances of 
CfnAnalysis$WhatIfPointScenarioProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `date` | java.lang.String | [[cdk.support/lookup-entry]] | `:date` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$WhatIfPointScenarioProperty$Builder.)]
    (when-let [data (lookup-entry config id :date)]
      (. builder date data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-what-if-range-scenario-property-builder
  "The cfn-analysis-what-if-range-scenario-property-builder function buildes out new instances of 
CfnAnalysis$WhatIfRangeScenarioProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `endDate` | java.lang.String | [[cdk.support/lookup-entry]] | `:end-date` |
| `startDate` | java.lang.String | [[cdk.support/lookup-entry]] | `:start-date` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnAnalysis$WhatIfRangeScenarioProperty$Builder.)]
    (when-let [data (lookup-entry config id :end-date)]
      (. builder endDate data))
    (when-let [data (lookup-entry config id :start-date)]
      (. builder startDate data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-analysis-word-cloud-aggregated-field-wells-property-builder
  "The cfn-analysis-word-cloud-aggregated-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$WordCloudAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | java.util.List | [[cdk.support/lookup-entry]] | `:group-by` |
| `size` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:size` |"
  [stack id config]
  (let [builder (CfnAnalysis$WordCloudAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :group-by)]
      (. builder groupBy data))
    (when-let [data (lookup-entry config id :size)]
      (. builder size data))
    (.build builder)))


(defn cfn-analysis-word-cloud-chart-configuration-property-builder
  "The cfn-analysis-word-cloud-chart-configuration-property-builder function buildes out new instances of 
CfnAnalysis$WordCloudChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnAnalysis$WordCloudSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `wordCloudOptions` | software.amazon.awscdk.services.quicksight.CfnAnalysis$WordCloudOptionsProperty | [[cdk.support/lookup-entry]] | `:word-cloud-options` |"
  [stack id config]
  (let [builder (CfnAnalysis$WordCloudChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :word-cloud-options)]
      (. builder wordCloudOptions data))
    (.build builder)))


(defn cfn-analysis-word-cloud-field-wells-property-builder
  "The cfn-analysis-word-cloud-field-wells-property-builder function buildes out new instances of 
CfnAnalysis$WordCloudFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `wordCloudAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:word-cloud-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnAnalysis$WordCloudFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :word-cloud-aggregated-field-wells)]
      (. builder wordCloudAggregatedFieldWells data))
    (.build builder)))


(defn cfn-analysis-word-cloud-options-property-builder
  "The cfn-analysis-word-cloud-options-property-builder function buildes out new instances of 
CfnAnalysis$WordCloudOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cloudLayout` | java.lang.String | [[cdk.support/lookup-entry]] | `:cloud-layout` |
| `maximumStringLength` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-string-length` |
| `wordCasing` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-casing` |
| `wordOrientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-orientation` |
| `wordPadding` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-padding` |
| `wordScaling` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-scaling` |"
  [stack id config]
  (let [builder (CfnAnalysis$WordCloudOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :cloud-layout)]
      (. builder cloudLayout data))
    (when-let [data (lookup-entry config id :maximum-string-length)]
      (. builder maximumStringLength data))
    (when-let [data (lookup-entry config id :word-casing)]
      (. builder wordCasing data))
    (when-let [data (lookup-entry config id :word-orientation)]
      (. builder wordOrientation data))
    (when-let [data (lookup-entry config id :word-padding)]
      (. builder wordPadding data))
    (when-let [data (lookup-entry config id :word-scaling)]
      (. builder wordScaling data))
    (.build builder)))


(defn cfn-analysis-word-cloud-sort-configuration-property-builder
  "The cfn-analysis-word-cloud-sort-configuration-property-builder function buildes out new instances of 
CfnAnalysis$WordCloudSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |"
  [stack id config]
  (let [builder (CfnAnalysis$WordCloudSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (.build builder)))


(defn cfn-analysis-word-cloud-visual-property-builder
  "The cfn-analysis-word-cloud-visual-property-builder function buildes out new instances of 
CfnAnalysis$WordCloudVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnAnalysis$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnAnalysis$WordCloudVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-ad-hoc-filtering-option-property-builder
  "The cfn-dashboard-ad-hoc-filtering-option-property-builder function buildes out new instances of 
CfnDashboard$AdHocFilteringOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |"
  [stack id config]
  (let [builder (CfnDashboard$AdHocFilteringOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :availability-status)]
      (. builder availabilityStatus data))
    (.build builder)))


(defn cfn-dashboard-aggregation-function-property-builder
  "The cfn-dashboard-aggregation-function-property-builder function buildes out new instances of 
CfnDashboard$AggregationFunctionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `attributeAggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:attribute-aggregation-function` |
| `categoricalAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:categorical-aggregation-function` |
| `dateAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-aggregation-function` |
| `numericalAggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numerical-aggregation-function` |"
  [stack id config]
  (let [builder (CfnDashboard$AggregationFunctionProperty$Builder.)]
    (when-let [data (lookup-entry config id :attribute-aggregation-function)]
      (. builder attributeAggregationFunction data))
    (when-let [data (lookup-entry config id :categorical-aggregation-function)]
      (. builder categoricalAggregationFunction data))
    (when-let [data (lookup-entry config id :date-aggregation-function)]
      (. builder dateAggregationFunction data))
    (when-let [data (lookup-entry config id :numerical-aggregation-function)]
      (. builder numericalAggregationFunction data))
    (.build builder)))


(defn cfn-dashboard-aggregation-sort-configuration-property-builder
  "The cfn-dashboard-aggregation-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$AggregationSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnDashboard$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `sortDirection` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-direction` |"
  [stack id config]
  (let [builder (CfnDashboard$AggregationSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :sort-direction)]
      (. builder sortDirection data))
    (.build builder)))


(defn cfn-dashboard-analysis-defaults-property-builder
  "The cfn-dashboard-analysis-defaults-property-builder function buildes out new instances of 
CfnDashboard$AnalysisDefaultsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultNewSheetConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultNewSheetConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-new-sheet-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$AnalysisDefaultsProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-new-sheet-configuration)]
      (. builder defaultNewSheetConfiguration data))
    (.build builder)))


(defn cfn-dashboard-anchor-date-configuration-property-builder
  "The cfn-dashboard-anchor-date-configuration-property-builder function buildes out new instances of 
CfnDashboard$AnchorDateConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `anchorOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:anchor-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |"
  [stack id config]
  (let [builder (CfnDashboard$AnchorDateConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :anchor-option)]
      (. builder anchorOption data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (.build builder)))


(defn cfn-dashboard-arc-axis-configuration-property-builder
  "The cfn-dashboard-arc-axis-configuration-property-builder function buildes out new instances of 
CfnDashboard$ArcAxisConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `range` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range` |
| `reserveRange` | java.lang.Number | [[cdk.support/lookup-entry]] | `:reserve-range` |"
  [stack id config]
  (let [builder (CfnDashboard$ArcAxisConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :range)]
      (. builder range data))
    (when-let [data (lookup-entry config id :reserve-range)]
      (. builder reserveRange data))
    (.build builder)))


(defn cfn-dashboard-arc-axis-display-range-property-builder
  "The cfn-dashboard-arc-axis-display-range-property-builder function buildes out new instances of 
CfnDashboard$ArcAxisDisplayRangeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `max` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max` |
| `min` | java.lang.Number | [[cdk.support/lookup-entry]] | `:min` |"
  [stack id config]
  (let [builder (CfnDashboard$ArcAxisDisplayRangeProperty$Builder.)]
    (when-let [data (lookup-entry config id :max)]
      (. builder max data))
    (when-let [data (lookup-entry config id :min)]
      (. builder min data))
    (.build builder)))


(defn cfn-dashboard-arc-configuration-property-builder
  "The cfn-dashboard-arc-configuration-property-builder function buildes out new instances of 
CfnDashboard$ArcConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:arc-angle` |
| `arcThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:arc-thickness` |"
  [stack id config]
  (let [builder (CfnDashboard$ArcConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :arc-angle)]
      (. builder arcAngle data))
    (when-let [data (lookup-entry config id :arc-thickness)]
      (. builder arcThickness data))
    (.build builder)))


(defn cfn-dashboard-arc-options-property-builder
  "The cfn-dashboard-arc-options-property-builder function buildes out new instances of 
CfnDashboard$ArcOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:arc-thickness` |"
  [stack id config]
  (let [builder (CfnDashboard$ArcOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :arc-thickness)]
      (. builder arcThickness data))
    (.build builder)))


(defn cfn-dashboard-asset-options-property-builder
  "The cfn-dashboard-asset-options-property-builder function buildes out new instances of 
CfnDashboard$AssetOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `timezone` | java.lang.String | [[cdk.support/lookup-entry]] | `:timezone` |
| `weekStart` | java.lang.String | [[cdk.support/lookup-entry]] | `:week-start` |"
  [stack id config]
  (let [builder (CfnDashboard$AssetOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :timezone)]
      (. builder timezone data))
    (when-let [data (lookup-entry config id :week-start)]
      (. builder weekStart data))
    (.build builder)))


(defn cfn-dashboard-attribute-aggregation-function-property-builder
  "The cfn-dashboard-attribute-aggregation-function-property-builder function buildes out new instances of 
CfnDashboard$AttributeAggregationFunctionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleAttributeAggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-attribute-aggregation` |
| `valueForMultipleValues` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-for-multiple-values` |"
  [stack id config]
  (let [builder (CfnDashboard$AttributeAggregationFunctionProperty$Builder.)]
    (when-let [data (lookup-entry config id :simple-attribute-aggregation)]
      (. builder simpleAttributeAggregation data))
    (when-let [data (lookup-entry config id :value-for-multiple-values)]
      (. builder valueForMultipleValues data))
    (.build builder)))


(defn cfn-dashboard-axis-data-options-property-builder
  "The cfn-dashboard-axis-data-options-property-builder function buildes out new instances of 
CfnDashboard$AxisDataOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateAxisOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-axis-options` |
| `numericAxisOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumericAxisOptionsProperty | [[cdk.support/lookup-entry]] | `:numeric-axis-options` |"
  [stack id config]
  (let [builder (CfnDashboard$AxisDataOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-axis-options)]
      (. builder dateAxisOptions data))
    (when-let [data (lookup-entry config id :numeric-axis-options)]
      (. builder numericAxisOptions data))
    (.build builder)))


(defn cfn-dashboard-axis-display-min-max-range-property-builder
  "The cfn-dashboard-axis-display-min-max-range-property-builder function buildes out new instances of 
CfnDashboard$AxisDisplayMinMaxRangeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `maximum` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum` |
| `minimum` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum` |"
  [stack id config]
  (let [builder (CfnDashboard$AxisDisplayMinMaxRangeProperty$Builder.)]
    (when-let [data (lookup-entry config id :maximum)]
      (. builder maximum data))
    (when-let [data (lookup-entry config id :minimum)]
      (. builder minimum data))
    (.build builder)))


(defn cfn-dashboard-axis-display-options-property-builder
  "The cfn-dashboard-axis-display-options-property-builder function buildes out new instances of 
CfnDashboard$AxisDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisLineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-line-visibility` |
| `axisOffset` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-offset` |
| `dataOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-options` |
| `gridLineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:grid-line-visibility` |
| `scrollbarOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scrollbar-options` |
| `tickLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tick-label-options` |"
  [stack id config]
  (let [builder (CfnDashboard$AxisDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-line-visibility)]
      (. builder axisLineVisibility data))
    (when-let [data (lookup-entry config id :axis-offset)]
      (. builder axisOffset data))
    (when-let [data (lookup-entry config id :data-options)]
      (. builder dataOptions data))
    (when-let [data (lookup-entry config id :grid-line-visibility)]
      (. builder gridLineVisibility data))
    (when-let [data (lookup-entry config id :scrollbar-options)]
      (. builder scrollbarOptions data))
    (when-let [data (lookup-entry config id :tick-label-options)]
      (. builder tickLabelOptions data))
    (.build builder)))


(defn cfn-dashboard-axis-display-range-property-builder
  "The cfn-dashboard-axis-display-range-property-builder function buildes out new instances of 
CfnDashboard$AxisDisplayRangeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataDriven` | java.lang.Object | [[cdk.support/lookup-entry]] | `:data-driven` |
| `minMax` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:min-max` |"
  [stack id config]
  (let [builder (CfnDashboard$AxisDisplayRangeProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-driven)]
      (. builder dataDriven data))
    (when-let [data (lookup-entry config id :min-max)]
      (. builder minMax data))
    (.build builder)))


(defn cfn-dashboard-axis-label-options-property-builder
  "The cfn-dashboard-axis-label-options-property-builder function buildes out new instances of 
CfnDashboard$AxisLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `applyTo` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisLabelReferenceOptionsProperty | [[cdk.support/lookup-entry]] | `:apply-to` |
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$AxisLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :apply-to)]
      (. builder applyTo data))
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (.build builder)))


(defn cfn-dashboard-axis-label-reference-options-property-builder
  "The cfn-dashboard-axis-label-reference-options-property-builder function buildes out new instances of 
CfnDashboard$AxisLabelReferenceOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |"
  [stack id config]
  (let [builder (CfnDashboard$AxisLabelReferenceOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (.build builder)))


(defn cfn-dashboard-axis-linear-scale-property-builder
  "The cfn-dashboard-axis-linear-scale-property-builder function buildes out new instances of 
CfnDashboard$AxisLinearScaleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `stepCount` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-count` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |"
  [stack id config]
  (let [builder (CfnDashboard$AxisLinearScaleProperty$Builder.)]
    (when-let [data (lookup-entry config id :step-count)]
      (. builder stepCount data))
    (when-let [data (lookup-entry config id :step-size)]
      (. builder stepSize data))
    (.build builder)))


(defn cfn-dashboard-axis-logarithmic-scale-property-builder
  "The cfn-dashboard-axis-logarithmic-scale-property-builder function buildes out new instances of 
CfnDashboard$AxisLogarithmicScaleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `base` | java.lang.Number | [[cdk.support/lookup-entry]] | `:base` |"
  [stack id config]
  (let [builder (CfnDashboard$AxisLogarithmicScaleProperty$Builder.)]
    (when-let [data (lookup-entry config id :base)]
      (. builder base data))
    (.build builder)))


(defn cfn-dashboard-axis-scale-property-builder
  "The cfn-dashboard-axis-scale-property-builder function buildes out new instances of 
CfnDashboard$AxisScaleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `linear` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisLinearScaleProperty | [[cdk.support/lookup-entry]] | `:linear` |
| `logarithmic` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:logarithmic` |"
  [stack id config]
  (let [builder (CfnDashboard$AxisScaleProperty$Builder.)]
    (when-let [data (lookup-entry config id :linear)]
      (. builder linear data))
    (when-let [data (lookup-entry config id :logarithmic)]
      (. builder logarithmic data))
    (.build builder)))


(defn cfn-dashboard-axis-tick-label-options-property-builder
  "The cfn-dashboard-axis-tick-label-options-property-builder function buildes out new instances of 
CfnDashboard$AxisTickLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `labelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label-options` |
| `rotationAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:rotation-angle` |"
  [stack id config]
  (let [builder (CfnDashboard$AxisTickLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :label-options)]
      (. builder labelOptions data))
    (when-let [data (lookup-entry config id :rotation-angle)]
      (. builder rotationAngle data))
    (.build builder)))


(defn cfn-dashboard-bar-chart-aggregated-field-wells-property-builder
  "The cfn-dashboard-bar-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$BarChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `smallMultiples` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$BarChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :small-multiples)]
      (. builder smallMultiples data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-bar-chart-configuration-property-builder
  "The cfn-dashboard-bar-chart-configuration-property-builder function buildes out new instances of 
CfnDashboard$BarChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barsArrangement` | java.lang.String | [[cdk.support/lookup-entry]] | `:bars-arrangement` |
| `categoryAxis` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `contributionAnalysisDefaults` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `orientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:orientation` |
| `referenceLines` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `smallMultiplesOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$SmallMultiplesOptionsProperty | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-axis` |
| `valueLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnDashboard$BarChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :bars-arrangement)]
      (. builder barsArrangement data))
    (when-let [data (lookup-entry config id :category-axis)]
      (. builder categoryAxis data))
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :color-label-options)]
      (. builder colorLabelOptions data))
    (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
      (. builder contributionAnalysisDefaults data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :orientation)]
      (. builder orientation data))
    (when-let [data (lookup-entry config id :reference-lines)]
      (. builder referenceLines data))
    (when-let [data (lookup-entry config id :small-multiples-options)]
      (. builder smallMultiplesOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :value-axis)]
      (. builder valueAxis data))
    (when-let [data (lookup-entry config id :value-label-options)]
      (. builder valueLabelOptions data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-dashboard-bar-chart-field-wells-property-builder
  "The cfn-dashboard-bar-chart-field-wells-property-builder function buildes out new instances of 
CfnDashboard$BarChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bar-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$BarChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bar-chart-aggregated-field-wells)]
      (. builder barChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-bar-chart-sort-configuration-property-builder
  "The cfn-dashboard-bar-chart-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$BarChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-sort` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |"
  [stack id config]
  (let [builder (CfnDashboard$BarChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :color-items-limit)]
      (. builder colorItemsLimit data))
    (when-let [data (lookup-entry config id :color-sort)]
      (. builder colorSort data))
    (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
      (. builder smallMultiplesLimitConfiguration data))
    (when-let [data (lookup-entry config id :small-multiples-sort)]
      (. builder smallMultiplesSort data))
    (.build builder)))


(defn cfn-dashboard-bar-chart-visual-property-builder
  "The cfn-dashboard-bar-chart-visual-property-builder function buildes out new instances of 
CfnDashboard$BarChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$BarChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-bin-count-options-property-builder
  "The cfn-dashboard-bin-count-options-property-builder function buildes out new instances of 
CfnDashboard$BinCountOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$BinCountOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-bin-width-options-property-builder
  "The cfn-dashboard-bin-width-options-property-builder function buildes out new instances of 
CfnDashboard$BinWidthOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binCountLimit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:bin-count-limit` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$BinWidthOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bin-count-limit)]
      (. builder binCountLimit data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-body-section-configuration-property-builder
  "The cfn-dashboard-body-section-configuration-property-builder function buildes out new instances of 
CfnDashboard$BodySectionConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | software.amazon.awscdk.services.quicksight.CfnDashboard$BodySectionContentProperty | [[cdk.support/lookup-entry]] | `:content` |
| `pageBreakConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$SectionPageBreakConfigurationProperty | [[cdk.support/lookup-entry]] | `:page-break-configuration` |
| `sectionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:section-id` |
| `style` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style` |"
  [stack id config]
  (let [builder (CfnDashboard$BodySectionConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :content)]
      (. builder content data))
    (when-let [data (lookup-entry config id :page-break-configuration)]
      (. builder pageBreakConfiguration data))
    (when-let [data (lookup-entry config id :section-id)]
      (. builder sectionId data))
    (when-let [data (lookup-entry config id :style)]
      (. builder style data))
    (.build builder)))


(defn cfn-dashboard-body-section-content-property-builder
  "The cfn-dashboard-body-section-content-property-builder function buildes out new instances of 
CfnDashboard$BodySectionContentProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `layout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:layout` |"
  [stack id config]
  (let [builder (CfnDashboard$BodySectionContentProperty$Builder.)]
    (when-let [data (lookup-entry config id :layout)]
      (. builder layout data))
    (.build builder)))


(defn cfn-dashboard-box-plot-aggregated-field-wells-property-builder
  "The cfn-dashboard-box-plot-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$BoxPlotAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | java.util.List | [[cdk.support/lookup-entry]] | `:group-by` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$BoxPlotAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :group-by)]
      (. builder groupBy data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-box-plot-chart-configuration-property-builder
  "The cfn-dashboard-box-plot-chart-configuration-property-builder function buildes out new instances of 
CfnDashboard$BoxPlotChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `boxPlotOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$BoxPlotOptionsProperty | [[cdk.support/lookup-entry]] | `:box-plot-options` |
| `categoryAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnDashboard$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnDashboard$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnDashboard$BoxPlotChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :box-plot-options)]
      (. builder boxPlotOptions data))
    (when-let [data (lookup-entry config id :category-axis)]
      (. builder categoryAxis data))
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
      (. builder primaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
      (. builder primaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :reference-lines)]
      (. builder referenceLines data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-dashboard-box-plot-field-wells-property-builder
  "The cfn-dashboard-box-plot-field-wells-property-builder function buildes out new instances of 
CfnDashboard$BoxPlotFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `boxPlotAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$BoxPlotAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:box-plot-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$BoxPlotFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :box-plot-aggregated-field-wells)]
      (. builder boxPlotAggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-box-plot-options-property-builder
  "The cfn-dashboard-box-plot-options-property-builder function buildes out new instances of 
CfnDashboard$BoxPlotOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `allDataPointsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:all-data-points-visibility` |
| `outlierVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:outlier-visibility` |
| `styleOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$BoxPlotStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:style-options` |"
  [stack id config]
  (let [builder (CfnDashboard$BoxPlotOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :all-data-points-visibility)]
      (. builder allDataPointsVisibility data))
    (when-let [data (lookup-entry config id :outlier-visibility)]
      (. builder outlierVisibility data))
    (when-let [data (lookup-entry config id :style-options)]
      (. builder styleOptions data))
    (.build builder)))


(defn cfn-dashboard-box-plot-sort-configuration-property-builder
  "The cfn-dashboard-box-plot-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$BoxPlotSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `paginationConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:pagination-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$BoxPlotSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :pagination-configuration)]
      (. builder paginationConfiguration data))
    (.build builder)))


(defn cfn-dashboard-box-plot-style-options-property-builder
  "The cfn-dashboard-box-plot-style-options-property-builder function buildes out new instances of 
CfnDashboard$BoxPlotStyleOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fillStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:fill-style` |"
  [stack id config]
  (let [builder (CfnDashboard$BoxPlotStyleOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :fill-style)]
      (. builder fillStyle data))
    (.build builder)))


(defn cfn-dashboard-box-plot-visual-property-builder
  "The cfn-dashboard-box-plot-visual-property-builder function buildes out new instances of 
CfnDashboard$BoxPlotVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$BoxPlotChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$BoxPlotVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-builder
  "The cfn-dashboard-builder function buildes out new instances of 
CfnDashboard$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `dashboardId` | java.lang.String | [[cdk.support/lookup-entry]] | `:dashboard-id` |
| `dashboardPublishOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dashboard-publish-options` |
| `definition` | software.amazon.awscdk.services.quicksight.CfnDashboard$DashboardVersionDefinitionProperty | [[cdk.support/lookup-entry]] | `:definition` |
| `linkEntities` | java.util.List | [[cdk.support/lookup-entry]] | `:link-entities` |
| `linkSharingConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:link-sharing-configuration` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameters` | software.amazon.awscdk.services.quicksight.CfnDashboard$ParametersProperty | [[cdk.support/lookup-entry]] | `:parameters` |
| `permissions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:permissions` |
| `sourceEntity` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-entity` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `themeArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:theme-arn` |
| `validationStrategy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:validation-strategy` |
| `versionDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:version-description` |"
  [stack id config]
  (let [builder (CfnDashboard$Builder/create stack id)]
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :dashboard-id)]
      (. builder dashboardId data))
    (when-let [data (lookup-entry config id :dashboard-publish-options)]
      (. builder dashboardPublishOptions data))
    (when-let [data (lookup-entry config id :definition)]
      (. builder definition data))
    (when-let [data (lookup-entry config id :link-entities)]
      (. builder linkEntities data))
    (when-let [data (lookup-entry config id :link-sharing-configuration)]
      (. builder linkSharingConfiguration data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :parameters)]
      (. builder parameters data))
    (when-let [data (lookup-entry config id :permissions)]
      (. builder permissions data))
    (when-let [data (lookup-entry config id :source-entity)]
      (. builder sourceEntity data))
    (when-let [data (lookup-entry config id :tags)]
      (. builder tags data))
    (when-let [data (lookup-entry config id :theme-arn)]
      (. builder themeArn data))
    (when-let [data (lookup-entry config id :validation-strategy)]
      (. builder validationStrategy data))
    (when-let [data (lookup-entry config id :version-description)]
      (. builder versionDescription data))
    (.build builder)))


(defn cfn-dashboard-calculated-field-property-builder
  "The cfn-dashboard-calculated-field-property-builder function buildes out new instances of 
CfnDashboard$CalculatedFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |"
  [stack id config]
  (let [builder (CfnDashboard$CalculatedFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (.build builder)))


(defn cfn-dashboard-calculated-measure-field-property-builder
  "The cfn-dashboard-calculated-measure-field-property-builder function buildes out new instances of 
CfnDashboard$CalculatedMeasureFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |"
  [stack id config]
  (let [builder (CfnDashboard$CalculatedMeasureFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (.build builder)))


(defn cfn-dashboard-cascading-control-configuration-property-builder
  "The cfn-dashboard-cascading-control-configuration-property-builder function buildes out new instances of 
CfnDashboard$CascadingControlConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sourceControls` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-controls` |"
  [stack id config]
  (let [builder (CfnDashboard$CascadingControlConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :source-controls)]
      (. builder sourceControls data))
    (.build builder)))


(defn cfn-dashboard-cascading-control-source-property-builder
  "The cfn-dashboard-cascading-control-source-property-builder function buildes out new instances of 
CfnDashboard$CascadingControlSourceProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnToMatch` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column-to-match` |
| `sourceSheetControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-sheet-control-id` |"
  [stack id config]
  (let [builder (CfnDashboard$CascadingControlSourceProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-to-match)]
      (. builder columnToMatch data))
    (when-let [data (lookup-entry config id :source-sheet-control-id)]
      (. builder sourceSheetControlId data))
    (.build builder)))


(defn cfn-dashboard-categorical-dimension-field-property-builder
  "The cfn-dashboard-categorical-dimension-field-property-builder function buildes out new instances of 
CfnDashboard$CategoricalDimensionFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$StringFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnDashboard$CategoricalDimensionFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-dashboard-categorical-measure-field-property-builder
  "The cfn-dashboard-categorical-measure-field-property-builder function buildes out new instances of 
CfnDashboard$CategoricalMeasureFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$StringFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$CategoricalMeasureFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (.build builder)))


(defn cfn-dashboard-category-drill-down-filter-property-builder
  "The cfn-dashboard-category-drill-down-filter-property-builder function buildes out new instances of 
CfnDashboard$CategoryDrillDownFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |"
  [stack id config]
  (let [builder (CfnDashboard$CategoryDrillDownFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-values)]
      (. builder categoryValues data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (.build builder)))


(defn cfn-dashboard-category-filter-configuration-property-builder
  "The cfn-dashboard-category-filter-configuration-property-builder function buildes out new instances of 
CfnDashboard$CategoryFilterConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customFilterConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$CustomFilterConfigurationProperty | [[cdk.support/lookup-entry]] | `:custom-filter-configuration` |
| `customFilterListConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$CustomFilterListConfigurationProperty | [[cdk.support/lookup-entry]] | `:custom-filter-list-configuration` |
| `filterListConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-list-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$CategoryFilterConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-filter-configuration)]
      (. builder customFilterConfiguration data))
    (when-let [data (lookup-entry config id :custom-filter-list-configuration)]
      (. builder customFilterListConfiguration data))
    (when-let [data (lookup-entry config id :filter-list-configuration)]
      (. builder filterListConfiguration data))
    (.build builder)))


(defn cfn-dashboard-category-filter-property-builder
  "The cfn-dashboard-category-filter-property-builder function buildes out new instances of 
CfnDashboard$CategoryFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `configuration` | software.amazon.awscdk.services.quicksight.CfnDashboard$CategoryFilterConfigurationProperty | [[cdk.support/lookup-entry]] | `:configuration` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |"
  [stack id config]
  (let [builder (CfnDashboard$CategoryFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :configuration)]
      (. builder configuration data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (.build builder)))


(defn cfn-dashboard-chart-axis-label-options-property-builder
  "The cfn-dashboard-chart-axis-label-options-property-builder function buildes out new instances of 
CfnDashboard$ChartAxisLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisLabelOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:axis-label-options` |
| `sortIconVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-icon-visibility` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$ChartAxisLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-label-options)]
      (. builder axisLabelOptions data))
    (when-let [data (lookup-entry config id :sort-icon-visibility)]
      (. builder sortIconVisibility data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-cluster-marker-configuration-property-builder
  "The cfn-dashboard-cluster-marker-configuration-property-builder function buildes out new instances of 
CfnDashboard$ClusterMarkerConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `clusterMarker` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cluster-marker` |"
  [stack id config]
  (let [builder (CfnDashboard$ClusterMarkerConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :cluster-marker)]
      (. builder clusterMarker data))
    (.build builder)))


(defn cfn-dashboard-cluster-marker-property-builder
  "The cfn-dashboard-cluster-marker-property-builder function buildes out new instances of 
CfnDashboard$ClusterMarkerProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleClusterMarker` | software.amazon.awscdk.services.quicksight.CfnDashboard$SimpleClusterMarkerProperty | [[cdk.support/lookup-entry]] | `:simple-cluster-marker` |"
  [stack id config]
  (let [builder (CfnDashboard$ClusterMarkerProperty$Builder.)]
    (when-let [data (lookup-entry config id :simple-cluster-marker)]
      (. builder simpleClusterMarker data))
    (.build builder)))


(defn cfn-dashboard-color-scale-property-builder
  "The cfn-dashboard-color-scale-property-builder function buildes out new instances of 
CfnDashboard$ColorScaleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorFillType` | java.lang.String | [[cdk.support/lookup-entry]] | `:color-fill-type` |
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `nullValueColor` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataColorProperty | [[cdk.support/lookup-entry]] | `:null-value-color` |"
  [stack id config]
  (let [builder (CfnDashboard$ColorScaleProperty$Builder.)]
    (when-let [data (lookup-entry config id :color-fill-type)]
      (. builder colorFillType data))
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :null-value-color)]
      (. builder nullValueColor data))
    (.build builder)))


(defn cfn-dashboard-colors-configuration-property-builder
  "The cfn-dashboard-colors-configuration-property-builder function buildes out new instances of 
CfnDashboard$ColorsConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customColors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-colors` |"
  [stack id config]
  (let [builder (CfnDashboard$ColorsConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-colors)]
      (. builder customColors data))
    (.build builder)))


(defn cfn-dashboard-column-configuration-property-builder
  "The cfn-dashboard-column-configuration-property-builder function buildes out new instances of 
CfnDashboard$ColumnConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorsConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors-configuration` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `role` | java.lang.String | [[cdk.support/lookup-entry]] | `:role` |"
  [stack id config]
  (let [builder (CfnDashboard$ColumnConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :colors-configuration)]
      (. builder colorsConfiguration data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (when-let [data (lookup-entry config id :role)]
      (. builder role data))
    (.build builder)))


(defn cfn-dashboard-column-hierarchy-property-builder
  "The cfn-dashboard-column-hierarchy-property-builder function buildes out new instances of 
CfnDashboard$ColumnHierarchyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeHierarchy` | software.amazon.awscdk.services.quicksight.CfnDashboard$DateTimeHierarchyProperty | [[cdk.support/lookup-entry]] | `:date-time-hierarchy` |
| `explicitHierarchy` | software.amazon.awscdk.services.quicksight.CfnDashboard$ExplicitHierarchyProperty | [[cdk.support/lookup-entry]] | `:explicit-hierarchy` |
| `predefinedHierarchy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:predefined-hierarchy` |"
  [stack id config]
  (let [builder (CfnDashboard$ColumnHierarchyProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-hierarchy)]
      (. builder dateTimeHierarchy data))
    (when-let [data (lookup-entry config id :explicit-hierarchy)]
      (. builder explicitHierarchy data))
    (when-let [data (lookup-entry config id :predefined-hierarchy)]
      (. builder predefinedHierarchy data))
    (.build builder)))


(defn cfn-dashboard-column-identifier-property-builder
  "The cfn-dashboard-column-identifier-property-builder function buildes out new instances of 
CfnDashboard$ColumnIdentifierProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |"
  [stack id config]
  (let [builder (CfnDashboard$ColumnIdentifierProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-name)]
      (. builder columnName data))
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (.build builder)))


(defn cfn-dashboard-column-sort-property-builder
  "The cfn-dashboard-column-sort-property-builder function buildes out new instances of 
CfnDashboard$ColumnSortProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnDashboard$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `sortBy` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:sort-by` |"
  [stack id config]
  (let [builder (CfnDashboard$ColumnSortProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :direction)]
      (. builder direction data))
    (when-let [data (lookup-entry config id :sort-by)]
      (. builder sortBy data))
    (.build builder)))


(defn cfn-dashboard-column-tooltip-item-property-builder
  "The cfn-dashboard-column-tooltip-item-property-builder function buildes out new instances of 
CfnDashboard$ColumnTooltipItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregation` | software.amazon.awscdk.services.quicksight.CfnDashboard$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation` |
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `label` | java.lang.String | [[cdk.support/lookup-entry]] | `:label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$ColumnTooltipItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation)]
      (. builder aggregation data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :label)]
      (. builder label data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-combo-chart-aggregated-field-wells-property-builder
  "The cfn-dashboard-combo-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$ComboChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barValues` | java.util.List | [[cdk.support/lookup-entry]] | `:bar-values` |
| `category` | java.util.List | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
| `lineValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-values` |"
  [stack id config]
  (let [builder (CfnDashboard$ComboChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bar-values)]
      (. builder barValues data))
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :line-values)]
      (. builder lineValues data))
    (.build builder)))


(defn cfn-dashboard-combo-chart-configuration-property-builder
  "The cfn-dashboard-combo-chart-configuration-property-builder function buildes out new instances of 
CfnDashboard$ComboChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barDataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bar-data-labels` |
| `barsArrangement` | java.lang.String | [[cdk.support/lookup-entry]] | `:bars-arrangement` |
| `categoryAxis` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$ComboChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnDashboard$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `lineDataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-data-labels` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | java.util.List | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `secondaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-y-axis-display-options` |
| `secondaryYAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-y-axis-label-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ComboChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnDashboard$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnDashboard$ComboChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :bar-data-labels)]
      (. builder barDataLabels data))
    (when-let [data (lookup-entry config id :bars-arrangement)]
      (. builder barsArrangement data))
    (when-let [data (lookup-entry config id :category-axis)]
      (. builder categoryAxis data))
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :color-label-options)]
      (. builder colorLabelOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :line-data-labels)]
      (. builder lineDataLabels data))
    (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
      (. builder primaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
      (. builder primaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :reference-lines)]
      (. builder referenceLines data))
    (when-let [data (lookup-entry config id :secondary-y-axis-display-options)]
      (. builder secondaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :secondary-y-axis-label-options)]
      (. builder secondaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-dashboard-combo-chart-field-wells-property-builder
  "The cfn-dashboard-combo-chart-field-wells-property-builder function buildes out new instances of 
CfnDashboard$ComboChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comboChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:combo-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$ComboChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :combo-chart-aggregated-field-wells)]
      (. builder comboChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-combo-chart-sort-configuration-property-builder
  "The cfn-dashboard-combo-chart-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$ComboChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-sort` |"
  [stack id config]
  (let [builder (CfnDashboard$ComboChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :color-items-limit)]
      (. builder colorItemsLimit data))
    (when-let [data (lookup-entry config id :color-sort)]
      (. builder colorSort data))
    (.build builder)))


(defn cfn-dashboard-combo-chart-visual-property-builder
  "The cfn-dashboard-combo-chart-visual-property-builder function buildes out new instances of 
CfnDashboard$ComboChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$ComboChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-comparison-configuration-property-builder
  "The cfn-dashboard-comparison-configuration-property-builder function buildes out new instances of 
CfnDashboard$ComparisonConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comparisonFormat` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:comparison-format` |
| `comparisonMethod` | java.lang.String | [[cdk.support/lookup-entry]] | `:comparison-method` |"
  [stack id config]
  (let [builder (CfnDashboard$ComparisonConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :comparison-format)]
      (. builder comparisonFormat data))
    (when-let [data (lookup-entry config id :comparison-method)]
      (. builder comparisonMethod data))
    (.build builder)))


(defn cfn-dashboard-comparison-format-configuration-property-builder
  "The cfn-dashboard-comparison-format-configuration-property-builder function buildes out new instances of 
CfnDashboard$ComparisonFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `numberDisplayFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumberDisplayFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:number-display-format-configuration` |
| `percentageDisplayFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:percentage-display-format-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$ComparisonFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :number-display-format-configuration)]
      (. builder numberDisplayFormatConfiguration data))
    (when-let [data (lookup-entry config id :percentage-display-format-configuration)]
      (. builder percentageDisplayFormatConfiguration data))
    (.build builder)))


(defn cfn-dashboard-computation-property-builder
  "The cfn-dashboard-computation-property-builder function buildes out new instances of 
CfnDashboard$ComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `forecast` | software.amazon.awscdk.services.quicksight.CfnDashboard$ForecastComputationProperty | [[cdk.support/lookup-entry]] | `:forecast` |
| `growthRate` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:growth-rate` |
| `maximumMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:maximum-minimum` |
| `metricComparison` | software.amazon.awscdk.services.quicksight.CfnDashboard$MetricComparisonComputationProperty | [[cdk.support/lookup-entry]] | `:metric-comparison` |
| `periodOverPeriod` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:period-over-period` |
| `periodToDate` | software.amazon.awscdk.services.quicksight.CfnDashboard$PeriodToDateComputationProperty | [[cdk.support/lookup-entry]] | `:period-to-date` |
| `topBottomMovers` | software.amazon.awscdk.services.quicksight.CfnDashboard$TopBottomMoversComputationProperty | [[cdk.support/lookup-entry]] | `:top-bottom-movers` |
| `topBottomRanked` | software.amazon.awscdk.services.quicksight.CfnDashboard$TopBottomRankedComputationProperty | [[cdk.support/lookup-entry]] | `:top-bottom-ranked` |
| `totalAggregation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-aggregation` |
| `uniqueValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:unique-values` |"
  [stack id config]
  (let [builder (CfnDashboard$ComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :forecast)]
      (. builder forecast data))
    (when-let [data (lookup-entry config id :growth-rate)]
      (. builder growthRate data))
    (when-let [data (lookup-entry config id :maximum-minimum)]
      (. builder maximumMinimum data))
    (when-let [data (lookup-entry config id :metric-comparison)]
      (. builder metricComparison data))
    (when-let [data (lookup-entry config id :period-over-period)]
      (. builder periodOverPeriod data))
    (when-let [data (lookup-entry config id :period-to-date)]
      (. builder periodToDate data))
    (when-let [data (lookup-entry config id :top-bottom-movers)]
      (. builder topBottomMovers data))
    (when-let [data (lookup-entry config id :top-bottom-ranked)]
      (. builder topBottomRanked data))
    (when-let [data (lookup-entry config id :total-aggregation)]
      (. builder totalAggregation data))
    (when-let [data (lookup-entry config id :unique-values)]
      (. builder uniqueValues data))
    (.build builder)))


(defn cfn-dashboard-conditional-formatting-color-property-builder
  "The cfn-dashboard-conditional-formatting-color-property-builder function buildes out new instances of 
CfnDashboard$ConditionalFormattingColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `gradient` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:gradient` |
| `solid` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingSolidColorProperty | [[cdk.support/lookup-entry]] | `:solid` |"
  [stack id config]
  (let [builder (CfnDashboard$ConditionalFormattingColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :gradient)]
      (. builder gradient data))
    (when-let [data (lookup-entry config id :solid)]
      (. builder solid data))
    (.build builder)))


(defn cfn-dashboard-conditional-formatting-custom-icon-condition-property-builder
  "The cfn-dashboard-conditional-formatting-custom-icon-condition-property-builder function buildes out new instances of 
CfnDashboard$ConditionalFormattingCustomIconConditionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `displayConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingIconDisplayConfigurationProperty | [[cdk.support/lookup-entry]] | `:display-configuration` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `iconOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingCustomIconOptionsProperty | [[cdk.support/lookup-entry]] | `:icon-options` |"
  [stack id config]
  (let [builder (CfnDashboard$ConditionalFormattingCustomIconConditionProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :display-configuration)]
      (. builder displayConfiguration data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (when-let [data (lookup-entry config id :icon-options)]
      (. builder iconOptions data))
    (.build builder)))


(defn cfn-dashboard-conditional-formatting-custom-icon-options-property-builder
  "The cfn-dashboard-conditional-formatting-custom-icon-options-property-builder function buildes out new instances of 
CfnDashboard$ConditionalFormattingCustomIconOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon` |
| `unicodeIcon` | java.lang.String | [[cdk.support/lookup-entry]] | `:unicode-icon` |"
  [stack id config]
  (let [builder (CfnDashboard$ConditionalFormattingCustomIconOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :unicode-icon)]
      (. builder unicodeIcon data))
    (.build builder)))


(defn cfn-dashboard-conditional-formatting-gradient-color-property-builder
  "The cfn-dashboard-conditional-formatting-gradient-color-property-builder function buildes out new instances of 
CfnDashboard$ConditionalFormattingGradientColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | software.amazon.awscdk.services.quicksight.CfnDashboard$GradientColorProperty | [[cdk.support/lookup-entry]] | `:color` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |"
  [stack id config]
  (let [builder (CfnDashboard$ConditionalFormattingGradientColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (.build builder)))


(defn cfn-dashboard-conditional-formatting-icon-display-configuration-property-builder
  "The cfn-dashboard-conditional-formatting-icon-display-configuration-property-builder function buildes out new instances of 
CfnDashboard$ConditionalFormattingIconDisplayConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `iconDisplayOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon-display-option` |"
  [stack id config]
  (let [builder (CfnDashboard$ConditionalFormattingIconDisplayConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon-display-option)]
      (. builder iconDisplayOption data))
    (.build builder)))


(defn cfn-dashboard-conditional-formatting-icon-property-builder
  "The cfn-dashboard-conditional-formatting-icon-property-builder function buildes out new instances of 
CfnDashboard$ConditionalFormattingIconProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customCondition` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingCustomIconConditionProperty | [[cdk.support/lookup-entry]] | `:custom-condition` |
| `iconSet` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon-set` |"
  [stack id config]
  (let [builder (CfnDashboard$ConditionalFormattingIconProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-condition)]
      (. builder customCondition data))
    (when-let [data (lookup-entry config id :icon-set)]
      (. builder iconSet data))
    (.build builder)))


(defn cfn-dashboard-conditional-formatting-icon-set-property-builder
  "The cfn-dashboard-conditional-formatting-icon-set-property-builder function buildes out new instances of 
CfnDashboard$ConditionalFormattingIconSetProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `iconSetType` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon-set-type` |"
  [stack id config]
  (let [builder (CfnDashboard$ConditionalFormattingIconSetProperty$Builder.)]
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (when-let [data (lookup-entry config id :icon-set-type)]
      (. builder iconSetType data))
    (.build builder)))


(defn cfn-dashboard-conditional-formatting-solid-color-property-builder
  "The cfn-dashboard-conditional-formatting-solid-color-property-builder function buildes out new instances of 
CfnDashboard$ConditionalFormattingSolidColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |"
  [stack id config]
  (let [builder (CfnDashboard$ConditionalFormattingSolidColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (.build builder)))


(defn cfn-dashboard-contribution-analysis-default-property-builder
  "The cfn-dashboard-contribution-analysis-default-property-builder function buildes out new instances of 
CfnDashboard$ContributionAnalysisDefaultProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contributorDimensions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:contributor-dimensions` |
| `measureFieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-field-id` |"
  [stack id config]
  (let [builder (CfnDashboard$ContributionAnalysisDefaultProperty$Builder.)]
    (when-let [data (lookup-entry config id :contributor-dimensions)]
      (. builder contributorDimensions data))
    (when-let [data (lookup-entry config id :measure-field-id)]
      (. builder measureFieldId data))
    (.build builder)))


(defn cfn-dashboard-currency-display-format-configuration-property-builder
  "The cfn-dashboard-currency-display-format-configuration-property-builder function buildes out new instances of 
CfnDashboard$CurrencyDisplayFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NegativeValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numberScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:number-scale` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |
| `symbol` | java.lang.String | [[cdk.support/lookup-entry]] | `:symbol` |"
  [stack id config]
  (let [builder (CfnDashboard$CurrencyDisplayFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :decimal-places-configuration)]
      (. builder decimalPlacesConfiguration data))
    (when-let [data (lookup-entry config id :negative-value-configuration)]
      (. builder negativeValueConfiguration data))
    (when-let [data (lookup-entry config id :null-value-format-configuration)]
      (. builder nullValueFormatConfiguration data))
    (when-let [data (lookup-entry config id :number-scale)]
      (. builder numberScale data))
    (when-let [data (lookup-entry config id :prefix)]
      (. builder prefix data))
    (when-let [data (lookup-entry config id :separator-configuration)]
      (. builder separatorConfiguration data))
    (when-let [data (lookup-entry config id :suffix)]
      (. builder suffix data))
    (when-let [data (lookup-entry config id :symbol)]
      (. builder symbol data))
    (.build builder)))


(defn cfn-dashboard-custom-action-filter-operation-property-builder
  "The cfn-dashboard-custom-action-filter-operation-property-builder function buildes out new instances of 
CfnDashboard$CustomActionFilterOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `selectedFieldsConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-fields-configuration` |
| `targetVisualsConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target-visuals-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$CustomActionFilterOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :selected-fields-configuration)]
      (. builder selectedFieldsConfiguration data))
    (when-let [data (lookup-entry config id :target-visuals-configuration)]
      (. builder targetVisualsConfiguration data))
    (.build builder)))


(defn cfn-dashboard-custom-action-navigation-operation-property-builder
  "The cfn-dashboard-custom-action-navigation-operation-property-builder function buildes out new instances of 
CfnDashboard$CustomActionNavigationOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `localNavigationConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:local-navigation-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$CustomActionNavigationOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :local-navigation-configuration)]
      (. builder localNavigationConfiguration data))
    (.build builder)))


(defn cfn-dashboard-custom-action-set-parameters-operation-property-builder
  "The cfn-dashboard-custom-action-set-parameters-operation-property-builder function buildes out new instances of 
CfnDashboard$CustomActionSetParametersOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameterValueConfigurations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameter-value-configurations` |"
  [stack id config]
  (let [builder (CfnDashboard$CustomActionSetParametersOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :parameter-value-configurations)]
      (. builder parameterValueConfigurations data))
    (.build builder)))


(defn cfn-dashboard-custom-action-url-operation-property-builder
  "The cfn-dashboard-custom-action-url-operation-property-builder function buildes out new instances of 
CfnDashboard$CustomActionURLOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `urlTarget` | java.lang.String | [[cdk.support/lookup-entry]] | `:url-target` |
| `urlTemplate` | java.lang.String | [[cdk.support/lookup-entry]] | `:url-template` |"
  [stack id config]
  (let [builder (CfnDashboard$CustomActionURLOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :url-target)]
      (. builder urlTarget data))
    (when-let [data (lookup-entry config id :url-template)]
      (. builder urlTemplate data))
    (.build builder)))


(defn cfn-dashboard-custom-color-property-builder
  "The cfn-dashboard-custom-color-property-builder function buildes out new instances of 
CfnDashboard$CustomColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `specialValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:special-value` |"
  [stack id config]
  (let [builder (CfnDashboard$CustomColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :field-value)]
      (. builder fieldValue data))
    (when-let [data (lookup-entry config id :special-value)]
      (. builder specialValue data))
    (.build builder)))


(defn cfn-dashboard-custom-content-configuration-property-builder
  "The cfn-dashboard-custom-content-configuration-property-builder function buildes out new instances of 
CfnDashboard$CustomContentConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-type` |
| `contentUrl` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-url` |
| `imageScaling` | java.lang.String | [[cdk.support/lookup-entry]] | `:image-scaling` |"
  [stack id config]
  (let [builder (CfnDashboard$CustomContentConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :content-type)]
      (. builder contentType data))
    (when-let [data (lookup-entry config id :content-url)]
      (. builder contentUrl data))
    (when-let [data (lookup-entry config id :image-scaling)]
      (. builder imageScaling data))
    (.build builder)))


(defn cfn-dashboard-custom-content-visual-property-builder
  "The cfn-dashboard-custom-content-visual-property-builder function buildes out new instances of 
CfnDashboard$CustomContentVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$CustomContentConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$CustomContentVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-custom-filter-configuration-property-builder
  "The cfn-dashboard-custom-filter-configuration-property-builder function buildes out new instances of 
CfnDashboard$CustomFilterConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-value` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |"
  [stack id config]
  (let [builder (CfnDashboard$CustomFilterConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-value)]
      (. builder categoryValue data))
    (when-let [data (lookup-entry config id :match-operator)]
      (. builder matchOperator data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (.build builder)))


(defn cfn-dashboard-custom-filter-list-configuration-property-builder
  "The cfn-dashboard-custom-filter-list-configuration-property-builder function buildes out new instances of 
CfnDashboard$CustomFilterListConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |"
  [stack id config]
  (let [builder (CfnDashboard$CustomFilterListConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-values)]
      (. builder categoryValues data))
    (when-let [data (lookup-entry config id :match-operator)]
      (. builder matchOperator data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (.build builder)))


(defn cfn-dashboard-custom-narrative-options-property-builder
  "The cfn-dashboard-custom-narrative-options-property-builder function buildes out new instances of 
CfnDashboard$CustomNarrativeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `narrative` | java.lang.String | [[cdk.support/lookup-entry]] | `:narrative` |"
  [stack id config]
  (let [builder (CfnDashboard$CustomNarrativeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :narrative)]
      (. builder narrative data))
    (.build builder)))


(defn cfn-dashboard-custom-parameter-values-property-builder
  "The cfn-dashboard-custom-parameter-values-property-builder function buildes out new instances of 
CfnDashboard$CustomParameterValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeValues` | java.util.List | [[cdk.support/lookup-entry]] | `:date-time-values` |
| `decimalValues` | java.util.List | [[cdk.support/lookup-entry]] | `:decimal-values` |
| `integerValues` | java.util.List | [[cdk.support/lookup-entry]] | `:integer-values` |
| `stringValues` | java.util.List | [[cdk.support/lookup-entry]] | `:string-values` |"
  [stack id config]
  (let [builder (CfnDashboard$CustomParameterValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-values)]
      (. builder dateTimeValues data))
    (when-let [data (lookup-entry config id :decimal-values)]
      (. builder decimalValues data))
    (when-let [data (lookup-entry config id :integer-values)]
      (. builder integerValues data))
    (when-let [data (lookup-entry config id :string-values)]
      (. builder stringValues data))
    (.build builder)))


(defn cfn-dashboard-custom-values-configuration-property-builder
  "The cfn-dashboard-custom-values-configuration-property-builder function buildes out new instances of 
CfnDashboard$CustomValuesConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValues` | software.amazon.awscdk.services.quicksight.CfnDashboard$CustomParameterValuesProperty | [[cdk.support/lookup-entry]] | `:custom-values` |
| `includeNullValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-null-value` |"
  [stack id config]
  (let [builder (CfnDashboard$CustomValuesConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-values)]
      (. builder customValues data))
    (when-let [data (lookup-entry config id :include-null-value)]
      (. builder includeNullValue data))
    (.build builder)))


(defn cfn-dashboard-dashboard-error-property-builder
  "The cfn-dashboard-dashboard-error-property-builder function buildes out new instances of 
CfnDashboard$DashboardErrorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `message` | java.lang.String | [[cdk.support/lookup-entry]] | `:message` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `violatedEntities` | java.util.List | [[cdk.support/lookup-entry]] | `:violated-entities` |"
  [stack id config]
  (let [builder (CfnDashboard$DashboardErrorProperty$Builder.)]
    (when-let [data (lookup-entry config id :message)]
      (. builder message data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :violated-entities)]
      (. builder violatedEntities data))
    (.build builder)))


(defn cfn-dashboard-dashboard-publish-options-property-builder
  "The cfn-dashboard-dashboard-publish-options-property-builder function buildes out new instances of 
CfnDashboard$DashboardPublishOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `adHocFilteringOption` | software.amazon.awscdk.services.quicksight.CfnDashboard$AdHocFilteringOptionProperty | [[cdk.support/lookup-entry]] | `:ad-hoc-filtering-option` |
| `dataPointDrillUpDownOption` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataPointDrillUpDownOptionProperty | [[cdk.support/lookup-entry]] | `:data-point-drill-up-down-option` |
| `dataPointMenuLabelOption` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataPointMenuLabelOptionProperty | [[cdk.support/lookup-entry]] | `:data-point-menu-label-option` |
| `dataPointTooltipOption` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-point-tooltip-option` |
| `exportToCsvOption` | software.amazon.awscdk.services.quicksight.CfnDashboard$ExportToCSVOptionProperty | [[cdk.support/lookup-entry]] | `:export-to-csv-option` |
| `exportWithHiddenFieldsOption` | software.amazon.awscdk.services.quicksight.CfnDashboard$ExportWithHiddenFieldsOptionProperty | [[cdk.support/lookup-entry]] | `:export-with-hidden-fields-option` |
| `sheetControlsOption` | software.amazon.awscdk.services.quicksight.CfnDashboard$SheetControlsOptionProperty | [[cdk.support/lookup-entry]] | `:sheet-controls-option` |
| `sheetLayoutElementMaximizationOption` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sheet-layout-element-maximization-option` |
| `visualAxisSortOption` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-axis-sort-option` |
| `visualMenuOption` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-menu-option` |
| `visualPublishOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-publish-options` |"
  [stack id config]
  (let [builder (CfnDashboard$DashboardPublishOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :ad-hoc-filtering-option)]
      (. builder adHocFilteringOption data))
    (when-let [data (lookup-entry config id :data-point-drill-up-down-option)]
      (. builder dataPointDrillUpDownOption data))
    (when-let [data (lookup-entry config id :data-point-menu-label-option)]
      (. builder dataPointMenuLabelOption data))
    (when-let [data (lookup-entry config id :data-point-tooltip-option)]
      (. builder dataPointTooltipOption data))
    (when-let [data (lookup-entry config id :export-to-csv-option)]
      (. builder exportToCsvOption data))
    (when-let [data (lookup-entry config id :export-with-hidden-fields-option)]
      (. builder exportWithHiddenFieldsOption data))
    (when-let [data (lookup-entry config id :sheet-controls-option)]
      (. builder sheetControlsOption data))
    (when-let [data (lookup-entry config id :sheet-layout-element-maximization-option)]
      (. builder sheetLayoutElementMaximizationOption data))
    (when-let [data (lookup-entry config id :visual-axis-sort-option)]
      (. builder visualAxisSortOption data))
    (when-let [data (lookup-entry config id :visual-menu-option)]
      (. builder visualMenuOption data))
    (when-let [data (lookup-entry config id :visual-publish-options)]
      (. builder visualPublishOptions data))
    (.build builder)))


(defn cfn-dashboard-dashboard-source-entity-property-builder
  "The cfn-dashboard-dashboard-source-entity-property-builder function buildes out new instances of 
CfnDashboard$DashboardSourceEntityProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sourceTemplate` | software.amazon.awscdk.services.quicksight.CfnDashboard$DashboardSourceTemplateProperty | [[cdk.support/lookup-entry]] | `:source-template` |"
  [stack id config]
  (let [builder (CfnDashboard$DashboardSourceEntityProperty$Builder.)]
    (when-let [data (lookup-entry config id :source-template)]
      (. builder sourceTemplate data))
    (.build builder)))


(defn cfn-dashboard-dashboard-source-template-property-builder
  "The cfn-dashboard-dashboard-source-template-property-builder function buildes out new instances of 
CfnDashboard$DashboardSourceTemplateProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arn` | java.lang.String | [[cdk.support/lookup-entry]] | `:arn` |
| `dataSetReferences` | java.util.List | [[cdk.support/lookup-entry]] | `:data-set-references` |"
  [stack id config]
  (let [builder (CfnDashboard$DashboardSourceTemplateProperty$Builder.)]
    (when-let [data (lookup-entry config id :arn)]
      (. builder arn data))
    (when-let [data (lookup-entry config id :data-set-references)]
      (. builder dataSetReferences data))
    (.build builder)))


(defn cfn-dashboard-dashboard-version-definition-property-builder
  "The cfn-dashboard-dashboard-version-definition-property-builder function buildes out new instances of 
CfnDashboard$DashboardVersionDefinitionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `analysisDefaults` | software.amazon.awscdk.services.quicksight.CfnDashboard$AnalysisDefaultsProperty | [[cdk.support/lookup-entry]] | `:analysis-defaults` |
| `calculatedFields` | java.util.List | [[cdk.support/lookup-entry]] | `:calculated-fields` |
| `columnConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:column-configurations` |
| `dataSetIdentifierDeclarations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-set-identifier-declarations` |
| `filterGroups` | java.util.List | [[cdk.support/lookup-entry]] | `:filter-groups` |
| `options` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:options` |
| `parameterDeclarations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameter-declarations` |
| `sheets` | java.util.List | [[cdk.support/lookup-entry]] | `:sheets` |"
  [stack id config]
  (let [builder (CfnDashboard$DashboardVersionDefinitionProperty$Builder.)]
    (when-let [data (lookup-entry config id :analysis-defaults)]
      (. builder analysisDefaults data))
    (when-let [data (lookup-entry config id :calculated-fields)]
      (. builder calculatedFields data))
    (when-let [data (lookup-entry config id :column-configurations)]
      (. builder columnConfigurations data))
    (when-let [data (lookup-entry config id :data-set-identifier-declarations)]
      (. builder dataSetIdentifierDeclarations data))
    (when-let [data (lookup-entry config id :filter-groups)]
      (. builder filterGroups data))
    (when-let [data (lookup-entry config id :options)]
      (. builder options data))
    (when-let [data (lookup-entry config id :parameter-declarations)]
      (. builder parameterDeclarations data))
    (when-let [data (lookup-entry config id :sheets)]
      (. builder sheets data))
    (.build builder)))


(defn cfn-dashboard-dashboard-version-property-builder
  "The cfn-dashboard-dashboard-version-property-builder function buildes out new instances of 
CfnDashboard$DashboardVersionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arn` | java.lang.String | [[cdk.support/lookup-entry]] | `:arn` |
| `createdTime` | java.lang.String | [[cdk.support/lookup-entry]] | `:created-time` |
| `dataSetArns` | java.util.List | [[cdk.support/lookup-entry]] | `:data-set-arns` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `errors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:errors` |
| `sheets` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sheets` |
| `sourceEntityArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-entity-arn` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `themeArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:theme-arn` |
| `versionNumber` | java.lang.Number | [[cdk.support/lookup-entry]] | `:version-number` |"
  [stack id config]
  (let [builder (CfnDashboard$DashboardVersionProperty$Builder.)]
    (when-let [data (lookup-entry config id :arn)]
      (. builder arn data))
    (when-let [data (lookup-entry config id :created-time)]
      (. builder createdTime data))
    (when-let [data (lookup-entry config id :data-set-arns)]
      (. builder dataSetArns data))
    (when-let [data (lookup-entry config id :description)]
      (. builder description data))
    (when-let [data (lookup-entry config id :errors)]
      (. builder errors data))
    (when-let [data (lookup-entry config id :sheets)]
      (. builder sheets data))
    (when-let [data (lookup-entry config id :source-entity-arn)]
      (. builder sourceEntityArn data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (when-let [data (lookup-entry config id :theme-arn)]
      (. builder themeArn data))
    (when-let [data (lookup-entry config id :version-number)]
      (. builder versionNumber data))
    (.build builder)))


(defn cfn-dashboard-dashboard-visual-publish-options-property-builder
  "The cfn-dashboard-dashboard-visual-publish-options-property-builder function buildes out new instances of 
CfnDashboard$DashboardVisualPublishOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `exportHiddenFieldsOption` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:export-hidden-fields-option` |"
  [stack id config]
  (let [builder (CfnDashboard$DashboardVisualPublishOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :export-hidden-fields-option)]
      (. builder exportHiddenFieldsOption data))
    (.build builder)))


(defn cfn-dashboard-data-bars-options-property-builder
  "The cfn-dashboard-data-bars-options-property-builder function buildes out new instances of 
CfnDashboard$DataBarsOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `negativeColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:negative-color` |
| `positiveColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:positive-color` |"
  [stack id config]
  (let [builder (CfnDashboard$DataBarsOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :negative-color)]
      (. builder negativeColor data))
    (when-let [data (lookup-entry config id :positive-color)]
      (. builder positiveColor data))
    (.build builder)))


(defn cfn-dashboard-data-color-property-builder
  "The cfn-dashboard-data-color-property-builder function buildes out new instances of 
CfnDashboard$DataColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `dataValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:data-value` |"
  [stack id config]
  (let [builder (CfnDashboard$DataColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :data-value)]
      (. builder dataValue data))
    (.build builder)))


(defn cfn-dashboard-data-field-series-item-property-builder
  "The cfn-dashboard-data-field-series-item-property-builder function buildes out new instances of 
CfnDashboard$DataFieldSeriesItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `settings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:settings` |"
  [stack id config]
  (let [builder (CfnDashboard$DataFieldSeriesItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-binding)]
      (. builder axisBinding data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :field-value)]
      (. builder fieldValue data))
    (when-let [data (lookup-entry config id :settings)]
      (. builder settings data))
    (.build builder)))


(defn cfn-dashboard-data-label-options-property-builder
  "The cfn-dashboard-data-label-options-property-builder function buildes out new instances of 
CfnDashboard$DataLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-label-visibility` |
| `dataLabelTypes` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-label-types` |
| `labelColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-color` |
| `labelContent` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-content` |
| `labelFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label-font-configuration` |
| `measureLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-label-visibility` |
| `overlap` | java.lang.String | [[cdk.support/lookup-entry]] | `:overlap` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$DataLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-label-visibility)]
      (. builder categoryLabelVisibility data))
    (when-let [data (lookup-entry config id :data-label-types)]
      (. builder dataLabelTypes data))
    (when-let [data (lookup-entry config id :label-color)]
      (. builder labelColor data))
    (when-let [data (lookup-entry config id :label-content)]
      (. builder labelContent data))
    (when-let [data (lookup-entry config id :label-font-configuration)]
      (. builder labelFontConfiguration data))
    (when-let [data (lookup-entry config id :measure-label-visibility)]
      (. builder measureLabelVisibility data))
    (when-let [data (lookup-entry config id :overlap)]
      (. builder overlap data))
    (when-let [data (lookup-entry config id :position)]
      (. builder position data))
    (when-let [data (lookup-entry config id :totals-visibility)]
      (. builder totalsVisibility data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-data-label-type-property-builder
  "The cfn-dashboard-data-label-type-property-builder function buildes out new instances of 
CfnDashboard$DataLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathLabelType` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataPathLabelTypeProperty | [[cdk.support/lookup-entry]] | `:data-path-label-type` |
| `fieldLabelType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-label-type` |
| `maximumLabelType` | software.amazon.awscdk.services.quicksight.CfnDashboard$MaximumLabelTypeProperty | [[cdk.support/lookup-entry]] | `:maximum-label-type` |
| `minimumLabelType` | software.amazon.awscdk.services.quicksight.CfnDashboard$MinimumLabelTypeProperty | [[cdk.support/lookup-entry]] | `:minimum-label-type` |
| `rangeEndsLabelType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-ends-label-type` |"
  [stack id config]
  (let [builder (CfnDashboard$DataLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-path-label-type)]
      (. builder dataPathLabelType data))
    (when-let [data (lookup-entry config id :field-label-type)]
      (. builder fieldLabelType data))
    (when-let [data (lookup-entry config id :maximum-label-type)]
      (. builder maximumLabelType data))
    (when-let [data (lookup-entry config id :minimum-label-type)]
      (. builder minimumLabelType data))
    (when-let [data (lookup-entry config id :range-ends-label-type)]
      (. builder rangeEndsLabelType data))
    (.build builder)))


(defn cfn-dashboard-data-path-color-property-builder
  "The cfn-dashboard-data-path-color-property-builder function buildes out new instances of 
CfnDashboard$DataPathColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `element` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:element` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnDashboard$DataPathColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :element)]
      (. builder element data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-dashboard-data-path-label-type-property-builder
  "The cfn-dashboard-data-path-label-type-property-builder function buildes out new instances of 
CfnDashboard$DataPathLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$DataPathLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :field-value)]
      (. builder fieldValue data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-data-path-sort-property-builder
  "The cfn-dashboard-data-path-sort-property-builder function buildes out new instances of 
CfnDashboard$DataPathSortProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `sortPaths` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-paths` |"
  [stack id config]
  (let [builder (CfnDashboard$DataPathSortProperty$Builder.)]
    (when-let [data (lookup-entry config id :direction)]
      (. builder direction data))
    (when-let [data (lookup-entry config id :sort-paths)]
      (. builder sortPaths data))
    (.build builder)))


(defn cfn-dashboard-data-path-type-property-builder
  "The cfn-dashboard-data-path-type-property-builder function buildes out new instances of 
CfnDashboard$DataPathTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pivotTableDataPathType` | java.lang.String | [[cdk.support/lookup-entry]] | `:pivot-table-data-path-type` |"
  [stack id config]
  (let [builder (CfnDashboard$DataPathTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :pivot-table-data-path-type)]
      (. builder pivotTableDataPathType data))
    (.build builder)))


(defn cfn-dashboard-data-path-value-property-builder
  "The cfn-dashboard-data-path-value-property-builder function buildes out new instances of 
CfnDashboard$DataPathValueProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathType` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataPathTypeProperty | [[cdk.support/lookup-entry]] | `:data-path-type` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |"
  [stack id config]
  (let [builder (CfnDashboard$DataPathValueProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-path-type)]
      (. builder dataPathType data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :field-value)]
      (. builder fieldValue data))
    (.build builder)))


(defn cfn-dashboard-data-point-drill-up-down-option-property-builder
  "The cfn-dashboard-data-point-drill-up-down-option-property-builder function buildes out new instances of 
CfnDashboard$DataPointDrillUpDownOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |"
  [stack id config]
  (let [builder (CfnDashboard$DataPointDrillUpDownOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :availability-status)]
      (. builder availabilityStatus data))
    (.build builder)))


(defn cfn-dashboard-data-point-menu-label-option-property-builder
  "The cfn-dashboard-data-point-menu-label-option-property-builder function buildes out new instances of 
CfnDashboard$DataPointMenuLabelOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |"
  [stack id config]
  (let [builder (CfnDashboard$DataPointMenuLabelOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :availability-status)]
      (. builder availabilityStatus data))
    (.build builder)))


(defn cfn-dashboard-data-point-tooltip-option-property-builder
  "The cfn-dashboard-data-point-tooltip-option-property-builder function buildes out new instances of 
CfnDashboard$DataPointTooltipOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |"
  [stack id config]
  (let [builder (CfnDashboard$DataPointTooltipOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :availability-status)]
      (. builder availabilityStatus data))
    (.build builder)))


(defn cfn-dashboard-data-set-identifier-declaration-property-builder
  "The cfn-dashboard-data-set-identifier-declaration-property-builder function buildes out new instances of 
CfnDashboard$DataSetIdentifierDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-arn` |
| `identifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:identifier` |"
  [stack id config]
  (let [builder (CfnDashboard$DataSetIdentifierDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-set-arn)]
      (. builder dataSetArn data))
    (when-let [data (lookup-entry config id :identifier)]
      (. builder identifier data))
    (.build builder)))


(defn cfn-dashboard-data-set-reference-property-builder
  "The cfn-dashboard-data-set-reference-property-builder function buildes out new instances of 
CfnDashboard$DataSetReferenceProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-arn` |
| `dataSetPlaceholder` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-placeholder` |"
  [stack id config]
  (let [builder (CfnDashboard$DataSetReferenceProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-set-arn)]
      (. builder dataSetArn data))
    (when-let [data (lookup-entry config id :data-set-placeholder)]
      (. builder dataSetPlaceholder data))
    (.build builder)))


(defn cfn-dashboard-date-axis-options-property-builder
  "The cfn-dashboard-date-axis-options-property-builder function buildes out new instances of 
CfnDashboard$DateAxisOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `missingDateVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:missing-date-visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$DateAxisOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :missing-date-visibility)]
      (. builder missingDateVisibility data))
    (.build builder)))


(defn cfn-dashboard-date-dimension-field-property-builder
  "The cfn-dashboard-date-dimension-field-property-builder function buildes out new instances of 
CfnDashboard$DateDimensionFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `dateGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-granularity` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnDashboard$DateDimensionFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :date-granularity)]
      (. builder dateGranularity data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-dashboard-date-measure-field-property-builder
  "The cfn-dashboard-date-measure-field-property-builder function buildes out new instances of 
CfnDashboard$DateMeasureFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$DateMeasureFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (.build builder)))


(defn cfn-dashboard-date-time-default-values-property-builder
  "The cfn-dashboard-date-time-default-values-property-builder function buildes out new instances of 
CfnDashboard$DateTimeDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$DynamicDefaultValueProperty | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `rollingDate` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |"
  [stack id config]
  (let [builder (CfnDashboard$DateTimeDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :dynamic-value)]
      (. builder dynamicValue data))
    (when-let [data (lookup-entry config id :rolling-date)]
      (. builder rollingDate data))
    (when-let [data (lookup-entry config id :static-values)]
      (. builder staticValues data))
    (.build builder)))


(defn cfn-dashboard-date-time-format-configuration-property-builder
  "The cfn-dashboard-date-time-format-configuration-property-builder function buildes out new instances of 
CfnDashboard$DateTimeFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numericFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-format-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$DateTimeFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-format)]
      (. builder dateTimeFormat data))
    (when-let [data (lookup-entry config id :null-value-format-configuration)]
      (. builder nullValueFormatConfiguration data))
    (when-let [data (lookup-entry config id :numeric-format-configuration)]
      (. builder numericFormatConfiguration data))
    (.build builder)))


(defn cfn-dashboard-date-time-hierarchy-property-builder
  "The cfn-dashboard-date-time-hierarchy-property-builder function buildes out new instances of 
CfnDashboard$DateTimeHierarchyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `drillDownFilters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnDashboard$DateTimeHierarchyProperty$Builder.)]
    (when-let [data (lookup-entry config id :drill-down-filters)]
      (. builder drillDownFilters data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-dashboard-date-time-parameter-declaration-property-builder
  "The cfn-dashboard-date-time-parameter-declaration-property-builder function buildes out new instances of 
CfnDashboard$DateTimeParameterDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
| `valueWhenUnset` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-when-unset` |"
  [stack id config]
  (let [builder (CfnDashboard$DateTimeParameterDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-values)]
      (. builder defaultValues data))
    (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
      (. builder mappedDataSetParameters data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (when-let [data (lookup-entry config id :value-when-unset)]
      (. builder valueWhenUnset data))
    (.build builder)))


(defn cfn-dashboard-date-time-parameter-property-builder
  "The cfn-dashboard-date-time-parameter-property-builder function buildes out new instances of 
CfnDashboard$DateTimeParameterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$DateTimeParameterProperty$Builder.)]
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-date-time-picker-control-display-options-property-builder
  "The cfn-dashboard-date-time-picker-control-display-options-property-builder function buildes out new instances of 
CfnDashboard$DateTimePickerControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnDashboard$DateTimePickerControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-format)]
      (. builder dateTimeFormat data))
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-dashboard-date-time-value-when-unset-configuration-property-builder
  "The cfn-dashboard-date-time-value-when-unset-configuration-property-builder function buildes out new instances of 
CfnDashboard$DateTimeValueWhenUnsetConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |"
  [stack id config]
  (let [builder (CfnDashboard$DateTimeValueWhenUnsetConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-value)]
      (. builder customValue data))
    (when-let [data (lookup-entry config id :value-when-unset-option)]
      (. builder valueWhenUnsetOption data))
    (.build builder)))


(defn cfn-dashboard-decimal-default-values-property-builder
  "The cfn-dashboard-decimal-default-values-property-builder function buildes out new instances of 
CfnDashboard$DecimalDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$DynamicDefaultValueProperty | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |"
  [stack id config]
  (let [builder (CfnDashboard$DecimalDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :dynamic-value)]
      (. builder dynamicValue data))
    (when-let [data (lookup-entry config id :static-values)]
      (. builder staticValues data))
    (.build builder)))


(defn cfn-dashboard-decimal-parameter-declaration-property-builder
  "The cfn-dashboard-decimal-parameter-declaration-property-builder function buildes out new instances of 
CfnDashboard$DecimalParameterDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.services.quicksight.CfnDashboard$DecimalValueWhenUnsetConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-when-unset` |"
  [stack id config]
  (let [builder (CfnDashboard$DecimalParameterDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-values)]
      (. builder defaultValues data))
    (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
      (. builder mappedDataSetParameters data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :parameter-value-type)]
      (. builder parameterValueType data))
    (when-let [data (lookup-entry config id :value-when-unset)]
      (. builder valueWhenUnset data))
    (.build builder)))


(defn cfn-dashboard-decimal-parameter-property-builder
  "The cfn-dashboard-decimal-parameter-property-builder function buildes out new instances of 
CfnDashboard$DecimalParameterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$DecimalParameterProperty$Builder.)]
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-decimal-places-configuration-property-builder
  "The cfn-dashboard-decimal-places-configuration-property-builder function buildes out new instances of 
CfnDashboard$DecimalPlacesConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlaces` | java.lang.Number | [[cdk.support/lookup-entry]] | `:decimal-places` |"
  [stack id config]
  (let [builder (CfnDashboard$DecimalPlacesConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :decimal-places)]
      (. builder decimalPlaces data))
    (.build builder)))


(defn cfn-dashboard-decimal-value-when-unset-configuration-property-builder
  "The cfn-dashboard-decimal-value-when-unset-configuration-property-builder function buildes out new instances of 
CfnDashboard$DecimalValueWhenUnsetConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |"
  [stack id config]
  (let [builder (CfnDashboard$DecimalValueWhenUnsetConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-value)]
      (. builder customValue data))
    (when-let [data (lookup-entry config id :value-when-unset-option)]
      (. builder valueWhenUnsetOption data))
    (.build builder)))


(defn cfn-dashboard-default-date-time-picker-control-options-property-builder
  "The cfn-dashboard-default-date-time-picker-control-options-property-builder function buildes out new instances of 
CfnDashboard$DefaultDateTimePickerControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnDashboard$DefaultDateTimePickerControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-dashboard-default-filter-control-configuration-property-builder
  "The cfn-dashboard-default-filter-control-configuration-property-builder function buildes out new instances of 
CfnDashboard$DefaultFilterControlConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `controlOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:control-options` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnDashboard$DefaultFilterControlConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :control-options)]
      (. builder controlOptions data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-dashboard-default-filter-control-options-property-builder
  "The cfn-dashboard-default-filter-control-options-property-builder function buildes out new instances of 
CfnDashboard$DefaultFilterControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultDateTimePickerOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultDateTimePickerControlOptionsProperty | [[cdk.support/lookup-entry]] | `:default-date-time-picker-options` |
| `defaultDropdownOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-dropdown-options` |
| `defaultListOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-list-options` |
| `defaultRelativeDateTimeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-relative-date-time-options` |
| `defaultSliderOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-slider-options` |
| `defaultTextAreaOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-text-area-options` |
| `defaultTextFieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-text-field-options` |"
  [stack id config]
  (let [builder (CfnDashboard$DefaultFilterControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-date-time-picker-options)]
      (. builder defaultDateTimePickerOptions data))
    (when-let [data (lookup-entry config id :default-dropdown-options)]
      (. builder defaultDropdownOptions data))
    (when-let [data (lookup-entry config id :default-list-options)]
      (. builder defaultListOptions data))
    (when-let [data (lookup-entry config id :default-relative-date-time-options)]
      (. builder defaultRelativeDateTimeOptions data))
    (when-let [data (lookup-entry config id :default-slider-options)]
      (. builder defaultSliderOptions data))
    (when-let [data (lookup-entry config id :default-text-area-options)]
      (. builder defaultTextAreaOptions data))
    (when-let [data (lookup-entry config id :default-text-field-options)]
      (. builder defaultTextFieldOptions data))
    (.build builder)))


(defn cfn-dashboard-default-filter-drop-down-control-options-property-builder
  "The cfn-dashboard-default-filter-drop-down-control-options-property-builder function buildes out new instances of 
CfnDashboard$DefaultFilterDropDownControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$DropDownControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnDashboard$DefaultFilterDropDownControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-dashboard-default-filter-list-control-options-property-builder
  "The cfn-dashboard-default-filter-list-control-options-property-builder function buildes out new instances of 
CfnDashboard$DefaultFilterListControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnDashboard$DefaultFilterListControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-dashboard-default-free-form-layout-configuration-property-builder
  "The cfn-dashboard-default-free-form-layout-configuration-property-builder function buildes out new instances of 
CfnDashboard$DefaultFreeFormLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$FreeFormLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |"
  [stack id config]
  (let [builder (CfnDashboard$DefaultFreeFormLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (.build builder)))


(defn cfn-dashboard-default-grid-layout-configuration-property-builder
  "The cfn-dashboard-default-grid-layout-configuration-property-builder function buildes out new instances of 
CfnDashboard$DefaultGridLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$GridLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |"
  [stack id config]
  (let [builder (CfnDashboard$DefaultGridLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (.build builder)))


(defn cfn-dashboard-default-interactive-layout-configuration-property-builder
  "The cfn-dashboard-default-interactive-layout-configuration-property-builder function buildes out new instances of 
CfnDashboard$DefaultInteractiveLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeForm` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultFreeFormLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:free-form` |
| `grid` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultGridLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:grid` |"
  [stack id config]
  (let [builder (CfnDashboard$DefaultInteractiveLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :free-form)]
      (. builder freeForm data))
    (when-let [data (lookup-entry config id :grid)]
      (. builder grid data))
    (.build builder)))


(defn cfn-dashboard-default-new-sheet-configuration-property-builder
  "The cfn-dashboard-default-new-sheet-configuration-property-builder function buildes out new instances of 
CfnDashboard$DefaultNewSheetConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `interactiveLayoutConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:interactive-layout-configuration` |
| `paginatedLayoutConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultPaginatedLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:paginated-layout-configuration` |
| `sheetContentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-content-type` |"
  [stack id config]
  (let [builder (CfnDashboard$DefaultNewSheetConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :interactive-layout-configuration)]
      (. builder interactiveLayoutConfiguration data))
    (when-let [data (lookup-entry config id :paginated-layout-configuration)]
      (. builder paginatedLayoutConfiguration data))
    (when-let [data (lookup-entry config id :sheet-content-type)]
      (. builder sheetContentType data))
    (.build builder)))


(defn cfn-dashboard-default-paginated-layout-configuration-property-builder
  "The cfn-dashboard-default-paginated-layout-configuration-property-builder function buildes out new instances of 
CfnDashboard$DefaultPaginatedLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sectionBased` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultSectionBasedLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:section-based` |"
  [stack id config]
  (let [builder (CfnDashboard$DefaultPaginatedLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :section-based)]
      (. builder sectionBased data))
    (.build builder)))


(defn cfn-dashboard-default-relative-date-time-control-options-property-builder
  "The cfn-dashboard-default-relative-date-time-control-options-property-builder function buildes out new instances of 
CfnDashboard$DefaultRelativeDateTimeControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |"
  [stack id config]
  (let [builder (CfnDashboard$DefaultRelativeDateTimeControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (.build builder)))


(defn cfn-dashboard-default-section-based-layout-configuration-property-builder
  "The cfn-dashboard-default-section-based-layout-configuration-property-builder function buildes out new instances of 
CfnDashboard$DefaultSectionBasedLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |"
  [stack id config]
  (let [builder (CfnDashboard$DefaultSectionBasedLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (.build builder)))


(defn cfn-dashboard-default-slider-control-options-property-builder
  "The cfn-dashboard-default-slider-control-options-property-builder function buildes out new instances of 
CfnDashboard$DefaultSliderControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnDashboard$DefaultSliderControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :maximum-value)]
      (. builder maximumValue data))
    (when-let [data (lookup-entry config id :minimum-value)]
      (. builder minimumValue data))
    (when-let [data (lookup-entry config id :step-size)]
      (. builder stepSize data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-dashboard-default-text-area-control-options-property-builder
  "The cfn-dashboard-default-text-area-control-options-property-builder function buildes out new instances of 
CfnDashboard$DefaultTextAreaControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |"
  [stack id config]
  (let [builder (CfnDashboard$DefaultTextAreaControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :delimiter)]
      (. builder delimiter data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (.build builder)))


(defn cfn-dashboard-default-text-field-control-options-property-builder
  "The cfn-dashboard-default-text-field-control-options-property-builder function buildes out new instances of 
CfnDashboard$DefaultTextFieldControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$TextFieldControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |"
  [stack id config]
  (let [builder (CfnDashboard$DefaultTextFieldControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (.build builder)))


(defn cfn-dashboard-destination-parameter-value-configuration-property-builder
  "The cfn-dashboard-destination-parameter-value-configuration-property-builder function buildes out new instances of 
CfnDashboard$DestinationParameterValueConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValuesConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-values-configuration` |
| `selectAllValueOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-value-options` |
| `sourceColumn` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:source-column` |
| `sourceField` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-field` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |"
  [stack id config]
  (let [builder (CfnDashboard$DestinationParameterValueConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-values-configuration)]
      (. builder customValuesConfiguration data))
    (when-let [data (lookup-entry config id :select-all-value-options)]
      (. builder selectAllValueOptions data))
    (when-let [data (lookup-entry config id :source-column)]
      (. builder sourceColumn data))
    (when-let [data (lookup-entry config id :source-field)]
      (. builder sourceField data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (.build builder)))


(defn cfn-dashboard-dimension-field-property-builder
  "The cfn-dashboard-dimension-field-property-builder function buildes out new instances of 
CfnDashboard$DimensionFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoricalDimensionField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:categorical-dimension-field` |
| `dateDimensionField` | software.amazon.awscdk.services.quicksight.CfnDashboard$DateDimensionFieldProperty | [[cdk.support/lookup-entry]] | `:date-dimension-field` |
| `numericalDimensionField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numerical-dimension-field` |"
  [stack id config]
  (let [builder (CfnDashboard$DimensionFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :categorical-dimension-field)]
      (. builder categoricalDimensionField data))
    (when-let [data (lookup-entry config id :date-dimension-field)]
      (. builder dateDimensionField data))
    (when-let [data (lookup-entry config id :numerical-dimension-field)]
      (. builder numericalDimensionField data))
    (.build builder)))


(defn cfn-dashboard-donut-center-options-property-builder
  "The cfn-dashboard-donut-center-options-property-builder function buildes out new instances of 
CfnDashboard$DonutCenterOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `labelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$DonutCenterOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :label-visibility)]
      (. builder labelVisibility data))
    (.build builder)))


(defn cfn-dashboard-donut-options-property-builder
  "The cfn-dashboard-donut-options-property-builder function buildes out new instances of 
CfnDashboard$DonutOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:arc-options` |
| `donutCenterOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:donut-center-options` |"
  [stack id config]
  (let [builder (CfnDashboard$DonutOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :arc-options)]
      (. builder arcOptions data))
    (when-let [data (lookup-entry config id :donut-center-options)]
      (. builder donutCenterOptions data))
    (.build builder)))


(defn cfn-dashboard-drill-down-filter-property-builder
  "The cfn-dashboard-drill-down-filter-property-builder function buildes out new instances of 
CfnDashboard$DrillDownFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryFilter` | software.amazon.awscdk.services.quicksight.CfnDashboard$CategoryDrillDownFilterProperty | [[cdk.support/lookup-entry]] | `:category-filter` |
| `numericEqualityFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-equality-filter` |
| `timeRangeFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time-range-filter` |"
  [stack id config]
  (let [builder (CfnDashboard$DrillDownFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-filter)]
      (. builder categoryFilter data))
    (when-let [data (lookup-entry config id :numeric-equality-filter)]
      (. builder numericEqualityFilter data))
    (when-let [data (lookup-entry config id :time-range-filter)]
      (. builder timeRangeFilter data))
    (.build builder)))


(defn cfn-dashboard-drop-down-control-display-options-property-builder
  "The cfn-dashboard-drop-down-control-display-options-property-builder function buildes out new instances of 
CfnDashboard$DropDownControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `selectAllOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnDashboard$DropDownControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-dashboard-dynamic-default-value-property-builder
  "The cfn-dashboard-dynamic-default-value-property-builder function buildes out new instances of 
CfnDashboard$DynamicDefaultValueProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValueColumn` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:default-value-column` |
| `groupNameColumn` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-name-column` |
| `userNameColumn` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:user-name-column` |"
  [stack id config]
  (let [builder (CfnDashboard$DynamicDefaultValueProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-value-column)]
      (. builder defaultValueColumn data))
    (when-let [data (lookup-entry config id :group-name-column)]
      (. builder groupNameColumn data))
    (when-let [data (lookup-entry config id :user-name-column)]
      (. builder userNameColumn data))
    (.build builder)))


(defn cfn-dashboard-empty-visual-property-builder
  "The cfn-dashboard-empty-visual-property-builder function buildes out new instances of 
CfnDashboard$EmptyVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$EmptyVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-entity-property-builder
  "The cfn-dashboard-entity-property-builder function buildes out new instances of 
CfnDashboard$EntityProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `path` | java.lang.String | [[cdk.support/lookup-entry]] | `:path` |"
  [stack id config]
  (let [builder (CfnDashboard$EntityProperty$Builder.)]
    (when-let [data (lookup-entry config id :path)]
      (. builder path data))
    (.build builder)))


(defn cfn-dashboard-exclude-period-configuration-property-builder
  "The cfn-dashboard-exclude-period-configuration-property-builder function buildes out new instances of 
CfnDashboard$ExcludePeriodConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `amount` | java.lang.Number | [[cdk.support/lookup-entry]] | `:amount` |
| `granularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:granularity` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |"
  [stack id config]
  (let [builder (CfnDashboard$ExcludePeriodConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :amount)]
      (. builder amount data))
    (when-let [data (lookup-entry config id :granularity)]
      (. builder granularity data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (.build builder)))


(defn cfn-dashboard-explicit-hierarchy-property-builder
  "The cfn-dashboard-explicit-hierarchy-property-builder function buildes out new instances of 
CfnDashboard$ExplicitHierarchyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `drillDownFilters` | java.util.List | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnDashboard$ExplicitHierarchyProperty$Builder.)]
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (when-let [data (lookup-entry config id :drill-down-filters)]
      (. builder drillDownFilters data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-dashboard-export-hidden-fields-option-property-builder
  "The cfn-dashboard-export-hidden-fields-option-property-builder function buildes out new instances of 
CfnDashboard$ExportHiddenFieldsOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |"
  [stack id config]
  (let [builder (CfnDashboard$ExportHiddenFieldsOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :availability-status)]
      (. builder availabilityStatus data))
    (.build builder)))


(defn cfn-dashboard-export-to-csv-option-property-builder
  "The cfn-dashboard-export-to-csv-option-property-builder function buildes out new instances of 
CfnDashboard$ExportToCSVOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |"
  [stack id config]
  (let [builder (CfnDashboard$ExportToCSVOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :availability-status)]
      (. builder availabilityStatus data))
    (.build builder)))


(defn cfn-dashboard-export-with-hidden-fields-option-property-builder
  "The cfn-dashboard-export-with-hidden-fields-option-property-builder function buildes out new instances of 
CfnDashboard$ExportWithHiddenFieldsOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |"
  [stack id config]
  (let [builder (CfnDashboard$ExportWithHiddenFieldsOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :availability-status)]
      (. builder availabilityStatus data))
    (.build builder)))


(defn cfn-dashboard-field-based-tooltip-property-builder
  "The cfn-dashboard-field-based-tooltip-property-builder function buildes out new instances of 
CfnDashboard$FieldBasedTooltipProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-visibility` |
| `tooltipFields` | java.util.List | [[cdk.support/lookup-entry]] | `:tooltip-fields` |
| `tooltipTitleType` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-title-type` |"
  [stack id config]
  (let [builder (CfnDashboard$FieldBasedTooltipProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-visibility)]
      (. builder aggregationVisibility data))
    (when-let [data (lookup-entry config id :tooltip-fields)]
      (. builder tooltipFields data))
    (when-let [data (lookup-entry config id :tooltip-title-type)]
      (. builder tooltipTitleType data))
    (.build builder)))


(defn cfn-dashboard-field-label-type-property-builder
  "The cfn-dashboard-field-label-type-property-builder function buildes out new instances of 
CfnDashboard$FieldLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$FieldLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-field-series-item-property-builder
  "The cfn-dashboard-field-series-item-property-builder function buildes out new instances of 
CfnDashboard$FieldSeriesItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `settings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:settings` |"
  [stack id config]
  (let [builder (CfnDashboard$FieldSeriesItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-binding)]
      (. builder axisBinding data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :settings)]
      (. builder settings data))
    (.build builder)))


(defn cfn-dashboard-field-sort-options-property-builder
  "The cfn-dashboard-field-sort-options-property-builder function buildes out new instances of 
CfnDashboard$FieldSortOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-sort` |
| `fieldSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-sort` |"
  [stack id config]
  (let [builder (CfnDashboard$FieldSortOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-sort)]
      (. builder columnSort data))
    (when-let [data (lookup-entry config id :field-sort)]
      (. builder fieldSort data))
    (.build builder)))


(defn cfn-dashboard-field-sort-property-builder
  "The cfn-dashboard-field-sort-property-builder function buildes out new instances of 
CfnDashboard$FieldSortProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |"
  [stack id config]
  (let [builder (CfnDashboard$FieldSortProperty$Builder.)]
    (when-let [data (lookup-entry config id :direction)]
      (. builder direction data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (.build builder)))


(defn cfn-dashboard-field-tooltip-item-property-builder
  "The cfn-dashboard-field-tooltip-item-property-builder function buildes out new instances of 
CfnDashboard$FieldTooltipItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `label` | java.lang.String | [[cdk.support/lookup-entry]] | `:label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$FieldTooltipItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :label)]
      (. builder label data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-filled-map-aggregated-field-wells-property-builder
  "The cfn-dashboard-filled-map-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$FilledMapAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `geospatial` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:geospatial` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$FilledMapAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :geospatial)]
      (. builder geospatial data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-filled-map-conditional-formatting-option-property-builder
  "The cfn-dashboard-filled-map-conditional-formatting-option-property-builder function buildes out new instances of 
CfnDashboard$FilledMapConditionalFormattingOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `shape` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:shape` |"
  [stack id config]
  (let [builder (CfnDashboard$FilledMapConditionalFormattingOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :shape)]
      (. builder shape data))
    (.build builder)))


(defn cfn-dashboard-filled-map-conditional-formatting-property-builder
  "The cfn-dashboard-filled-map-conditional-formatting-property-builder function buildes out new instances of 
CfnDashboard$FilledMapConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |"
  [stack id config]
  (let [builder (CfnDashboard$FilledMapConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :conditional-formatting-options)]
      (. builder conditionalFormattingOptions data))
    (.build builder)))


(defn cfn-dashboard-filled-map-configuration-property-builder
  "The cfn-dashboard-filled-map-configuration-property-builder function buildes out new instances of 
CfnDashboard$FilledMapConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilledMapFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `mapStyleOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$GeospatialMapStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:map-style-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilledMapSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `windowOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:window-options` |"
  [stack id config]
  (let [builder (CfnDashboard$FilledMapConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :map-style-options)]
      (. builder mapStyleOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :window-options)]
      (. builder windowOptions data))
    (.build builder)))


(defn cfn-dashboard-filled-map-field-wells-property-builder
  "The cfn-dashboard-filled-map-field-wells-property-builder function buildes out new instances of 
CfnDashboard$FilledMapFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `filledMapAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filled-map-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$FilledMapFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :filled-map-aggregated-field-wells)]
      (. builder filledMapAggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-filled-map-shape-conditional-formatting-property-builder
  "The cfn-dashboard-filled-map-shape-conditional-formatting-property-builder function buildes out new instances of 
CfnDashboard$FilledMapShapeConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `format` | software.amazon.awscdk.services.quicksight.CfnDashboard$ShapeConditionalFormatProperty | [[cdk.support/lookup-entry]] | `:format` |"
  [stack id config]
  (let [builder (CfnDashboard$FilledMapShapeConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format)]
      (. builder format data))
    (.build builder)))


(defn cfn-dashboard-filled-map-sort-configuration-property-builder
  "The cfn-dashboard-filled-map-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$FilledMapSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |"
  [stack id config]
  (let [builder (CfnDashboard$FilledMapSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (.build builder)))


(defn cfn-dashboard-filled-map-visual-property-builder
  "The cfn-dashboard-filled-map-visual-property-builder function buildes out new instances of 
CfnDashboard$FilledMapVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `conditionalFormatting` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$FilledMapVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :conditional-formatting)]
      (. builder conditionalFormatting data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-filter-control-property-builder
  "The cfn-dashboard-filter-control-property-builder function buildes out new instances of 
CfnDashboard$FilterControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `crossSheet` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterCrossSheetControlProperty | [[cdk.support/lookup-entry]] | `:cross-sheet` |
| `dateTimePicker` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterDateTimePickerControlProperty | [[cdk.support/lookup-entry]] | `:date-time-picker` |
| `dropdown` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterDropDownControlProperty | [[cdk.support/lookup-entry]] | `:dropdown` |
| `list` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterListControlProperty | [[cdk.support/lookup-entry]] | `:list` |
| `relativeDateTime` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:relative-date-time` |
| `slider` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterSliderControlProperty | [[cdk.support/lookup-entry]] | `:slider` |
| `textArea` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-area` |
| `textField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-field` |"
  [stack id config]
  (let [builder (CfnDashboard$FilterControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cross-sheet)]
      (. builder crossSheet data))
    (when-let [data (lookup-entry config id :date-time-picker)]
      (. builder dateTimePicker data))
    (when-let [data (lookup-entry config id :dropdown)]
      (. builder dropdown data))
    (when-let [data (lookup-entry config id :list)]
      (. builder list data))
    (when-let [data (lookup-entry config id :relative-date-time)]
      (. builder relativeDateTime data))
    (when-let [data (lookup-entry config id :slider)]
      (. builder slider data))
    (when-let [data (lookup-entry config id :text-area)]
      (. builder textArea data))
    (when-let [data (lookup-entry config id :text-field)]
      (. builder textField data))
    (.build builder)))


(defn cfn-dashboard-filter-cross-sheet-control-property-builder
  "The cfn-dashboard-filter-cross-sheet-control-property-builder function buildes out new instances of 
CfnDashboard$FilterCrossSheetControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |"
  [stack id config]
  (let [builder (CfnDashboard$FilterCrossSheetControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cascading-control-configuration)]
      (. builder cascadingControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (.build builder)))


(defn cfn-dashboard-filter-date-time-picker-control-property-builder
  "The cfn-dashboard-filter-date-time-picker-control-property-builder function buildes out new instances of 
CfnDashboard$FilterDateTimePickerControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnDashboard$FilterDateTimePickerControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-dashboard-filter-drop-down-control-property-builder
  "The cfn-dashboard-filter-drop-down-control-property-builder function buildes out new instances of 
CfnDashboard$FilterDropDownControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$DropDownControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnDashboard$FilterDropDownControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cascading-control-configuration)]
      (. builder cascadingControlConfiguration data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-dashboard-filter-group-property-builder
  "The cfn-dashboard-filter-group-property-builder function buildes out new instances of 
CfnDashboard$FilterGroupProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `crossDataset` | java.lang.String | [[cdk.support/lookup-entry]] | `:cross-dataset` |
| `filterGroupId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-group-id` |
| `filters` | java.util.List | [[cdk.support/lookup-entry]] | `:filters` |
| `scopeConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterScopeConfigurationProperty | [[cdk.support/lookup-entry]] | `:scope-configuration` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |"
  [stack id config]
  (let [builder (CfnDashboard$FilterGroupProperty$Builder.)]
    (when-let [data (lookup-entry config id :cross-dataset)]
      (. builder crossDataset data))
    (when-let [data (lookup-entry config id :filter-group-id)]
      (. builder filterGroupId data))
    (when-let [data (lookup-entry config id :filters)]
      (. builder filters data))
    (when-let [data (lookup-entry config id :scope-configuration)]
      (. builder scopeConfiguration data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (.build builder)))


(defn cfn-dashboard-filter-list-configuration-property-builder
  "The cfn-dashboard-filter-list-configuration-property-builder function buildes out new instances of 
CfnDashboard$FilterListConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |"
  [stack id config]
  (let [builder (CfnDashboard$FilterListConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-values)]
      (. builder categoryValues data))
    (when-let [data (lookup-entry config id :match-operator)]
      (. builder matchOperator data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (.build builder)))


(defn cfn-dashboard-filter-list-control-property-builder
  "The cfn-dashboard-filter-list-control-property-builder function buildes out new instances of 
CfnDashboard$FilterListControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnDashboard$FilterListControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cascading-control-configuration)]
      (. builder cascadingControlConfiguration data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-dashboard-filter-operation-selected-fields-configuration-property-builder
  "The cfn-dashboard-filter-operation-selected-fields-configuration-property-builder function buildes out new instances of 
CfnDashboard$FilterOperationSelectedFieldsConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `selectedColumns` | java.util.List | [[cdk.support/lookup-entry]] | `:selected-columns` |
| `selectedFieldOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-field-options` |
| `selectedFields` | java.util.List | [[cdk.support/lookup-entry]] | `:selected-fields` |"
  [stack id config]
  (let [builder (CfnDashboard$FilterOperationSelectedFieldsConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :selected-columns)]
      (. builder selectedColumns data))
    (when-let [data (lookup-entry config id :selected-field-options)]
      (. builder selectedFieldOptions data))
    (when-let [data (lookup-entry config id :selected-fields)]
      (. builder selectedFields data))
    (.build builder)))


(defn cfn-dashboard-filter-operation-target-visuals-configuration-property-builder
  "The cfn-dashboard-filter-operation-target-visuals-configuration-property-builder function buildes out new instances of 
CfnDashboard$FilterOperationTargetVisualsConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sameSheetTargetVisualConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:same-sheet-target-visual-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$FilterOperationTargetVisualsConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :same-sheet-target-visual-configuration)]
      (. builder sameSheetTargetVisualConfiguration data))
    (.build builder)))


(defn cfn-dashboard-filter-property-builder
  "The cfn-dashboard-filter-property-builder function buildes out new instances of 
CfnDashboard$FilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-filter` |
| `numericEqualityFilter` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumericEqualityFilterProperty | [[cdk.support/lookup-entry]] | `:numeric-equality-filter` |
| `numericRangeFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-range-filter` |
| `relativeDatesFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:relative-dates-filter` |
| `timeEqualityFilter` | software.amazon.awscdk.services.quicksight.CfnDashboard$TimeEqualityFilterProperty | [[cdk.support/lookup-entry]] | `:time-equality-filter` |
| `timeRangeFilter` | software.amazon.awscdk.services.quicksight.CfnDashboard$TimeRangeFilterProperty | [[cdk.support/lookup-entry]] | `:time-range-filter` |
| `topBottomFilter` | software.amazon.awscdk.services.quicksight.CfnDashboard$TopBottomFilterProperty | [[cdk.support/lookup-entry]] | `:top-bottom-filter` |"
  [stack id config]
  (let [builder (CfnDashboard$FilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-filter)]
      (. builder categoryFilter data))
    (when-let [data (lookup-entry config id :numeric-equality-filter)]
      (. builder numericEqualityFilter data))
    (when-let [data (lookup-entry config id :numeric-range-filter)]
      (. builder numericRangeFilter data))
    (when-let [data (lookup-entry config id :relative-dates-filter)]
      (. builder relativeDatesFilter data))
    (when-let [data (lookup-entry config id :time-equality-filter)]
      (. builder timeEqualityFilter data))
    (when-let [data (lookup-entry config id :time-range-filter)]
      (. builder timeRangeFilter data))
    (when-let [data (lookup-entry config id :top-bottom-filter)]
      (. builder topBottomFilter data))
    (.build builder)))


(defn cfn-dashboard-filter-relative-date-time-control-property-builder
  "The cfn-dashboard-filter-relative-date-time-control-property-builder function buildes out new instances of 
CfnDashboard$FilterRelativeDateTimeControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$RelativeDateTimeControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnDashboard$FilterRelativeDateTimeControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-dashboard-filter-scope-configuration-property-builder
  "The cfn-dashboard-filter-scope-configuration-property-builder function buildes out new instances of 
CfnDashboard$FilterScopeConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `allSheets` | java.lang.Object | [[cdk.support/lookup-entry]] | `:all-sheets` |
| `selectedSheets` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-sheets` |"
  [stack id config]
  (let [builder (CfnDashboard$FilterScopeConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :all-sheets)]
      (. builder allSheets data))
    (when-let [data (lookup-entry config id :selected-sheets)]
      (. builder selectedSheets data))
    (.build builder)))


(defn cfn-dashboard-filter-selectable-values-property-builder
  "The cfn-dashboard-filter-selectable-values-property-builder function buildes out new instances of 
CfnDashboard$FilterSelectableValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$FilterSelectableValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-filter-slider-control-property-builder
  "The cfn-dashboard-filter-slider-control-property-builder function buildes out new instances of 
CfnDashboard$FilterSliderControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$SliderControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnDashboard$FilterSliderControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :maximum-value)]
      (. builder maximumValue data))
    (when-let [data (lookup-entry config id :minimum-value)]
      (. builder minimumValue data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :step-size)]
      (. builder stepSize data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-dashboard-filter-text-area-control-property-builder
  "The cfn-dashboard-filter-text-area-control-property-builder function buildes out new instances of 
CfnDashboard$FilterTextAreaControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnDashboard$FilterTextAreaControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :delimiter)]
      (. builder delimiter data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-dashboard-filter-text-field-control-property-builder
  "The cfn-dashboard-filter-text-field-control-property-builder function buildes out new instances of 
CfnDashboard$FilterTextFieldControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnDashboard$FilterTextFieldControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-dashboard-font-configuration-property-builder
  "The cfn-dashboard-font-configuration-property-builder function buildes out new instances of 
CfnDashboard$FontConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-color` |
| `fontDecoration` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-decoration` |
| `fontSize` | software.amazon.awscdk.services.quicksight.CfnDashboard$FontSizeProperty | [[cdk.support/lookup-entry]] | `:font-size` |
| `fontStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-style` |
| `fontWeight` | software.amazon.awscdk.services.quicksight.CfnDashboard$FontWeightProperty | [[cdk.support/lookup-entry]] | `:font-weight` |"
  [stack id config]
  (let [builder (CfnDashboard$FontConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :font-color)]
      (. builder fontColor data))
    (when-let [data (lookup-entry config id :font-decoration)]
      (. builder fontDecoration data))
    (when-let [data (lookup-entry config id :font-size)]
      (. builder fontSize data))
    (when-let [data (lookup-entry config id :font-style)]
      (. builder fontStyle data))
    (when-let [data (lookup-entry config id :font-weight)]
      (. builder fontWeight data))
    (.build builder)))


(defn cfn-dashboard-font-size-property-builder
  "The cfn-dashboard-font-size-property-builder function buildes out new instances of 
CfnDashboard$FontSizeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `relative` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative` |"
  [stack id config]
  (let [builder (CfnDashboard$FontSizeProperty$Builder.)]
    (when-let [data (lookup-entry config id :relative)]
      (. builder relative data))
    (.build builder)))


(defn cfn-dashboard-font-weight-property-builder
  "The cfn-dashboard-font-weight-property-builder function buildes out new instances of 
CfnDashboard$FontWeightProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |"
  [stack id config]
  (let [builder (CfnDashboard$FontWeightProperty$Builder.)]
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (.build builder)))


(defn cfn-dashboard-forecast-computation-property-builder
  "The cfn-dashboard-forecast-computation-property-builder function buildes out new instances of 
CfnDashboard$ForecastComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `customSeasonalityValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-seasonality-value` |
| `lowerBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:lower-boundary` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodsBackward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-backward` |
| `periodsForward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-forward` |
| `predictionInterval` | java.lang.Number | [[cdk.support/lookup-entry]] | `:prediction-interval` |
| `seasonality` | java.lang.String | [[cdk.support/lookup-entry]] | `:seasonality` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `upperBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:upper-boundary` |
| `value` | software.amazon.awscdk.services.quicksight.CfnDashboard$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$ForecastComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :custom-seasonality-value)]
      (. builder customSeasonalityValue data))
    (when-let [data (lookup-entry config id :lower-boundary)]
      (. builder lowerBoundary data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :periods-backward)]
      (. builder periodsBackward data))
    (when-let [data (lookup-entry config id :periods-forward)]
      (. builder periodsForward data))
    (when-let [data (lookup-entry config id :prediction-interval)]
      (. builder predictionInterval data))
    (when-let [data (lookup-entry config id :seasonality)]
      (. builder seasonality data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :upper-boundary)]
      (. builder upperBoundary data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-forecast-configuration-property-builder
  "The cfn-dashboard-forecast-configuration-property-builder function buildes out new instances of 
CfnDashboard$ForecastConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `forecastProperties` | software.amazon.awscdk.services.quicksight.CfnDashboard$TimeBasedForecastPropertiesProperty | [[cdk.support/lookup-entry]] | `:forecast-properties` |
| `scenario` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scenario` |"
  [stack id config]
  (let [builder (CfnDashboard$ForecastConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :forecast-properties)]
      (. builder forecastProperties data))
    (when-let [data (lookup-entry config id :scenario)]
      (. builder scenario data))
    (.build builder)))


(defn cfn-dashboard-forecast-scenario-property-builder
  "The cfn-dashboard-forecast-scenario-property-builder function buildes out new instances of 
CfnDashboard$ForecastScenarioProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `whatIfPointScenario` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:what-if-point-scenario` |
| `whatIfRangeScenario` | software.amazon.awscdk.services.quicksight.CfnDashboard$WhatIfRangeScenarioProperty | [[cdk.support/lookup-entry]] | `:what-if-range-scenario` |"
  [stack id config]
  (let [builder (CfnDashboard$ForecastScenarioProperty$Builder.)]
    (when-let [data (lookup-entry config id :what-if-point-scenario)]
      (. builder whatIfPointScenario data))
    (when-let [data (lookup-entry config id :what-if-range-scenario)]
      (. builder whatIfRangeScenario data))
    (.build builder)))


(defn cfn-dashboard-format-configuration-property-builder
  "The cfn-dashboard-format-configuration-property-builder function buildes out new instances of 
CfnDashboard$FormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-time-format-configuration` |
| `numberFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:number-format-configuration` |
| `stringFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:string-format-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$FormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-format-configuration)]
      (. builder dateTimeFormatConfiguration data))
    (when-let [data (lookup-entry config id :number-format-configuration)]
      (. builder numberFormatConfiguration data))
    (when-let [data (lookup-entry config id :string-format-configuration)]
      (. builder stringFormatConfiguration data))
    (.build builder)))


(defn cfn-dashboard-free-form-layout-canvas-size-options-property-builder
  "The cfn-dashboard-free-form-layout-canvas-size-options-property-builder function buildes out new instances of 
CfnDashboard$FreeFormLayoutCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `screenCanvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$FreeFormLayoutScreenCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:screen-canvas-size-options` |"
  [stack id config]
  (let [builder (CfnDashboard$FreeFormLayoutCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :screen-canvas-size-options)]
      (. builder screenCanvasSizeOptions data))
    (.build builder)))


(defn cfn-dashboard-free-form-layout-configuration-property-builder
  "The cfn-dashboard-free-form-layout-configuration-property-builder function buildes out new instances of 
CfnDashboard$FreeFormLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$FreeFormLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `elements` | java.util.List | [[cdk.support/lookup-entry]] | `:elements` |"
  [stack id config]
  (let [builder (CfnDashboard$FreeFormLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (when-let [data (lookup-entry config id :elements)]
      (. builder elements data))
    (.build builder)))


(defn cfn-dashboard-free-form-layout-element-background-style-property-builder
  "The cfn-dashboard-free-form-layout-element-background-style-property-builder function buildes out new instances of 
CfnDashboard$FreeFormLayoutElementBackgroundStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$FreeFormLayoutElementBackgroundStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-free-form-layout-element-border-style-property-builder
  "The cfn-dashboard-free-form-layout-element-border-style-property-builder function buildes out new instances of 
CfnDashboard$FreeFormLayoutElementBorderStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$FreeFormLayoutElementBorderStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-free-form-layout-element-property-builder
  "The cfn-dashboard-free-form-layout-element-property-builder function buildes out new instances of 
CfnDashboard$FreeFormLayoutElementProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:background-style` |
| `borderStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:border-style` |
| `elementId` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-id` |
| `elementType` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-type` |
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `loadingAnimation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:loading-animation` |
| `renderingRules` | java.util.List | [[cdk.support/lookup-entry]] | `:rendering-rules` |
| `selectedBorderStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-border-style` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |
| `xAxisLocation` | java.lang.String | [[cdk.support/lookup-entry]] | `:x-axis-location` |
| `yAxisLocation` | java.lang.String | [[cdk.support/lookup-entry]] | `:y-axis-location` |"
  [stack id config]
  (let [builder (CfnDashboard$FreeFormLayoutElementProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-style)]
      (. builder backgroundStyle data))
    (when-let [data (lookup-entry config id :border-style)]
      (. builder borderStyle data))
    (when-let [data (lookup-entry config id :element-id)]
      (. builder elementId data))
    (when-let [data (lookup-entry config id :element-type)]
      (. builder elementType data))
    (when-let [data (lookup-entry config id :height)]
      (. builder height data))
    (when-let [data (lookup-entry config id :loading-animation)]
      (. builder loadingAnimation data))
    (when-let [data (lookup-entry config id :rendering-rules)]
      (. builder renderingRules data))
    (when-let [data (lookup-entry config id :selected-border-style)]
      (. builder selectedBorderStyle data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (when-let [data (lookup-entry config id :width)]
      (. builder width data))
    (when-let [data (lookup-entry config id :x-axis-location)]
      (. builder xAxisLocation data))
    (when-let [data (lookup-entry config id :y-axis-location)]
      (. builder yAxisLocation data))
    (.build builder)))


(defn cfn-dashboard-free-form-layout-screen-canvas-size-options-property-builder
  "The cfn-dashboard-free-form-layout-screen-canvas-size-options-property-builder function buildes out new instances of 
CfnDashboard$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `optimizedViewPortWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:optimized-view-port-width` |"
  [stack id config]
  (let [builder (CfnDashboard$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :optimized-view-port-width)]
      (. builder optimizedViewPortWidth data))
    (.build builder)))


(defn cfn-dashboard-free-form-section-layout-configuration-property-builder
  "The cfn-dashboard-free-form-section-layout-configuration-property-builder function buildes out new instances of 
CfnDashboard$FreeFormSectionLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `elements` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:elements` |"
  [stack id config]
  (let [builder (CfnDashboard$FreeFormSectionLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :elements)]
      (. builder elements data))
    (.build builder)))


(defn cfn-dashboard-funnel-chart-aggregated-field-wells-property-builder
  "The cfn-dashboard-funnel-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$FunnelChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | java.util.List | [[cdk.support/lookup-entry]] | `:category` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$FunnelChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-funnel-chart-configuration-property-builder
  "The cfn-dashboard-funnel-chart-configuration-property-builder function buildes out new instances of 
CfnDashboard$FunnelChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `dataLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$FunnelChartDataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-label-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$FunnelChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FunnelChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnDashboard$FunnelChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :data-label-options)]
      (. builder dataLabelOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :value-label-options)]
      (. builder valueLabelOptions data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-dashboard-funnel-chart-data-label-options-property-builder
  "The cfn-dashboard-funnel-chart-data-label-options-property-builder function buildes out new instances of 
CfnDashboard$FunnelChartDataLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-label-visibility` |
| `labelColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-color` |
| `labelFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label-font-configuration` |
| `measureDataLabelStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-data-label-style` |
| `measureLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-label-visibility` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$FunnelChartDataLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-label-visibility)]
      (. builder categoryLabelVisibility data))
    (when-let [data (lookup-entry config id :label-color)]
      (. builder labelColor data))
    (when-let [data (lookup-entry config id :label-font-configuration)]
      (. builder labelFontConfiguration data))
    (when-let [data (lookup-entry config id :measure-data-label-style)]
      (. builder measureDataLabelStyle data))
    (when-let [data (lookup-entry config id :measure-label-visibility)]
      (. builder measureLabelVisibility data))
    (when-let [data (lookup-entry config id :position)]
      (. builder position data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-funnel-chart-field-wells-property-builder
  "The cfn-dashboard-funnel-chart-field-wells-property-builder function buildes out new instances of 
CfnDashboard$FunnelChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `funnelChartAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$FunnelChartAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:funnel-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$FunnelChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :funnel-chart-aggregated-field-wells)]
      (. builder funnelChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-funnel-chart-sort-configuration-property-builder
  "The cfn-dashboard-funnel-chart-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$FunnelChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |"
  [stack id config]
  (let [builder (CfnDashboard$FunnelChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (.build builder)))


(defn cfn-dashboard-funnel-chart-visual-property-builder
  "The cfn-dashboard-funnel-chart-visual-property-builder function buildes out new instances of 
CfnDashboard$FunnelChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FunnelChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$FunnelChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-gauge-chart-arc-conditional-formatting-property-builder
  "The cfn-dashboard-gauge-chart-arc-conditional-formatting-property-builder function buildes out new instances of 
CfnDashboard$GaugeChartArcConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `foregroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:foreground-color` |"
  [stack id config]
  (let [builder (CfnDashboard$GaugeChartArcConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :foreground-color)]
      (. builder foregroundColor data))
    (.build builder)))


(defn cfn-dashboard-gauge-chart-conditional-formatting-option-property-builder
  "The cfn-dashboard-gauge-chart-conditional-formatting-option-property-builder function buildes out new instances of 
CfnDashboard$GaugeChartConditionalFormattingOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arc` | software.amazon.awscdk.services.quicksight.CfnDashboard$GaugeChartArcConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:arc` |
| `primaryValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$GaugeChartPrimaryValueConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:primary-value` |"
  [stack id config]
  (let [builder (CfnDashboard$GaugeChartConditionalFormattingOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :arc)]
      (. builder arc data))
    (when-let [data (lookup-entry config id :primary-value)]
      (. builder primaryValue data))
    (.build builder)))


(defn cfn-dashboard-gauge-chart-conditional-formatting-property-builder
  "The cfn-dashboard-gauge-chart-conditional-formatting-property-builder function buildes out new instances of 
CfnDashboard$GaugeChartConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |"
  [stack id config]
  (let [builder (CfnDashboard$GaugeChartConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :conditional-formatting-options)]
      (. builder conditionalFormattingOptions data))
    (.build builder)))


(defn cfn-dashboard-gauge-chart-configuration-property-builder
  "The cfn-dashboard-gauge-chart-configuration-property-builder function buildes out new instances of 
CfnDashboard$GaugeChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `gaugeChartOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:gauge-chart-options` |
| `tooltipOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip-options` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnDashboard$GaugeChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :gauge-chart-options)]
      (. builder gaugeChartOptions data))
    (when-let [data (lookup-entry config id :tooltip-options)]
      (. builder tooltipOptions data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-dashboard-gauge-chart-field-wells-property-builder
  "The cfn-dashboard-gauge-chart-field-wells-property-builder function buildes out new instances of 
CfnDashboard$GaugeChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetValues` | java.util.List | [[cdk.support/lookup-entry]] | `:target-values` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$GaugeChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :target-values)]
      (. builder targetValues data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-gauge-chart-options-property-builder
  "The cfn-dashboard-gauge-chart-options-property-builder function buildes out new instances of 
CfnDashboard$GaugeChartOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arc` | software.amazon.awscdk.services.quicksight.CfnDashboard$ArcConfigurationProperty | [[cdk.support/lookup-entry]] | `:arc` |
| `arcAxis` | software.amazon.awscdk.services.quicksight.CfnDashboard$ArcAxisConfigurationProperty | [[cdk.support/lookup-entry]] | `:arc-axis` |
| `comparison` | software.amazon.awscdk.services.quicksight.CfnDashboard$ComparisonConfigurationProperty | [[cdk.support/lookup-entry]] | `:comparison` |
| `primaryValueDisplayType` | java.lang.String | [[cdk.support/lookup-entry]] | `:primary-value-display-type` |
| `primaryValueFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-value-font-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$GaugeChartOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :arc)]
      (. builder arc data))
    (when-let [data (lookup-entry config id :arc-axis)]
      (. builder arcAxis data))
    (when-let [data (lookup-entry config id :comparison)]
      (. builder comparison data))
    (when-let [data (lookup-entry config id :primary-value-display-type)]
      (. builder primaryValueDisplayType data))
    (when-let [data (lookup-entry config id :primary-value-font-configuration)]
      (. builder primaryValueFontConfiguration data))
    (.build builder)))


(defn cfn-dashboard-gauge-chart-primary-value-conditional-formatting-property-builder
  "The cfn-dashboard-gauge-chart-primary-value-conditional-formatting-property-builder function buildes out new instances of 
CfnDashboard$GaugeChartPrimaryValueConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnDashboard$GaugeChartPrimaryValueConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-dashboard-gauge-chart-visual-property-builder
  "The cfn-dashboard-gauge-chart-visual-property-builder function buildes out new instances of 
CfnDashboard$GaugeChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$GaugeChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :conditional-formatting)]
      (. builder conditionalFormatting data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-geospatial-coordinate-bounds-property-builder
  "The cfn-dashboard-geospatial-coordinate-bounds-property-builder function buildes out new instances of 
CfnDashboard$GeospatialCoordinateBoundsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `east` | java.lang.Number | [[cdk.support/lookup-entry]] | `:east` |
| `north` | java.lang.Number | [[cdk.support/lookup-entry]] | `:north` |
| `south` | java.lang.Number | [[cdk.support/lookup-entry]] | `:south` |
| `west` | java.lang.Number | [[cdk.support/lookup-entry]] | `:west` |"
  [stack id config]
  (let [builder (CfnDashboard$GeospatialCoordinateBoundsProperty$Builder.)]
    (when-let [data (lookup-entry config id :east)]
      (. builder east data))
    (when-let [data (lookup-entry config id :north)]
      (. builder north data))
    (when-let [data (lookup-entry config id :south)]
      (. builder south data))
    (when-let [data (lookup-entry config id :west)]
      (. builder west data))
    (.build builder)))


(defn cfn-dashboard-geospatial-heatmap-color-scale-property-builder
  "The cfn-dashboard-geospatial-heatmap-color-scale-property-builder function buildes out new instances of 
CfnDashboard$GeospatialHeatmapColorScaleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |"
  [stack id config]
  (let [builder (CfnDashboard$GeospatialHeatmapColorScaleProperty$Builder.)]
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (.build builder)))


(defn cfn-dashboard-geospatial-heatmap-configuration-property-builder
  "The cfn-dashboard-geospatial-heatmap-configuration-property-builder function buildes out new instances of 
CfnDashboard$GeospatialHeatmapConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatmapColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heatmap-color` |"
  [stack id config]
  (let [builder (CfnDashboard$GeospatialHeatmapConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :heatmap-color)]
      (. builder heatmapColor data))
    (.build builder)))


(defn cfn-dashboard-geospatial-heatmap-data-color-property-builder
  "The cfn-dashboard-geospatial-heatmap-data-color-property-builder function buildes out new instances of 
CfnDashboard$GeospatialHeatmapDataColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |"
  [stack id config]
  (let [builder (CfnDashboard$GeospatialHeatmapDataColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (.build builder)))


(defn cfn-dashboard-geospatial-map-aggregated-field-wells-property-builder
  "The cfn-dashboard-geospatial-map-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$GeospatialMapAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
| `geospatial` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:geospatial` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$GeospatialMapAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :geospatial)]
      (. builder geospatial data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-geospatial-map-configuration-property-builder
  "The cfn-dashboard-geospatial-map-configuration-property-builder function buildes out new instances of 
CfnDashboard$GeospatialMapConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnDashboard$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `mapStyleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:map-style-options` |
| `pointStyleOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$GeospatialPointStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:point-style-options` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `windowOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:window-options` |"
  [stack id config]
  (let [builder (CfnDashboard$GeospatialMapConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :map-style-options)]
      (. builder mapStyleOptions data))
    (when-let [data (lookup-entry config id :point-style-options)]
      (. builder pointStyleOptions data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (when-let [data (lookup-entry config id :window-options)]
      (. builder windowOptions data))
    (.build builder)))


(defn cfn-dashboard-geospatial-map-field-wells-property-builder
  "The cfn-dashboard-geospatial-map-field-wells-property-builder function buildes out new instances of 
CfnDashboard$GeospatialMapFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `geospatialMapAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:geospatial-map-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$GeospatialMapFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :geospatial-map-aggregated-field-wells)]
      (. builder geospatialMapAggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-geospatial-map-style-options-property-builder
  "The cfn-dashboard-geospatial-map-style-options-property-builder function buildes out new instances of 
CfnDashboard$GeospatialMapStyleOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `baseMapStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:base-map-style` |"
  [stack id config]
  (let [builder (CfnDashboard$GeospatialMapStyleOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :base-map-style)]
      (. builder baseMapStyle data))
    (.build builder)))


(defn cfn-dashboard-geospatial-map-visual-property-builder
  "The cfn-dashboard-geospatial-map-visual-property-builder function buildes out new instances of 
CfnDashboard$GeospatialMapVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$GeospatialMapVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-geospatial-point-style-options-property-builder
  "The cfn-dashboard-geospatial-point-style-options-property-builder function buildes out new instances of 
CfnDashboard$GeospatialPointStyleOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `clusterMarkerConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ClusterMarkerConfigurationProperty | [[cdk.support/lookup-entry]] | `:cluster-marker-configuration` |
| `heatmapConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$GeospatialHeatmapConfigurationProperty | [[cdk.support/lookup-entry]] | `:heatmap-configuration` |
| `selectedPointStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-point-style` |"
  [stack id config]
  (let [builder (CfnDashboard$GeospatialPointStyleOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :cluster-marker-configuration)]
      (. builder clusterMarkerConfiguration data))
    (when-let [data (lookup-entry config id :heatmap-configuration)]
      (. builder heatmapConfiguration data))
    (when-let [data (lookup-entry config id :selected-point-style)]
      (. builder selectedPointStyle data))
    (.build builder)))


(defn cfn-dashboard-geospatial-window-options-property-builder
  "The cfn-dashboard-geospatial-window-options-property-builder function buildes out new instances of 
CfnDashboard$GeospatialWindowOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bounds` | software.amazon.awscdk.services.quicksight.CfnDashboard$GeospatialCoordinateBoundsProperty | [[cdk.support/lookup-entry]] | `:bounds` |
| `mapZoomMode` | java.lang.String | [[cdk.support/lookup-entry]] | `:map-zoom-mode` |"
  [stack id config]
  (let [builder (CfnDashboard$GeospatialWindowOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bounds)]
      (. builder bounds data))
    (when-let [data (lookup-entry config id :map-zoom-mode)]
      (. builder mapZoomMode data))
    (.build builder)))


(defn cfn-dashboard-global-table-border-options-property-builder
  "The cfn-dashboard-global-table-border-options-property-builder function buildes out new instances of 
CfnDashboard$GlobalTableBorderOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sideSpecificBorder` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:side-specific-border` |
| `uniformBorder` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:uniform-border` |"
  [stack id config]
  (let [builder (CfnDashboard$GlobalTableBorderOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :side-specific-border)]
      (. builder sideSpecificBorder data))
    (when-let [data (lookup-entry config id :uniform-border)]
      (. builder uniformBorder data))
    (.build builder)))


(defn cfn-dashboard-gradient-color-property-builder
  "The cfn-dashboard-gradient-color-property-builder function buildes out new instances of 
CfnDashboard$GradientColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `stops` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:stops` |"
  [stack id config]
  (let [builder (CfnDashboard$GradientColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :stops)]
      (. builder stops data))
    (.build builder)))


(defn cfn-dashboard-gradient-stop-property-builder
  "The cfn-dashboard-gradient-stop-property-builder function buildes out new instances of 
CfnDashboard$GradientStopProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `dataValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:data-value` |
| `gradientOffset` | java.lang.Number | [[cdk.support/lookup-entry]] | `:gradient-offset` |"
  [stack id config]
  (let [builder (CfnDashboard$GradientStopProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :data-value)]
      (. builder dataValue data))
    (when-let [data (lookup-entry config id :gradient-offset)]
      (. builder gradientOffset data))
    (.build builder)))


(defn cfn-dashboard-grid-layout-canvas-size-options-property-builder
  "The cfn-dashboard-grid-layout-canvas-size-options-property-builder function buildes out new instances of 
CfnDashboard$GridLayoutCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `screenCanvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$GridLayoutScreenCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:screen-canvas-size-options` |"
  [stack id config]
  (let [builder (CfnDashboard$GridLayoutCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :screen-canvas-size-options)]
      (. builder screenCanvasSizeOptions data))
    (.build builder)))


(defn cfn-dashboard-grid-layout-configuration-property-builder
  "The cfn-dashboard-grid-layout-configuration-property-builder function buildes out new instances of 
CfnDashboard$GridLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `elements` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:elements` |"
  [stack id config]
  (let [builder (CfnDashboard$GridLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (when-let [data (lookup-entry config id :elements)]
      (. builder elements data))
    (.build builder)))


(defn cfn-dashboard-grid-layout-element-property-builder
  "The cfn-dashboard-grid-layout-element-property-builder function buildes out new instances of 
CfnDashboard$GridLayoutElementProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnIndex` | java.lang.Number | [[cdk.support/lookup-entry]] | `:column-index` |
| `columnSpan` | java.lang.Number | [[cdk.support/lookup-entry]] | `:column-span` |
| `elementId` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-id` |
| `elementType` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-type` |
| `rowIndex` | java.lang.Number | [[cdk.support/lookup-entry]] | `:row-index` |
| `rowSpan` | java.lang.Number | [[cdk.support/lookup-entry]] | `:row-span` |"
  [stack id config]
  (let [builder (CfnDashboard$GridLayoutElementProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-index)]
      (. builder columnIndex data))
    (when-let [data (lookup-entry config id :column-span)]
      (. builder columnSpan data))
    (when-let [data (lookup-entry config id :element-id)]
      (. builder elementId data))
    (when-let [data (lookup-entry config id :element-type)]
      (. builder elementType data))
    (when-let [data (lookup-entry config id :row-index)]
      (. builder rowIndex data))
    (when-let [data (lookup-entry config id :row-span)]
      (. builder rowSpan data))
    (.build builder)))


(defn cfn-dashboard-grid-layout-screen-canvas-size-options-property-builder
  "The cfn-dashboard-grid-layout-screen-canvas-size-options-property-builder function buildes out new instances of 
CfnDashboard$GridLayoutScreenCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `optimizedViewPortWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:optimized-view-port-width` |
| `resizeOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:resize-option` |"
  [stack id config]
  (let [builder (CfnDashboard$GridLayoutScreenCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :optimized-view-port-width)]
      (. builder optimizedViewPortWidth data))
    (when-let [data (lookup-entry config id :resize-option)]
      (. builder resizeOption data))
    (.build builder)))


(defn cfn-dashboard-growth-rate-computation-property-builder
  "The cfn-dashboard-growth-rate-computation-property-builder function buildes out new instances of 
CfnDashboard$GrowthRateComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:period-size` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$GrowthRateComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :period-size)]
      (. builder periodSize data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-header-footer-section-configuration-property-builder
  "The cfn-dashboard-header-footer-section-configuration-property-builder function buildes out new instances of 
CfnDashboard$HeaderFooterSectionConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `layout` | software.amazon.awscdk.services.quicksight.CfnDashboard$SectionLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:layout` |
| `sectionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:section-id` |
| `style` | software.amazon.awscdk.services.quicksight.CfnDashboard$SectionStyleProperty | [[cdk.support/lookup-entry]] | `:style` |"
  [stack id config]
  (let [builder (CfnDashboard$HeaderFooterSectionConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :layout)]
      (. builder layout data))
    (when-let [data (lookup-entry config id :section-id)]
      (. builder sectionId data))
    (when-let [data (lookup-entry config id :style)]
      (. builder style data))
    (.build builder)))


(defn cfn-dashboard-heat-map-aggregated-field-wells-property-builder
  "The cfn-dashboard-heat-map-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$HeatMapAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `rows` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rows` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$HeatMapAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (when-let [data (lookup-entry config id :rows)]
      (. builder rows data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-heat-map-configuration-property-builder
  "The cfn-dashboard-heat-map-configuration-property-builder function buildes out new instances of 
CfnDashboard$HeatMapConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorScale` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColorScaleProperty | [[cdk.support/lookup-entry]] | `:color-scale` |
| `columnLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:column-label-options` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$HeatMapFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `rowLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:row-label-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$HeatMapSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnDashboard$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |"
  [stack id config]
  (let [builder (CfnDashboard$HeatMapConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :color-scale)]
      (. builder colorScale data))
    (when-let [data (lookup-entry config id :column-label-options)]
      (. builder columnLabelOptions data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :row-label-options)]
      (. builder rowLabelOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (.build builder)))


(defn cfn-dashboard-heat-map-field-wells-property-builder
  "The cfn-dashboard-heat-map-field-wells-property-builder function buildes out new instances of 
CfnDashboard$HeatMapFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatMapAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$HeatMapAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:heat-map-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$HeatMapFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :heat-map-aggregated-field-wells)]
      (. builder heatMapAggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-heat-map-sort-configuration-property-builder
  "The cfn-dashboard-heat-map-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$HeatMapSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatMapColumnItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:heat-map-column-items-limit-configuration` |
| `heatMapColumnSort` | java.util.List | [[cdk.support/lookup-entry]] | `:heat-map-column-sort` |
| `heatMapRowItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:heat-map-row-items-limit-configuration` |
| `heatMapRowSort` | java.util.List | [[cdk.support/lookup-entry]] | `:heat-map-row-sort` |"
  [stack id config]
  (let [builder (CfnDashboard$HeatMapSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :heat-map-column-items-limit-configuration)]
      (. builder heatMapColumnItemsLimitConfiguration data))
    (when-let [data (lookup-entry config id :heat-map-column-sort)]
      (. builder heatMapColumnSort data))
    (when-let [data (lookup-entry config id :heat-map-row-items-limit-configuration)]
      (. builder heatMapRowItemsLimitConfiguration data))
    (when-let [data (lookup-entry config id :heat-map-row-sort)]
      (. builder heatMapRowSort data))
    (.build builder)))


(defn cfn-dashboard-heat-map-visual-property-builder
  "The cfn-dashboard-heat-map-visual-property-builder function buildes out new instances of 
CfnDashboard$HeatMapVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$HeatMapVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-histogram-aggregated-field-wells-property-builder
  "The cfn-dashboard-histogram-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$HistogramAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$HistogramAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-histogram-bin-options-property-builder
  "The cfn-dashboard-histogram-bin-options-property-builder function buildes out new instances of 
CfnDashboard$HistogramBinOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binCount` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bin-count` |
| `binWidth` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bin-width` |
| `selectedBinType` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-bin-type` |
| `startValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:start-value` |"
  [stack id config]
  (let [builder (CfnDashboard$HistogramBinOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bin-count)]
      (. builder binCount data))
    (when-let [data (lookup-entry config id :bin-width)]
      (. builder binWidth data))
    (when-let [data (lookup-entry config id :selected-bin-type)]
      (. builder selectedBinType data))
    (when-let [data (lookup-entry config id :start-value)]
      (. builder startValue data))
    (.build builder)))


(defn cfn-dashboard-histogram-configuration-property-builder
  "The cfn-dashboard-histogram-configuration-property-builder function buildes out new instances of 
CfnDashboard$HistogramConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$HistogramBinOptionsProperty | [[cdk.support/lookup-entry]] | `:bin-options` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$HistogramFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnDashboard$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |
| `yAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:y-axis-display-options` |"
  [stack id config]
  (let [builder (CfnDashboard$HistogramConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :bin-options)]
      (. builder binOptions data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (when-let [data (lookup-entry config id :x-axis-display-options)]
      (. builder xAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :x-axis-label-options)]
      (. builder xAxisLabelOptions data))
    (when-let [data (lookup-entry config id :y-axis-display-options)]
      (. builder yAxisDisplayOptions data))
    (.build builder)))


(defn cfn-dashboard-histogram-field-wells-property-builder
  "The cfn-dashboard-histogram-field-wells-property-builder function buildes out new instances of 
CfnDashboard$HistogramFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `histogramAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:histogram-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$HistogramFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :histogram-aggregated-field-wells)]
      (. builder histogramAggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-histogram-visual-property-builder
  "The cfn-dashboard-histogram-visual-property-builder function buildes out new instances of 
CfnDashboard$HistogramVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$HistogramConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$HistogramVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-insight-configuration-property-builder
  "The cfn-dashboard-insight-configuration-property-builder function buildes out new instances of 
CfnDashboard$InsightConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computations` | java.util.List | [[cdk.support/lookup-entry]] | `:computations` |
| `customNarrative` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-narrative` |"
  [stack id config]
  (let [builder (CfnDashboard$InsightConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computations)]
      (. builder computations data))
    (when-let [data (lookup-entry config id :custom-narrative)]
      (. builder customNarrative data))
    (.build builder)))


(defn cfn-dashboard-insight-visual-property-builder
  "The cfn-dashboard-insight-visual-property-builder function buildes out new instances of 
CfnDashboard$InsightVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `insightConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:insight-configuration` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$InsightVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :insight-configuration)]
      (. builder insightConfiguration data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-integer-default-values-property-builder
  "The cfn-dashboard-integer-default-values-property-builder function buildes out new instances of 
CfnDashboard$IntegerDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:static-values` |"
  [stack id config]
  (let [builder (CfnDashboard$IntegerDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :dynamic-value)]
      (. builder dynamicValue data))
    (when-let [data (lookup-entry config id :static-values)]
      (. builder staticValues data))
    (.build builder)))


(defn cfn-dashboard-integer-parameter-declaration-property-builder
  "The cfn-dashboard-integer-parameter-declaration-property-builder function buildes out new instances of 
CfnDashboard$IntegerParameterDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.services.quicksight.CfnDashboard$IntegerValueWhenUnsetConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-when-unset` |"
  [stack id config]
  (let [builder (CfnDashboard$IntegerParameterDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-values)]
      (. builder defaultValues data))
    (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
      (. builder mappedDataSetParameters data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :parameter-value-type)]
      (. builder parameterValueType data))
    (when-let [data (lookup-entry config id :value-when-unset)]
      (. builder valueWhenUnset data))
    (.build builder)))


(defn cfn-dashboard-integer-parameter-property-builder
  "The cfn-dashboard-integer-parameter-property-builder function buildes out new instances of 
CfnDashboard$IntegerParameterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$IntegerParameterProperty$Builder.)]
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-integer-value-when-unset-configuration-property-builder
  "The cfn-dashboard-integer-value-when-unset-configuration-property-builder function buildes out new instances of 
CfnDashboard$IntegerValueWhenUnsetConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |"
  [stack id config]
  (let [builder (CfnDashboard$IntegerValueWhenUnsetConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-value)]
      (. builder customValue data))
    (when-let [data (lookup-entry config id :value-when-unset-option)]
      (. builder valueWhenUnsetOption data))
    (.build builder)))


(defn cfn-dashboard-items-limit-configuration-property-builder
  "The cfn-dashboard-items-limit-configuration-property-builder function buildes out new instances of 
CfnDashboard$ItemsLimitConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `itemsLimit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:items-limit` |
| `otherCategories` | java.lang.String | [[cdk.support/lookup-entry]] | `:other-categories` |"
  [stack id config]
  (let [builder (CfnDashboard$ItemsLimitConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :items-limit)]
      (. builder itemsLimit data))
    (when-let [data (lookup-entry config id :other-categories)]
      (. builder otherCategories data))
    (.build builder)))


(defn cfn-dashboard-kpi-actual-value-conditional-formatting-property-builder
  "The cfn-dashboard-kpi-actual-value-conditional-formatting-property-builder function buildes out new instances of 
CfnDashboard$KPIActualValueConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingIconProperty | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnDashboard$KPIActualValueConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-dashboard-kpi-comparison-value-conditional-formatting-property-builder
  "The cfn-dashboard-kpi-comparison-value-conditional-formatting-property-builder function buildes out new instances of 
CfnDashboard$KPIComparisonValueConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnDashboard$KPIComparisonValueConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-dashboard-kpi-conditional-formatting-option-property-builder
  "The cfn-dashboard-kpi-conditional-formatting-option-property-builder function buildes out new instances of 
CfnDashboard$KPIConditionalFormattingOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actualValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$KPIActualValueConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:actual-value` |
| `comparisonValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$KPIComparisonValueConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:comparison-value` |
| `primaryValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-value` |
| `progressBar` | software.amazon.awscdk.services.quicksight.CfnDashboard$KPIProgressBarConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:progress-bar` |"
  [stack id config]
  (let [builder (CfnDashboard$KPIConditionalFormattingOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :actual-value)]
      (. builder actualValue data))
    (when-let [data (lookup-entry config id :comparison-value)]
      (. builder comparisonValue data))
    (when-let [data (lookup-entry config id :primary-value)]
      (. builder primaryValue data))
    (when-let [data (lookup-entry config id :progress-bar)]
      (. builder progressBar data))
    (.build builder)))


(defn cfn-dashboard-kpi-conditional-formatting-property-builder
  "The cfn-dashboard-kpi-conditional-formatting-property-builder function buildes out new instances of 
CfnDashboard$KPIConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |"
  [stack id config]
  (let [builder (CfnDashboard$KPIConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :conditional-formatting-options)]
      (. builder conditionalFormattingOptions data))
    (.build builder)))


(defn cfn-dashboard-kpi-configuration-property-builder
  "The cfn-dashboard-kpi-configuration-property-builder function buildes out new instances of 
CfnDashboard$KPIConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `kpiOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:kpi-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$KPISortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$KPIConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :kpi-options)]
      (. builder kpiOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (.build builder)))


(defn cfn-dashboard-kpi-field-wells-property-builder
  "The cfn-dashboard-kpi-field-wells-property-builder function buildes out new instances of 
CfnDashboard$KPIFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target-values` |
| `trendGroups` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:trend-groups` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$KPIFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :target-values)]
      (. builder targetValues data))
    (when-let [data (lookup-entry config id :trend-groups)]
      (. builder trendGroups data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-kpi-options-property-builder
  "The cfn-dashboard-kpi-options-property-builder function buildes out new instances of 
CfnDashboard$KPIOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comparison` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:comparison` |
| `primaryValueDisplayType` | java.lang.String | [[cdk.support/lookup-entry]] | `:primary-value-display-type` |
| `primaryValueFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-value-font-configuration` |
| `progressBar` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:progress-bar` |
| `secondaryValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$SecondaryValueOptionsProperty | [[cdk.support/lookup-entry]] | `:secondary-value` |
| `secondaryValueFontConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:secondary-value-font-configuration` |
| `sparkline` | software.amazon.awscdk.services.quicksight.CfnDashboard$KPISparklineOptionsProperty | [[cdk.support/lookup-entry]] | `:sparkline` |
| `trendArrows` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:trend-arrows` |
| `visualLayoutOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-layout-options` |"
  [stack id config]
  (let [builder (CfnDashboard$KPIOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :comparison)]
      (. builder comparison data))
    (when-let [data (lookup-entry config id :primary-value-display-type)]
      (. builder primaryValueDisplayType data))
    (when-let [data (lookup-entry config id :primary-value-font-configuration)]
      (. builder primaryValueFontConfiguration data))
    (when-let [data (lookup-entry config id :progress-bar)]
      (. builder progressBar data))
    (when-let [data (lookup-entry config id :secondary-value)]
      (. builder secondaryValue data))
    (when-let [data (lookup-entry config id :secondary-value-font-configuration)]
      (. builder secondaryValueFontConfiguration data))
    (when-let [data (lookup-entry config id :sparkline)]
      (. builder sparkline data))
    (when-let [data (lookup-entry config id :trend-arrows)]
      (. builder trendArrows data))
    (when-let [data (lookup-entry config id :visual-layout-options)]
      (. builder visualLayoutOptions data))
    (.build builder)))


(defn cfn-dashboard-kpi-primary-value-conditional-formatting-property-builder
  "The cfn-dashboard-kpi-primary-value-conditional-formatting-property-builder function buildes out new instances of 
CfnDashboard$KPIPrimaryValueConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnDashboard$KPIPrimaryValueConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-dashboard-kpi-progress-bar-conditional-formatting-property-builder
  "The cfn-dashboard-kpi-progress-bar-conditional-formatting-property-builder function buildes out new instances of 
CfnDashboard$KPIProgressBarConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `foregroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:foreground-color` |"
  [stack id config]
  (let [builder (CfnDashboard$KPIProgressBarConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :foreground-color)]
      (. builder foregroundColor data))
    (.build builder)))


(defn cfn-dashboard-kpi-sort-configuration-property-builder
  "The cfn-dashboard-kpi-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$KPISortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `trendGroupSort` | java.util.List | [[cdk.support/lookup-entry]] | `:trend-group-sort` |"
  [stack id config]
  (let [builder (CfnDashboard$KPISortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :trend-group-sort)]
      (. builder trendGroupSort data))
    (.build builder)))


(defn cfn-dashboard-kpi-sparkline-options-property-builder
  "The cfn-dashboard-kpi-sparkline-options-property-builder function buildes out new instances of 
CfnDashboard$KPISparklineOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `tooltipVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-visibility` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$KPISparklineOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :tooltip-visibility)]
      (. builder tooltipVisibility data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-kpi-visual-layout-options-property-builder
  "The cfn-dashboard-kpi-visual-layout-options-property-builder function buildes out new instances of 
CfnDashboard$KPIVisualLayoutOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `standardLayout` | software.amazon.awscdk.services.quicksight.CfnDashboard$KPIVisualStandardLayoutProperty | [[cdk.support/lookup-entry]] | `:standard-layout` |"
  [stack id config]
  (let [builder (CfnDashboard$KPIVisualLayoutOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :standard-layout)]
      (. builder standardLayout data))
    (.build builder)))


(defn cfn-dashboard-kpi-visual-property-builder
  "The cfn-dashboard-kpi-visual-property-builder function buildes out new instances of 
CfnDashboard$KPIVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$KPIConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `conditionalFormatting` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$KPIVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :conditional-formatting)]
      (. builder conditionalFormatting data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-kpi-visual-standard-layout-property-builder
  "The cfn-dashboard-kpi-visual-standard-layout-property-builder function buildes out new instances of 
CfnDashboard$KPIVisualStandardLayoutProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnDashboard$KPIVisualStandardLayoutProperty$Builder.)]
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-dashboard-label-options-property-builder
  "The cfn-dashboard-label-options-property-builder function buildes out new instances of 
CfnDashboard$LabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$LabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-layout-configuration-property-builder
  "The cfn-dashboard-layout-configuration-property-builder function buildes out new instances of 
CfnDashboard$LayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeFormLayout` | software.amazon.awscdk.services.quicksight.CfnDashboard$FreeFormLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:free-form-layout` |
| `gridLayout` | software.amazon.awscdk.services.quicksight.CfnDashboard$GridLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:grid-layout` |
| `sectionBasedLayout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:section-based-layout` |"
  [stack id config]
  (let [builder (CfnDashboard$LayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :free-form-layout)]
      (. builder freeFormLayout data))
    (when-let [data (lookup-entry config id :grid-layout)]
      (. builder gridLayout data))
    (when-let [data (lookup-entry config id :section-based-layout)]
      (. builder sectionBasedLayout data))
    (.build builder)))


(defn cfn-dashboard-layout-property-builder
  "The cfn-dashboard-layout-property-builder function buildes out new instances of 
CfnDashboard$LayoutProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configuration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$LayoutProperty$Builder.)]
    (when-let [data (lookup-entry config id :configuration)]
      (. builder configuration data))
    (.build builder)))


(defn cfn-dashboard-legend-options-property-builder
  "The cfn-dashboard-legend-options-property-builder function buildes out new instances of 
CfnDashboard$LegendOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |"
  [stack id config]
  (let [builder (CfnDashboard$LegendOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :height)]
      (. builder height data))
    (when-let [data (lookup-entry config id :position)]
      (. builder position data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (when-let [data (lookup-entry config id :width)]
      (. builder width data))
    (.build builder)))


(defn cfn-dashboard-line-chart-aggregated-field-wells-property-builder
  "The cfn-dashboard-line-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$LineChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
| `smallMultiples` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$LineChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :small-multiples)]
      (. builder smallMultiples data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-line-chart-configuration-property-builder
  "The cfn-dashboard-line-chart-configuration-property-builder function buildes out new instances of 
CfnDashboard$LineChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contributionAnalysisDefaults` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `defaultSeriesSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-series-settings` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$LineChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `forecastConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:forecast-configurations` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnDashboard$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `secondaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-y-axis-display-options` |
| `secondaryYAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-y-axis-label-options` |
| `series` | java.util.List | [[cdk.support/lookup-entry]] | `:series` |
| `smallMultiplesOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$SmallMultiplesOptionsProperty | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |"
  [stack id config]
  (let [builder (CfnDashboard$LineChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
      (. builder contributionAnalysisDefaults data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :default-series-settings)]
      (. builder defaultSeriesSettings data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :forecast-configurations)]
      (. builder forecastConfigurations data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
      (. builder primaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
      (. builder primaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :reference-lines)]
      (. builder referenceLines data))
    (when-let [data (lookup-entry config id :secondary-y-axis-display-options)]
      (. builder secondaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :secondary-y-axis-label-options)]
      (. builder secondaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :series)]
      (. builder series data))
    (when-let [data (lookup-entry config id :small-multiples-options)]
      (. builder smallMultiplesOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (when-let [data (lookup-entry config id :x-axis-display-options)]
      (. builder xAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :x-axis-label-options)]
      (. builder xAxisLabelOptions data))
    (.build builder)))


(defn cfn-dashboard-line-chart-default-series-settings-property-builder
  "The cfn-dashboard-line-chart-default-series-settings-property-builder function buildes out new instances of 
CfnDashboard$LineChartDefaultSeriesSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `lineStyleSettings` | software.amazon.awscdk.services.quicksight.CfnDashboard$LineChartLineStyleSettingsProperty | [[cdk.support/lookup-entry]] | `:line-style-settings` |
| `markerStyleSettings` | software.amazon.awscdk.services.quicksight.CfnDashboard$LineChartMarkerStyleSettingsProperty | [[cdk.support/lookup-entry]] | `:marker-style-settings` |"
  [stack id config]
  (let [builder (CfnDashboard$LineChartDefaultSeriesSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-binding)]
      (. builder axisBinding data))
    (when-let [data (lookup-entry config id :line-style-settings)]
      (. builder lineStyleSettings data))
    (when-let [data (lookup-entry config id :marker-style-settings)]
      (. builder markerStyleSettings data))
    (.build builder)))


(defn cfn-dashboard-line-chart-field-wells-property-builder
  "The cfn-dashboard-line-chart-field-wells-property-builder function buildes out new instances of 
CfnDashboard$LineChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineChartAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$LineChartAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:line-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$LineChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :line-chart-aggregated-field-wells)]
      (. builder lineChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-line-chart-line-style-settings-property-builder
  "The cfn-dashboard-line-chart-line-style-settings-property-builder function buildes out new instances of 
CfnDashboard$LineChartLineStyleSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineInterpolation` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-interpolation` |
| `lineStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-style` |
| `lineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-visibility` |
| `lineWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-width` |"
  [stack id config]
  (let [builder (CfnDashboard$LineChartLineStyleSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :line-interpolation)]
      (. builder lineInterpolation data))
    (when-let [data (lookup-entry config id :line-style)]
      (. builder lineStyle data))
    (when-let [data (lookup-entry config id :line-visibility)]
      (. builder lineVisibility data))
    (when-let [data (lookup-entry config id :line-width)]
      (. builder lineWidth data))
    (.build builder)))


(defn cfn-dashboard-line-chart-marker-style-settings-property-builder
  "The cfn-dashboard-line-chart-marker-style-settings-property-builder function buildes out new instances of 
CfnDashboard$LineChartMarkerStyleSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `markerColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-color` |
| `markerShape` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-shape` |
| `markerSize` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-size` |
| `markerVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$LineChartMarkerStyleSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :marker-color)]
      (. builder markerColor data))
    (when-let [data (lookup-entry config id :marker-shape)]
      (. builder markerShape data))
    (when-let [data (lookup-entry config id :marker-size)]
      (. builder markerSize data))
    (when-let [data (lookup-entry config id :marker-visibility)]
      (. builder markerVisibility data))
    (.build builder)))


(defn cfn-dashboard-line-chart-series-settings-property-builder
  "The cfn-dashboard-line-chart-series-settings-property-builder function buildes out new instances of 
CfnDashboard$LineChartSeriesSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineStyleSettings` | software.amazon.awscdk.services.quicksight.CfnDashboard$LineChartLineStyleSettingsProperty | [[cdk.support/lookup-entry]] | `:line-style-settings` |
| `markerStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:marker-style-settings` |"
  [stack id config]
  (let [builder (CfnDashboard$LineChartSeriesSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :line-style-settings)]
      (. builder lineStyleSettings data))
    (when-let [data (lookup-entry config id :marker-style-settings)]
      (. builder markerStyleSettings data))
    (.build builder)))


(defn cfn-dashboard-line-chart-sort-configuration-property-builder
  "The cfn-dashboard-line-chart-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$LineChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit-configuration` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:color-items-limit-configuration` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |"
  [stack id config]
  (let [builder (CfnDashboard$LineChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit-configuration)]
      (. builder categoryItemsLimitConfiguration data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :color-items-limit-configuration)]
      (. builder colorItemsLimitConfiguration data))
    (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
      (. builder smallMultiplesLimitConfiguration data))
    (when-let [data (lookup-entry config id :small-multiples-sort)]
      (. builder smallMultiplesSort data))
    (.build builder)))


(defn cfn-dashboard-line-chart-visual-property-builder
  "The cfn-dashboard-line-chart-visual-property-builder function buildes out new instances of 
CfnDashboard$LineChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$LineChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$LineChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-line-series-axis-display-options-property-builder
  "The cfn-dashboard-line-series-axis-display-options-property-builder function buildes out new instances of 
CfnDashboard$LineSeriesAxisDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:axis-options` |
| `missingDataConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:missing-data-configurations` |"
  [stack id config]
  (let [builder (CfnDashboard$LineSeriesAxisDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-options)]
      (. builder axisOptions data))
    (when-let [data (lookup-entry config id :missing-data-configurations)]
      (. builder missingDataConfigurations data))
    (.build builder)))


(defn cfn-dashboard-link-sharing-configuration-property-builder
  "The cfn-dashboard-link-sharing-configuration-property-builder function buildes out new instances of 
CfnDashboard$LinkSharingConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `permissions` | java.util.List | [[cdk.support/lookup-entry]] | `:permissions` |"
  [stack id config]
  (let [builder (CfnDashboard$LinkSharingConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :permissions)]
      (. builder permissions data))
    (.build builder)))


(defn cfn-dashboard-list-control-display-options-property-builder
  "The cfn-dashboard-list-control-display-options-property-builder function buildes out new instances of 
CfnDashboard$ListControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `searchOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ListControlSearchOptionsProperty | [[cdk.support/lookup-entry]] | `:search-options` |
| `selectAllOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ListControlSelectAllOptionsProperty | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnDashboard$ListControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :search-options)]
      (. builder searchOptions data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-dashboard-list-control-search-options-property-builder
  "The cfn-dashboard-list-control-search-options-property-builder function buildes out new instances of 
CfnDashboard$ListControlSearchOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$ListControlSearchOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-list-control-select-all-options-property-builder
  "The cfn-dashboard-list-control-select-all-options-property-builder function buildes out new instances of 
CfnDashboard$ListControlSelectAllOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$ListControlSelectAllOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-loading-animation-property-builder
  "The cfn-dashboard-loading-animation-property-builder function buildes out new instances of 
CfnDashboard$LoadingAnimationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$LoadingAnimationProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-local-navigation-configuration-property-builder
  "The cfn-dashboard-local-navigation-configuration-property-builder function buildes out new instances of 
CfnDashboard$LocalNavigationConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetSheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:target-sheet-id` |"
  [stack id config]
  (let [builder (CfnDashboard$LocalNavigationConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :target-sheet-id)]
      (. builder targetSheetId data))
    (.build builder)))


(defn cfn-dashboard-long-format-text-property-builder
  "The cfn-dashboard-long-format-text-property-builder function buildes out new instances of 
CfnDashboard$LongFormatTextProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `plainText` | java.lang.String | [[cdk.support/lookup-entry]] | `:plain-text` |
| `richText` | java.lang.String | [[cdk.support/lookup-entry]] | `:rich-text` |"
  [stack id config]
  (let [builder (CfnDashboard$LongFormatTextProperty$Builder.)]
    (when-let [data (lookup-entry config id :plain-text)]
      (. builder plainText data))
    (when-let [data (lookup-entry config id :rich-text)]
      (. builder richText data))
    (.build builder)))


(defn cfn-dashboard-mapped-data-set-parameter-property-builder
  "The cfn-dashboard-mapped-data-set-parameter-property-builder function buildes out new instances of 
CfnDashboard$MappedDataSetParameterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `dataSetParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-parameter-name` |"
  [stack id config]
  (let [builder (CfnDashboard$MappedDataSetParameterProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :data-set-parameter-name)]
      (. builder dataSetParameterName data))
    (.build builder)))


(defn cfn-dashboard-maximum-label-type-property-builder
  "The cfn-dashboard-maximum-label-type-property-builder function buildes out new instances of 
CfnDashboard$MaximumLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$MaximumLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-maximum-minimum-computation-property-builder
  "The cfn-dashboard-maximum-minimum-computation-property-builder function buildes out new instances of 
CfnDashboard$MaximumMinimumComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `time` | software.amazon.awscdk.services.quicksight.CfnDashboard$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$MaximumMinimumComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-measure-field-property-builder
  "The cfn-dashboard-measure-field-property-builder function buildes out new instances of 
CfnDashboard$MeasureFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `calculatedMeasureField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:calculated-measure-field` |
| `categoricalMeasureField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:categorical-measure-field` |
| `dateMeasureField` | software.amazon.awscdk.services.quicksight.CfnDashboard$DateMeasureFieldProperty | [[cdk.support/lookup-entry]] | `:date-measure-field` |
| `numericalMeasureField` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumericalMeasureFieldProperty | [[cdk.support/lookup-entry]] | `:numerical-measure-field` |"
  [stack id config]
  (let [builder (CfnDashboard$MeasureFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :calculated-measure-field)]
      (. builder calculatedMeasureField data))
    (when-let [data (lookup-entry config id :categorical-measure-field)]
      (. builder categoricalMeasureField data))
    (when-let [data (lookup-entry config id :date-measure-field)]
      (. builder dateMeasureField data))
    (when-let [data (lookup-entry config id :numerical-measure-field)]
      (. builder numericalMeasureField data))
    (.build builder)))


(defn cfn-dashboard-metric-comparison-computation-property-builder
  "The cfn-dashboard-metric-comparison-computation-property-builder function buildes out new instances of 
CfnDashboard$MetricComparisonComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `fromValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:from-value` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `targetValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target-value` |
| `time` | software.amazon.awscdk.services.quicksight.CfnDashboard$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |"
  [stack id config]
  (let [builder (CfnDashboard$MetricComparisonComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :from-value)]
      (. builder fromValue data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :target-value)]
      (. builder targetValue data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (.build builder)))


(defn cfn-dashboard-minimum-label-type-property-builder
  "The cfn-dashboard-minimum-label-type-property-builder function buildes out new instances of 
CfnDashboard$MinimumLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$MinimumLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-missing-data-configuration-property-builder
  "The cfn-dashboard-missing-data-configuration-property-builder function buildes out new instances of 
CfnDashboard$MissingDataConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treatmentOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:treatment-option` |"
  [stack id config]
  (let [builder (CfnDashboard$MissingDataConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :treatment-option)]
      (. builder treatmentOption data))
    (.build builder)))


(defn cfn-dashboard-negative-value-configuration-property-builder
  "The cfn-dashboard-negative-value-configuration-property-builder function buildes out new instances of 
CfnDashboard$NegativeValueConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayMode` | java.lang.String | [[cdk.support/lookup-entry]] | `:display-mode` |"
  [stack id config]
  (let [builder (CfnDashboard$NegativeValueConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-mode)]
      (. builder displayMode data))
    (.build builder)))


(defn cfn-dashboard-null-value-format-configuration-property-builder
  "The cfn-dashboard-null-value-format-configuration-property-builder function buildes out new instances of 
CfnDashboard$NullValueFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `nullString` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-string` |"
  [stack id config]
  (let [builder (CfnDashboard$NullValueFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :null-string)]
      (. builder nullString data))
    (.build builder)))


(defn cfn-dashboard-number-display-format-configuration-property-builder
  "The cfn-dashboard-number-display-format-configuration-property-builder function buildes out new instances of 
CfnDashboard$NumberDisplayFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DecimalPlacesConfigurationProperty | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NegativeValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numberScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:number-scale` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |"
  [stack id config]
  (let [builder (CfnDashboard$NumberDisplayFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :decimal-places-configuration)]
      (. builder decimalPlacesConfiguration data))
    (when-let [data (lookup-entry config id :negative-value-configuration)]
      (. builder negativeValueConfiguration data))
    (when-let [data (lookup-entry config id :null-value-format-configuration)]
      (. builder nullValueFormatConfiguration data))
    (when-let [data (lookup-entry config id :number-scale)]
      (. builder numberScale data))
    (when-let [data (lookup-entry config id :prefix)]
      (. builder prefix data))
    (when-let [data (lookup-entry config id :separator-configuration)]
      (. builder separatorConfiguration data))
    (when-let [data (lookup-entry config id :suffix)]
      (. builder suffix data))
    (.build builder)))


(defn cfn-dashboard-number-format-configuration-property-builder
  "The cfn-dashboard-number-format-configuration-property-builder function buildes out new instances of 
CfnDashboard$NumberFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$NumberFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (.build builder)))


(defn cfn-dashboard-numeric-axis-options-property-builder
  "The cfn-dashboard-numeric-axis-options-property-builder function buildes out new instances of 
CfnDashboard$NumericAxisOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `range` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range` |
| `scale` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisScaleProperty | [[cdk.support/lookup-entry]] | `:scale` |"
  [stack id config]
  (let [builder (CfnDashboard$NumericAxisOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :range)]
      (. builder range data))
    (when-let [data (lookup-entry config id :scale)]
      (. builder scale data))
    (.build builder)))


(defn cfn-dashboard-numeric-equality-drill-down-filter-property-builder
  "The cfn-dashboard-numeric-equality-drill-down-filter-property-builder function buildes out new instances of 
CfnDashboard$NumericEqualityDrillDownFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$NumericEqualityDrillDownFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-numeric-equality-filter-property-builder
  "The cfn-dashboard-numeric-equality-filter-property-builder function buildes out new instances of 
CfnDashboard$NumericEqualityFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnDashboard$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$NumericEqualityFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :match-operator)]
      (. builder matchOperator data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-numeric-format-configuration-property-builder
  "The cfn-dashboard-numeric-format-configuration-property-builder function buildes out new instances of 
CfnDashboard$NumericFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `currencyDisplayFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$CurrencyDisplayFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:currency-display-format-configuration` |
| `numberDisplayFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumberDisplayFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:number-display-format-configuration` |
| `percentageDisplayFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:percentage-display-format-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$NumericFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :currency-display-format-configuration)]
      (. builder currencyDisplayFormatConfiguration data))
    (when-let [data (lookup-entry config id :number-display-format-configuration)]
      (. builder numberDisplayFormatConfiguration data))
    (when-let [data (lookup-entry config id :percentage-display-format-configuration)]
      (. builder percentageDisplayFormatConfiguration data))
    (.build builder)))


(defn cfn-dashboard-numeric-range-filter-property-builder
  "The cfn-dashboard-numeric-range-filter-property-builder function buildes out new instances of 
CfnDashboard$NumericRangeFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnDashboard$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `includeMaximum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-maximum` |
| `includeMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-minimum` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `rangeMaximum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-maximum` |
| `rangeMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-minimum` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |"
  [stack id config]
  (let [builder (CfnDashboard$NumericRangeFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :include-maximum)]
      (. builder includeMaximum data))
    (when-let [data (lookup-entry config id :include-minimum)]
      (. builder includeMinimum data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :range-maximum)]
      (. builder rangeMaximum data))
    (when-let [data (lookup-entry config id :range-minimum)]
      (. builder rangeMinimum data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (.build builder)))


(defn cfn-dashboard-numeric-range-filter-value-property-builder
  "The cfn-dashboard-numeric-range-filter-value-property-builder function buildes out new instances of 
CfnDashboard$NumericRangeFilterValueProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameter` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter` |
| `staticValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:static-value` |"
  [stack id config]
  (let [builder (CfnDashboard$NumericRangeFilterValueProperty$Builder.)]
    (when-let [data (lookup-entry config id :parameter)]
      (. builder parameter data))
    (when-let [data (lookup-entry config id :static-value)]
      (. builder staticValue data))
    (.build builder)))


(defn cfn-dashboard-numeric-separator-configuration-property-builder
  "The cfn-dashboard-numeric-separator-configuration-property-builder function buildes out new instances of 
CfnDashboard$NumericSeparatorConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalSeparator` | java.lang.String | [[cdk.support/lookup-entry]] | `:decimal-separator` |
| `thousandsSeparator` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:thousands-separator` |"
  [stack id config]
  (let [builder (CfnDashboard$NumericSeparatorConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :decimal-separator)]
      (. builder decimalSeparator data))
    (when-let [data (lookup-entry config id :thousands-separator)]
      (. builder thousandsSeparator data))
    (.build builder)))


(defn cfn-dashboard-numerical-aggregation-function-property-builder
  "The cfn-dashboard-numerical-aggregation-function-property-builder function buildes out new instances of 
CfnDashboard$NumericalAggregationFunctionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentileAggregation` | software.amazon.awscdk.services.quicksight.CfnDashboard$PercentileAggregationProperty | [[cdk.support/lookup-entry]] | `:percentile-aggregation` |
| `simpleNumericalAggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-numerical-aggregation` |"
  [stack id config]
  (let [builder (CfnDashboard$NumericalAggregationFunctionProperty$Builder.)]
    (when-let [data (lookup-entry config id :percentile-aggregation)]
      (. builder percentileAggregation data))
    (when-let [data (lookup-entry config id :simple-numerical-aggregation)]
      (. builder simpleNumericalAggregation data))
    (.build builder)))


(defn cfn-dashboard-numerical-dimension-field-property-builder
  "The cfn-dashboard-numerical-dimension-field-property-builder function buildes out new instances of 
CfnDashboard$NumericalDimensionFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnDashboard$NumericalDimensionFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-dashboard-numerical-measure-field-property-builder
  "The cfn-dashboard-numerical-measure-field-property-builder function buildes out new instances of 
CfnDashboard$NumericalMeasureFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumberFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$NumericalMeasureFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (.build builder)))


(defn cfn-dashboard-pagination-configuration-property-builder
  "The cfn-dashboard-pagination-configuration-property-builder function buildes out new instances of 
CfnDashboard$PaginationConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pageNumber` | java.lang.Number | [[cdk.support/lookup-entry]] | `:page-number` |
| `pageSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:page-size` |"
  [stack id config]
  (let [builder (CfnDashboard$PaginationConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :page-number)]
      (. builder pageNumber data))
    (when-let [data (lookup-entry config id :page-size)]
      (. builder pageSize data))
    (.build builder)))


(defn cfn-dashboard-panel-configuration-property-builder
  "The cfn-dashboard-panel-configuration-property-builder function buildes out new instances of 
CfnDashboard$PanelConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-color` |
| `backgroundVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-visibility` |
| `borderColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-color` |
| `borderStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-style` |
| `borderThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-thickness` |
| `borderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-visibility` |
| `gutterSpacing` | java.lang.String | [[cdk.support/lookup-entry]] | `:gutter-spacing` |
| `gutterVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:gutter-visibility` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$PanelTitleOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnDashboard$PanelConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-color)]
      (. builder backgroundColor data))
    (when-let [data (lookup-entry config id :background-visibility)]
      (. builder backgroundVisibility data))
    (when-let [data (lookup-entry config id :border-color)]
      (. builder borderColor data))
    (when-let [data (lookup-entry config id :border-style)]
      (. builder borderStyle data))
    (when-let [data (lookup-entry config id :border-thickness)]
      (. builder borderThickness data))
    (when-let [data (lookup-entry config id :border-visibility)]
      (. builder borderVisibility data))
    (when-let [data (lookup-entry config id :gutter-spacing)]
      (. builder gutterSpacing data))
    (when-let [data (lookup-entry config id :gutter-visibility)]
      (. builder gutterVisibility data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-dashboard-panel-title-options-property-builder
  "The cfn-dashboard-panel-title-options-property-builder function buildes out new instances of 
CfnDashboard$PanelTitleOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `horizontalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-text-alignment` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$PanelTitleOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (when-let [data (lookup-entry config id :horizontal-text-alignment)]
      (. builder horizontalTextAlignment data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-parameter-control-property-builder
  "The cfn-dashboard-parameter-control-property-builder function buildes out new instances of 
CfnDashboard$ParameterControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimePicker` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-time-picker` |
| `dropdown` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dropdown` |
| `list` | software.amazon.awscdk.services.quicksight.CfnDashboard$ParameterListControlProperty | [[cdk.support/lookup-entry]] | `:list` |
| `slider` | software.amazon.awscdk.services.quicksight.CfnDashboard$ParameterSliderControlProperty | [[cdk.support/lookup-entry]] | `:slider` |
| `textArea` | software.amazon.awscdk.services.quicksight.CfnDashboard$ParameterTextAreaControlProperty | [[cdk.support/lookup-entry]] | `:text-area` |
| `textField` | software.amazon.awscdk.services.quicksight.CfnDashboard$ParameterTextFieldControlProperty | [[cdk.support/lookup-entry]] | `:text-field` |"
  [stack id config]
  (let [builder (CfnDashboard$ParameterControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-picker)]
      (. builder dateTimePicker data))
    (when-let [data (lookup-entry config id :dropdown)]
      (. builder dropdown data))
    (when-let [data (lookup-entry config id :list)]
      (. builder list data))
    (when-let [data (lookup-entry config id :slider)]
      (. builder slider data))
    (when-let [data (lookup-entry config id :text-area)]
      (. builder textArea data))
    (when-let [data (lookup-entry config id :text-field)]
      (. builder textField data))
    (.build builder)))


(defn cfn-dashboard-parameter-date-time-picker-control-property-builder
  "The cfn-dashboard-parameter-date-time-picker-control-property-builder function buildes out new instances of 
CfnDashboard$ParameterDateTimePickerControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnDashboard$ParameterDateTimePickerControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-dashboard-parameter-declaration-property-builder
  "The cfn-dashboard-parameter-declaration-property-builder function buildes out new instances of 
CfnDashboard$ParameterDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeParameterDeclaration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-time-parameter-declaration` |
| `decimalParameterDeclaration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-parameter-declaration` |
| `integerParameterDeclaration` | software.amazon.awscdk.services.quicksight.CfnDashboard$IntegerParameterDeclarationProperty | [[cdk.support/lookup-entry]] | `:integer-parameter-declaration` |
| `stringParameterDeclaration` | software.amazon.awscdk.services.quicksight.CfnDashboard$StringParameterDeclarationProperty | [[cdk.support/lookup-entry]] | `:string-parameter-declaration` |"
  [stack id config]
  (let [builder (CfnDashboard$ParameterDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-parameter-declaration)]
      (. builder dateTimeParameterDeclaration data))
    (when-let [data (lookup-entry config id :decimal-parameter-declaration)]
      (. builder decimalParameterDeclaration data))
    (when-let [data (lookup-entry config id :integer-parameter-declaration)]
      (. builder integerParameterDeclaration data))
    (when-let [data (lookup-entry config id :string-parameter-declaration)]
      (. builder stringParameterDeclaration data))
    (.build builder)))


(defn cfn-dashboard-parameter-drop-down-control-property-builder
  "The cfn-dashboard-parameter-drop-down-control-property-builder function buildes out new instances of 
CfnDashboard$ParameterDropDownControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$DropDownControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `selectableValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnDashboard$ParameterDropDownControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cascading-control-configuration)]
      (. builder cascadingControlConfiguration data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-dashboard-parameter-list-control-property-builder
  "The cfn-dashboard-parameter-list-control-property-builder function buildes out new instances of 
CfnDashboard$ParameterListControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ListControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `selectableValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnDashboard$ParameterListControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cascading-control-configuration)]
      (. builder cascadingControlConfiguration data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-dashboard-parameter-selectable-values-property-builder
  "The cfn-dashboard-parameter-selectable-values-property-builder function buildes out new instances of 
CfnDashboard$ParameterSelectableValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `linkToDataSetColumn` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:link-to-data-set-column` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$ParameterSelectableValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :link-to-data-set-column)]
      (. builder linkToDataSetColumn data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-parameter-slider-control-property-builder
  "The cfn-dashboard-parameter-slider-control-property-builder function buildes out new instances of 
CfnDashboard$ParameterSliderControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnDashboard$ParameterSliderControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :maximum-value)]
      (. builder maximumValue data))
    (when-let [data (lookup-entry config id :minimum-value)]
      (. builder minimumValue data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :step-size)]
      (. builder stepSize data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-dashboard-parameter-text-area-control-property-builder
  "The cfn-dashboard-parameter-text-area-control-property-builder function buildes out new instances of 
CfnDashboard$ParameterTextAreaControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnDashboard$ParameterTextAreaControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :delimiter)]
      (. builder delimiter data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-dashboard-parameter-text-field-control-property-builder
  "The cfn-dashboard-parameter-text-field-control-property-builder function buildes out new instances of 
CfnDashboard$ParameterTextFieldControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnDashboard$ParameterTextFieldControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-dashboard-parameters-property-builder
  "The cfn-dashboard-parameters-property-builder function buildes out new instances of 
CfnDashboard$ParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:date-time-parameters` |
| `decimalParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:decimal-parameters` |
| `integerParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:integer-parameters` |
| `stringParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:string-parameters` |"
  [stack id config]
  (let [builder (CfnDashboard$ParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-parameters)]
      (. builder dateTimeParameters data))
    (when-let [data (lookup-entry config id :decimal-parameters)]
      (. builder decimalParameters data))
    (when-let [data (lookup-entry config id :integer-parameters)]
      (. builder integerParameters data))
    (when-let [data (lookup-entry config id :string-parameters)]
      (. builder stringParameters data))
    (.build builder)))


(defn cfn-dashboard-percent-visible-range-property-builder
  "The cfn-dashboard-percent-visible-range-property-builder function buildes out new instances of 
CfnDashboard$PercentVisibleRangeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `from` | java.lang.Number | [[cdk.support/lookup-entry]] | `:from` |
| `to` | java.lang.Number | [[cdk.support/lookup-entry]] | `:to` |"
  [stack id config]
  (let [builder (CfnDashboard$PercentVisibleRangeProperty$Builder.)]
    (when-let [data (lookup-entry config id :from)]
      (. builder from data))
    (when-let [data (lookup-entry config id :to)]
      (. builder to data))
    (.build builder)))


(defn cfn-dashboard-percentage-display-format-configuration-property-builder
  "The cfn-dashboard-percentage-display-format-configuration-property-builder function buildes out new instances of 
CfnDashboard$PercentageDisplayFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DecimalPlacesConfigurationProperty | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |"
  [stack id config]
  (let [builder (CfnDashboard$PercentageDisplayFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :decimal-places-configuration)]
      (. builder decimalPlacesConfiguration data))
    (when-let [data (lookup-entry config id :negative-value-configuration)]
      (. builder negativeValueConfiguration data))
    (when-let [data (lookup-entry config id :null-value-format-configuration)]
      (. builder nullValueFormatConfiguration data))
    (when-let [data (lookup-entry config id :prefix)]
      (. builder prefix data))
    (when-let [data (lookup-entry config id :separator-configuration)]
      (. builder separatorConfiguration data))
    (when-let [data (lookup-entry config id :suffix)]
      (. builder suffix data))
    (.build builder)))


(defn cfn-dashboard-percentile-aggregation-property-builder
  "The cfn-dashboard-percentile-aggregation-property-builder function buildes out new instances of 
CfnDashboard$PercentileAggregationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentileValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:percentile-value` |"
  [stack id config]
  (let [builder (CfnDashboard$PercentileAggregationProperty$Builder.)]
    (when-let [data (lookup-entry config id :percentile-value)]
      (. builder percentileValue data))
    (.build builder)))


(defn cfn-dashboard-period-over-period-computation-property-builder
  "The cfn-dashboard-period-over-period-computation-property-builder function buildes out new instances of 
CfnDashboard$PeriodOverPeriodComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.services.quicksight.CfnDashboard$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$PeriodOverPeriodComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-period-to-date-computation-property-builder
  "The cfn-dashboard-period-to-date-computation-property-builder function buildes out new instances of 
CfnDashboard$PeriodToDateComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodTimeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:period-time-granularity` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$PeriodToDateComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :period-time-granularity)]
      (. builder periodTimeGranularity data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-pie-chart-aggregated-field-wells-property-builder
  "The cfn-dashboard-pie-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$PieChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `smallMultiples` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$PieChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :small-multiples)]
      (. builder smallMultiples data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-pie-chart-configuration-property-builder
  "The cfn-dashboard-pie-chart-configuration-property-builder function buildes out new instances of 
CfnDashboard$PieChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `contributionAnalysisDefaults` | java.util.List | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `donutOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$DonutOptionsProperty | [[cdk.support/lookup-entry]] | `:donut-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `smallMultiplesOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$SmallMultiplesOptionsProperty | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$PieChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnDashboard$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnDashboard$PieChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
      (. builder contributionAnalysisDefaults data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :donut-options)]
      (. builder donutOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :small-multiples-options)]
      (. builder smallMultiplesOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :value-label-options)]
      (. builder valueLabelOptions data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-dashboard-pie-chart-field-wells-property-builder
  "The cfn-dashboard-pie-chart-field-wells-property-builder function buildes out new instances of 
CfnDashboard$PieChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pieChartAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$PieChartAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:pie-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$PieChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :pie-chart-aggregated-field-wells)]
      (. builder pieChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-pie-chart-sort-configuration-property-builder
  "The cfn-dashboard-pie-chart-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$PieChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |"
  [stack id config]
  (let [builder (CfnDashboard$PieChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
      (. builder smallMultiplesLimitConfiguration data))
    (when-let [data (lookup-entry config id :small-multiples-sort)]
      (. builder smallMultiplesSort data))
    (.build builder)))


(defn cfn-dashboard-pie-chart-visual-property-builder
  "The cfn-dashboard-pie-chart-visual-property-builder function buildes out new instances of 
CfnDashboard$PieChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$PieChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$PieChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-pivot-field-sort-options-property-builder
  "The cfn-dashboard-pivot-field-sort-options-property-builder function buildes out new instances of 
CfnDashboard$PivotFieldSortOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `sortBy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-by` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotFieldSortOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :sort-by)]
      (. builder sortBy data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-aggregated-field-wells-property-builder
  "The cfn-dashboard-pivot-table-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$PivotTableAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:columns` |
| `rows` | java.util.List | [[cdk.support/lookup-entry]] | `:rows` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (when-let [data (lookup-entry config id :rows)]
      (. builder rows data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-cell-conditional-formatting-property-builder
  "The cfn-dashboard-pivot-table-cell-conditional-formatting-property-builder function buildes out new instances of 
CfnDashboard$PivotTableCellConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `scope` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableConditionalFormattingScopeProperty | [[cdk.support/lookup-entry]] | `:scope` |
| `scopes` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scopes` |
| `textFormat` | software.amazon.awscdk.services.quicksight.CfnDashboard$TextConditionalFormatProperty | [[cdk.support/lookup-entry]] | `:text-format` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableCellConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :scope)]
      (. builder scope data))
    (when-let [data (lookup-entry config id :scopes)]
      (. builder scopes data))
    (when-let [data (lookup-entry config id :text-format)]
      (. builder textFormat data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-conditional-formatting-option-property-builder
  "The cfn-dashboard-pivot-table-conditional-formatting-option-property-builder function buildes out new instances of 
CfnDashboard$PivotTableConditionalFormattingOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cell` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cell` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableConditionalFormattingOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :cell)]
      (. builder cell data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-conditional-formatting-property-builder
  "The cfn-dashboard-pivot-table-conditional-formatting-property-builder function buildes out new instances of 
CfnDashboard$PivotTableConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :conditional-formatting-options)]
      (. builder conditionalFormattingOptions data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-conditional-formatting-scope-property-builder
  "The cfn-dashboard-pivot-table-conditional-formatting-scope-property-builder function buildes out new instances of 
CfnDashboard$PivotTableConditionalFormattingScopeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `role` | java.lang.String | [[cdk.support/lookup-entry]] | `:role` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableConditionalFormattingScopeProperty$Builder.)]
    (when-let [data (lookup-entry config id :role)]
      (. builder role data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-configuration-property-builder
  "The cfn-dashboard-pivot-table-configuration-property-builder function buildes out new instances of 
CfnDashboard$PivotTableConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `paginatedReportOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:paginated-report-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tableOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:table-options` |
| `totalOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableTotalOptionsProperty | [[cdk.support/lookup-entry]] | `:total-options` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-options)]
      (. builder fieldOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :paginated-report-options)]
      (. builder paginatedReportOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :table-options)]
      (. builder tableOptions data))
    (when-let [data (lookup-entry config id :total-options)]
      (. builder totalOptions data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-data-path-option-property-builder
  "The cfn-dashboard-pivot-table-data-path-option-property-builder function buildes out new instances of 
CfnDashboard$PivotTableDataPathOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathList` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-path-list` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableDataPathOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-path-list)]
      (. builder dataPathList data))
    (when-let [data (lookup-entry config id :width)]
      (. builder width data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-field-collapse-state-option-property-builder
  "The cfn-dashboard-pivot-table-field-collapse-state-option-property-builder function buildes out new instances of 
CfnDashboard$PivotTableFieldCollapseStateOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `state` | java.lang.String | [[cdk.support/lookup-entry]] | `:state` |
| `target` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableFieldCollapseStateOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :state)]
      (. builder state data))
    (when-let [data (lookup-entry config id :target)]
      (. builder target data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-field-collapse-state-target-property-builder
  "The cfn-dashboard-pivot-table-field-collapse-state-target-property-builder function buildes out new instances of 
CfnDashboard$PivotTableFieldCollapseStateTargetProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldDataPathValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-data-path-values` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableFieldCollapseStateTargetProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-data-path-values)]
      (. builder fieldDataPathValues data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-field-option-property-builder
  "The cfn-dashboard-pivot-table-field-option-property-builder function buildes out new instances of 
CfnDashboard$PivotTableFieldOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableFieldOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-field-options-property-builder
  "The cfn-dashboard-pivot-table-field-options-property-builder function buildes out new instances of 
CfnDashboard$PivotTableFieldOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `collapseStateOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:collapse-state-options` |
| `dataPathOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-path-options` |
| `selectedFieldOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:selected-field-options` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableFieldOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :collapse-state-options)]
      (. builder collapseStateOptions data))
    (when-let [data (lookup-entry config id :data-path-options)]
      (. builder dataPathOptions data))
    (when-let [data (lookup-entry config id :selected-field-options)]
      (. builder selectedFieldOptions data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-field-subtotal-options-property-builder
  "The cfn-dashboard-pivot-table-field-subtotal-options-property-builder function buildes out new instances of 
CfnDashboard$PivotTableFieldSubtotalOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableFieldSubtotalOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-field-wells-property-builder
  "The cfn-dashboard-pivot-table-field-wells-property-builder function buildes out new instances of 
CfnDashboard$PivotTableFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pivotTableAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:pivot-table-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :pivot-table-aggregated-field-wells)]
      (. builder pivotTableAggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-options-property-builder
  "The cfn-dashboard-pivot-table-options-property-builder function buildes out new instances of 
CfnDashboard$PivotTableOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:cell-style` |
| `collapsedRowDimensionsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:collapsed-row-dimensions-visibility` |
| `columnHeaderStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-header-style` |
| `columnNamesVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-names-visibility` |
| `defaultCellWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:default-cell-width` |
| `metricPlacement` | java.lang.String | [[cdk.support/lookup-entry]] | `:metric-placement` |
| `rowAlternateColorOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$RowAlternateColorOptionsProperty | [[cdk.support/lookup-entry]] | `:row-alternate-color-options` |
| `rowFieldNamesStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:row-field-names-style` |
| `rowHeaderStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:row-header-style` |
| `rowsLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableRowsLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:rows-label-options` |
| `rowsLayout` | java.lang.String | [[cdk.support/lookup-entry]] | `:rows-layout` |
| `singleMetricVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:single-metric-visibility` |
| `toggleButtonsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:toggle-buttons-visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :cell-style)]
      (. builder cellStyle data))
    (when-let [data (lookup-entry config id :collapsed-row-dimensions-visibility)]
      (. builder collapsedRowDimensionsVisibility data))
    (when-let [data (lookup-entry config id :column-header-style)]
      (. builder columnHeaderStyle data))
    (when-let [data (lookup-entry config id :column-names-visibility)]
      (. builder columnNamesVisibility data))
    (when-let [data (lookup-entry config id :default-cell-width)]
      (. builder defaultCellWidth data))
    (when-let [data (lookup-entry config id :metric-placement)]
      (. builder metricPlacement data))
    (when-let [data (lookup-entry config id :row-alternate-color-options)]
      (. builder rowAlternateColorOptions data))
    (when-let [data (lookup-entry config id :row-field-names-style)]
      (. builder rowFieldNamesStyle data))
    (when-let [data (lookup-entry config id :row-header-style)]
      (. builder rowHeaderStyle data))
    (when-let [data (lookup-entry config id :rows-label-options)]
      (. builder rowsLabelOptions data))
    (when-let [data (lookup-entry config id :rows-layout)]
      (. builder rowsLayout data))
    (when-let [data (lookup-entry config id :single-metric-visibility)]
      (. builder singleMetricVisibility data))
    (when-let [data (lookup-entry config id :toggle-buttons-visibility)]
      (. builder toggleButtonsVisibility data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-paginated-report-options-property-builder
  "The cfn-dashboard-pivot-table-paginated-report-options-property-builder function buildes out new instances of 
CfnDashboard$PivotTablePaginatedReportOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `overflowColumnHeaderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:overflow-column-header-visibility` |
| `verticalOverflowVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-overflow-visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTablePaginatedReportOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :overflow-column-header-visibility)]
      (. builder overflowColumnHeaderVisibility data))
    (when-let [data (lookup-entry config id :vertical-overflow-visibility)]
      (. builder verticalOverflowVisibility data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-rows-label-options-property-builder
  "The cfn-dashboard-pivot-table-rows-label-options-property-builder function buildes out new instances of 
CfnDashboard$PivotTableRowsLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableRowsLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-sort-by-property-builder
  "The cfn-dashboard-pivot-table-sort-by-property-builder function buildes out new instances of 
CfnDashboard$PivotTableSortByProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnSortProperty | [[cdk.support/lookup-entry]] | `:column` |
| `dataPath` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-path` |
| `field` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableSortByProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :data-path)]
      (. builder dataPath data))
    (when-let [data (lookup-entry config id :field)]
      (. builder field data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-sort-configuration-property-builder
  "The cfn-dashboard-pivot-table-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$PivotTableSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldSortOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-sort-options` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-sort-options)]
      (. builder fieldSortOptions data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-total-options-property-builder
  "The cfn-dashboard-pivot-table-total-options-property-builder function buildes out new instances of 
CfnDashboard$PivotTableTotalOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnSubtotalOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$SubtotalOptionsProperty | [[cdk.support/lookup-entry]] | `:column-subtotal-options` |
| `columnTotalOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-total-options` |
| `rowSubtotalOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-subtotal-options` |
| `rowTotalOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTotalOptionsProperty | [[cdk.support/lookup-entry]] | `:row-total-options` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableTotalOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-subtotal-options)]
      (. builder columnSubtotalOptions data))
    (when-let [data (lookup-entry config id :column-total-options)]
      (. builder columnTotalOptions data))
    (when-let [data (lookup-entry config id :row-subtotal-options)]
      (. builder rowSubtotalOptions data))
    (when-let [data (lookup-entry config id :row-total-options)]
      (. builder rowTotalOptions data))
    (.build builder)))


(defn cfn-dashboard-pivot-table-visual-property-builder
  "The cfn-dashboard-pivot-table-visual-property-builder function buildes out new instances of 
CfnDashboard$PivotTableVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTableVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :conditional-formatting)]
      (. builder conditionalFormatting data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-pivot-total-options-property-builder
  "The cfn-dashboard-pivot-total-options-property-builder function buildes out new instances of 
CfnDashboard$PivotTotalOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `metricHeaderCellStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:metric-header-cell-style` |
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scrollStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:scroll-status` |
| `totalAggregationOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-aggregation-options` |
| `totalCellStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `valueCellStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:value-cell-style` |"
  [stack id config]
  (let [builder (CfnDashboard$PivotTotalOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :metric-header-cell-style)]
      (. builder metricHeaderCellStyle data))
    (when-let [data (lookup-entry config id :placement)]
      (. builder placement data))
    (when-let [data (lookup-entry config id :scroll-status)]
      (. builder scrollStatus data))
    (when-let [data (lookup-entry config id :total-aggregation-options)]
      (. builder totalAggregationOptions data))
    (when-let [data (lookup-entry config id :total-cell-style)]
      (. builder totalCellStyle data))
    (when-let [data (lookup-entry config id :totals-visibility)]
      (. builder totalsVisibility data))
    (when-let [data (lookup-entry config id :value-cell-style)]
      (. builder valueCellStyle data))
    (.build builder)))


(defn cfn-dashboard-predefined-hierarchy-property-builder
  "The cfn-dashboard-predefined-hierarchy-property-builder function buildes out new instances of 
CfnDashboard$PredefinedHierarchyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:columns` |
| `drillDownFilters` | java.util.List | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnDashboard$PredefinedHierarchyProperty$Builder.)]
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (when-let [data (lookup-entry config id :drill-down-filters)]
      (. builder drillDownFilters data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-dashboard-progress-bar-options-property-builder
  "The cfn-dashboard-progress-bar-options-property-builder function buildes out new instances of 
CfnDashboard$ProgressBarOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$ProgressBarOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-props-builder
  "The cfn-dashboard-props-builder function buildes out new instances of 
CfnDashboardProps$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `dashboardId` | java.lang.String | [[cdk.support/lookup-entry]] | `:dashboard-id` |
| `dashboardPublishOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dashboard-publish-options` |
| `definition` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:definition` |
| `linkEntities` | java.util.List | [[cdk.support/lookup-entry]] | `:link-entities` |
| `linkSharingConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:link-sharing-configuration` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameters` |
| `permissions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:permissions` |
| `sourceEntity` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-entity` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `themeArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:theme-arn` |
| `validationStrategy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:validation-strategy` |
| `versionDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:version-description` |"
  [stack id config]
  (let [builder (CfnDashboardProps$Builder.)]
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :dashboard-id)]
      (. builder dashboardId data))
    (when-let [data (lookup-entry config id :dashboard-publish-options)]
      (. builder dashboardPublishOptions data))
    (when-let [data (lookup-entry config id :definition)]
      (. builder definition data))
    (when-let [data (lookup-entry config id :link-entities)]
      (. builder linkEntities data))
    (when-let [data (lookup-entry config id :link-sharing-configuration)]
      (. builder linkSharingConfiguration data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :parameters)]
      (. builder parameters data))
    (when-let [data (lookup-entry config id :permissions)]
      (. builder permissions data))
    (when-let [data (lookup-entry config id :source-entity)]
      (. builder sourceEntity data))
    (when-let [data (lookup-entry config id :tags)]
      (. builder tags data))
    (when-let [data (lookup-entry config id :theme-arn)]
      (. builder themeArn data))
    (when-let [data (lookup-entry config id :validation-strategy)]
      (. builder validationStrategy data))
    (when-let [data (lookup-entry config id :version-description)]
      (. builder versionDescription data))
    (.build builder)))


(defn cfn-dashboard-radar-chart-aggregated-field-wells-property-builder
  "The cfn-dashboard-radar-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$RadarChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `color` | java.util.List | [[cdk.support/lookup-entry]] | `:color` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$RadarChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-radar-chart-area-style-settings-property-builder
  "The cfn-dashboard-radar-chart-area-style-settings-property-builder function buildes out new instances of 
CfnDashboard$RadarChartAreaStyleSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$RadarChartAreaStyleSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-radar-chart-configuration-property-builder
  "The cfn-dashboard-radar-chart-configuration-property-builder function buildes out new instances of 
CfnDashboard$RadarChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `alternateBandColorsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-colors-visibility` |
| `alternateBandEvenColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-even-color` |
| `alternateBandOddColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-odd-color` |
| `axesRangeScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:axes-range-scale` |
| `baseSeriesSettings` | software.amazon.awscdk.services.quicksight.CfnDashboard$RadarChartSeriesSettingsProperty | [[cdk.support/lookup-entry]] | `:base-series-settings` |
| `categoryAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorAxis` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:color-axis` |
| `colorLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnDashboard$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `shape` | java.lang.String | [[cdk.support/lookup-entry]] | `:shape` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `startAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:start-angle` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnDashboard$RadarChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :alternate-band-colors-visibility)]
      (. builder alternateBandColorsVisibility data))
    (when-let [data (lookup-entry config id :alternate-band-even-color)]
      (. builder alternateBandEvenColor data))
    (when-let [data (lookup-entry config id :alternate-band-odd-color)]
      (. builder alternateBandOddColor data))
    (when-let [data (lookup-entry config id :axes-range-scale)]
      (. builder axesRangeScale data))
    (when-let [data (lookup-entry config id :base-series-settings)]
      (. builder baseSeriesSettings data))
    (when-let [data (lookup-entry config id :category-axis)]
      (. builder categoryAxis data))
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :color-axis)]
      (. builder colorAxis data))
    (when-let [data (lookup-entry config id :color-label-options)]
      (. builder colorLabelOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :shape)]
      (. builder shape data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :start-angle)]
      (. builder startAngle data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-dashboard-radar-chart-field-wells-property-builder
  "The cfn-dashboard-radar-chart-field-wells-property-builder function buildes out new instances of 
CfnDashboard$RadarChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `radarChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:radar-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$RadarChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :radar-chart-aggregated-field-wells)]
      (. builder radarChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-radar-chart-series-settings-property-builder
  "The cfn-dashboard-radar-chart-series-settings-property-builder function buildes out new instances of 
CfnDashboard$RadarChartSeriesSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `areaStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:area-style-settings` |"
  [stack id config]
  (let [builder (CfnDashboard$RadarChartSeriesSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :area-style-settings)]
      (. builder areaStyleSettings data))
    (.build builder)))


(defn cfn-dashboard-radar-chart-sort-configuration-property-builder
  "The cfn-dashboard-radar-chart-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$RadarChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-sort` |"
  [stack id config]
  (let [builder (CfnDashboard$RadarChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :color-items-limit)]
      (. builder colorItemsLimit data))
    (when-let [data (lookup-entry config id :color-sort)]
      (. builder colorSort data))
    (.build builder)))


(defn cfn-dashboard-radar-chart-visual-property-builder
  "The cfn-dashboard-radar-chart-visual-property-builder function buildes out new instances of 
CfnDashboard$RadarChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$RadarChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-range-ends-label-type-property-builder
  "The cfn-dashboard-range-ends-label-type-property-builder function buildes out new instances of 
CfnDashboard$RangeEndsLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$RangeEndsLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-reference-line-custom-label-configuration-property-builder
  "The cfn-dashboard-reference-line-custom-label-configuration-property-builder function buildes out new instances of 
CfnDashboard$ReferenceLineCustomLabelConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |"
  [stack id config]
  (let [builder (CfnDashboard$ReferenceLineCustomLabelConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (.build builder)))


(defn cfn-dashboard-reference-line-data-configuration-property-builder
  "The cfn-dashboard-reference-line-data-configuration-property-builder function buildes out new instances of 
CfnDashboard$ReferenceLineDataConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `dynamicConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ReferenceLineDynamicDataConfigurationProperty | [[cdk.support/lookup-entry]] | `:dynamic-configuration` |
| `seriesType` | java.lang.String | [[cdk.support/lookup-entry]] | `:series-type` |
| `staticConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:static-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$ReferenceLineDataConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-binding)]
      (. builder axisBinding data))
    (when-let [data (lookup-entry config id :dynamic-configuration)]
      (. builder dynamicConfiguration data))
    (when-let [data (lookup-entry config id :series-type)]
      (. builder seriesType data))
    (when-let [data (lookup-entry config id :static-configuration)]
      (. builder staticConfiguration data))
    (.build builder)))


(defn cfn-dashboard-reference-line-dynamic-data-configuration-property-builder
  "The cfn-dashboard-reference-line-dynamic-data-configuration-property-builder function buildes out new instances of 
CfnDashboard$ReferenceLineDynamicDataConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `calculation` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumericalAggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:calculation` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `measureAggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:measure-aggregation-function` |"
  [stack id config]
  (let [builder (CfnDashboard$ReferenceLineDynamicDataConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :calculation)]
      (. builder calculation data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :measure-aggregation-function)]
      (. builder measureAggregationFunction data))
    (.build builder)))


(defn cfn-dashboard-reference-line-label-configuration-property-builder
  "The cfn-dashboard-reference-line-label-configuration-property-builder function buildes out new instances of 
CfnDashboard$ReferenceLineLabelConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabelConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ReferenceLineCustomLabelConfigurationProperty | [[cdk.support/lookup-entry]] | `:custom-label-configuration` |
| `fontColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-color` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `horizontalPosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-position` |
| `valueLabelConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ReferenceLineValueLabelConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-label-configuration` |
| `verticalPosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-position` |"
  [stack id config]
  (let [builder (CfnDashboard$ReferenceLineLabelConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label-configuration)]
      (. builder customLabelConfiguration data))
    (when-let [data (lookup-entry config id :font-color)]
      (. builder fontColor data))
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (when-let [data (lookup-entry config id :horizontal-position)]
      (. builder horizontalPosition data))
    (when-let [data (lookup-entry config id :value-label-configuration)]
      (. builder valueLabelConfiguration data))
    (when-let [data (lookup-entry config id :vertical-position)]
      (. builder verticalPosition data))
    (.build builder)))


(defn cfn-dashboard-reference-line-property-builder
  "The cfn-dashboard-reference-line-property-builder function buildes out new instances of 
CfnDashboard$ReferenceLineProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-configuration` |
| `labelConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ReferenceLineLabelConfigurationProperty | [[cdk.support/lookup-entry]] | `:label-configuration` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `styleConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$ReferenceLineProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-configuration)]
      (. builder dataConfiguration data))
    (when-let [data (lookup-entry config id :label-configuration)]
      (. builder labelConfiguration data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (when-let [data (lookup-entry config id :style-configuration)]
      (. builder styleConfiguration data))
    (.build builder)))


(defn cfn-dashboard-reference-line-static-data-configuration-property-builder
  "The cfn-dashboard-reference-line-static-data-configuration-property-builder function buildes out new instances of 
CfnDashboard$ReferenceLineStaticDataConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$ReferenceLineStaticDataConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-reference-line-style-configuration-property-builder
  "The cfn-dashboard-reference-line-style-configuration-property-builder function buildes out new instances of 
CfnDashboard$ReferenceLineStyleConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `pattern` | java.lang.String | [[cdk.support/lookup-entry]] | `:pattern` |"
  [stack id config]
  (let [builder (CfnDashboard$ReferenceLineStyleConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :pattern)]
      (. builder pattern data))
    (.build builder)))


(defn cfn-dashboard-reference-line-value-label-configuration-property-builder
  "The cfn-dashboard-reference-line-value-label-configuration-property-builder function buildes out new instances of 
CfnDashboard$ReferenceLineValueLabelConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumericFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `relativePosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative-position` |"
  [stack id config]
  (let [builder (CfnDashboard$ReferenceLineValueLabelConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (when-let [data (lookup-entry config id :relative-position)]
      (. builder relativePosition data))
    (.build builder)))


(defn cfn-dashboard-relative-date-time-control-display-options-property-builder
  "The cfn-dashboard-relative-date-time-control-display-options-property-builder function buildes out new instances of 
CfnDashboard$RelativeDateTimeControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnDashboard$RelativeDateTimeControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-format)]
      (. builder dateTimeFormat data))
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-dashboard-relative-dates-filter-property-builder
  "The cfn-dashboard-relative-dates-filter-property-builder function buildes out new instances of 
CfnDashboard$RelativeDatesFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `anchorDateConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:anchor-date-configuration` |
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `excludePeriodConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:exclude-period-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `minimumGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:minimum-granularity` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `relativeDateType` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative-date-type` |
| `relativeDateValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:relative-date-value` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnDashboard$RelativeDatesFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :anchor-date-configuration)]
      (. builder anchorDateConfiguration data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :exclude-period-configuration)]
      (. builder excludePeriodConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :minimum-granularity)]
      (. builder minimumGranularity data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (when-let [data (lookup-entry config id :relative-date-type)]
      (. builder relativeDateType data))
    (when-let [data (lookup-entry config id :relative-date-value)]
      (. builder relativeDateValue data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-dashboard-resource-permission-property-builder
  "The cfn-dashboard-resource-permission-property-builder function buildes out new instances of 
CfnDashboard$ResourcePermissionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `principal` | java.lang.String | [[cdk.support/lookup-entry]] | `:principal` |
| `resource` | java.lang.String | [[cdk.support/lookup-entry]] | `:resource` |"
  [stack id config]
  (let [builder (CfnDashboard$ResourcePermissionProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :principal)]
      (. builder principal data))
    (when-let [data (lookup-entry config id :resource)]
      (. builder resource data))
    (.build builder)))


(defn cfn-dashboard-rolling-date-configuration-property-builder
  "The cfn-dashboard-rolling-date-configuration-property-builder function buildes out new instances of 
CfnDashboard$RollingDateConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |"
  [stack id config]
  (let [builder (CfnDashboard$RollingDateConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (.build builder)))


(defn cfn-dashboard-row-alternate-color-options-property-builder
  "The cfn-dashboard-row-alternate-color-options-property-builder function buildes out new instances of 
CfnDashboard$RowAlternateColorOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `rowAlternateColors` | java.util.List | [[cdk.support/lookup-entry]] | `:row-alternate-colors` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `usePrimaryBackgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:use-primary-background-color` |"
  [stack id config]
  (let [builder (CfnDashboard$RowAlternateColorOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :row-alternate-colors)]
      (. builder rowAlternateColors data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (when-let [data (lookup-entry config id :use-primary-background-color)]
      (. builder usePrimaryBackgroundColor data))
    (.build builder)))


(defn cfn-dashboard-same-sheet-target-visual-configuration-property-builder
  "The cfn-dashboard-same-sheet-target-visual-configuration-property-builder function buildes out new instances of 
CfnDashboard$SameSheetTargetVisualConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetVisualOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:target-visual-options` |
| `targetVisuals` | java.util.List | [[cdk.support/lookup-entry]] | `:target-visuals` |"
  [stack id config]
  (let [builder (CfnDashboard$SameSheetTargetVisualConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :target-visual-options)]
      (. builder targetVisualOptions data))
    (when-let [data (lookup-entry config id :target-visuals)]
      (. builder targetVisuals data))
    (.build builder)))


(defn cfn-dashboard-sankey-diagram-aggregated-field-wells-property-builder
  "The cfn-dashboard-sankey-diagram-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$SankeyDiagramAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destination` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:destination` |
| `source` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source` |
| `weight` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:weight` |"
  [stack id config]
  (let [builder (CfnDashboard$SankeyDiagramAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :destination)]
      (. builder destination data))
    (when-let [data (lookup-entry config id :source)]
      (. builder source data))
    (when-let [data (lookup-entry config id :weight)]
      (. builder weight data))
    (.build builder)))


(defn cfn-dashboard-sankey-diagram-chart-configuration-property-builder
  "The cfn-dashboard-sankey-diagram-chart-configuration-property-builder function buildes out new instances of 
CfnDashboard$SankeyDiagramChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$SankeyDiagramChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (.build builder)))


(defn cfn-dashboard-sankey-diagram-field-wells-property-builder
  "The cfn-dashboard-sankey-diagram-field-wells-property-builder function buildes out new instances of 
CfnDashboard$SankeyDiagramFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sankeyDiagramAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$SankeyDiagramAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:sankey-diagram-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$SankeyDiagramFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :sankey-diagram-aggregated-field-wells)]
      (. builder sankeyDiagramAggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-sankey-diagram-sort-configuration-property-builder
  "The cfn-dashboard-sankey-diagram-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$SankeyDiagramSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destinationItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:destination-items-limit` |
| `sourceItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-items-limit` |
| `weightSort` | java.util.List | [[cdk.support/lookup-entry]] | `:weight-sort` |"
  [stack id config]
  (let [builder (CfnDashboard$SankeyDiagramSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :destination-items-limit)]
      (. builder destinationItemsLimit data))
    (when-let [data (lookup-entry config id :source-items-limit)]
      (. builder sourceItemsLimit data))
    (when-let [data (lookup-entry config id :weight-sort)]
      (. builder weightSort data))
    (.build builder)))


(defn cfn-dashboard-sankey-diagram-visual-property-builder
  "The cfn-dashboard-sankey-diagram-visual-property-builder function buildes out new instances of 
CfnDashboard$SankeyDiagramVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$SankeyDiagramVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-scatter-plot-categorically-aggregated-field-wells-property-builder
  "The cfn-dashboard-scatter-plot-categorically-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | java.util.List | [[cdk.support/lookup-entry]] | `:category` |
| `label` | java.util.List | [[cdk.support/lookup-entry]] | `:label` |
| `size` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:size` |
| `xAxis` | java.util.List | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | java.util.List | [[cdk.support/lookup-entry]] | `:y-axis` |"
  [stack id config]
  (let [builder (CfnDashboard$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :label)]
      (. builder label data))
    (when-let [data (lookup-entry config id :size)]
      (. builder size data))
    (when-let [data (lookup-entry config id :x-axis)]
      (. builder xAxis data))
    (when-let [data (lookup-entry config id :y-axis)]
      (. builder yAxis data))
    (.build builder)))


(defn cfn-dashboard-scatter-plot-configuration-property-builder
  "The cfn-dashboard-scatter-plot-configuration-property-builder function buildes out new instances of 
CfnDashboard$ScatterPlotConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnDashboard$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnDashboard$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |
| `yAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:y-axis-display-options` |
| `yAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:y-axis-label-options` |"
  [stack id config]
  (let [builder (CfnDashboard$ScatterPlotConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (when-let [data (lookup-entry config id :x-axis-display-options)]
      (. builder xAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :x-axis-label-options)]
      (. builder xAxisLabelOptions data))
    (when-let [data (lookup-entry config id :y-axis-display-options)]
      (. builder yAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :y-axis-label-options)]
      (. builder yAxisLabelOptions data))
    (.build builder)))


(defn cfn-dashboard-scatter-plot-field-wells-property-builder
  "The cfn-dashboard-scatter-plot-field-wells-property-builder function buildes out new instances of 
CfnDashboard$ScatterPlotFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `scatterPlotCategoricallyAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$ScatterPlotCategoricallyAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:scatter-plot-categorically-aggregated-field-wells` |
| `scatterPlotUnaggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$ScatterPlotUnaggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:scatter-plot-unaggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$ScatterPlotFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :scatter-plot-categorically-aggregated-field-wells)]
      (. builder scatterPlotCategoricallyAggregatedFieldWells data))
    (when-let [data (lookup-entry config id :scatter-plot-unaggregated-field-wells)]
      (. builder scatterPlotUnaggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-scatter-plot-unaggregated-field-wells-property-builder
  "The cfn-dashboard-scatter-plot-unaggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$ScatterPlotUnaggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `label` | java.util.List | [[cdk.support/lookup-entry]] | `:label` |
| `size` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:size` |
| `xAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:y-axis` |"
  [stack id config]
  (let [builder (CfnDashboard$ScatterPlotUnaggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :label)]
      (. builder label data))
    (when-let [data (lookup-entry config id :size)]
      (. builder size data))
    (when-let [data (lookup-entry config id :x-axis)]
      (. builder xAxis data))
    (when-let [data (lookup-entry config id :y-axis)]
      (. builder yAxis data))
    (.build builder)))


(defn cfn-dashboard-scatter-plot-visual-property-builder
  "The cfn-dashboard-scatter-plot-visual-property-builder function buildes out new instances of 
CfnDashboard$ScatterPlotVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$ScatterPlotVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-scroll-bar-options-property-builder
  "The cfn-dashboard-scroll-bar-options-property-builder function buildes out new instances of 
CfnDashboard$ScrollBarOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `visibleRange` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visible-range` |"
  [stack id config]
  (let [builder (CfnDashboard$ScrollBarOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (when-let [data (lookup-entry config id :visible-range)]
      (. builder visibleRange data))
    (.build builder)))


(defn cfn-dashboard-secondary-value-options-property-builder
  "The cfn-dashboard-secondary-value-options-property-builder function buildes out new instances of 
CfnDashboard$SecondaryValueOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$SecondaryValueOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-section-after-page-break-property-builder
  "The cfn-dashboard-section-after-page-break-property-builder function buildes out new instances of 
CfnDashboard$SectionAfterPageBreakProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |"
  [stack id config]
  (let [builder (CfnDashboard$SectionAfterPageBreakProperty$Builder.)]
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (.build builder)))


(defn cfn-dashboard-section-based-layout-canvas-size-options-property-builder
  "The cfn-dashboard-section-based-layout-canvas-size-options-property-builder function buildes out new instances of 
CfnDashboard$SectionBasedLayoutCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paperCanvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$SectionBasedLayoutPaperCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:paper-canvas-size-options` |"
  [stack id config]
  (let [builder (CfnDashboard$SectionBasedLayoutCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :paper-canvas-size-options)]
      (. builder paperCanvasSizeOptions data))
    (.build builder)))


(defn cfn-dashboard-section-based-layout-configuration-property-builder
  "The cfn-dashboard-section-based-layout-configuration-property-builder function buildes out new instances of 
CfnDashboard$SectionBasedLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bodySections` | java.util.List | [[cdk.support/lookup-entry]] | `:body-sections` |
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `footerSections` | java.util.List | [[cdk.support/lookup-entry]] | `:footer-sections` |
| `headerSections` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:header-sections` |"
  [stack id config]
  (let [builder (CfnDashboard$SectionBasedLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :body-sections)]
      (. builder bodySections data))
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (when-let [data (lookup-entry config id :footer-sections)]
      (. builder footerSections data))
    (when-let [data (lookup-entry config id :header-sections)]
      (. builder headerSections data))
    (.build builder)))


(defn cfn-dashboard-section-based-layout-paper-canvas-size-options-property-builder
  "The cfn-dashboard-section-based-layout-paper-canvas-size-options-property-builder function buildes out new instances of 
CfnDashboard$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paperMargin` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:paper-margin` |
| `paperOrientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:paper-orientation` |
| `paperSize` | java.lang.String | [[cdk.support/lookup-entry]] | `:paper-size` |"
  [stack id config]
  (let [builder (CfnDashboard$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :paper-margin)]
      (. builder paperMargin data))
    (when-let [data (lookup-entry config id :paper-orientation)]
      (. builder paperOrientation data))
    (when-let [data (lookup-entry config id :paper-size)]
      (. builder paperSize data))
    (.build builder)))


(defn cfn-dashboard-section-layout-configuration-property-builder
  "The cfn-dashboard-section-layout-configuration-property-builder function buildes out new instances of 
CfnDashboard$SectionLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeFormLayout` | software.amazon.awscdk.services.quicksight.CfnDashboard$FreeFormSectionLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:free-form-layout` |"
  [stack id config]
  (let [builder (CfnDashboard$SectionLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :free-form-layout)]
      (. builder freeFormLayout data))
    (.build builder)))


(defn cfn-dashboard-section-page-break-configuration-property-builder
  "The cfn-dashboard-section-page-break-configuration-property-builder function buildes out new instances of 
CfnDashboard$SectionPageBreakConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `after` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:after` |"
  [stack id config]
  (let [builder (CfnDashboard$SectionPageBreakConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :after)]
      (. builder after data))
    (.build builder)))


(defn cfn-dashboard-section-style-property-builder
  "The cfn-dashboard-section-style-property-builder function buildes out new instances of 
CfnDashboard$SectionStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `padding` | software.amazon.awscdk.services.quicksight.CfnDashboard$SpacingProperty | [[cdk.support/lookup-entry]] | `:padding` |"
  [stack id config]
  (let [builder (CfnDashboard$SectionStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :height)]
      (. builder height data))
    (when-let [data (lookup-entry config id :padding)]
      (. builder padding data))
    (.build builder)))


(defn cfn-dashboard-selected-sheets-filter-scope-configuration-property-builder
  "The cfn-dashboard-selected-sheets-filter-scope-configuration-property-builder function buildes out new instances of 
CfnDashboard$SelectedSheetsFilterScopeConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sheetVisualScopingConfigurations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sheet-visual-scoping-configurations` |"
  [stack id config]
  (let [builder (CfnDashboard$SelectedSheetsFilterScopeConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :sheet-visual-scoping-configurations)]
      (. builder sheetVisualScopingConfigurations data))
    (.build builder)))


(defn cfn-dashboard-series-item-property-builder
  "The cfn-dashboard-series-item-property-builder function buildes out new instances of 
CfnDashboard$SeriesItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataFieldSeriesItem` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-field-series-item` |
| `fieldSeriesItem` | software.amazon.awscdk.services.quicksight.CfnDashboard$FieldSeriesItemProperty | [[cdk.support/lookup-entry]] | `:field-series-item` |"
  [stack id config]
  (let [builder (CfnDashboard$SeriesItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-field-series-item)]
      (. builder dataFieldSeriesItem data))
    (when-let [data (lookup-entry config id :field-series-item)]
      (. builder fieldSeriesItem data))
    (.build builder)))


(defn cfn-dashboard-set-parameter-value-configuration-property-builder
  "The cfn-dashboard-set-parameter-value-configuration-property-builder function buildes out new instances of 
CfnDashboard$SetParameterValueConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destinationParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:destination-parameter-name` |
| `value` | software.amazon.awscdk.services.quicksight.CfnDashboard$DestinationParameterValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$SetParameterValueConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :destination-parameter-name)]
      (. builder destinationParameterName data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-shape-conditional-format-property-builder
  "The cfn-dashboard-shape-conditional-format-property-builder function buildes out new instances of 
CfnDashboard$ShapeConditionalFormatProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:background-color` |"
  [stack id config]
  (let [builder (CfnDashboard$ShapeConditionalFormatProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-color)]
      (. builder backgroundColor data))
    (.build builder)))


(defn cfn-dashboard-sheet-control-info-icon-label-options-property-builder
  "The cfn-dashboard-sheet-control-info-icon-label-options-property-builder function buildes out new instances of 
CfnDashboard$SheetControlInfoIconLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconText` | java.lang.String | [[cdk.support/lookup-entry]] | `:info-icon-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$SheetControlInfoIconLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-text)]
      (. builder infoIconText data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-sheet-control-layout-configuration-property-builder
  "The cfn-dashboard-sheet-control-layout-configuration-property-builder function buildes out new instances of 
CfnDashboard$SheetControlLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `gridLayout` | software.amazon.awscdk.services.quicksight.CfnDashboard$GridLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:grid-layout` |"
  [stack id config]
  (let [builder (CfnDashboard$SheetControlLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :grid-layout)]
      (. builder gridLayout data))
    (.build builder)))


(defn cfn-dashboard-sheet-control-layout-property-builder
  "The cfn-dashboard-sheet-control-layout-property-builder function buildes out new instances of 
CfnDashboard$SheetControlLayoutProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configuration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$SheetControlLayoutProperty$Builder.)]
    (when-let [data (lookup-entry config id :configuration)]
      (. builder configuration data))
    (.build builder)))


(defn cfn-dashboard-sheet-controls-option-property-builder
  "The cfn-dashboard-sheet-controls-option-property-builder function buildes out new instances of 
CfnDashboard$SheetControlsOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibilityState` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility-state` |"
  [stack id config]
  (let [builder (CfnDashboard$SheetControlsOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility-state)]
      (. builder visibilityState data))
    (.build builder)))


(defn cfn-dashboard-sheet-definition-property-builder
  "The cfn-dashboard-sheet-definition-property-builder function buildes out new instances of 
CfnDashboard$SheetDefinitionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-type` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `filterControls` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-controls` |
| `layouts` | java.util.List | [[cdk.support/lookup-entry]] | `:layouts` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterControls` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameter-controls` |
| `sheetControlLayouts` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sheet-control-layouts` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |
| `textBoxes` | java.util.List | [[cdk.support/lookup-entry]] | `:text-boxes` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `visuals` | java.util.List | [[cdk.support/lookup-entry]] | `:visuals` |"
  [stack id config]
  (let [builder (CfnDashboard$SheetDefinitionProperty$Builder.)]
    (when-let [data (lookup-entry config id :content-type)]
      (. builder contentType data))
    (when-let [data (lookup-entry config id :description)]
      (. builder description data))
    (when-let [data (lookup-entry config id :filter-controls)]
      (. builder filterControls data))
    (when-let [data (lookup-entry config id :layouts)]
      (. builder layouts data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :parameter-controls)]
      (. builder parameterControls data))
    (when-let [data (lookup-entry config id :sheet-control-layouts)]
      (. builder sheetControlLayouts data))
    (when-let [data (lookup-entry config id :sheet-id)]
      (. builder sheetId data))
    (when-let [data (lookup-entry config id :text-boxes)]
      (. builder textBoxes data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visuals)]
      (. builder visuals data))
    (.build builder)))


(defn cfn-dashboard-sheet-element-configuration-overrides-property-builder
  "The cfn-dashboard-sheet-element-configuration-overrides-property-builder function buildes out new instances of 
CfnDashboard$SheetElementConfigurationOverridesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$SheetElementConfigurationOverridesProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-sheet-element-rendering-rule-property-builder
  "The cfn-dashboard-sheet-element-rendering-rule-property-builder function buildes out new instances of 
CfnDashboard$SheetElementRenderingRuleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configurationOverrides` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:configuration-overrides` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |"
  [stack id config]
  (let [builder (CfnDashboard$SheetElementRenderingRuleProperty$Builder.)]
    (when-let [data (lookup-entry config id :configuration-overrides)]
      (. builder configurationOverrides data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (.build builder)))


(defn cfn-dashboard-sheet-layout-element-maximization-option-property-builder
  "The cfn-dashboard-sheet-layout-element-maximization-option-property-builder function buildes out new instances of 
CfnDashboard$SheetLayoutElementMaximizationOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |"
  [stack id config]
  (let [builder (CfnDashboard$SheetLayoutElementMaximizationOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :availability-status)]
      (. builder availabilityStatus data))
    (.build builder)))


(defn cfn-dashboard-sheet-property-builder
  "The cfn-dashboard-sheet-property-builder function buildes out new instances of 
CfnDashboard$SheetProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |"
  [stack id config]
  (let [builder (CfnDashboard$SheetProperty$Builder.)]
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :sheet-id)]
      (. builder sheetId data))
    (.build builder)))


(defn cfn-dashboard-sheet-text-box-property-builder
  "The cfn-dashboard-sheet-text-box-property-builder function buildes out new instances of 
CfnDashboard$SheetTextBoxProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | java.lang.String | [[cdk.support/lookup-entry]] | `:content` |
| `sheetTextBoxId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-text-box-id` |"
  [stack id config]
  (let [builder (CfnDashboard$SheetTextBoxProperty$Builder.)]
    (when-let [data (lookup-entry config id :content)]
      (. builder content data))
    (when-let [data (lookup-entry config id :sheet-text-box-id)]
      (. builder sheetTextBoxId data))
    (.build builder)))


(defn cfn-dashboard-sheet-visual-scoping-configuration-property-builder
  "The cfn-dashboard-sheet-visual-scoping-configuration-property-builder function buildes out new instances of 
CfnDashboard$SheetVisualScopingConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `scope` | java.lang.String | [[cdk.support/lookup-entry]] | `:scope` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |
| `visualIds` | java.util.List | [[cdk.support/lookup-entry]] | `:visual-ids` |"
  [stack id config]
  (let [builder (CfnDashboard$SheetVisualScopingConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :scope)]
      (. builder scope data))
    (when-let [data (lookup-entry config id :sheet-id)]
      (. builder sheetId data))
    (when-let [data (lookup-entry config id :visual-ids)]
      (. builder visualIds data))
    (.build builder)))


(defn cfn-dashboard-short-format-text-property-builder
  "The cfn-dashboard-short-format-text-property-builder function buildes out new instances of 
CfnDashboard$ShortFormatTextProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `plainText` | java.lang.String | [[cdk.support/lookup-entry]] | `:plain-text` |
| `richText` | java.lang.String | [[cdk.support/lookup-entry]] | `:rich-text` |"
  [stack id config]
  (let [builder (CfnDashboard$ShortFormatTextProperty$Builder.)]
    (when-let [data (lookup-entry config id :plain-text)]
      (. builder plainText data))
    (when-let [data (lookup-entry config id :rich-text)]
      (. builder richText data))
    (.build builder)))


(defn cfn-dashboard-simple-cluster-marker-property-builder
  "The cfn-dashboard-simple-cluster-marker-property-builder function buildes out new instances of 
CfnDashboard$SimpleClusterMarkerProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |"
  [stack id config]
  (let [builder (CfnDashboard$SimpleClusterMarkerProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (.build builder)))


(defn cfn-dashboard-slider-control-display-options-property-builder
  "The cfn-dashboard-slider-control-display-options-property-builder function buildes out new instances of 
CfnDashboard$SliderControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnDashboard$SliderControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-dashboard-small-multiples-axis-properties-property-builder
  "The cfn-dashboard-small-multiples-axis-properties-property-builder function buildes out new instances of 
CfnDashboard$SmallMultiplesAxisPropertiesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scale` | java.lang.String | [[cdk.support/lookup-entry]] | `:scale` |"
  [stack id config]
  (let [builder (CfnDashboard$SmallMultiplesAxisPropertiesProperty$Builder.)]
    (when-let [data (lookup-entry config id :placement)]
      (. builder placement data))
    (when-let [data (lookup-entry config id :scale)]
      (. builder scale data))
    (.build builder)))


(defn cfn-dashboard-small-multiples-options-property-builder
  "The cfn-dashboard-small-multiples-options-property-builder function buildes out new instances of 
CfnDashboard$SmallMultiplesOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `maxVisibleColumns` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max-visible-columns` |
| `maxVisibleRows` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max-visible-rows` |
| `panelConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:panel-configuration` |
| `xAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | software.amazon.awscdk.services.quicksight.CfnDashboard$SmallMultiplesAxisPropertiesProperty | [[cdk.support/lookup-entry]] | `:y-axis` |"
  [stack id config]
  (let [builder (CfnDashboard$SmallMultiplesOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :max-visible-columns)]
      (. builder maxVisibleColumns data))
    (when-let [data (lookup-entry config id :max-visible-rows)]
      (. builder maxVisibleRows data))
    (when-let [data (lookup-entry config id :panel-configuration)]
      (. builder panelConfiguration data))
    (when-let [data (lookup-entry config id :x-axis)]
      (. builder xAxis data))
    (when-let [data (lookup-entry config id :y-axis)]
      (. builder yAxis data))
    (.build builder)))


(defn cfn-dashboard-spacing-property-builder
  "The cfn-dashboard-spacing-property-builder function buildes out new instances of 
CfnDashboard$SpacingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bottom` | java.lang.String | [[cdk.support/lookup-entry]] | `:bottom` |
| `left` | java.lang.String | [[cdk.support/lookup-entry]] | `:left` |
| `right` | java.lang.String | [[cdk.support/lookup-entry]] | `:right` |
| `top` | java.lang.String | [[cdk.support/lookup-entry]] | `:top` |"
  [stack id config]
  (let [builder (CfnDashboard$SpacingProperty$Builder.)]
    (when-let [data (lookup-entry config id :bottom)]
      (. builder bottom data))
    (when-let [data (lookup-entry config id :left)]
      (. builder left data))
    (when-let [data (lookup-entry config id :right)]
      (. builder right data))
    (when-let [data (lookup-entry config id :top)]
      (. builder top data))
    (.build builder)))


(defn cfn-dashboard-string-default-values-property-builder
  "The cfn-dashboard-string-default-values-property-builder function buildes out new instances of 
CfnDashboard$StringDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |"
  [stack id config]
  (let [builder (CfnDashboard$StringDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :dynamic-value)]
      (. builder dynamicValue data))
    (when-let [data (lookup-entry config id :static-values)]
      (. builder staticValues data))
    (.build builder)))


(defn cfn-dashboard-string-format-configuration-property-builder
  "The cfn-dashboard-string-format-configuration-property-builder function buildes out new instances of 
CfnDashboard$StringFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `nullValueFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numericFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$NumericFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:numeric-format-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$StringFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :null-value-format-configuration)]
      (. builder nullValueFormatConfiguration data))
    (when-let [data (lookup-entry config id :numeric-format-configuration)]
      (. builder numericFormatConfiguration data))
    (.build builder)))


(defn cfn-dashboard-string-parameter-declaration-property-builder
  "The cfn-dashboard-string-parameter-declaration-property-builder function buildes out new instances of 
CfnDashboard$StringParameterDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.services.quicksight.CfnDashboard$StringValueWhenUnsetConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-when-unset` |"
  [stack id config]
  (let [builder (CfnDashboard$StringParameterDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-values)]
      (. builder defaultValues data))
    (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
      (. builder mappedDataSetParameters data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :parameter-value-type)]
      (. builder parameterValueType data))
    (when-let [data (lookup-entry config id :value-when-unset)]
      (. builder valueWhenUnset data))
    (.build builder)))


(defn cfn-dashboard-string-parameter-property-builder
  "The cfn-dashboard-string-parameter-property-builder function buildes out new instances of 
CfnDashboard$StringParameterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$StringParameterProperty$Builder.)]
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-string-value-when-unset-configuration-property-builder
  "The cfn-dashboard-string-value-when-unset-configuration-property-builder function buildes out new instances of 
CfnDashboard$StringValueWhenUnsetConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |"
  [stack id config]
  (let [builder (CfnDashboard$StringValueWhenUnsetConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-value)]
      (. builder customValue data))
    (when-let [data (lookup-entry config id :value-when-unset-option)]
      (. builder valueWhenUnsetOption data))
    (.build builder)))


(defn cfn-dashboard-subtotal-options-property-builder
  "The cfn-dashboard-subtotal-options-property-builder function buildes out new instances of 
CfnDashboard$SubtotalOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldLevel` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-level` |
| `fieldLevelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-level-options` |
| `metricHeaderCellStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:metric-header-cell-style` |
| `styleTargets` | java.util.List | [[cdk.support/lookup-entry]] | `:style-targets` |
| `totalCellStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `valueCellStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:value-cell-style` |"
  [stack id config]
  (let [builder (CfnDashboard$SubtotalOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :field-level)]
      (. builder fieldLevel data))
    (when-let [data (lookup-entry config id :field-level-options)]
      (. builder fieldLevelOptions data))
    (when-let [data (lookup-entry config id :metric-header-cell-style)]
      (. builder metricHeaderCellStyle data))
    (when-let [data (lookup-entry config id :style-targets)]
      (. builder styleTargets data))
    (when-let [data (lookup-entry config id :total-cell-style)]
      (. builder totalCellStyle data))
    (when-let [data (lookup-entry config id :totals-visibility)]
      (. builder totalsVisibility data))
    (when-let [data (lookup-entry config id :value-cell-style)]
      (. builder valueCellStyle data))
    (.build builder)))


(defn cfn-dashboard-table-aggregated-field-wells-property-builder
  "The cfn-dashboard-table-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$TableAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | java.util.List | [[cdk.support/lookup-entry]] | `:group-by` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$TableAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :group-by)]
      (. builder groupBy data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-table-border-options-property-builder
  "The cfn-dashboard-table-border-options-property-builder function buildes out new instances of 
CfnDashboard$TableBorderOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `style` | java.lang.String | [[cdk.support/lookup-entry]] | `:style` |
| `thickness` | java.lang.Number | [[cdk.support/lookup-entry]] | `:thickness` |"
  [stack id config]
  (let [builder (CfnDashboard$TableBorderOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :style)]
      (. builder style data))
    (when-let [data (lookup-entry config id :thickness)]
      (. builder thickness data))
    (.build builder)))


(defn cfn-dashboard-table-cell-conditional-formatting-property-builder
  "The cfn-dashboard-table-cell-conditional-formatting-property-builder function buildes out new instances of 
CfnDashboard$TableCellConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `textFormat` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-format` |"
  [stack id config]
  (let [builder (CfnDashboard$TableCellConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :text-format)]
      (. builder textFormat data))
    (.build builder)))


(defn cfn-dashboard-table-cell-image-sizing-configuration-property-builder
  "The cfn-dashboard-table-cell-image-sizing-configuration-property-builder function buildes out new instances of 
CfnDashboard$TableCellImageSizingConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `tableCellImageScalingConfiguration` | java.lang.String | [[cdk.support/lookup-entry]] | `:table-cell-image-scaling-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$TableCellImageSizingConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :table-cell-image-scaling-configuration)]
      (. builder tableCellImageScalingConfiguration data))
    (.build builder)))


(defn cfn-dashboard-table-cell-style-property-builder
  "The cfn-dashboard-table-cell-style-property-builder function buildes out new instances of 
CfnDashboard$TableCellStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-color` |
| `border` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:border` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `height` | java.lang.Number | [[cdk.support/lookup-entry]] | `:height` |
| `horizontalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-text-alignment` |
| `textWrap` | java.lang.String | [[cdk.support/lookup-entry]] | `:text-wrap` |
| `verticalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-text-alignment` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$TableCellStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-color)]
      (. builder backgroundColor data))
    (when-let [data (lookup-entry config id :border)]
      (. builder border data))
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (when-let [data (lookup-entry config id :height)]
      (. builder height data))
    (when-let [data (lookup-entry config id :horizontal-text-alignment)]
      (. builder horizontalTextAlignment data))
    (when-let [data (lookup-entry config id :text-wrap)]
      (. builder textWrap data))
    (when-let [data (lookup-entry config id :vertical-text-alignment)]
      (. builder verticalTextAlignment data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-table-conditional-formatting-option-property-builder
  "The cfn-dashboard-table-conditional-formatting-option-property-builder function buildes out new instances of 
CfnDashboard$TableConditionalFormattingOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cell` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:cell` |
| `row` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row` |"
  [stack id config]
  (let [builder (CfnDashboard$TableConditionalFormattingOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :cell)]
      (. builder cell data))
    (when-let [data (lookup-entry config id :row)]
      (. builder row data))
    (.build builder)))


(defn cfn-dashboard-table-conditional-formatting-property-builder
  "The cfn-dashboard-table-conditional-formatting-property-builder function buildes out new instances of 
CfnDashboard$TableConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |"
  [stack id config]
  (let [builder (CfnDashboard$TableConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :conditional-formatting-options)]
      (. builder conditionalFormattingOptions data))
    (.build builder)))


(defn cfn-dashboard-table-configuration-property-builder
  "The cfn-dashboard-table-configuration-property-builder function buildes out new instances of 
CfnDashboard$TableConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableFieldOptionsProperty | [[cdk.support/lookup-entry]] | `:field-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `paginatedReportOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$TablePaginatedReportOptionsProperty | [[cdk.support/lookup-entry]] | `:paginated-report-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tableInlineVisualizations` | java.util.List | [[cdk.support/lookup-entry]] | `:table-inline-visualizations` |
| `tableOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:table-options` |
| `totalOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$TotalOptionsProperty | [[cdk.support/lookup-entry]] | `:total-options` |"
  [stack id config]
  (let [builder (CfnDashboard$TableConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-options)]
      (. builder fieldOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :paginated-report-options)]
      (. builder paginatedReportOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :table-inline-visualizations)]
      (. builder tableInlineVisualizations data))
    (when-let [data (lookup-entry config id :table-options)]
      (. builder tableOptions data))
    (when-let [data (lookup-entry config id :total-options)]
      (. builder totalOptions data))
    (.build builder)))


(defn cfn-dashboard-table-field-custom-icon-content-property-builder
  "The cfn-dashboard-table-field-custom-icon-content-property-builder function buildes out new instances of 
CfnDashboard$TableFieldCustomIconContentProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon` |"
  [stack id config]
  (let [builder (CfnDashboard$TableFieldCustomIconContentProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (.build builder)))


(defn cfn-dashboard-table-field-custom-text-content-property-builder
  "The cfn-dashboard-table-field-custom-text-content-property-builder function buildes out new instances of 
CfnDashboard$TableFieldCustomTextContentProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `value` | java.lang.String | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$TableFieldCustomTextContentProperty$Builder.)]
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-table-field-image-configuration-property-builder
  "The cfn-dashboard-table-field-image-configuration-property-builder function buildes out new instances of 
CfnDashboard$TableFieldImageConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sizingOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellImageSizingConfigurationProperty | [[cdk.support/lookup-entry]] | `:sizing-options` |"
  [stack id config]
  (let [builder (CfnDashboard$TableFieldImageConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :sizing-options)]
      (. builder sizingOptions data))
    (.build builder)))


(defn cfn-dashboard-table-field-link-configuration-property-builder
  "The cfn-dashboard-table-field-link-configuration-property-builder function buildes out new instances of 
CfnDashboard$TableFieldLinkConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:content` |
| `target` | java.lang.String | [[cdk.support/lookup-entry]] | `:target` |"
  [stack id config]
  (let [builder (CfnDashboard$TableFieldLinkConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :content)]
      (. builder content data))
    (when-let [data (lookup-entry config id :target)]
      (. builder target data))
    (.build builder)))


(defn cfn-dashboard-table-field-link-content-configuration-property-builder
  "The cfn-dashboard-table-field-link-content-configuration-property-builder function buildes out new instances of 
CfnDashboard$TableFieldLinkContentConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customIconContent` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableFieldCustomIconContentProperty | [[cdk.support/lookup-entry]] | `:custom-icon-content` |
| `customTextContent` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableFieldCustomTextContentProperty | [[cdk.support/lookup-entry]] | `:custom-text-content` |"
  [stack id config]
  (let [builder (CfnDashboard$TableFieldLinkContentConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-icon-content)]
      (. builder customIconContent data))
    (when-let [data (lookup-entry config id :custom-text-content)]
      (. builder customTextContent data))
    (.build builder)))


(defn cfn-dashboard-table-field-option-property-builder
  "The cfn-dashboard-table-field-option-property-builder function buildes out new instances of 
CfnDashboard$TableFieldOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `urlStyling` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:url-styling` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |"
  [stack id config]
  (let [builder (CfnDashboard$TableFieldOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :url-styling)]
      (. builder urlStyling data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (when-let [data (lookup-entry config id :width)]
      (. builder width data))
    (.build builder)))


(defn cfn-dashboard-table-field-options-property-builder
  "The cfn-dashboard-table-field-options-property-builder function buildes out new instances of 
CfnDashboard$TableFieldOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `order` | java.util.List | [[cdk.support/lookup-entry]] | `:order` |
| `pinnedFieldOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$TablePinnedFieldOptionsProperty | [[cdk.support/lookup-entry]] | `:pinned-field-options` |
| `selectedFieldOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:selected-field-options` |"
  [stack id config]
  (let [builder (CfnDashboard$TableFieldOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :order)]
      (. builder order data))
    (when-let [data (lookup-entry config id :pinned-field-options)]
      (. builder pinnedFieldOptions data))
    (when-let [data (lookup-entry config id :selected-field-options)]
      (. builder selectedFieldOptions data))
    (.build builder)))


(defn cfn-dashboard-table-field-url-configuration-property-builder
  "The cfn-dashboard-table-field-url-configuration-property-builder function buildes out new instances of 
CfnDashboard$TableFieldURLConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `imageConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableFieldImageConfigurationProperty | [[cdk.support/lookup-entry]] | `:image-configuration` |
| `linkConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:link-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$TableFieldURLConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :image-configuration)]
      (. builder imageConfiguration data))
    (when-let [data (lookup-entry config id :link-configuration)]
      (. builder linkConfiguration data))
    (.build builder)))


(defn cfn-dashboard-table-field-wells-property-builder
  "The cfn-dashboard-table-field-wells-property-builder function buildes out new instances of 
CfnDashboard$TableFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `tableAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:table-aggregated-field-wells` |
| `tableUnaggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:table-unaggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$TableFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :table-aggregated-field-wells)]
      (. builder tableAggregatedFieldWells data))
    (when-let [data (lookup-entry config id :table-unaggregated-field-wells)]
      (. builder tableUnaggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-table-inline-visualization-property-builder
  "The cfn-dashboard-table-inline-visualization-property-builder function buildes out new instances of 
CfnDashboard$TableInlineVisualizationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataBars` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataBarsOptionsProperty | [[cdk.support/lookup-entry]] | `:data-bars` |"
  [stack id config]
  (let [builder (CfnDashboard$TableInlineVisualizationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-bars)]
      (. builder dataBars data))
    (.build builder)))


(defn cfn-dashboard-table-options-property-builder
  "The cfn-dashboard-table-options-property-builder function buildes out new instances of 
CfnDashboard$TableOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cell-style` |
| `headerStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:header-style` |
| `orientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:orientation` |
| `rowAlternateColorOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$RowAlternateColorOptionsProperty | [[cdk.support/lookup-entry]] | `:row-alternate-color-options` |"
  [stack id config]
  (let [builder (CfnDashboard$TableOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :cell-style)]
      (. builder cellStyle data))
    (when-let [data (lookup-entry config id :header-style)]
      (. builder headerStyle data))
    (when-let [data (lookup-entry config id :orientation)]
      (. builder orientation data))
    (when-let [data (lookup-entry config id :row-alternate-color-options)]
      (. builder rowAlternateColorOptions data))
    (.build builder)))


(defn cfn-dashboard-table-paginated-report-options-property-builder
  "The cfn-dashboard-table-paginated-report-options-property-builder function buildes out new instances of 
CfnDashboard$TablePaginatedReportOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `overflowColumnHeaderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:overflow-column-header-visibility` |
| `verticalOverflowVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-overflow-visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$TablePaginatedReportOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :overflow-column-header-visibility)]
      (. builder overflowColumnHeaderVisibility data))
    (when-let [data (lookup-entry config id :vertical-overflow-visibility)]
      (. builder verticalOverflowVisibility data))
    (.build builder)))


(defn cfn-dashboard-table-pinned-field-options-property-builder
  "The cfn-dashboard-table-pinned-field-options-property-builder function buildes out new instances of 
CfnDashboard$TablePinnedFieldOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pinnedLeftFields` | java.util.List | [[cdk.support/lookup-entry]] | `:pinned-left-fields` |"
  [stack id config]
  (let [builder (CfnDashboard$TablePinnedFieldOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :pinned-left-fields)]
      (. builder pinnedLeftFields data))
    (.build builder)))


(defn cfn-dashboard-table-row-conditional-formatting-property-builder
  "The cfn-dashboard-table-row-conditional-formatting-property-builder function buildes out new instances of 
CfnDashboard$TableRowConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:background-color` |
| `textColor` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnDashboard$TableRowConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-color)]
      (. builder backgroundColor data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-dashboard-table-side-border-options-property-builder
  "The cfn-dashboard-table-side-border-options-property-builder function buildes out new instances of 
CfnDashboard$TableSideBorderOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bottom` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bottom` |
| `innerHorizontal` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:inner-horizontal` |
| `innerVertical` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:inner-vertical` |
| `left` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:left` |
| `right` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:right` |
| `top` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:top` |"
  [stack id config]
  (let [builder (CfnDashboard$TableSideBorderOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bottom)]
      (. builder bottom data))
    (when-let [data (lookup-entry config id :inner-horizontal)]
      (. builder innerHorizontal data))
    (when-let [data (lookup-entry config id :inner-vertical)]
      (. builder innerVertical data))
    (when-let [data (lookup-entry config id :left)]
      (. builder left data))
    (when-let [data (lookup-entry config id :right)]
      (. builder right data))
    (when-let [data (lookup-entry config id :top)]
      (. builder top data))
    (.build builder)))


(defn cfn-dashboard-table-sort-configuration-property-builder
  "The cfn-dashboard-table-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$TableSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paginationConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$PaginationConfigurationProperty | [[cdk.support/lookup-entry]] | `:pagination-configuration` |
| `rowSort` | java.util.List | [[cdk.support/lookup-entry]] | `:row-sort` |"
  [stack id config]
  (let [builder (CfnDashboard$TableSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :pagination-configuration)]
      (. builder paginationConfiguration data))
    (when-let [data (lookup-entry config id :row-sort)]
      (. builder rowSort data))
    (.build builder)))


(defn cfn-dashboard-table-style-target-property-builder
  "The cfn-dashboard-table-style-target-property-builder function buildes out new instances of 
CfnDashboard$TableStyleTargetProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellType` | java.lang.String | [[cdk.support/lookup-entry]] | `:cell-type` |"
  [stack id config]
  (let [builder (CfnDashboard$TableStyleTargetProperty$Builder.)]
    (when-let [data (lookup-entry config id :cell-type)]
      (. builder cellType data))
    (.build builder)))


(defn cfn-dashboard-table-unaggregated-field-wells-property-builder
  "The cfn-dashboard-table-unaggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$TableUnaggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$TableUnaggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-table-visual-property-builder
  "The cfn-dashboard-table-visual-property-builder function buildes out new instances of 
CfnDashboard$TableVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$TableVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :conditional-formatting)]
      (. builder conditionalFormatting data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-text-area-control-display-options-property-builder
  "The cfn-dashboard-text-area-control-display-options-property-builder function buildes out new instances of 
CfnDashboard$TextAreaControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `placeholderOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:placeholder-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnDashboard$TextAreaControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :placeholder-options)]
      (. builder placeholderOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-dashboard-text-conditional-format-property-builder
  "The cfn-dashboard-text-conditional-format-property-builder function buildes out new instances of 
CfnDashboard$TextConditionalFormatProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:background-color` |
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.services.quicksight.CfnDashboard$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnDashboard$TextConditionalFormatProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-color)]
      (. builder backgroundColor data))
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-dashboard-text-control-placeholder-options-property-builder
  "The cfn-dashboard-text-control-placeholder-options-property-builder function buildes out new instances of 
CfnDashboard$TextControlPlaceholderOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$TextControlPlaceholderOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-text-field-control-display-options-property-builder
  "The cfn-dashboard-text-field-control-display-options-property-builder function buildes out new instances of 
CfnDashboard$TextFieldControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `placeholderOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$TextControlPlaceholderOptionsProperty | [[cdk.support/lookup-entry]] | `:placeholder-options` |
| `titleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnDashboard$TextFieldControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :placeholder-options)]
      (. builder placeholderOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-dashboard-thousand-separator-options-property-builder
  "The cfn-dashboard-thousand-separator-options-property-builder function buildes out new instances of 
CfnDashboard$ThousandSeparatorOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `symbol` | java.lang.String | [[cdk.support/lookup-entry]] | `:symbol` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$ThousandSeparatorOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :symbol)]
      (. builder symbol data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-time-based-forecast-properties-property-builder
  "The cfn-dashboard-time-based-forecast-properties-property-builder function buildes out new instances of 
CfnDashboard$TimeBasedForecastPropertiesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lowerBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:lower-boundary` |
| `periodsBackward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-backward` |
| `periodsForward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-forward` |
| `predictionInterval` | java.lang.Number | [[cdk.support/lookup-entry]] | `:prediction-interval` |
| `seasonality` | java.lang.Number | [[cdk.support/lookup-entry]] | `:seasonality` |
| `upperBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:upper-boundary` |"
  [stack id config]
  (let [builder (CfnDashboard$TimeBasedForecastPropertiesProperty$Builder.)]
    (when-let [data (lookup-entry config id :lower-boundary)]
      (. builder lowerBoundary data))
    (when-let [data (lookup-entry config id :periods-backward)]
      (. builder periodsBackward data))
    (when-let [data (lookup-entry config id :periods-forward)]
      (. builder periodsForward data))
    (when-let [data (lookup-entry config id :prediction-interval)]
      (. builder predictionInterval data))
    (when-let [data (lookup-entry config id :seasonality)]
      (. builder seasonality data))
    (when-let [data (lookup-entry config id :upper-boundary)]
      (. builder upperBoundary data))
    (.build builder)))


(defn cfn-dashboard-time-equality-filter-property-builder
  "The cfn-dashboard-time-equality-filter-property-builder function buildes out new instances of 
CfnDashboard$TimeEqualityFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `rollingDate` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
| `value` | java.lang.String | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$TimeEqualityFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (when-let [data (lookup-entry config id :rolling-date)]
      (. builder rollingDate data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-time-range-drill-down-filter-property-builder
  "The cfn-dashboard-time-range-drill-down-filter-property-builder function buildes out new instances of 
CfnDashboard$TimeRangeDrillDownFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `rangeMaximum` | java.lang.String | [[cdk.support/lookup-entry]] | `:range-maximum` |
| `rangeMinimum` | java.lang.String | [[cdk.support/lookup-entry]] | `:range-minimum` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnDashboard$TimeRangeDrillDownFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :range-maximum)]
      (. builder rangeMaximum data))
    (when-let [data (lookup-entry config id :range-minimum)]
      (. builder rangeMinimum data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-dashboard-time-range-filter-property-builder
  "The cfn-dashboard-time-range-filter-property-builder function buildes out new instances of 
CfnDashboard$TimeRangeFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `excludePeriodConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:exclude-period-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `includeMaximum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-maximum` |
| `includeMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-minimum` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `rangeMaximumValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$TimeRangeFilterValueProperty | [[cdk.support/lookup-entry]] | `:range-maximum-value` |
| `rangeMinimumValue` | software.amazon.awscdk.services.quicksight.CfnDashboard$TimeRangeFilterValueProperty | [[cdk.support/lookup-entry]] | `:range-minimum-value` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnDashboard$TimeRangeFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :exclude-period-configuration)]
      (. builder excludePeriodConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :include-maximum)]
      (. builder includeMaximum data))
    (when-let [data (lookup-entry config id :include-minimum)]
      (. builder includeMinimum data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :range-maximum-value)]
      (. builder rangeMaximumValue data))
    (when-let [data (lookup-entry config id :range-minimum-value)]
      (. builder rangeMinimumValue data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-dashboard-time-range-filter-value-property-builder
  "The cfn-dashboard-time-range-filter-value-property-builder function buildes out new instances of 
CfnDashboard$TimeRangeFilterValueProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameter` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter` |
| `rollingDate` | software.amazon.awscdk.services.quicksight.CfnDashboard$RollingDateConfigurationProperty | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `staticValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:static-value` |"
  [stack id config]
  (let [builder (CfnDashboard$TimeRangeFilterValueProperty$Builder.)]
    (when-let [data (lookup-entry config id :parameter)]
      (. builder parameter data))
    (when-let [data (lookup-entry config id :rolling-date)]
      (. builder rollingDate data))
    (when-let [data (lookup-entry config id :static-value)]
      (. builder staticValue data))
    (.build builder)))


(defn cfn-dashboard-tooltip-item-property-builder
  "The cfn-dashboard-tooltip-item-property-builder function buildes out new instances of 
CfnDashboard$TooltipItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnTooltipItem` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnTooltipItemProperty | [[cdk.support/lookup-entry]] | `:column-tooltip-item` |
| `fieldTooltipItem` | software.amazon.awscdk.services.quicksight.CfnDashboard$FieldTooltipItemProperty | [[cdk.support/lookup-entry]] | `:field-tooltip-item` |"
  [stack id config]
  (let [builder (CfnDashboard$TooltipItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-tooltip-item)]
      (. builder columnTooltipItem data))
    (when-let [data (lookup-entry config id :field-tooltip-item)]
      (. builder fieldTooltipItem data))
    (.build builder)))


(defn cfn-dashboard-tooltip-options-property-builder
  "The cfn-dashboard-tooltip-options-property-builder function buildes out new instances of 
CfnDashboard$TooltipOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldBasedTooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-based-tooltip` |
| `selectedTooltipType` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-tooltip-type` |
| `tooltipVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$TooltipOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-based-tooltip)]
      (. builder fieldBasedTooltip data))
    (when-let [data (lookup-entry config id :selected-tooltip-type)]
      (. builder selectedTooltipType data))
    (when-let [data (lookup-entry config id :tooltip-visibility)]
      (. builder tooltipVisibility data))
    (.build builder)))


(defn cfn-dashboard-top-bottom-filter-property-builder
  "The cfn-dashboard-top-bottom-filter-property-builder function buildes out new instances of 
CfnDashboard$TopBottomFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationSortConfigurations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:aggregation-sort-configurations` |
| `column` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `limit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:limit` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnDashboard$TopBottomFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-sort-configurations)]
      (. builder aggregationSortConfigurations data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :limit)]
      (. builder limit data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-dashboard-top-bottom-movers-computation-property-builder
  "The cfn-dashboard-top-bottom-movers-computation-property-builder function buildes out new instances of 
CfnDashboard$TopBottomMoversComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `moverSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:mover-size` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `sortOrder` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-order` |
| `time` | software.amazon.awscdk.services.quicksight.CfnDashboard$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$TopBottomMoversComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :mover-size)]
      (. builder moverSize data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :sort-order)]
      (. builder sortOrder data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-top-bottom-ranked-computation-property-builder
  "The cfn-dashboard-top-bottom-ranked-computation-property-builder function buildes out new instances of 
CfnDashboard$TopBottomRankedComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `resultSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:result-size` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$TopBottomRankedComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :result-size)]
      (. builder resultSize data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-total-aggregation-computation-property-builder
  "The cfn-dashboard-total-aggregation-computation-property-builder function buildes out new instances of 
CfnDashboard$TotalAggregationComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `value` | software.amazon.awscdk.services.quicksight.CfnDashboard$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$TotalAggregationComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-total-aggregation-function-property-builder
  "The cfn-dashboard-total-aggregation-function-property-builder function buildes out new instances of 
CfnDashboard$TotalAggregationFunctionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleTotalAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-total-aggregation-function` |"
  [stack id config]
  (let [builder (CfnDashboard$TotalAggregationFunctionProperty$Builder.)]
    (when-let [data (lookup-entry config id :simple-total-aggregation-function)]
      (. builder simpleTotalAggregationFunction data))
    (.build builder)))


(defn cfn-dashboard-total-aggregation-option-property-builder
  "The cfn-dashboard-total-aggregation-option-property-builder function buildes out new instances of 
CfnDashboard$TotalAggregationOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `totalAggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-aggregation-function` |"
  [stack id config]
  (let [builder (CfnDashboard$TotalAggregationOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :total-aggregation-function)]
      (. builder totalAggregationFunction data))
    (.build builder)))


(defn cfn-dashboard-total-options-property-builder
  "The cfn-dashboard-total-options-property-builder function buildes out new instances of 
CfnDashboard$TotalOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scrollStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:scroll-status` |
| `totalAggregationOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:total-aggregation-options` |
| `totalCellStyle` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$TotalOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :placement)]
      (. builder placement data))
    (when-let [data (lookup-entry config id :scroll-status)]
      (. builder scrollStatus data))
    (when-let [data (lookup-entry config id :total-aggregation-options)]
      (. builder totalAggregationOptions data))
    (when-let [data (lookup-entry config id :total-cell-style)]
      (. builder totalCellStyle data))
    (when-let [data (lookup-entry config id :totals-visibility)]
      (. builder totalsVisibility data))
    (.build builder)))


(defn cfn-dashboard-tree-map-aggregated-field-wells-property-builder
  "The cfn-dashboard-tree-map-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$TreeMapAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `groups` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:groups` |
| `sizes` | java.util.List | [[cdk.support/lookup-entry]] | `:sizes` |"
  [stack id config]
  (let [builder (CfnDashboard$TreeMapAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :groups)]
      (. builder groups data))
    (when-let [data (lookup-entry config id :sizes)]
      (. builder sizes data))
    (.build builder)))


(defn cfn-dashboard-tree-map-configuration-property-builder
  "The cfn-dashboard-tree-map-configuration-property-builder function buildes out new instances of 
CfnDashboard$TreeMapConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `colorScale` | software.amazon.awscdk.services.quicksight.CfnDashboard$ColorScaleProperty | [[cdk.support/lookup-entry]] | `:color-scale` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `groupLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-label-options` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnDashboard$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `sizeLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:size-label-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$TreeMapSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnDashboard$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |"
  [stack id config]
  (let [builder (CfnDashboard$TreeMapConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :color-label-options)]
      (. builder colorLabelOptions data))
    (when-let [data (lookup-entry config id :color-scale)]
      (. builder colorScale data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :group-label-options)]
      (. builder groupLabelOptions data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :size-label-options)]
      (. builder sizeLabelOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (.build builder)))


(defn cfn-dashboard-tree-map-field-wells-property-builder
  "The cfn-dashboard-tree-map-field-wells-property-builder function buildes out new instances of 
CfnDashboard$TreeMapFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treeMapAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tree-map-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$TreeMapFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :tree-map-aggregated-field-wells)]
      (. builder treeMapAggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-tree-map-sort-configuration-property-builder
  "The cfn-dashboard-tree-map-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$TreeMapSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treeMapGroupItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:tree-map-group-items-limit-configuration` |
| `treeMapSort` | java.util.List | [[cdk.support/lookup-entry]] | `:tree-map-sort` |"
  [stack id config]
  (let [builder (CfnDashboard$TreeMapSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :tree-map-group-items-limit-configuration)]
      (. builder treeMapGroupItemsLimitConfiguration data))
    (when-let [data (lookup-entry config id :tree-map-sort)]
      (. builder treeMapSort data))
    (.build builder)))


(defn cfn-dashboard-tree-map-visual-property-builder
  "The cfn-dashboard-tree-map-visual-property-builder function buildes out new instances of 
CfnDashboard$TreeMapVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$TreeMapConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$TreeMapVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-trend-arrow-options-property-builder
  "The cfn-dashboard-trend-arrow-options-property-builder function buildes out new instances of 
CfnDashboard$TrendArrowOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$TrendArrowOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-unaggregated-field-property-builder
  "The cfn-dashboard-unaggregated-field-property-builder function buildes out new instances of 
CfnDashboard$UnaggregatedFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$FormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$UnaggregatedFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (.build builder)))


(defn cfn-dashboard-unique-values-computation-property-builder
  "The cfn-dashboard-unique-values-computation-property-builder function buildes out new instances of 
CfnDashboard$UniqueValuesComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |"
  [stack id config]
  (let [builder (CfnDashboard$UniqueValuesComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (.build builder)))


(defn cfn-dashboard-validation-strategy-property-builder
  "The cfn-dashboard-validation-strategy-property-builder function buildes out new instances of 
CfnDashboard$ValidationStrategyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `mode` | java.lang.String | [[cdk.support/lookup-entry]] | `:mode` |"
  [stack id config]
  (let [builder (CfnDashboard$ValidationStrategyProperty$Builder.)]
    (when-let [data (lookup-entry config id :mode)]
      (. builder mode data))
    (.build builder)))


(defn cfn-dashboard-visible-range-options-property-builder
  "The cfn-dashboard-visible-range-options-property-builder function buildes out new instances of 
CfnDashboard$VisibleRangeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentRange` | software.amazon.awscdk.services.quicksight.CfnDashboard$PercentVisibleRangeProperty | [[cdk.support/lookup-entry]] | `:percent-range` |"
  [stack id config]
  (let [builder (CfnDashboard$VisibleRangeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :percent-range)]
      (. builder percentRange data))
    (.build builder)))


(defn cfn-dashboard-visual-axis-sort-option-property-builder
  "The cfn-dashboard-visual-axis-sort-option-property-builder function buildes out new instances of 
CfnDashboard$VisualAxisSortOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |"
  [stack id config]
  (let [builder (CfnDashboard$VisualAxisSortOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :availability-status)]
      (. builder availabilityStatus data))
    (.build builder)))


(defn cfn-dashboard-visual-custom-action-operation-property-builder
  "The cfn-dashboard-visual-custom-action-operation-property-builder function buildes out new instances of 
CfnDashboard$VisualCustomActionOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `filterOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-operation` |
| `navigationOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:navigation-operation` |
| `setParametersOperation` | software.amazon.awscdk.services.quicksight.CfnDashboard$CustomActionSetParametersOperationProperty | [[cdk.support/lookup-entry]] | `:set-parameters-operation` |
| `urlOperation` | software.amazon.awscdk.services.quicksight.CfnDashboard$CustomActionURLOperationProperty | [[cdk.support/lookup-entry]] | `:url-operation` |"
  [stack id config]
  (let [builder (CfnDashboard$VisualCustomActionOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :filter-operation)]
      (. builder filterOperation data))
    (when-let [data (lookup-entry config id :navigation-operation)]
      (. builder navigationOperation data))
    (when-let [data (lookup-entry config id :set-parameters-operation)]
      (. builder setParametersOperation data))
    (when-let [data (lookup-entry config id :url-operation)]
      (. builder urlOperation data))
    (.build builder)))


(defn cfn-dashboard-visual-custom-action-property-builder
  "The cfn-dashboard-visual-custom-action-property-builder function buildes out new instances of 
CfnDashboard$VisualCustomActionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actionOperations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:action-operations` |
| `customActionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-action-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `trigger` | java.lang.String | [[cdk.support/lookup-entry]] | `:trigger` |"
  [stack id config]
  (let [builder (CfnDashboard$VisualCustomActionProperty$Builder.)]
    (when-let [data (lookup-entry config id :action-operations)]
      (. builder actionOperations data))
    (when-let [data (lookup-entry config id :custom-action-id)]
      (. builder customActionId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (when-let [data (lookup-entry config id :trigger)]
      (. builder trigger data))
    (.build builder)))


(defn cfn-dashboard-visual-menu-option-property-builder
  "The cfn-dashboard-visual-menu-option-property-builder function buildes out new instances of 
CfnDashboard$VisualMenuOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |"
  [stack id config]
  (let [builder (CfnDashboard$VisualMenuOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :availability-status)]
      (. builder availabilityStatus data))
    (.build builder)))


(defn cfn-dashboard-visual-palette-property-builder
  "The cfn-dashboard-visual-palette-property-builder function buildes out new instances of 
CfnDashboard$VisualPaletteProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `chartColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:chart-color` |
| `colorMap` | java.util.List | [[cdk.support/lookup-entry]] | `:color-map` |"
  [stack id config]
  (let [builder (CfnDashboard$VisualPaletteProperty$Builder.)]
    (when-let [data (lookup-entry config id :chart-color)]
      (. builder chartColor data))
    (when-let [data (lookup-entry config id :color-map)]
      (. builder colorMap data))
    (.build builder)))


(defn cfn-dashboard-visual-property-builder
  "The cfn-dashboard-visual-property-builder function buildes out new instances of 
CfnDashboard$VisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bar-chart-visual` |
| `boxPlotVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$BoxPlotVisualProperty | [[cdk.support/lookup-entry]] | `:box-plot-visual` |
| `comboChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:combo-chart-visual` |
| `customContentVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$CustomContentVisualProperty | [[cdk.support/lookup-entry]] | `:custom-content-visual` |
| `emptyVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$EmptyVisualProperty | [[cdk.support/lookup-entry]] | `:empty-visual` |
| `filledMapVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$FilledMapVisualProperty | [[cdk.support/lookup-entry]] | `:filled-map-visual` |
| `funnelChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:funnel-chart-visual` |
| `gaugeChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:gauge-chart-visual` |
| `geospatialMapVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:geospatial-map-visual` |
| `heatMapVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heat-map-visual` |
| `histogramVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$HistogramVisualProperty | [[cdk.support/lookup-entry]] | `:histogram-visual` |
| `insightVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:insight-visual` |
| `kpiVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:kpi-visual` |
| `lineChartVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$LineChartVisualProperty | [[cdk.support/lookup-entry]] | `:line-chart-visual` |
| `pieChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:pie-chart-visual` |
| `pivotTableVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$PivotTableVisualProperty | [[cdk.support/lookup-entry]] | `:pivot-table-visual` |
| `radarChartVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$RadarChartVisualProperty | [[cdk.support/lookup-entry]] | `:radar-chart-visual` |
| `sankeyDiagramVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sankey-diagram-visual` |
| `scatterPlotVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scatter-plot-visual` |
| `tableVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$TableVisualProperty | [[cdk.support/lookup-entry]] | `:table-visual` |
| `treeMapVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$TreeMapVisualProperty | [[cdk.support/lookup-entry]] | `:tree-map-visual` |
| `waterfallVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$WaterfallVisualProperty | [[cdk.support/lookup-entry]] | `:waterfall-visual` |
| `wordCloudVisual` | software.amazon.awscdk.services.quicksight.CfnDashboard$WordCloudVisualProperty | [[cdk.support/lookup-entry]] | `:word-cloud-visual` |"
  [stack id config]
  (let [builder (CfnDashboard$VisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :bar-chart-visual)]
      (. builder barChartVisual data))
    (when-let [data (lookup-entry config id :box-plot-visual)]
      (. builder boxPlotVisual data))
    (when-let [data (lookup-entry config id :combo-chart-visual)]
      (. builder comboChartVisual data))
    (when-let [data (lookup-entry config id :custom-content-visual)]
      (. builder customContentVisual data))
    (when-let [data (lookup-entry config id :empty-visual)]
      (. builder emptyVisual data))
    (when-let [data (lookup-entry config id :filled-map-visual)]
      (. builder filledMapVisual data))
    (when-let [data (lookup-entry config id :funnel-chart-visual)]
      (. builder funnelChartVisual data))
    (when-let [data (lookup-entry config id :gauge-chart-visual)]
      (. builder gaugeChartVisual data))
    (when-let [data (lookup-entry config id :geospatial-map-visual)]
      (. builder geospatialMapVisual data))
    (when-let [data (lookup-entry config id :heat-map-visual)]
      (. builder heatMapVisual data))
    (when-let [data (lookup-entry config id :histogram-visual)]
      (. builder histogramVisual data))
    (when-let [data (lookup-entry config id :insight-visual)]
      (. builder insightVisual data))
    (when-let [data (lookup-entry config id :kpi-visual)]
      (. builder kpiVisual data))
    (when-let [data (lookup-entry config id :line-chart-visual)]
      (. builder lineChartVisual data))
    (when-let [data (lookup-entry config id :pie-chart-visual)]
      (. builder pieChartVisual data))
    (when-let [data (lookup-entry config id :pivot-table-visual)]
      (. builder pivotTableVisual data))
    (when-let [data (lookup-entry config id :radar-chart-visual)]
      (. builder radarChartVisual data))
    (when-let [data (lookup-entry config id :sankey-diagram-visual)]
      (. builder sankeyDiagramVisual data))
    (when-let [data (lookup-entry config id :scatter-plot-visual)]
      (. builder scatterPlotVisual data))
    (when-let [data (lookup-entry config id :table-visual)]
      (. builder tableVisual data))
    (when-let [data (lookup-entry config id :tree-map-visual)]
      (. builder treeMapVisual data))
    (when-let [data (lookup-entry config id :waterfall-visual)]
      (. builder waterfallVisual data))
    (when-let [data (lookup-entry config id :word-cloud-visual)]
      (. builder wordCloudVisual data))
    (.build builder)))


(defn cfn-dashboard-visual-subtitle-label-options-property-builder
  "The cfn-dashboard-visual-subtitle-label-options-property-builder function buildes out new instances of 
CfnDashboard$VisualSubtitleLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatText` | software.amazon.awscdk.services.quicksight.CfnDashboard$LongFormatTextProperty | [[cdk.support/lookup-entry]] | `:format-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$VisualSubtitleLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :format-text)]
      (. builder formatText data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-visual-title-label-options-property-builder
  "The cfn-dashboard-visual-title-label-options-property-builder function buildes out new instances of 
CfnDashboard$VisualTitleLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatText` | software.amazon.awscdk.services.quicksight.CfnDashboard$ShortFormatTextProperty | [[cdk.support/lookup-entry]] | `:format-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnDashboard$VisualTitleLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :format-text)]
      (. builder formatText data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-dashboard-waterfall-chart-aggregated-field-wells-property-builder
  "The cfn-dashboard-waterfall-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$WaterfallChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `breakdowns` | java.util.List | [[cdk.support/lookup-entry]] | `:breakdowns` |
| `categories` | java.util.List | [[cdk.support/lookup-entry]] | `:categories` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnDashboard$WaterfallChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :breakdowns)]
      (. builder breakdowns data))
    (when-let [data (lookup-entry config id :categories)]
      (. builder categories data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-dashboard-waterfall-chart-color-configuration-property-builder
  "The cfn-dashboard-waterfall-chart-color-configuration-property-builder function buildes out new instances of 
CfnDashboard$WaterfallChartColorConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupColorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-color-configuration` |"
  [stack id config]
  (let [builder (CfnDashboard$WaterfallChartColorConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :group-color-configuration)]
      (. builder groupColorConfiguration data))
    (.build builder)))


(defn cfn-dashboard-waterfall-chart-configuration-property-builder
  "The cfn-dashboard-waterfall-chart-configuration-property-builder function buildes out new instances of 
CfnDashboard$WaterfallChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis-display-options` |
| `categoryAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis-label-options` |
| `colorConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$WaterfallChartColorConfigurationProperty | [[cdk.support/lookup-entry]] | `:color-configuration` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnDashboard$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnDashboard$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `waterfallChartOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:waterfall-chart-options` |"
  [stack id config]
  (let [builder (CfnDashboard$WaterfallChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-axis-display-options)]
      (. builder categoryAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :category-axis-label-options)]
      (. builder categoryAxisLabelOptions data))
    (when-let [data (lookup-entry config id :color-configuration)]
      (. builder colorConfiguration data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
      (. builder primaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
      (. builder primaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (when-let [data (lookup-entry config id :waterfall-chart-options)]
      (. builder waterfallChartOptions data))
    (.build builder)))


(defn cfn-dashboard-waterfall-chart-field-wells-property-builder
  "The cfn-dashboard-waterfall-chart-field-wells-property-builder function buildes out new instances of 
CfnDashboard$WaterfallChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `waterfallChartAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$WaterfallChartAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:waterfall-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$WaterfallChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :waterfall-chart-aggregated-field-wells)]
      (. builder waterfallChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-waterfall-chart-group-color-configuration-property-builder
  "The cfn-dashboard-waterfall-chart-group-color-configuration-property-builder function buildes out new instances of 
CfnDashboard$WaterfallChartGroupColorConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `negativeBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:negative-bar-color` |
| `positiveBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:positive-bar-color` |
| `totalBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:total-bar-color` |"
  [stack id config]
  (let [builder (CfnDashboard$WaterfallChartGroupColorConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :negative-bar-color)]
      (. builder negativeBarColor data))
    (when-let [data (lookup-entry config id :positive-bar-color)]
      (. builder positiveBarColor data))
    (when-let [data (lookup-entry config id :total-bar-color)]
      (. builder totalBarColor data))
    (.build builder)))


(defn cfn-dashboard-waterfall-chart-options-property-builder
  "The cfn-dashboard-waterfall-chart-options-property-builder function buildes out new instances of 
CfnDashboard$WaterfallChartOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `totalBarLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:total-bar-label` |"
  [stack id config]
  (let [builder (CfnDashboard$WaterfallChartOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :total-bar-label)]
      (. builder totalBarLabel data))
    (.build builder)))


(defn cfn-dashboard-waterfall-chart-sort-configuration-property-builder
  "The cfn-dashboard-waterfall-chart-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$WaterfallChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `breakdownItemsLimit` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:breakdown-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |"
  [stack id config]
  (let [builder (CfnDashboard$WaterfallChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :breakdown-items-limit)]
      (. builder breakdownItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (.build builder)))


(defn cfn-dashboard-waterfall-visual-property-builder
  "The cfn-dashboard-waterfall-visual-property-builder function buildes out new instances of 
CfnDashboard$WaterfallVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$WaterfallVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-dashboard-what-if-point-scenario-property-builder
  "The cfn-dashboard-what-if-point-scenario-property-builder function buildes out new instances of 
CfnDashboard$WhatIfPointScenarioProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `date` | java.lang.String | [[cdk.support/lookup-entry]] | `:date` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$WhatIfPointScenarioProperty$Builder.)]
    (when-let [data (lookup-entry config id :date)]
      (. builder date data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-what-if-range-scenario-property-builder
  "The cfn-dashboard-what-if-range-scenario-property-builder function buildes out new instances of 
CfnDashboard$WhatIfRangeScenarioProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `endDate` | java.lang.String | [[cdk.support/lookup-entry]] | `:end-date` |
| `startDate` | java.lang.String | [[cdk.support/lookup-entry]] | `:start-date` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnDashboard$WhatIfRangeScenarioProperty$Builder.)]
    (when-let [data (lookup-entry config id :end-date)]
      (. builder endDate data))
    (when-let [data (lookup-entry config id :start-date)]
      (. builder startDate data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-dashboard-word-cloud-aggregated-field-wells-property-builder
  "The cfn-dashboard-word-cloud-aggregated-field-wells-property-builder function buildes out new instances of 
CfnDashboard$WordCloudAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-by` |
| `size` | java.util.List | [[cdk.support/lookup-entry]] | `:size` |"
  [stack id config]
  (let [builder (CfnDashboard$WordCloudAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :group-by)]
      (. builder groupBy data))
    (when-let [data (lookup-entry config id :size)]
      (. builder size data))
    (.build builder)))


(defn cfn-dashboard-word-cloud-chart-configuration-property-builder
  "The cfn-dashboard-word-cloud-chart-configuration-property-builder function buildes out new instances of 
CfnDashboard$WordCloudChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnDashboard$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$WordCloudFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnDashboard$WordCloudSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `wordCloudOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:word-cloud-options` |"
  [stack id config]
  (let [builder (CfnDashboard$WordCloudChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :word-cloud-options)]
      (. builder wordCloudOptions data))
    (.build builder)))


(defn cfn-dashboard-word-cloud-field-wells-property-builder
  "The cfn-dashboard-word-cloud-field-wells-property-builder function buildes out new instances of 
CfnDashboard$WordCloudFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `wordCloudAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnDashboard$WordCloudAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:word-cloud-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnDashboard$WordCloudFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :word-cloud-aggregated-field-wells)]
      (. builder wordCloudAggregatedFieldWells data))
    (.build builder)))


(defn cfn-dashboard-word-cloud-options-property-builder
  "The cfn-dashboard-word-cloud-options-property-builder function buildes out new instances of 
CfnDashboard$WordCloudOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cloudLayout` | java.lang.String | [[cdk.support/lookup-entry]] | `:cloud-layout` |
| `maximumStringLength` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-string-length` |
| `wordCasing` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-casing` |
| `wordOrientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-orientation` |
| `wordPadding` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-padding` |
| `wordScaling` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-scaling` |"
  [stack id config]
  (let [builder (CfnDashboard$WordCloudOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :cloud-layout)]
      (. builder cloudLayout data))
    (when-let [data (lookup-entry config id :maximum-string-length)]
      (. builder maximumStringLength data))
    (when-let [data (lookup-entry config id :word-casing)]
      (. builder wordCasing data))
    (when-let [data (lookup-entry config id :word-orientation)]
      (. builder wordOrientation data))
    (when-let [data (lookup-entry config id :word-padding)]
      (. builder wordPadding data))
    (when-let [data (lookup-entry config id :word-scaling)]
      (. builder wordScaling data))
    (.build builder)))


(defn cfn-dashboard-word-cloud-sort-configuration-property-builder
  "The cfn-dashboard-word-cloud-sort-configuration-property-builder function buildes out new instances of 
CfnDashboard$WordCloudSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.services.quicksight.CfnDashboard$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |"
  [stack id config]
  (let [builder (CfnDashboard$WordCloudSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (.build builder)))


(defn cfn-dashboard-word-cloud-visual-property-builder
  "The cfn-dashboard-word-cloud-visual-property-builder function buildes out new instances of 
CfnDashboard$WordCloudVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnDashboard$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnDashboard$WordCloudVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-data-set-builder
  "The cfn-data-set-builder function buildes out new instances of 
CfnDataSet$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `columnGroups` | java.util.List | [[cdk.support/lookup-entry]] | `:column-groups` |
| `columnLevelPermissionRules` | java.util.List | [[cdk.support/lookup-entry]] | `:column-level-permission-rules` |
| `dataSetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-id` |
| `dataSetRefreshProperties` | software.amazon.awscdk.services.quicksight.CfnDataSet$DataSetRefreshPropertiesProperty | [[cdk.support/lookup-entry]] | `:data-set-refresh-properties` |
| `dataSetUsageConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-set-usage-configuration` |
| `datasetParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:dataset-parameters` |
| `fieldFolders` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-folders` |
| `importMode` | java.lang.String | [[cdk.support/lookup-entry]] | `:import-mode` |
| `ingestionWaitPolicy` | software.amazon.awscdk.services.quicksight.CfnDataSet$IngestionWaitPolicyProperty | [[cdk.support/lookup-entry]] | `:ingestion-wait-policy` |
| `logicalTableMap` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:logical-table-map` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `permissions` | java.util.List | [[cdk.support/lookup-entry]] | `:permissions` |
| `physicalTableMap` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:physical-table-map` |
| `rowLevelPermissionDataSet` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-level-permission-data-set` |
| `rowLevelPermissionTagConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-level-permission-tag-configuration` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |"
  [stack id config]
  (let [builder (CfnDataSet$Builder/create stack id)]
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :column-groups)]
      (. builder columnGroups data))
    (when-let [data (lookup-entry config id :column-level-permission-rules)]
      (. builder columnLevelPermissionRules data))
    (when-let [data (lookup-entry config id :data-set-id)]
      (. builder dataSetId data))
    (when-let [data (lookup-entry config id :data-set-refresh-properties)]
      (. builder dataSetRefreshProperties data))
    (when-let [data (lookup-entry config id :data-set-usage-configuration)]
      (. builder dataSetUsageConfiguration data))
    (when-let [data (lookup-entry config id :dataset-parameters)]
      (. builder datasetParameters data))
    (when-let [data (lookup-entry config id :field-folders)]
      (. builder fieldFolders data))
    (when-let [data (lookup-entry config id :import-mode)]
      (. builder importMode data))
    (when-let [data (lookup-entry config id :ingestion-wait-policy)]
      (. builder ingestionWaitPolicy data))
    (when-let [data (lookup-entry config id :logical-table-map)]
      (. builder logicalTableMap data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :permissions)]
      (. builder permissions data))
    (when-let [data (lookup-entry config id :physical-table-map)]
      (. builder physicalTableMap data))
    (when-let [data (lookup-entry config id :row-level-permission-data-set)]
      (. builder rowLevelPermissionDataSet data))
    (when-let [data (lookup-entry config id :row-level-permission-tag-configuration)]
      (. builder rowLevelPermissionTagConfiguration data))
    (when-let [data (lookup-entry config id :tags)]
      (. builder tags data))
    (.build builder)))


(defn cfn-data-set-calculated-column-property-builder
  "The cfn-data-set-calculated-column-property-builder function buildes out new instances of 
CfnDataSet$CalculatedColumnProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnId` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-id` |
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |"
  [stack id config]
  (let [builder (CfnDataSet$CalculatedColumnProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-id)]
      (. builder columnId data))
    (when-let [data (lookup-entry config id :column-name)]
      (. builder columnName data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (.build builder)))


(defn cfn-data-set-cast-column-type-operation-property-builder
  "The cfn-data-set-cast-column-type-operation-property-builder function buildes out new instances of 
CfnDataSet$CastColumnTypeOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `format` | java.lang.String | [[cdk.support/lookup-entry]] | `:format` |
| `newColumnType` | java.lang.String | [[cdk.support/lookup-entry]] | `:new-column-type` |
| `subType` | java.lang.String | [[cdk.support/lookup-entry]] | `:sub-type` |"
  [stack id config]
  (let [builder (CfnDataSet$CastColumnTypeOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-name)]
      (. builder columnName data))
    (when-let [data (lookup-entry config id :format)]
      (. builder format data))
    (when-let [data (lookup-entry config id :new-column-type)]
      (. builder newColumnType data))
    (when-let [data (lookup-entry config id :sub-type)]
      (. builder subType data))
    (.build builder)))


(defn cfn-data-set-column-description-property-builder
  "The cfn-data-set-column-description-property-builder function buildes out new instances of 
CfnDataSet$ColumnDescriptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `text` | java.lang.String | [[cdk.support/lookup-entry]] | `:text` |"
  [stack id config]
  (let [builder (CfnDataSet$ColumnDescriptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :text)]
      (. builder text data))
    (.build builder)))


(defn cfn-data-set-column-group-property-builder
  "The cfn-data-set-column-group-property-builder function buildes out new instances of 
CfnDataSet$ColumnGroupProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `geoSpatialColumnGroup` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:geo-spatial-column-group` |"
  [stack id config]
  (let [builder (CfnDataSet$ColumnGroupProperty$Builder.)]
    (when-let [data (lookup-entry config id :geo-spatial-column-group)]
      (. builder geoSpatialColumnGroup data))
    (.build builder)))


(defn cfn-data-set-column-level-permission-rule-property-builder
  "The cfn-data-set-column-level-permission-rule-property-builder function buildes out new instances of 
CfnDataSet$ColumnLevelPermissionRuleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnNames` | java.util.List | [[cdk.support/lookup-entry]] | `:column-names` |
| `principals` | java.util.List | [[cdk.support/lookup-entry]] | `:principals` |"
  [stack id config]
  (let [builder (CfnDataSet$ColumnLevelPermissionRuleProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-names)]
      (. builder columnNames data))
    (when-let [data (lookup-entry config id :principals)]
      (. builder principals data))
    (.build builder)))


(defn cfn-data-set-column-tag-property-builder
  "The cfn-data-set-column-tag-property-builder function buildes out new instances of 
CfnDataSet$ColumnTagProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnDescription` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-description` |
| `columnGeographicRole` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-geographic-role` |"
  [stack id config]
  (let [builder (CfnDataSet$ColumnTagProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-description)]
      (. builder columnDescription data))
    (when-let [data (lookup-entry config id :column-geographic-role)]
      (. builder columnGeographicRole data))
    (.build builder)))


(defn cfn-data-set-create-columns-operation-property-builder
  "The cfn-data-set-create-columns-operation-property-builder function buildes out new instances of 
CfnDataSet$CreateColumnsOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |"
  [stack id config]
  (let [builder (CfnDataSet$CreateColumnsOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (.build builder)))


(defn cfn-data-set-custom-sql-property-builder
  "The cfn-data-set-custom-sql-property-builder function buildes out new instances of 
CfnDataSet$CustomSqlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `dataSourceArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-source-arn` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `sqlQuery` | java.lang.String | [[cdk.support/lookup-entry]] | `:sql-query` |"
  [stack id config]
  (let [builder (CfnDataSet$CustomSqlProperty$Builder.)]
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (when-let [data (lookup-entry config id :data-source-arn)]
      (. builder dataSourceArn data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :sql-query)]
      (. builder sqlQuery data))
    (.build builder)))


(defn cfn-data-set-data-set-refresh-properties-property-builder
  "The cfn-data-set-data-set-refresh-properties-property-builder function buildes out new instances of 
CfnDataSet$DataSetRefreshPropertiesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `refreshConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:refresh-configuration` |"
  [stack id config]
  (let [builder (CfnDataSet$DataSetRefreshPropertiesProperty$Builder.)]
    (when-let [data (lookup-entry config id :refresh-configuration)]
      (. builder refreshConfiguration data))
    (.build builder)))


(defn cfn-data-set-data-set-usage-configuration-property-builder
  "The cfn-data-set-data-set-usage-configuration-property-builder function buildes out new instances of 
CfnDataSet$DataSetUsageConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `disableUseAsDirectQuerySource` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:disable-use-as-direct-query-source` |
| `disableUseAsImportedSource` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:disable-use-as-imported-source` |"
  [stack id config]
  (let [builder (CfnDataSet$DataSetUsageConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :disable-use-as-direct-query-source)]
      (. builder disableUseAsDirectQuerySource data))
    (when-let [data (lookup-entry config id :disable-use-as-imported-source)]
      (. builder disableUseAsImportedSource data))
    (.build builder)))


(defn cfn-data-set-dataset-parameter-property-builder
  "The cfn-data-set-dataset-parameter-property-builder function buildes out new instances of 
CfnDataSet$DatasetParameterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeDatasetParameter` | software.amazon.awscdk.services.quicksight.CfnDataSet$DateTimeDatasetParameterProperty | [[cdk.support/lookup-entry]] | `:date-time-dataset-parameter` |
| `decimalDatasetParameter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-dataset-parameter` |
| `integerDatasetParameter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:integer-dataset-parameter` |
| `stringDatasetParameter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:string-dataset-parameter` |"
  [stack id config]
  (let [builder (CfnDataSet$DatasetParameterProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-dataset-parameter)]
      (. builder dateTimeDatasetParameter data))
    (when-let [data (lookup-entry config id :decimal-dataset-parameter)]
      (. builder decimalDatasetParameter data))
    (when-let [data (lookup-entry config id :integer-dataset-parameter)]
      (. builder integerDatasetParameter data))
    (when-let [data (lookup-entry config id :string-dataset-parameter)]
      (. builder stringDatasetParameter data))
    (.build builder)))


(defn cfn-data-set-date-time-dataset-parameter-default-values-property-builder
  "The cfn-data-set-date-time-dataset-parameter-default-values-property-builder function buildes out new instances of 
CfnDataSet$DateTimeDatasetParameterDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |"
  [stack id config]
  (let [builder (CfnDataSet$DateTimeDatasetParameterDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :static-values)]
      (. builder staticValues data))
    (.build builder)))


(defn cfn-data-set-date-time-dataset-parameter-property-builder
  "The cfn-data-set-date-time-dataset-parameter-property-builder function buildes out new instances of 
CfnDataSet$DateTimeDatasetParameterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `id` | java.lang.String | [[cdk.support/lookup-entry]] | `:id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
| `valueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-type` |"
  [stack id config]
  (let [builder (CfnDataSet$DateTimeDatasetParameterProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-values)]
      (. builder defaultValues data))
    (when-let [data (lookup-entry config id :id)]
      (. builder id data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (when-let [data (lookup-entry config id :value-type)]
      (. builder valueType data))
    (.build builder)))


(defn cfn-data-set-decimal-dataset-parameter-default-values-property-builder
  "The cfn-data-set-decimal-dataset-parameter-default-values-property-builder function buildes out new instances of 
CfnDataSet$DecimalDatasetParameterDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |"
  [stack id config]
  (let [builder (CfnDataSet$DecimalDatasetParameterDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :static-values)]
      (. builder staticValues data))
    (.build builder)))


(defn cfn-data-set-decimal-dataset-parameter-property-builder
  "The cfn-data-set-decimal-dataset-parameter-property-builder function buildes out new instances of 
CfnDataSet$DecimalDatasetParameterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `id` | java.lang.String | [[cdk.support/lookup-entry]] | `:id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `valueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-type` |"
  [stack id config]
  (let [builder (CfnDataSet$DecimalDatasetParameterProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-values)]
      (. builder defaultValues data))
    (when-let [data (lookup-entry config id :id)]
      (. builder id data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :value-type)]
      (. builder valueType data))
    (.build builder)))


(defn cfn-data-set-field-folder-property-builder
  "The cfn-data-set-field-folder-property-builder function buildes out new instances of 
CfnDataSet$FieldFolderProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |"
  [stack id config]
  (let [builder (CfnDataSet$FieldFolderProperty$Builder.)]
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (when-let [data (lookup-entry config id :description)]
      (. builder description data))
    (.build builder)))


(defn cfn-data-set-filter-operation-property-builder
  "The cfn-data-set-filter-operation-property-builder function buildes out new instances of 
CfnDataSet$FilterOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionExpression` | java.lang.String | [[cdk.support/lookup-entry]] | `:condition-expression` |"
  [stack id config]
  (let [builder (CfnDataSet$FilterOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :condition-expression)]
      (. builder conditionExpression data))
    (.build builder)))


(defn cfn-data-set-geo-spatial-column-group-property-builder
  "The cfn-data-set-geo-spatial-column-group-property-builder function buildes out new instances of 
CfnDataSet$GeoSpatialColumnGroupProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `countryCode` | java.lang.String | [[cdk.support/lookup-entry]] | `:country-code` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |"
  [stack id config]
  (let [builder (CfnDataSet$GeoSpatialColumnGroupProperty$Builder.)]
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (when-let [data (lookup-entry config id :country-code)]
      (. builder countryCode data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (.build builder)))


(defn cfn-data-set-incremental-refresh-property-builder
  "The cfn-data-set-incremental-refresh-property-builder function buildes out new instances of 
CfnDataSet$IncrementalRefreshProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lookbackWindow` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:lookback-window` |"
  [stack id config]
  (let [builder (CfnDataSet$IncrementalRefreshProperty$Builder.)]
    (when-let [data (lookup-entry config id :lookback-window)]
      (. builder lookbackWindow data))
    (.build builder)))


(defn cfn-data-set-ingestion-wait-policy-property-builder
  "The cfn-data-set-ingestion-wait-policy-property-builder function buildes out new instances of 
CfnDataSet$IngestionWaitPolicyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `ingestionWaitTimeInHours` | java.lang.Number | [[cdk.support/lookup-entry]] | `:ingestion-wait-time-in-hours` |
| `waitForSpiceIngestion` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:wait-for-spice-ingestion` |"
  [stack id config]
  (let [builder (CfnDataSet$IngestionWaitPolicyProperty$Builder.)]
    (when-let [data (lookup-entry config id :ingestion-wait-time-in-hours)]
      (. builder ingestionWaitTimeInHours data))
    (when-let [data (lookup-entry config id :wait-for-spice-ingestion)]
      (. builder waitForSpiceIngestion data))
    (.build builder)))


(defn cfn-data-set-input-column-property-builder
  "The cfn-data-set-input-column-property-builder function buildes out new instances of 
CfnDataSet$InputColumnProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `subType` | java.lang.String | [[cdk.support/lookup-entry]] | `:sub-type` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnDataSet$InputColumnProperty$Builder.)]
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :sub-type)]
      (. builder subType data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-data-set-integer-dataset-parameter-default-values-property-builder
  "The cfn-data-set-integer-dataset-parameter-default-values-property-builder function buildes out new instances of 
CfnDataSet$IntegerDatasetParameterDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `staticValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:static-values` |"
  [stack id config]
  (let [builder (CfnDataSet$IntegerDatasetParameterDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :static-values)]
      (. builder staticValues data))
    (.build builder)))


(defn cfn-data-set-integer-dataset-parameter-property-builder
  "The cfn-data-set-integer-dataset-parameter-property-builder function buildes out new instances of 
CfnDataSet$IntegerDatasetParameterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `id` | java.lang.String | [[cdk.support/lookup-entry]] | `:id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `valueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-type` |"
  [stack id config]
  (let [builder (CfnDataSet$IntegerDatasetParameterProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-values)]
      (. builder defaultValues data))
    (when-let [data (lookup-entry config id :id)]
      (. builder id data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :value-type)]
      (. builder valueType data))
    (.build builder)))


(defn cfn-data-set-join-instruction-property-builder
  "The cfn-data-set-join-instruction-property-builder function buildes out new instances of 
CfnDataSet$JoinInstructionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `leftJoinKeyProperties` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:left-join-key-properties` |
| `leftOperand` | java.lang.String | [[cdk.support/lookup-entry]] | `:left-operand` |
| `onClause` | java.lang.String | [[cdk.support/lookup-entry]] | `:on-clause` |
| `rightJoinKeyProperties` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:right-join-key-properties` |
| `rightOperand` | java.lang.String | [[cdk.support/lookup-entry]] | `:right-operand` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnDataSet$JoinInstructionProperty$Builder.)]
    (when-let [data (lookup-entry config id :left-join-key-properties)]
      (. builder leftJoinKeyProperties data))
    (when-let [data (lookup-entry config id :left-operand)]
      (. builder leftOperand data))
    (when-let [data (lookup-entry config id :on-clause)]
      (. builder onClause data))
    (when-let [data (lookup-entry config id :right-join-key-properties)]
      (. builder rightJoinKeyProperties data))
    (when-let [data (lookup-entry config id :right-operand)]
      (. builder rightOperand data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-data-set-join-key-properties-property-builder
  "The cfn-data-set-join-key-properties-property-builder function buildes out new instances of 
CfnDataSet$JoinKeyPropertiesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `uniqueKey` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:unique-key` |"
  [stack id config]
  (let [builder (CfnDataSet$JoinKeyPropertiesProperty$Builder.)]
    (when-let [data (lookup-entry config id :unique-key)]
      (. builder uniqueKey data))
    (.build builder)))


(defn cfn-data-set-logical-table-property-builder
  "The cfn-data-set-logical-table-property-builder function buildes out new instances of 
CfnDataSet$LogicalTableProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `alias` | java.lang.String | [[cdk.support/lookup-entry]] | `:alias` |
| `dataTransforms` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-transforms` |
| `source` | software.amazon.awscdk.services.quicksight.CfnDataSet$LogicalTableSourceProperty | [[cdk.support/lookup-entry]] | `:source` |"
  [stack id config]
  (let [builder (CfnDataSet$LogicalTableProperty$Builder.)]
    (when-let [data (lookup-entry config id :alias)]
      (. builder alias data))
    (when-let [data (lookup-entry config id :data-transforms)]
      (. builder dataTransforms data))
    (when-let [data (lookup-entry config id :source)]
      (. builder source data))
    (.build builder)))


(defn cfn-data-set-logical-table-source-property-builder
  "The cfn-data-set-logical-table-source-property-builder function buildes out new instances of 
CfnDataSet$LogicalTableSourceProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-arn` |
| `joinInstruction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:join-instruction` |
| `physicalTableId` | java.lang.String | [[cdk.support/lookup-entry]] | `:physical-table-id` |"
  [stack id config]
  (let [builder (CfnDataSet$LogicalTableSourceProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-set-arn)]
      (. builder dataSetArn data))
    (when-let [data (lookup-entry config id :join-instruction)]
      (. builder joinInstruction data))
    (when-let [data (lookup-entry config id :physical-table-id)]
      (. builder physicalTableId data))
    (.build builder)))


(defn cfn-data-set-lookback-window-property-builder
  "The cfn-data-set-lookback-window-property-builder function buildes out new instances of 
CfnDataSet$LookbackWindowProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `size` | java.lang.Number | [[cdk.support/lookup-entry]] | `:size` |
| `sizeUnit` | java.lang.String | [[cdk.support/lookup-entry]] | `:size-unit` |"
  [stack id config]
  (let [builder (CfnDataSet$LookbackWindowProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-name)]
      (. builder columnName data))
    (when-let [data (lookup-entry config id :size)]
      (. builder size data))
    (when-let [data (lookup-entry config id :size-unit)]
      (. builder sizeUnit data))
    (.build builder)))


(defn cfn-data-set-new-default-values-property-builder
  "The cfn-data-set-new-default-values-property-builder function buildes out new instances of 
CfnDataSet$NewDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeStaticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:date-time-static-values` |
| `decimalStaticValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-static-values` |
| `integerStaticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:integer-static-values` |
| `stringStaticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:string-static-values` |"
  [stack id config]
  (let [builder (CfnDataSet$NewDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-static-values)]
      (. builder dateTimeStaticValues data))
    (when-let [data (lookup-entry config id :decimal-static-values)]
      (. builder decimalStaticValues data))
    (when-let [data (lookup-entry config id :integer-static-values)]
      (. builder integerStaticValues data))
    (when-let [data (lookup-entry config id :string-static-values)]
      (. builder stringStaticValues data))
    (.build builder)))


(defn cfn-data-set-output-column-property-builder
  "The cfn-data-set-output-column-property-builder function buildes out new instances of 
CfnDataSet$OutputColumnProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `subType` | java.lang.String | [[cdk.support/lookup-entry]] | `:sub-type` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnDataSet$OutputColumnProperty$Builder.)]
    (when-let [data (lookup-entry config id :description)]
      (. builder description data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :sub-type)]
      (. builder subType data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-data-set-override-dataset-parameter-operation-property-builder
  "The cfn-data-set-override-dataset-parameter-operation-property-builder function buildes out new instances of 
CfnDataSet$OverrideDatasetParameterOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `newDefaultValues` | software.amazon.awscdk.services.quicksight.CfnDataSet$NewDefaultValuesProperty | [[cdk.support/lookup-entry]] | `:new-default-values` |
| `newParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:new-parameter-name` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |"
  [stack id config]
  (let [builder (CfnDataSet$OverrideDatasetParameterOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :new-default-values)]
      (. builder newDefaultValues data))
    (when-let [data (lookup-entry config id :new-parameter-name)]
      (. builder newParameterName data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (.build builder)))


(defn cfn-data-set-physical-table-property-builder
  "The cfn-data-set-physical-table-property-builder function buildes out new instances of 
CfnDataSet$PhysicalTableProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customSql` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-sql` |
| `relationalTable` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:relational-table` |
| `s3Source` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:s3-source` |"
  [stack id config]
  (let [builder (CfnDataSet$PhysicalTableProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-sql)]
      (. builder customSql data))
    (when-let [data (lookup-entry config id :relational-table)]
      (. builder relationalTable data))
    (when-let [data (lookup-entry config id :s3-source)]
      (. builder s3Source data))
    (.build builder)))


(defn cfn-data-set-project-operation-property-builder
  "The cfn-data-set-project-operation-property-builder function buildes out new instances of 
CfnDataSet$ProjectOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `projectedColumns` | java.util.List | [[cdk.support/lookup-entry]] | `:projected-columns` |"
  [stack id config]
  (let [builder (CfnDataSet$ProjectOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :projected-columns)]
      (. builder projectedColumns data))
    (.build builder)))


(defn cfn-data-set-props-builder
  "The cfn-data-set-props-builder function buildes out new instances of 
CfnDataSetProps$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `columnGroups` | java.util.List | [[cdk.support/lookup-entry]] | `:column-groups` |
| `columnLevelPermissionRules` | java.util.List | [[cdk.support/lookup-entry]] | `:column-level-permission-rules` |
| `dataSetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-id` |
| `dataSetRefreshProperties` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-set-refresh-properties` |
| `dataSetUsageConfiguration` | software.amazon.awscdk.services.quicksight.CfnDataSet$DataSetUsageConfigurationProperty | [[cdk.support/lookup-entry]] | `:data-set-usage-configuration` |
| `datasetParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dataset-parameters` |
| `fieldFolders` | java.util.Map | [[cdk.support/lookup-entry]] | `:field-folders` |
| `importMode` | java.lang.String | [[cdk.support/lookup-entry]] | `:import-mode` |
| `ingestionWaitPolicy` | software.amazon.awscdk.services.quicksight.CfnDataSet$IngestionWaitPolicyProperty | [[cdk.support/lookup-entry]] | `:ingestion-wait-policy` |
| `logicalTableMap` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:logical-table-map` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `permissions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:permissions` |
| `physicalTableMap` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:physical-table-map` |
| `rowLevelPermissionDataSet` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-level-permission-data-set` |
| `rowLevelPermissionTagConfiguration` | software.amazon.awscdk.services.quicksight.CfnDataSet$RowLevelPermissionTagConfigurationProperty | [[cdk.support/lookup-entry]] | `:row-level-permission-tag-configuration` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |"
  [stack id config]
  (let [builder (CfnDataSetProps$Builder.)]
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :column-groups)]
      (. builder columnGroups data))
    (when-let [data (lookup-entry config id :column-level-permission-rules)]
      (. builder columnLevelPermissionRules data))
    (when-let [data (lookup-entry config id :data-set-id)]
      (. builder dataSetId data))
    (when-let [data (lookup-entry config id :data-set-refresh-properties)]
      (. builder dataSetRefreshProperties data))
    (when-let [data (lookup-entry config id :data-set-usage-configuration)]
      (. builder dataSetUsageConfiguration data))
    (when-let [data (lookup-entry config id :dataset-parameters)]
      (. builder datasetParameters data))
    (when-let [data (lookup-entry config id :field-folders)]
      (. builder fieldFolders data))
    (when-let [data (lookup-entry config id :import-mode)]
      (. builder importMode data))
    (when-let [data (lookup-entry config id :ingestion-wait-policy)]
      (. builder ingestionWaitPolicy data))
    (when-let [data (lookup-entry config id :logical-table-map)]
      (. builder logicalTableMap data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :permissions)]
      (. builder permissions data))
    (when-let [data (lookup-entry config id :physical-table-map)]
      (. builder physicalTableMap data))
    (when-let [data (lookup-entry config id :row-level-permission-data-set)]
      (. builder rowLevelPermissionDataSet data))
    (when-let [data (lookup-entry config id :row-level-permission-tag-configuration)]
      (. builder rowLevelPermissionTagConfiguration data))
    (when-let [data (lookup-entry config id :tags)]
      (. builder tags data))
    (.build builder)))


(defn cfn-data-set-refresh-configuration-property-builder
  "The cfn-data-set-refresh-configuration-property-builder function buildes out new instances of 
CfnDataSet$RefreshConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `incrementalRefresh` | software.amazon.awscdk.services.quicksight.CfnDataSet$IncrementalRefreshProperty | [[cdk.support/lookup-entry]] | `:incremental-refresh` |"
  [stack id config]
  (let [builder (CfnDataSet$RefreshConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :incremental-refresh)]
      (. builder incrementalRefresh data))
    (.build builder)))


(defn cfn-data-set-relational-table-property-builder
  "The cfn-data-set-relational-table-property-builder function buildes out new instances of 
CfnDataSet$RelationalTableProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `catalog` | java.lang.String | [[cdk.support/lookup-entry]] | `:catalog` |
| `dataSourceArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-source-arn` |
| `inputColumns` | java.util.List | [[cdk.support/lookup-entry]] | `:input-columns` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `schema` | java.lang.String | [[cdk.support/lookup-entry]] | `:schema` |"
  [stack id config]
  (let [builder (CfnDataSet$RelationalTableProperty$Builder.)]
    (when-let [data (lookup-entry config id :catalog)]
      (. builder catalog data))
    (when-let [data (lookup-entry config id :data-source-arn)]
      (. builder dataSourceArn data))
    (when-let [data (lookup-entry config id :input-columns)]
      (. builder inputColumns data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :schema)]
      (. builder schema data))
    (.build builder)))


(defn cfn-data-set-rename-column-operation-property-builder
  "The cfn-data-set-rename-column-operation-property-builder function buildes out new instances of 
CfnDataSet$RenameColumnOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `newColumnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:new-column-name` |"
  [stack id config]
  (let [builder (CfnDataSet$RenameColumnOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-name)]
      (. builder columnName data))
    (when-let [data (lookup-entry config id :new-column-name)]
      (. builder newColumnName data))
    (.build builder)))


(defn cfn-data-set-resource-permission-property-builder
  "The cfn-data-set-resource-permission-property-builder function buildes out new instances of 
CfnDataSet$ResourcePermissionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `principal` | java.lang.String | [[cdk.support/lookup-entry]] | `:principal` |"
  [stack id config]
  (let [builder (CfnDataSet$ResourcePermissionProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :principal)]
      (. builder principal data))
    (.build builder)))


(defn cfn-data-set-row-level-permission-data-set-property-builder
  "The cfn-data-set-row-level-permission-data-set-property-builder function buildes out new instances of 
CfnDataSet$RowLevelPermissionDataSetProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arn` | java.lang.String | [[cdk.support/lookup-entry]] | `:arn` |
| `formatVersion` | java.lang.String | [[cdk.support/lookup-entry]] | `:format-version` |
| `namespace` | java.lang.String | [[cdk.support/lookup-entry]] | `:namespace` |
| `permissionPolicy` | java.lang.String | [[cdk.support/lookup-entry]] | `:permission-policy` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |"
  [stack id config]
  (let [builder (CfnDataSet$RowLevelPermissionDataSetProperty$Builder.)]
    (when-let [data (lookup-entry config id :arn)]
      (. builder arn data))
    (when-let [data (lookup-entry config id :format-version)]
      (. builder formatVersion data))
    (when-let [data (lookup-entry config id :namespace)]
      (. builder namespace data))
    (when-let [data (lookup-entry config id :permission-policy)]
      (. builder permissionPolicy data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (.build builder)))


(defn cfn-data-set-row-level-permission-tag-configuration-property-builder
  "The cfn-data-set-row-level-permission-tag-configuration-property-builder function buildes out new instances of 
CfnDataSet$RowLevelPermissionTagConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `tagRuleConfigurations` | java.lang.Object | [[cdk.support/lookup-entry]] | `:tag-rule-configurations` |
| `tagRules` | java.util.List | [[cdk.support/lookup-entry]] | `:tag-rules` |"
  [stack id config]
  (let [builder (CfnDataSet$RowLevelPermissionTagConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (when-let [data (lookup-entry config id :tag-rule-configurations)]
      (. builder tagRuleConfigurations data))
    (when-let [data (lookup-entry config id :tag-rules)]
      (. builder tagRules data))
    (.build builder)))


(defn cfn-data-set-row-level-permission-tag-rule-property-builder
  "The cfn-data-set-row-level-permission-tag-rule-property-builder function buildes out new instances of 
CfnDataSet$RowLevelPermissionTagRuleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `matchAllValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-all-value` |
| `tagKey` | java.lang.String | [[cdk.support/lookup-entry]] | `:tag-key` |
| `tagMultiValueDelimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:tag-multi-value-delimiter` |"
  [stack id config]
  (let [builder (CfnDataSet$RowLevelPermissionTagRuleProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-name)]
      (. builder columnName data))
    (when-let [data (lookup-entry config id :match-all-value)]
      (. builder matchAllValue data))
    (when-let [data (lookup-entry config id :tag-key)]
      (. builder tagKey data))
    (when-let [data (lookup-entry config id :tag-multi-value-delimiter)]
      (. builder tagMultiValueDelimiter data))
    (.build builder)))


(defn cfn-data-set-s3-source-property-builder
  "The cfn-data-set-s3-source-property-builder function buildes out new instances of 
CfnDataSet$S3SourceProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSourceArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-source-arn` |
| `inputColumns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:input-columns` |
| `uploadSettings` | software.amazon.awscdk.services.quicksight.CfnDataSet$UploadSettingsProperty | [[cdk.support/lookup-entry]] | `:upload-settings` |"
  [stack id config]
  (let [builder (CfnDataSet$S3SourceProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-source-arn)]
      (. builder dataSourceArn data))
    (when-let [data (lookup-entry config id :input-columns)]
      (. builder inputColumns data))
    (when-let [data (lookup-entry config id :upload-settings)]
      (. builder uploadSettings data))
    (.build builder)))


(defn cfn-data-set-string-dataset-parameter-default-values-property-builder
  "The cfn-data-set-string-dataset-parameter-default-values-property-builder function buildes out new instances of 
CfnDataSet$StringDatasetParameterDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |"
  [stack id config]
  (let [builder (CfnDataSet$StringDatasetParameterDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :static-values)]
      (. builder staticValues data))
    (.build builder)))


(defn cfn-data-set-string-dataset-parameter-property-builder
  "The cfn-data-set-string-dataset-parameter-property-builder function buildes out new instances of 
CfnDataSet$StringDatasetParameterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `id` | java.lang.String | [[cdk.support/lookup-entry]] | `:id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `valueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-type` |"
  [stack id config]
  (let [builder (CfnDataSet$StringDatasetParameterProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-values)]
      (. builder defaultValues data))
    (when-let [data (lookup-entry config id :id)]
      (. builder id data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :value-type)]
      (. builder valueType data))
    (.build builder)))


(defn cfn-data-set-tag-column-operation-property-builder
  "The cfn-data-set-tag-column-operation-property-builder function buildes out new instances of 
CfnDataSet$TagColumnOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |"
  [stack id config]
  (let [builder (CfnDataSet$TagColumnOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-name)]
      (. builder columnName data))
    (when-let [data (lookup-entry config id :tags)]
      (. builder tags data))
    (.build builder)))


(defn cfn-data-set-transform-operation-property-builder
  "The cfn-data-set-transform-operation-property-builder function buildes out new instances of 
CfnDataSet$TransformOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `castColumnTypeOperation` | software.amazon.awscdk.services.quicksight.CfnDataSet$CastColumnTypeOperationProperty | [[cdk.support/lookup-entry]] | `:cast-column-type-operation` |
| `createColumnsOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:create-columns-operation` |
| `filterOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-operation` |
| `overrideDatasetParameterOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:override-dataset-parameter-operation` |
| `projectOperation` | software.amazon.awscdk.services.quicksight.CfnDataSet$ProjectOperationProperty | [[cdk.support/lookup-entry]] | `:project-operation` |
| `renameColumnOperation` | software.amazon.awscdk.services.quicksight.CfnDataSet$RenameColumnOperationProperty | [[cdk.support/lookup-entry]] | `:rename-column-operation` |
| `tagColumnOperation` | software.amazon.awscdk.services.quicksight.CfnDataSet$TagColumnOperationProperty | [[cdk.support/lookup-entry]] | `:tag-column-operation` |
| `untagColumnOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:untag-column-operation` |"
  [stack id config]
  (let [builder (CfnDataSet$TransformOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :cast-column-type-operation)]
      (. builder castColumnTypeOperation data))
    (when-let [data (lookup-entry config id :create-columns-operation)]
      (. builder createColumnsOperation data))
    (when-let [data (lookup-entry config id :filter-operation)]
      (. builder filterOperation data))
    (when-let [data (lookup-entry config id :override-dataset-parameter-operation)]
      (. builder overrideDatasetParameterOperation data))
    (when-let [data (lookup-entry config id :project-operation)]
      (. builder projectOperation data))
    (when-let [data (lookup-entry config id :rename-column-operation)]
      (. builder renameColumnOperation data))
    (when-let [data (lookup-entry config id :tag-column-operation)]
      (. builder tagColumnOperation data))
    (when-let [data (lookup-entry config id :untag-column-operation)]
      (. builder untagColumnOperation data))
    (.build builder)))


(defn cfn-data-set-untag-column-operation-property-builder
  "The cfn-data-set-untag-column-operation-property-builder function buildes out new instances of 
CfnDataSet$UntagColumnOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `tagNames` | java.util.List | [[cdk.support/lookup-entry]] | `:tag-names` |"
  [stack id config]
  (let [builder (CfnDataSet$UntagColumnOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-name)]
      (. builder columnName data))
    (when-let [data (lookup-entry config id :tag-names)]
      (. builder tagNames data))
    (.build builder)))


(defn cfn-data-set-upload-settings-property-builder
  "The cfn-data-set-upload-settings-property-builder function buildes out new instances of 
CfnDataSet$UploadSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `containsHeader` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:contains-header` |
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `format` | java.lang.String | [[cdk.support/lookup-entry]] | `:format` |
| `startFromRow` | java.lang.Number | [[cdk.support/lookup-entry]] | `:start-from-row` |
| `textQualifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:text-qualifier` |"
  [stack id config]
  (let [builder (CfnDataSet$UploadSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :contains-header)]
      (. builder containsHeader data))
    (when-let [data (lookup-entry config id :delimiter)]
      (. builder delimiter data))
    (when-let [data (lookup-entry config id :format)]
      (. builder format data))
    (when-let [data (lookup-entry config id :start-from-row)]
      (. builder startFromRow data))
    (when-let [data (lookup-entry config id :text-qualifier)]
      (. builder textQualifier data))
    (.build builder)))


(defn cfn-data-source-amazon-elasticsearch-parameters-property-builder
  "The cfn-data-source-amazon-elasticsearch-parameters-property-builder function buildes out new instances of 
CfnDataSource$AmazonElasticsearchParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `domain` | java.lang.String | [[cdk.support/lookup-entry]] | `:domain` |"
  [stack id config]
  (let [builder (CfnDataSource$AmazonElasticsearchParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :domain)]
      (. builder domain data))
    (.build builder)))


(defn cfn-data-source-amazon-open-search-parameters-property-builder
  "The cfn-data-source-amazon-open-search-parameters-property-builder function buildes out new instances of 
CfnDataSource$AmazonOpenSearchParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `domain` | java.lang.String | [[cdk.support/lookup-entry]] | `:domain` |"
  [stack id config]
  (let [builder (CfnDataSource$AmazonOpenSearchParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :domain)]
      (. builder domain data))
    (.build builder)))


(defn cfn-data-source-athena-parameters-property-builder
  "The cfn-data-source-athena-parameters-property-builder function buildes out new instances of 
CfnDataSource$AthenaParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `roleArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:role-arn` |
| `workGroup` | java.lang.String | [[cdk.support/lookup-entry]] | `:work-group` |"
  [stack id config]
  (let [builder (CfnDataSource$AthenaParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :role-arn)]
      (. builder roleArn data))
    (when-let [data (lookup-entry config id :work-group)]
      (. builder workGroup data))
    (.build builder)))


(defn cfn-data-source-aurora-parameters-property-builder
  "The cfn-data-source-aurora-parameters-property-builder function buildes out new instances of 
CfnDataSource$AuroraParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |"
  [stack id config]
  (let [builder (CfnDataSource$AuroraParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :database)]
      (. builder database data))
    (when-let [data (lookup-entry config id :host)]
      (. builder host data))
    (when-let [data (lookup-entry config id :port)]
      (. builder port data))
    (.build builder)))


(defn cfn-data-source-aurora-postgre-sql-parameters-property-builder
  "The cfn-data-source-aurora-postgre-sql-parameters-property-builder function buildes out new instances of 
CfnDataSource$AuroraPostgreSqlParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |"
  [stack id config]
  (let [builder (CfnDataSource$AuroraPostgreSqlParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :database)]
      (. builder database data))
    (when-let [data (lookup-entry config id :host)]
      (. builder host data))
    (when-let [data (lookup-entry config id :port)]
      (. builder port data))
    (.build builder)))


(defn cfn-data-source-builder
  "The cfn-data-source-builder function buildes out new instances of 
CfnDataSource$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `alternateDataSourceParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:alternate-data-source-parameters` |
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `credentials` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:credentials` |
| `dataSourceId` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-source-id` |
| `dataSourceParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-source-parameters` |
| `errorInfo` | software.amazon.awscdk.services.quicksight.CfnDataSource$DataSourceErrorInfoProperty | [[cdk.support/lookup-entry]] | `:error-info` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `permissions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:permissions` |
| `sslProperties` | software.amazon.awscdk.services.quicksight.CfnDataSource$SslPropertiesProperty | [[cdk.support/lookup-entry]] | `:ssl-properties` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `vpcConnectionProperties` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:vpc-connection-properties` |"
  [stack id config]
  (let [builder (CfnDataSource$Builder/create stack id)]
    (when-let [data (lookup-entry config id :alternate-data-source-parameters)]
      (. builder alternateDataSourceParameters data))
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :credentials)]
      (. builder credentials data))
    (when-let [data (lookup-entry config id :data-source-id)]
      (. builder dataSourceId data))
    (when-let [data (lookup-entry config id :data-source-parameters)]
      (. builder dataSourceParameters data))
    (when-let [data (lookup-entry config id :error-info)]
      (. builder errorInfo data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :permissions)]
      (. builder permissions data))
    (when-let [data (lookup-entry config id :ssl-properties)]
      (. builder sslProperties data))
    (when-let [data (lookup-entry config id :tags)]
      (. builder tags data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :vpc-connection-properties)]
      (. builder vpcConnectionProperties data))
    (.build builder)))


(defn cfn-data-source-credential-pair-property-builder
  "The cfn-data-source-credential-pair-property-builder function buildes out new instances of 
CfnDataSource$CredentialPairProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `alternateDataSourceParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:alternate-data-source-parameters` |
| `password` | java.lang.String | [[cdk.support/lookup-entry]] | `:password` |
| `username` | java.lang.String | [[cdk.support/lookup-entry]] | `:username` |"
  [stack id config]
  (let [builder (CfnDataSource$CredentialPairProperty$Builder.)]
    (when-let [data (lookup-entry config id :alternate-data-source-parameters)]
      (. builder alternateDataSourceParameters data))
    (when-let [data (lookup-entry config id :password)]
      (. builder password data))
    (when-let [data (lookup-entry config id :username)]
      (. builder username data))
    (.build builder)))


(defn cfn-data-source-data-source-credentials-property-builder
  "The cfn-data-source-data-source-credentials-property-builder function buildes out new instances of 
CfnDataSource$DataSourceCredentialsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `copySourceArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:copy-source-arn` |
| `credentialPair` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:credential-pair` |
| `secretArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:secret-arn` |"
  [stack id config]
  (let [builder (CfnDataSource$DataSourceCredentialsProperty$Builder.)]
    (when-let [data (lookup-entry config id :copy-source-arn)]
      (. builder copySourceArn data))
    (when-let [data (lookup-entry config id :credential-pair)]
      (. builder credentialPair data))
    (when-let [data (lookup-entry config id :secret-arn)]
      (. builder secretArn data))
    (.build builder)))


(defn cfn-data-source-data-source-error-info-property-builder
  "The cfn-data-source-data-source-error-info-property-builder function buildes out new instances of 
CfnDataSource$DataSourceErrorInfoProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `message` | java.lang.String | [[cdk.support/lookup-entry]] | `:message` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnDataSource$DataSourceErrorInfoProperty$Builder.)]
    (when-let [data (lookup-entry config id :message)]
      (. builder message data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-data-source-data-source-parameters-property-builder
  "The cfn-data-source-data-source-parameters-property-builder function buildes out new instances of 
CfnDataSource$DataSourceParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `amazonElasticsearchParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:amazon-elasticsearch-parameters` |
| `amazonOpenSearchParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$AmazonOpenSearchParametersProperty | [[cdk.support/lookup-entry]] | `:amazon-open-search-parameters` |
| `athenaParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$AthenaParametersProperty | [[cdk.support/lookup-entry]] | `:athena-parameters` |
| `auroraParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$AuroraParametersProperty | [[cdk.support/lookup-entry]] | `:aurora-parameters` |
| `auroraPostgreSqlParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$AuroraPostgreSqlParametersProperty | [[cdk.support/lookup-entry]] | `:aurora-postgre-sql-parameters` |
| `databricksParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:databricks-parameters` |
| `mariaDbParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$MariaDbParametersProperty | [[cdk.support/lookup-entry]] | `:maria-db-parameters` |
| `mySqlParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:my-sql-parameters` |
| `oracleParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:oracle-parameters` |
| `postgreSqlParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$PostgreSqlParametersProperty | [[cdk.support/lookup-entry]] | `:postgre-sql-parameters` |
| `prestoParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:presto-parameters` |
| `rdsParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$RdsParametersProperty | [[cdk.support/lookup-entry]] | `:rds-parameters` |
| `redshiftParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$RedshiftParametersProperty | [[cdk.support/lookup-entry]] | `:redshift-parameters` |
| `s3Parameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$S3ParametersProperty | [[cdk.support/lookup-entry]] | `:s3-parameters` |
| `snowflakeParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:snowflake-parameters` |
| `sparkParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:spark-parameters` |
| `sqlServerParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sql-server-parameters` |
| `starburstParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:starburst-parameters` |
| `teradataParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:teradata-parameters` |
| `trinoParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$TrinoParametersProperty | [[cdk.support/lookup-entry]] | `:trino-parameters` |"
  [stack id config]
  (let [builder (CfnDataSource$DataSourceParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :amazon-elasticsearch-parameters)]
      (. builder amazonElasticsearchParameters data))
    (when-let [data (lookup-entry config id :amazon-open-search-parameters)]
      (. builder amazonOpenSearchParameters data))
    (when-let [data (lookup-entry config id :athena-parameters)]
      (. builder athenaParameters data))
    (when-let [data (lookup-entry config id :aurora-parameters)]
      (. builder auroraParameters data))
    (when-let [data (lookup-entry config id :aurora-postgre-sql-parameters)]
      (. builder auroraPostgreSqlParameters data))
    (when-let [data (lookup-entry config id :databricks-parameters)]
      (. builder databricksParameters data))
    (when-let [data (lookup-entry config id :maria-db-parameters)]
      (. builder mariaDbParameters data))
    (when-let [data (lookup-entry config id :my-sql-parameters)]
      (. builder mySqlParameters data))
    (when-let [data (lookup-entry config id :oracle-parameters)]
      (. builder oracleParameters data))
    (when-let [data (lookup-entry config id :postgre-sql-parameters)]
      (. builder postgreSqlParameters data))
    (when-let [data (lookup-entry config id :presto-parameters)]
      (. builder prestoParameters data))
    (when-let [data (lookup-entry config id :rds-parameters)]
      (. builder rdsParameters data))
    (when-let [data (lookup-entry config id :redshift-parameters)]
      (. builder redshiftParameters data))
    (when-let [data (lookup-entry config id :s3-parameters)]
      (. builder s3Parameters data))
    (when-let [data (lookup-entry config id :snowflake-parameters)]
      (. builder snowflakeParameters data))
    (when-let [data (lookup-entry config id :spark-parameters)]
      (. builder sparkParameters data))
    (when-let [data (lookup-entry config id :sql-server-parameters)]
      (. builder sqlServerParameters data))
    (when-let [data (lookup-entry config id :starburst-parameters)]
      (. builder starburstParameters data))
    (when-let [data (lookup-entry config id :teradata-parameters)]
      (. builder teradataParameters data))
    (when-let [data (lookup-entry config id :trino-parameters)]
      (. builder trinoParameters data))
    (.build builder)))


(defn cfn-data-source-databricks-parameters-property-builder
  "The cfn-data-source-databricks-parameters-property-builder function buildes out new instances of 
CfnDataSource$DatabricksParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |
| `sqlEndpointPath` | java.lang.String | [[cdk.support/lookup-entry]] | `:sql-endpoint-path` |"
  [stack id config]
  (let [builder (CfnDataSource$DatabricksParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :host)]
      (. builder host data))
    (when-let [data (lookup-entry config id :port)]
      (. builder port data))
    (when-let [data (lookup-entry config id :sql-endpoint-path)]
      (. builder sqlEndpointPath data))
    (.build builder)))


(defn cfn-data-source-identity-center-configuration-property-builder
  "The cfn-data-source-identity-center-configuration-property-builder function buildes out new instances of 
CfnDataSource$IdentityCenterConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `enableIdentityPropagation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:enable-identity-propagation` |"
  [stack id config]
  (let [builder (CfnDataSource$IdentityCenterConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :enable-identity-propagation)]
      (. builder enableIdentityPropagation data))
    (.build builder)))


(defn cfn-data-source-manifest-file-location-property-builder
  "The cfn-data-source-manifest-file-location-property-builder function buildes out new instances of 
CfnDataSource$ManifestFileLocationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bucket` | java.lang.String | [[cdk.support/lookup-entry]] | `:bucket` |
| `key` | java.lang.String | [[cdk.support/lookup-entry]] | `:key` |"
  [stack id config]
  (let [builder (CfnDataSource$ManifestFileLocationProperty$Builder.)]
    (when-let [data (lookup-entry config id :bucket)]
      (. builder bucket data))
    (when-let [data (lookup-entry config id :key)]
      (. builder key data))
    (.build builder)))


(defn cfn-data-source-maria-db-parameters-property-builder
  "The cfn-data-source-maria-db-parameters-property-builder function buildes out new instances of 
CfnDataSource$MariaDbParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |"
  [stack id config]
  (let [builder (CfnDataSource$MariaDbParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :database)]
      (. builder database data))
    (when-let [data (lookup-entry config id :host)]
      (. builder host data))
    (when-let [data (lookup-entry config id :port)]
      (. builder port data))
    (.build builder)))


(defn cfn-data-source-my-sql-parameters-property-builder
  "The cfn-data-source-my-sql-parameters-property-builder function buildes out new instances of 
CfnDataSource$MySqlParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |"
  [stack id config]
  (let [builder (CfnDataSource$MySqlParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :database)]
      (. builder database data))
    (when-let [data (lookup-entry config id :host)]
      (. builder host data))
    (when-let [data (lookup-entry config id :port)]
      (. builder port data))
    (.build builder)))


(defn cfn-data-source-oracle-parameters-property-builder
  "The cfn-data-source-oracle-parameters-property-builder function buildes out new instances of 
CfnDataSource$OracleParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |"
  [stack id config]
  (let [builder (CfnDataSource$OracleParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :database)]
      (. builder database data))
    (when-let [data (lookup-entry config id :host)]
      (. builder host data))
    (when-let [data (lookup-entry config id :port)]
      (. builder port data))
    (.build builder)))


(defn cfn-data-source-postgre-sql-parameters-property-builder
  "The cfn-data-source-postgre-sql-parameters-property-builder function buildes out new instances of 
CfnDataSource$PostgreSqlParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |"
  [stack id config]
  (let [builder (CfnDataSource$PostgreSqlParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :database)]
      (. builder database data))
    (when-let [data (lookup-entry config id :host)]
      (. builder host data))
    (when-let [data (lookup-entry config id :port)]
      (. builder port data))
    (.build builder)))


(defn cfn-data-source-presto-parameters-property-builder
  "The cfn-data-source-presto-parameters-property-builder function buildes out new instances of 
CfnDataSource$PrestoParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `catalog` | java.lang.String | [[cdk.support/lookup-entry]] | `:catalog` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |"
  [stack id config]
  (let [builder (CfnDataSource$PrestoParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :catalog)]
      (. builder catalog data))
    (when-let [data (lookup-entry config id :host)]
      (. builder host data))
    (when-let [data (lookup-entry config id :port)]
      (. builder port data))
    (.build builder)))


(defn cfn-data-source-props-builder
  "The cfn-data-source-props-builder function buildes out new instances of 
CfnDataSourceProps$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `alternateDataSourceParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:alternate-data-source-parameters` |
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `credentials` | software.amazon.awscdk.services.quicksight.CfnDataSource$DataSourceCredentialsProperty | [[cdk.support/lookup-entry]] | `:credentials` |
| `dataSourceId` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-source-id` |
| `dataSourceParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$DataSourceParametersProperty | [[cdk.support/lookup-entry]] | `:data-source-parameters` |
| `errorInfo` | software.amazon.awscdk.services.quicksight.CfnDataSource$DataSourceErrorInfoProperty | [[cdk.support/lookup-entry]] | `:error-info` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `permissions` | java.util.List | [[cdk.support/lookup-entry]] | `:permissions` |
| `sslProperties` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:ssl-properties` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `vpcConnectionProperties` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:vpc-connection-properties` |"
  [stack id config]
  (let [builder (CfnDataSourceProps$Builder.)]
    (when-let [data (lookup-entry config id :alternate-data-source-parameters)]
      (. builder alternateDataSourceParameters data))
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :credentials)]
      (. builder credentials data))
    (when-let [data (lookup-entry config id :data-source-id)]
      (. builder dataSourceId data))
    (when-let [data (lookup-entry config id :data-source-parameters)]
      (. builder dataSourceParameters data))
    (when-let [data (lookup-entry config id :error-info)]
      (. builder errorInfo data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :permissions)]
      (. builder permissions data))
    (when-let [data (lookup-entry config id :ssl-properties)]
      (. builder sslProperties data))
    (when-let [data (lookup-entry config id :tags)]
      (. builder tags data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :vpc-connection-properties)]
      (. builder vpcConnectionProperties data))
    (.build builder)))


(defn cfn-data-source-rds-parameters-property-builder
  "The cfn-data-source-rds-parameters-property-builder function buildes out new instances of 
CfnDataSource$RdsParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `instanceId` | java.lang.String | [[cdk.support/lookup-entry]] | `:instance-id` |"
  [stack id config]
  (let [builder (CfnDataSource$RdsParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :database)]
      (. builder database data))
    (when-let [data (lookup-entry config id :instance-id)]
      (. builder instanceId data))
    (.build builder)))


(defn cfn-data-source-redshift-iam-parameters-property-builder
  "The cfn-data-source-redshift-iam-parameters-property-builder function buildes out new instances of 
CfnDataSource$RedshiftIAMParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `autoCreateDatabaseUser` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:auto-create-database-user` |
| `databaseGroups` | java.util.List | [[cdk.support/lookup-entry]] | `:database-groups` |
| `databaseUser` | java.lang.String | [[cdk.support/lookup-entry]] | `:database-user` |
| `roleArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:role-arn` |"
  [stack id config]
  (let [builder (CfnDataSource$RedshiftIAMParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :auto-create-database-user)]
      (. builder autoCreateDatabaseUser data))
    (when-let [data (lookup-entry config id :database-groups)]
      (. builder databaseGroups data))
    (when-let [data (lookup-entry config id :database-user)]
      (. builder databaseUser data))
    (when-let [data (lookup-entry config id :role-arn)]
      (. builder roleArn data))
    (.build builder)))


(defn cfn-data-source-redshift-parameters-property-builder
  "The cfn-data-source-redshift-parameters-property-builder function buildes out new instances of 
CfnDataSource$RedshiftParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `clusterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:cluster-id` |
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `iamParameters` | software.amazon.awscdk.services.quicksight.CfnDataSource$RedshiftIAMParametersProperty | [[cdk.support/lookup-entry]] | `:iam-parameters` |
| `identityCenterConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:identity-center-configuration` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |"
  [stack id config]
  (let [builder (CfnDataSource$RedshiftParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :cluster-id)]
      (. builder clusterId data))
    (when-let [data (lookup-entry config id :database)]
      (. builder database data))
    (when-let [data (lookup-entry config id :host)]
      (. builder host data))
    (when-let [data (lookup-entry config id :iam-parameters)]
      (. builder iamParameters data))
    (when-let [data (lookup-entry config id :identity-center-configuration)]
      (. builder identityCenterConfiguration data))
    (when-let [data (lookup-entry config id :port)]
      (. builder port data))
    (.build builder)))


(defn cfn-data-source-resource-permission-property-builder
  "The cfn-data-source-resource-permission-property-builder function buildes out new instances of 
CfnDataSource$ResourcePermissionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `principal` | java.lang.String | [[cdk.support/lookup-entry]] | `:principal` |
| `resource` | java.lang.String | [[cdk.support/lookup-entry]] | `:resource` |"
  [stack id config]
  (let [builder (CfnDataSource$ResourcePermissionProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :principal)]
      (. builder principal data))
    (when-let [data (lookup-entry config id :resource)]
      (. builder resource data))
    (.build builder)))


(defn cfn-data-source-s3-parameters-property-builder
  "The cfn-data-source-s3-parameters-property-builder function buildes out new instances of 
CfnDataSource$S3ParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `manifestFileLocation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:manifest-file-location` |
| `roleArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:role-arn` |"
  [stack id config]
  (let [builder (CfnDataSource$S3ParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :manifest-file-location)]
      (. builder manifestFileLocation data))
    (when-let [data (lookup-entry config id :role-arn)]
      (. builder roleArn data))
    (.build builder)))


(defn cfn-data-source-snowflake-parameters-property-builder
  "The cfn-data-source-snowflake-parameters-property-builder function buildes out new instances of 
CfnDataSource$SnowflakeParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `warehouse` | java.lang.String | [[cdk.support/lookup-entry]] | `:warehouse` |"
  [stack id config]
  (let [builder (CfnDataSource$SnowflakeParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :database)]
      (. builder database data))
    (when-let [data (lookup-entry config id :host)]
      (. builder host data))
    (when-let [data (lookup-entry config id :warehouse)]
      (. builder warehouse data))
    (.build builder)))


(defn cfn-data-source-spark-parameters-property-builder
  "The cfn-data-source-spark-parameters-property-builder function buildes out new instances of 
CfnDataSource$SparkParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |"
  [stack id config]
  (let [builder (CfnDataSource$SparkParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :host)]
      (. builder host data))
    (when-let [data (lookup-entry config id :port)]
      (. builder port data))
    (.build builder)))


(defn cfn-data-source-sql-server-parameters-property-builder
  "The cfn-data-source-sql-server-parameters-property-builder function buildes out new instances of 
CfnDataSource$SqlServerParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |"
  [stack id config]
  (let [builder (CfnDataSource$SqlServerParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :database)]
      (. builder database data))
    (when-let [data (lookup-entry config id :host)]
      (. builder host data))
    (when-let [data (lookup-entry config id :port)]
      (. builder port data))
    (.build builder)))


(defn cfn-data-source-ssl-properties-property-builder
  "The cfn-data-source-ssl-properties-property-builder function buildes out new instances of 
CfnDataSource$SslPropertiesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `disableSsl` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:disable-ssl` |"
  [stack id config]
  (let [builder (CfnDataSource$SslPropertiesProperty$Builder.)]
    (when-let [data (lookup-entry config id :disable-ssl)]
      (. builder disableSsl data))
    (.build builder)))


(defn cfn-data-source-starburst-parameters-property-builder
  "The cfn-data-source-starburst-parameters-property-builder function buildes out new instances of 
CfnDataSource$StarburstParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `catalog` | java.lang.String | [[cdk.support/lookup-entry]] | `:catalog` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |
| `productType` | java.lang.String | [[cdk.support/lookup-entry]] | `:product-type` |"
  [stack id config]
  (let [builder (CfnDataSource$StarburstParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :catalog)]
      (. builder catalog data))
    (when-let [data (lookup-entry config id :host)]
      (. builder host data))
    (when-let [data (lookup-entry config id :port)]
      (. builder port data))
    (when-let [data (lookup-entry config id :product-type)]
      (. builder productType data))
    (.build builder)))


(defn cfn-data-source-teradata-parameters-property-builder
  "The cfn-data-source-teradata-parameters-property-builder function buildes out new instances of 
CfnDataSource$TeradataParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `database` | java.lang.String | [[cdk.support/lookup-entry]] | `:database` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |"
  [stack id config]
  (let [builder (CfnDataSource$TeradataParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :database)]
      (. builder database data))
    (when-let [data (lookup-entry config id :host)]
      (. builder host data))
    (when-let [data (lookup-entry config id :port)]
      (. builder port data))
    (.build builder)))


(defn cfn-data-source-trino-parameters-property-builder
  "The cfn-data-source-trino-parameters-property-builder function buildes out new instances of 
CfnDataSource$TrinoParametersProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `catalog` | java.lang.String | [[cdk.support/lookup-entry]] | `:catalog` |
| `host` | java.lang.String | [[cdk.support/lookup-entry]] | `:host` |
| `port` | java.lang.Number | [[cdk.support/lookup-entry]] | `:port` |"
  [stack id config]
  (let [builder (CfnDataSource$TrinoParametersProperty$Builder.)]
    (when-let [data (lookup-entry config id :catalog)]
      (. builder catalog data))
    (when-let [data (lookup-entry config id :host)]
      (. builder host data))
    (when-let [data (lookup-entry config id :port)]
      (. builder port data))
    (.build builder)))


(defn cfn-data-source-vpc-connection-properties-property-builder
  "The cfn-data-source-vpc-connection-properties-property-builder function buildes out new instances of 
CfnDataSource$VpcConnectionPropertiesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `vpcConnectionArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:vpc-connection-arn` |"
  [stack id config]
  (let [builder (CfnDataSource$VpcConnectionPropertiesProperty$Builder.)]
    (when-let [data (lookup-entry config id :vpc-connection-arn)]
      (. builder vpcConnectionArn data))
    (.build builder)))


(defn cfn-refresh-schedule-builder
  "The cfn-refresh-schedule-builder function buildes out new instances of 
CfnRefreshSchedule$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `dataSetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-id` |
| `schedule` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:schedule` |"
  [stack id config]
  (let [builder (CfnRefreshSchedule$Builder/create stack id)]
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :data-set-id)]
      (. builder dataSetId data))
    (when-let [data (lookup-entry config id :schedule)]
      (. builder schedule data))
    (.build builder)))


(defn cfn-refresh-schedule-props-builder
  "The cfn-refresh-schedule-props-builder function buildes out new instances of 
CfnRefreshScheduleProps$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `dataSetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-id` |
| `schedule` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:schedule` |"
  [stack id config]
  (let [builder (CfnRefreshScheduleProps$Builder.)]
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :data-set-id)]
      (. builder dataSetId data))
    (when-let [data (lookup-entry config id :schedule)]
      (. builder schedule data))
    (.build builder)))


(defn cfn-refresh-schedule-refresh-on-day-property-builder
  "The cfn-refresh-schedule-refresh-on-day-property-builder function buildes out new instances of 
CfnRefreshSchedule$RefreshOnDayProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dayOfMonth` | java.lang.String | [[cdk.support/lookup-entry]] | `:day-of-month` |
| `dayOfWeek` | java.lang.String | [[cdk.support/lookup-entry]] | `:day-of-week` |"
  [stack id config]
  (let [builder (CfnRefreshSchedule$RefreshOnDayProperty$Builder.)]
    (when-let [data (lookup-entry config id :day-of-month)]
      (. builder dayOfMonth data))
    (when-let [data (lookup-entry config id :day-of-week)]
      (. builder dayOfWeek data))
    (.build builder)))


(defn cfn-refresh-schedule-refresh-schedule-map-property-builder
  "The cfn-refresh-schedule-refresh-schedule-map-property-builder function buildes out new instances of 
CfnRefreshSchedule$RefreshScheduleMapProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `refreshType` | java.lang.String | [[cdk.support/lookup-entry]] | `:refresh-type` |
| `scheduleFrequency` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:schedule-frequency` |
| `scheduleId` | java.lang.String | [[cdk.support/lookup-entry]] | `:schedule-id` |
| `startAfterDateTime` | java.lang.String | [[cdk.support/lookup-entry]] | `:start-after-date-time` |"
  [stack id config]
  (let [builder (CfnRefreshSchedule$RefreshScheduleMapProperty$Builder.)]
    (when-let [data (lookup-entry config id :refresh-type)]
      (. builder refreshType data))
    (when-let [data (lookup-entry config id :schedule-frequency)]
      (. builder scheduleFrequency data))
    (when-let [data (lookup-entry config id :schedule-id)]
      (. builder scheduleId data))
    (when-let [data (lookup-entry config id :start-after-date-time)]
      (. builder startAfterDateTime data))
    (.build builder)))


(defn cfn-refresh-schedule-schedule-frequency-property-builder
  "The cfn-refresh-schedule-schedule-frequency-property-builder function buildes out new instances of 
CfnRefreshSchedule$ScheduleFrequencyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `interval` | java.lang.String | [[cdk.support/lookup-entry]] | `:interval` |
| `refreshOnDay` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:refresh-on-day` |
| `timeOfTheDay` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-of-the-day` |
| `timeZone` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-zone` |"
  [stack id config]
  (let [builder (CfnRefreshSchedule$ScheduleFrequencyProperty$Builder.)]
    (when-let [data (lookup-entry config id :interval)]
      (. builder interval data))
    (when-let [data (lookup-entry config id :refresh-on-day)]
      (. builder refreshOnDay data))
    (when-let [data (lookup-entry config id :time-of-the-day)]
      (. builder timeOfTheDay data))
    (when-let [data (lookup-entry config id :time-zone)]
      (. builder timeZone data))
    (.build builder)))


(defn cfn-template-aggregation-function-property-builder
  "The cfn-template-aggregation-function-property-builder function buildes out new instances of 
CfnTemplate$AggregationFunctionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `attributeAggregationFunction` | software.amazon.awscdk.services.quicksight.CfnTemplate$AttributeAggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:attribute-aggregation-function` |
| `categoricalAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:categorical-aggregation-function` |
| `dateAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-aggregation-function` |
| `numericalAggregationFunction` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericalAggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:numerical-aggregation-function` |"
  [stack id config]
  (let [builder (CfnTemplate$AggregationFunctionProperty$Builder.)]
    (when-let [data (lookup-entry config id :attribute-aggregation-function)]
      (. builder attributeAggregationFunction data))
    (when-let [data (lookup-entry config id :categorical-aggregation-function)]
      (. builder categoricalAggregationFunction data))
    (when-let [data (lookup-entry config id :date-aggregation-function)]
      (. builder dateAggregationFunction data))
    (when-let [data (lookup-entry config id :numerical-aggregation-function)]
      (. builder numericalAggregationFunction data))
    (.build builder)))


(defn cfn-template-aggregation-sort-configuration-property-builder
  "The cfn-template-aggregation-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$AggregationSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnTemplate$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `sortDirection` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-direction` |"
  [stack id config]
  (let [builder (CfnTemplate$AggregationSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :sort-direction)]
      (. builder sortDirection data))
    (.build builder)))


(defn cfn-template-analysis-defaults-property-builder
  "The cfn-template-analysis-defaults-property-builder function buildes out new instances of 
CfnTemplate$AnalysisDefaultsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultNewSheetConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-new-sheet-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$AnalysisDefaultsProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-new-sheet-configuration)]
      (. builder defaultNewSheetConfiguration data))
    (.build builder)))


(defn cfn-template-anchor-date-configuration-property-builder
  "The cfn-template-anchor-date-configuration-property-builder function buildes out new instances of 
CfnTemplate$AnchorDateConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `anchorOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:anchor-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |"
  [stack id config]
  (let [builder (CfnTemplate$AnchorDateConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :anchor-option)]
      (. builder anchorOption data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (.build builder)))


(defn cfn-template-arc-axis-configuration-property-builder
  "The cfn-template-arc-axis-configuration-property-builder function buildes out new instances of 
CfnTemplate$ArcAxisConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `range` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range` |
| `reserveRange` | java.lang.Number | [[cdk.support/lookup-entry]] | `:reserve-range` |"
  [stack id config]
  (let [builder (CfnTemplate$ArcAxisConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :range)]
      (. builder range data))
    (when-let [data (lookup-entry config id :reserve-range)]
      (. builder reserveRange data))
    (.build builder)))


(defn cfn-template-arc-axis-display-range-property-builder
  "The cfn-template-arc-axis-display-range-property-builder function buildes out new instances of 
CfnTemplate$ArcAxisDisplayRangeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `max` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max` |
| `min` | java.lang.Number | [[cdk.support/lookup-entry]] | `:min` |"
  [stack id config]
  (let [builder (CfnTemplate$ArcAxisDisplayRangeProperty$Builder.)]
    (when-let [data (lookup-entry config id :max)]
      (. builder max data))
    (when-let [data (lookup-entry config id :min)]
      (. builder min data))
    (.build builder)))


(defn cfn-template-arc-configuration-property-builder
  "The cfn-template-arc-configuration-property-builder function buildes out new instances of 
CfnTemplate$ArcConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:arc-angle` |
| `arcThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:arc-thickness` |"
  [stack id config]
  (let [builder (CfnTemplate$ArcConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :arc-angle)]
      (. builder arcAngle data))
    (when-let [data (lookup-entry config id :arc-thickness)]
      (. builder arcThickness data))
    (.build builder)))


(defn cfn-template-arc-options-property-builder
  "The cfn-template-arc-options-property-builder function buildes out new instances of 
CfnTemplate$ArcOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:arc-thickness` |"
  [stack id config]
  (let [builder (CfnTemplate$ArcOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :arc-thickness)]
      (. builder arcThickness data))
    (.build builder)))


(defn cfn-template-asset-options-property-builder
  "The cfn-template-asset-options-property-builder function buildes out new instances of 
CfnTemplate$AssetOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `timezone` | java.lang.String | [[cdk.support/lookup-entry]] | `:timezone` |
| `weekStart` | java.lang.String | [[cdk.support/lookup-entry]] | `:week-start` |"
  [stack id config]
  (let [builder (CfnTemplate$AssetOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :timezone)]
      (. builder timezone data))
    (when-let [data (lookup-entry config id :week-start)]
      (. builder weekStart data))
    (.build builder)))


(defn cfn-template-attribute-aggregation-function-property-builder
  "The cfn-template-attribute-aggregation-function-property-builder function buildes out new instances of 
CfnTemplate$AttributeAggregationFunctionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleAttributeAggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-attribute-aggregation` |
| `valueForMultipleValues` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-for-multiple-values` |"
  [stack id config]
  (let [builder (CfnTemplate$AttributeAggregationFunctionProperty$Builder.)]
    (when-let [data (lookup-entry config id :simple-attribute-aggregation)]
      (. builder simpleAttributeAggregation data))
    (when-let [data (lookup-entry config id :value-for-multiple-values)]
      (. builder valueForMultipleValues data))
    (.build builder)))


(defn cfn-template-axis-data-options-property-builder
  "The cfn-template-axis-data-options-property-builder function buildes out new instances of 
CfnTemplate$AxisDataOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateAxisOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$DateAxisOptionsProperty | [[cdk.support/lookup-entry]] | `:date-axis-options` |
| `numericAxisOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericAxisOptionsProperty | [[cdk.support/lookup-entry]] | `:numeric-axis-options` |"
  [stack id config]
  (let [builder (CfnTemplate$AxisDataOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-axis-options)]
      (. builder dateAxisOptions data))
    (when-let [data (lookup-entry config id :numeric-axis-options)]
      (. builder numericAxisOptions data))
    (.build builder)))


(defn cfn-template-axis-display-min-max-range-property-builder
  "The cfn-template-axis-display-min-max-range-property-builder function buildes out new instances of 
CfnTemplate$AxisDisplayMinMaxRangeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `maximum` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum` |
| `minimum` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum` |"
  [stack id config]
  (let [builder (CfnTemplate$AxisDisplayMinMaxRangeProperty$Builder.)]
    (when-let [data (lookup-entry config id :maximum)]
      (. builder maximum data))
    (when-let [data (lookup-entry config id :minimum)]
      (. builder minimum data))
    (.build builder)))


(defn cfn-template-axis-display-options-property-builder
  "The cfn-template-axis-display-options-property-builder function buildes out new instances of 
CfnTemplate$AxisDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisLineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-line-visibility` |
| `axisOffset` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-offset` |
| `dataOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDataOptionsProperty | [[cdk.support/lookup-entry]] | `:data-options` |
| `gridLineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:grid-line-visibility` |
| `scrollbarOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ScrollBarOptionsProperty | [[cdk.support/lookup-entry]] | `:scrollbar-options` |
| `tickLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisTickLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:tick-label-options` |"
  [stack id config]
  (let [builder (CfnTemplate$AxisDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-line-visibility)]
      (. builder axisLineVisibility data))
    (when-let [data (lookup-entry config id :axis-offset)]
      (. builder axisOffset data))
    (when-let [data (lookup-entry config id :data-options)]
      (. builder dataOptions data))
    (when-let [data (lookup-entry config id :grid-line-visibility)]
      (. builder gridLineVisibility data))
    (when-let [data (lookup-entry config id :scrollbar-options)]
      (. builder scrollbarOptions data))
    (when-let [data (lookup-entry config id :tick-label-options)]
      (. builder tickLabelOptions data))
    (.build builder)))


(defn cfn-template-axis-display-range-property-builder
  "The cfn-template-axis-display-range-property-builder function buildes out new instances of 
CfnTemplate$AxisDisplayRangeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataDriven` | java.lang.Object | [[cdk.support/lookup-entry]] | `:data-driven` |
| `minMax` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:min-max` |"
  [stack id config]
  (let [builder (CfnTemplate$AxisDisplayRangeProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-driven)]
      (. builder dataDriven data))
    (when-let [data (lookup-entry config id :min-max)]
      (. builder minMax data))
    (.build builder)))


(defn cfn-template-axis-label-options-property-builder
  "The cfn-template-axis-label-options-property-builder function buildes out new instances of 
CfnTemplate$AxisLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `applyTo` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisLabelReferenceOptionsProperty | [[cdk.support/lookup-entry]] | `:apply-to` |
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$AxisLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :apply-to)]
      (. builder applyTo data))
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (.build builder)))


(defn cfn-template-axis-label-reference-options-property-builder
  "The cfn-template-axis-label-reference-options-property-builder function buildes out new instances of 
CfnTemplate$AxisLabelReferenceOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |"
  [stack id config]
  (let [builder (CfnTemplate$AxisLabelReferenceOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (.build builder)))


(defn cfn-template-axis-linear-scale-property-builder
  "The cfn-template-axis-linear-scale-property-builder function buildes out new instances of 
CfnTemplate$AxisLinearScaleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `stepCount` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-count` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |"
  [stack id config]
  (let [builder (CfnTemplate$AxisLinearScaleProperty$Builder.)]
    (when-let [data (lookup-entry config id :step-count)]
      (. builder stepCount data))
    (when-let [data (lookup-entry config id :step-size)]
      (. builder stepSize data))
    (.build builder)))


(defn cfn-template-axis-logarithmic-scale-property-builder
  "The cfn-template-axis-logarithmic-scale-property-builder function buildes out new instances of 
CfnTemplate$AxisLogarithmicScaleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `base` | java.lang.Number | [[cdk.support/lookup-entry]] | `:base` |"
  [stack id config]
  (let [builder (CfnTemplate$AxisLogarithmicScaleProperty$Builder.)]
    (when-let [data (lookup-entry config id :base)]
      (. builder base data))
    (.build builder)))


(defn cfn-template-axis-scale-property-builder
  "The cfn-template-axis-scale-property-builder function buildes out new instances of 
CfnTemplate$AxisScaleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `linear` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisLinearScaleProperty | [[cdk.support/lookup-entry]] | `:linear` |
| `logarithmic` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisLogarithmicScaleProperty | [[cdk.support/lookup-entry]] | `:logarithmic` |"
  [stack id config]
  (let [builder (CfnTemplate$AxisScaleProperty$Builder.)]
    (when-let [data (lookup-entry config id :linear)]
      (. builder linear data))
    (when-let [data (lookup-entry config id :logarithmic)]
      (. builder logarithmic data))
    (.build builder)))


(defn cfn-template-axis-tick-label-options-property-builder
  "The cfn-template-axis-tick-label-options-property-builder function buildes out new instances of 
CfnTemplate$AxisTickLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `labelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:label-options` |
| `rotationAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:rotation-angle` |"
  [stack id config]
  (let [builder (CfnTemplate$AxisTickLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :label-options)]
      (. builder labelOptions data))
    (when-let [data (lookup-entry config id :rotation-angle)]
      (. builder rotationAngle data))
    (.build builder)))


(defn cfn-template-bar-chart-aggregated-field-wells-property-builder
  "The cfn-template-bar-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$BarChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `smallMultiples` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$BarChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :small-multiples)]
      (. builder smallMultiples data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-bar-chart-configuration-property-builder
  "The cfn-template-bar-chart-configuration-property-builder function buildes out new instances of 
CfnTemplate$BarChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barsArrangement` | java.lang.String | [[cdk.support/lookup-entry]] | `:bars-arrangement` |
| `categoryAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `contributionAnalysisDefaults` | java.util.List | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$BarChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `orientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:orientation` |
| `referenceLines` | java.util.List | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `smallMultiplesOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SmallMultiplesOptionsProperty | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$BarChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnTemplate$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueAxis` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:value-axis` |
| `valueLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnTemplate$BarChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :bars-arrangement)]
      (. builder barsArrangement data))
    (when-let [data (lookup-entry config id :category-axis)]
      (. builder categoryAxis data))
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :color-label-options)]
      (. builder colorLabelOptions data))
    (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
      (. builder contributionAnalysisDefaults data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :orientation)]
      (. builder orientation data))
    (when-let [data (lookup-entry config id :reference-lines)]
      (. builder referenceLines data))
    (when-let [data (lookup-entry config id :small-multiples-options)]
      (. builder smallMultiplesOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :value-axis)]
      (. builder valueAxis data))
    (when-let [data (lookup-entry config id :value-label-options)]
      (. builder valueLabelOptions data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-template-bar-chart-field-wells-property-builder
  "The cfn-template-bar-chart-field-wells-property-builder function buildes out new instances of 
CfnTemplate$BarChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bar-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$BarChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bar-chart-aggregated-field-wells)]
      (. builder barChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-bar-chart-sort-configuration-property-builder
  "The cfn-template-bar-chart-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$BarChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | java.util.List | [[cdk.support/lookup-entry]] | `:color-sort` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |"
  [stack id config]
  (let [builder (CfnTemplate$BarChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :color-items-limit)]
      (. builder colorItemsLimit data))
    (when-let [data (lookup-entry config id :color-sort)]
      (. builder colorSort data))
    (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
      (. builder smallMultiplesLimitConfiguration data))
    (when-let [data (lookup-entry config id :small-multiples-sort)]
      (. builder smallMultiplesSort data))
    (.build builder)))


(defn cfn-template-bar-chart-visual-property-builder
  "The cfn-template-bar-chart-visual-property-builder function buildes out new instances of 
CfnTemplate$BarChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$BarChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$BarChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-bin-count-options-property-builder
  "The cfn-template-bin-count-options-property-builder function buildes out new instances of 
CfnTemplate$BinCountOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$BinCountOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-bin-width-options-property-builder
  "The cfn-template-bin-width-options-property-builder function buildes out new instances of 
CfnTemplate$BinWidthOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binCountLimit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:bin-count-limit` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$BinWidthOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bin-count-limit)]
      (. builder binCountLimit data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-body-section-configuration-property-builder
  "The cfn-template-body-section-configuration-property-builder function buildes out new instances of 
CfnTemplate$BodySectionConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:content` |
| `pageBreakConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$SectionPageBreakConfigurationProperty | [[cdk.support/lookup-entry]] | `:page-break-configuration` |
| `sectionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:section-id` |
| `style` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style` |"
  [stack id config]
  (let [builder (CfnTemplate$BodySectionConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :content)]
      (. builder content data))
    (when-let [data (lookup-entry config id :page-break-configuration)]
      (. builder pageBreakConfiguration data))
    (when-let [data (lookup-entry config id :section-id)]
      (. builder sectionId data))
    (when-let [data (lookup-entry config id :style)]
      (. builder style data))
    (.build builder)))


(defn cfn-template-body-section-content-property-builder
  "The cfn-template-body-section-content-property-builder function buildes out new instances of 
CfnTemplate$BodySectionContentProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `layout` | software.amazon.awscdk.services.quicksight.CfnTemplate$SectionLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:layout` |"
  [stack id config]
  (let [builder (CfnTemplate$BodySectionContentProperty$Builder.)]
    (when-let [data (lookup-entry config id :layout)]
      (. builder layout data))
    (.build builder)))


(defn cfn-template-box-plot-aggregated-field-wells-property-builder
  "The cfn-template-box-plot-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$BoxPlotAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | java.util.List | [[cdk.support/lookup-entry]] | `:group-by` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$BoxPlotAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :group-by)]
      (. builder groupBy data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-box-plot-chart-configuration-property-builder
  "The cfn-template-box-plot-chart-configuration-property-builder function buildes out new instances of 
CfnTemplate$BoxPlotChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `boxPlotOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:box-plot-options` |
| `categoryAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$BoxPlotFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnTemplate$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$BoxPlotSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnTemplate$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnTemplate$BoxPlotChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :box-plot-options)]
      (. builder boxPlotOptions data))
    (when-let [data (lookup-entry config id :category-axis)]
      (. builder categoryAxis data))
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
      (. builder primaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
      (. builder primaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :reference-lines)]
      (. builder referenceLines data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-template-box-plot-field-wells-property-builder
  "The cfn-template-box-plot-field-wells-property-builder function buildes out new instances of 
CfnTemplate$BoxPlotFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `boxPlotAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$BoxPlotAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:box-plot-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$BoxPlotFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :box-plot-aggregated-field-wells)]
      (. builder boxPlotAggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-box-plot-options-property-builder
  "The cfn-template-box-plot-options-property-builder function buildes out new instances of 
CfnTemplate$BoxPlotOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `allDataPointsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:all-data-points-visibility` |
| `outlierVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:outlier-visibility` |
| `styleOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$BoxPlotStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:style-options` |"
  [stack id config]
  (let [builder (CfnTemplate$BoxPlotOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :all-data-points-visibility)]
      (. builder allDataPointsVisibility data))
    (when-let [data (lookup-entry config id :outlier-visibility)]
      (. builder outlierVisibility data))
    (when-let [data (lookup-entry config id :style-options)]
      (. builder styleOptions data))
    (.build builder)))


(defn cfn-template-box-plot-sort-configuration-property-builder
  "The cfn-template-box-plot-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$BoxPlotSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
| `paginationConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:pagination-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$BoxPlotSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :pagination-configuration)]
      (. builder paginationConfiguration data))
    (.build builder)))


(defn cfn-template-box-plot-style-options-property-builder
  "The cfn-template-box-plot-style-options-property-builder function buildes out new instances of 
CfnTemplate$BoxPlotStyleOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fillStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:fill-style` |"
  [stack id config]
  (let [builder (CfnTemplate$BoxPlotStyleOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :fill-style)]
      (. builder fillStyle data))
    (.build builder)))


(defn cfn-template-box-plot-visual-property-builder
  "The cfn-template-box-plot-visual-property-builder function buildes out new instances of 
CfnTemplate$BoxPlotVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$BoxPlotChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$BoxPlotVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-builder
  "The cfn-template-builder function buildes out new instances of 
CfnTemplate$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `definition` | software.amazon.awscdk.services.quicksight.CfnTemplate$TemplateVersionDefinitionProperty | [[cdk.support/lookup-entry]] | `:definition` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `permissions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:permissions` |
| `sourceEntity` | software.amazon.awscdk.services.quicksight.CfnTemplate$TemplateSourceEntityProperty | [[cdk.support/lookup-entry]] | `:source-entity` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `templateId` | java.lang.String | [[cdk.support/lookup-entry]] | `:template-id` |
| `validationStrategy` | software.amazon.awscdk.services.quicksight.CfnTemplate$ValidationStrategyProperty | [[cdk.support/lookup-entry]] | `:validation-strategy` |
| `versionDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:version-description` |"
  [stack id config]
  (let [builder (CfnTemplate$Builder/create stack id)]
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :definition)]
      (. builder definition data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :permissions)]
      (. builder permissions data))
    (when-let [data (lookup-entry config id :source-entity)]
      (. builder sourceEntity data))
    (when-let [data (lookup-entry config id :tags)]
      (. builder tags data))
    (when-let [data (lookup-entry config id :template-id)]
      (. builder templateId data))
    (when-let [data (lookup-entry config id :validation-strategy)]
      (. builder validationStrategy data))
    (when-let [data (lookup-entry config id :version-description)]
      (. builder versionDescription data))
    (.build builder)))


(defn cfn-template-calculated-field-property-builder
  "The cfn-template-calculated-field-property-builder function buildes out new instances of 
CfnTemplate$CalculatedFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |"
  [stack id config]
  (let [builder (CfnTemplate$CalculatedFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (.build builder)))


(defn cfn-template-calculated-measure-field-property-builder
  "The cfn-template-calculated-measure-field-property-builder function buildes out new instances of 
CfnTemplate$CalculatedMeasureFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |"
  [stack id config]
  (let [builder (CfnTemplate$CalculatedMeasureFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (.build builder)))


(defn cfn-template-cascading-control-configuration-property-builder
  "The cfn-template-cascading-control-configuration-property-builder function buildes out new instances of 
CfnTemplate$CascadingControlConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sourceControls` | java.util.List | [[cdk.support/lookup-entry]] | `:source-controls` |"
  [stack id config]
  (let [builder (CfnTemplate$CascadingControlConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :source-controls)]
      (. builder sourceControls data))
    (.build builder)))


(defn cfn-template-cascading-control-source-property-builder
  "The cfn-template-cascading-control-source-property-builder function buildes out new instances of 
CfnTemplate$CascadingControlSourceProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnToMatch` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-to-match` |
| `sourceSheetControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-sheet-control-id` |"
  [stack id config]
  (let [builder (CfnTemplate$CascadingControlSourceProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-to-match)]
      (. builder columnToMatch data))
    (when-let [data (lookup-entry config id :source-sheet-control-id)]
      (. builder sourceSheetControlId data))
    (.build builder)))


(defn cfn-template-categorical-dimension-field-property-builder
  "The cfn-template-categorical-dimension-field-property-builder function buildes out new instances of 
CfnTemplate$CategoricalDimensionFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnTemplate$CategoricalDimensionFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-template-categorical-measure-field-property-builder
  "The cfn-template-categorical-measure-field-property-builder function buildes out new instances of 
CfnTemplate$CategoricalMeasureFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$StringFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$CategoricalMeasureFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (.build builder)))


(defn cfn-template-category-drill-down-filter-property-builder
  "The cfn-template-category-drill-down-filter-property-builder function buildes out new instances of 
CfnTemplate$CategoryDrillDownFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |"
  [stack id config]
  (let [builder (CfnTemplate$CategoryDrillDownFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-values)]
      (. builder categoryValues data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (.build builder)))


(defn cfn-template-category-filter-configuration-property-builder
  "The cfn-template-category-filter-configuration-property-builder function buildes out new instances of 
CfnTemplate$CategoryFilterConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customFilterConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$CustomFilterConfigurationProperty | [[cdk.support/lookup-entry]] | `:custom-filter-configuration` |
| `customFilterListConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$CustomFilterListConfigurationProperty | [[cdk.support/lookup-entry]] | `:custom-filter-list-configuration` |
| `filterListConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-list-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$CategoryFilterConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-filter-configuration)]
      (. builder customFilterConfiguration data))
    (when-let [data (lookup-entry config id :custom-filter-list-configuration)]
      (. builder customFilterListConfiguration data))
    (when-let [data (lookup-entry config id :filter-list-configuration)]
      (. builder filterListConfiguration data))
    (.build builder)))


(defn cfn-template-category-filter-property-builder
  "The cfn-template-category-filter-property-builder function buildes out new instances of 
CfnTemplate$CategoryFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `configuration` | software.amazon.awscdk.services.quicksight.CfnTemplate$CategoryFilterConfigurationProperty | [[cdk.support/lookup-entry]] | `:configuration` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |"
  [stack id config]
  (let [builder (CfnTemplate$CategoryFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :configuration)]
      (. builder configuration data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (.build builder)))


(defn cfn-template-chart-axis-label-options-property-builder
  "The cfn-template-chart-axis-label-options-property-builder function buildes out new instances of 
CfnTemplate$ChartAxisLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:axis-label-options` |
| `sortIconVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-icon-visibility` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$ChartAxisLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-label-options)]
      (. builder axisLabelOptions data))
    (when-let [data (lookup-entry config id :sort-icon-visibility)]
      (. builder sortIconVisibility data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-cluster-marker-configuration-property-builder
  "The cfn-template-cluster-marker-configuration-property-builder function buildes out new instances of 
CfnTemplate$ClusterMarkerConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `clusterMarker` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cluster-marker` |"
  [stack id config]
  (let [builder (CfnTemplate$ClusterMarkerConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :cluster-marker)]
      (. builder clusterMarker data))
    (.build builder)))


(defn cfn-template-cluster-marker-property-builder
  "The cfn-template-cluster-marker-property-builder function buildes out new instances of 
CfnTemplate$ClusterMarkerProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleClusterMarker` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:simple-cluster-marker` |"
  [stack id config]
  (let [builder (CfnTemplate$ClusterMarkerProperty$Builder.)]
    (when-let [data (lookup-entry config id :simple-cluster-marker)]
      (. builder simpleClusterMarker data))
    (.build builder)))


(defn cfn-template-color-scale-property-builder
  "The cfn-template-color-scale-property-builder function buildes out new instances of 
CfnTemplate$ColorScaleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorFillType` | java.lang.String | [[cdk.support/lookup-entry]] | `:color-fill-type` |
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
| `nullValueColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:null-value-color` |"
  [stack id config]
  (let [builder (CfnTemplate$ColorScaleProperty$Builder.)]
    (when-let [data (lookup-entry config id :color-fill-type)]
      (. builder colorFillType data))
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :null-value-color)]
      (. builder nullValueColor data))
    (.build builder)))


(defn cfn-template-colors-configuration-property-builder
  "The cfn-template-colors-configuration-property-builder function buildes out new instances of 
CfnTemplate$ColorsConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customColors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-colors` |"
  [stack id config]
  (let [builder (CfnTemplate$ColorsConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-colors)]
      (. builder customColors data))
    (.build builder)))


(defn cfn-template-column-configuration-property-builder
  "The cfn-template-column-configuration-property-builder function buildes out new instances of 
CfnTemplate$ColumnConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorsConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColorsConfigurationProperty | [[cdk.support/lookup-entry]] | `:colors-configuration` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `role` | java.lang.String | [[cdk.support/lookup-entry]] | `:role` |"
  [stack id config]
  (let [builder (CfnTemplate$ColumnConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :colors-configuration)]
      (. builder colorsConfiguration data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (when-let [data (lookup-entry config id :role)]
      (. builder role data))
    (.build builder)))


(defn cfn-template-column-group-column-schema-property-builder
  "The cfn-template-column-group-column-schema-property-builder function buildes out new instances of 
CfnTemplate$ColumnGroupColumnSchemaProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |"
  [stack id config]
  (let [builder (CfnTemplate$ColumnGroupColumnSchemaProperty$Builder.)]
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (.build builder)))


(defn cfn-template-column-group-schema-property-builder
  "The cfn-template-column-group-schema-property-builder function buildes out new instances of 
CfnTemplate$ColumnGroupSchemaProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnGroupColumnSchemaList` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-group-column-schema-list` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |"
  [stack id config]
  (let [builder (CfnTemplate$ColumnGroupSchemaProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-group-column-schema-list)]
      (. builder columnGroupColumnSchemaList data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (.build builder)))


(defn cfn-template-column-hierarchy-property-builder
  "The cfn-template-column-hierarchy-property-builder function buildes out new instances of 
CfnTemplate$ColumnHierarchyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeHierarchy` | software.amazon.awscdk.services.quicksight.CfnTemplate$DateTimeHierarchyProperty | [[cdk.support/lookup-entry]] | `:date-time-hierarchy` |
| `explicitHierarchy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:explicit-hierarchy` |
| `predefinedHierarchy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:predefined-hierarchy` |"
  [stack id config]
  (let [builder (CfnTemplate$ColumnHierarchyProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-hierarchy)]
      (. builder dateTimeHierarchy data))
    (when-let [data (lookup-entry config id :explicit-hierarchy)]
      (. builder explicitHierarchy data))
    (when-let [data (lookup-entry config id :predefined-hierarchy)]
      (. builder predefinedHierarchy data))
    (.build builder)))


(defn cfn-template-column-identifier-property-builder
  "The cfn-template-column-identifier-property-builder function buildes out new instances of 
CfnTemplate$ColumnIdentifierProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |"
  [stack id config]
  (let [builder (CfnTemplate$ColumnIdentifierProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-name)]
      (. builder columnName data))
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (.build builder)))


(defn cfn-template-column-schema-property-builder
  "The cfn-template-column-schema-property-builder function buildes out new instances of 
CfnTemplate$ColumnSchemaProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataType` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-type` |
| `geographicRole` | java.lang.String | [[cdk.support/lookup-entry]] | `:geographic-role` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |"
  [stack id config]
  (let [builder (CfnTemplate$ColumnSchemaProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-type)]
      (. builder dataType data))
    (when-let [data (lookup-entry config id :geographic-role)]
      (. builder geographicRole data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (.build builder)))


(defn cfn-template-column-sort-property-builder
  "The cfn-template-column-sort-property-builder function buildes out new instances of 
CfnTemplate$ColumnSortProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnTemplate$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `sortBy` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:sort-by` |"
  [stack id config]
  (let [builder (CfnTemplate$ColumnSortProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :direction)]
      (. builder direction data))
    (when-let [data (lookup-entry config id :sort-by)]
      (. builder sortBy data))
    (.build builder)))


(defn cfn-template-column-tooltip-item-property-builder
  "The cfn-template-column-tooltip-item-property-builder function buildes out new instances of 
CfnTemplate$ColumnTooltipItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregation` | software.amazon.awscdk.services.quicksight.CfnTemplate$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation` |
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `label` | java.lang.String | [[cdk.support/lookup-entry]] | `:label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$ColumnTooltipItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation)]
      (. builder aggregation data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :label)]
      (. builder label data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-combo-chart-aggregated-field-wells-property-builder
  "The cfn-template-combo-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$ComboChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barValues` | java.util.List | [[cdk.support/lookup-entry]] | `:bar-values` |
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
| `lineValues` | java.util.List | [[cdk.support/lookup-entry]] | `:line-values` |"
  [stack id config]
  (let [builder (CfnTemplate$ComboChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bar-values)]
      (. builder barValues data))
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :line-values)]
      (. builder lineValues data))
    (.build builder)))


(defn cfn-template-combo-chart-configuration-property-builder
  "The cfn-template-combo-chart-configuration-property-builder function buildes out new instances of 
CfnTemplate$ComboChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barDataLabels` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:bar-data-labels` |
| `barsArrangement` | java.lang.String | [[cdk.support/lookup-entry]] | `:bars-arrangement` |
| `categoryAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$ComboChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `lineDataLabels` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:line-data-labels` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | java.util.List | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `secondaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-y-axis-display-options` |
| `secondaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:secondary-y-axis-label-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnTemplate$ComboChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :bar-data-labels)]
      (. builder barDataLabels data))
    (when-let [data (lookup-entry config id :bars-arrangement)]
      (. builder barsArrangement data))
    (when-let [data (lookup-entry config id :category-axis)]
      (. builder categoryAxis data))
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :color-label-options)]
      (. builder colorLabelOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :line-data-labels)]
      (. builder lineDataLabels data))
    (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
      (. builder primaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
      (. builder primaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :reference-lines)]
      (. builder referenceLines data))
    (when-let [data (lookup-entry config id :secondary-y-axis-display-options)]
      (. builder secondaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :secondary-y-axis-label-options)]
      (. builder secondaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-template-combo-chart-field-wells-property-builder
  "The cfn-template-combo-chart-field-wells-property-builder function buildes out new instances of 
CfnTemplate$ComboChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comboChartAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$ComboChartAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:combo-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$ComboChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :combo-chart-aggregated-field-wells)]
      (. builder comboChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-combo-chart-sort-configuration-property-builder
  "The cfn-template-combo-chart-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$ComboChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | java.util.List | [[cdk.support/lookup-entry]] | `:color-sort` |"
  [stack id config]
  (let [builder (CfnTemplate$ComboChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :color-items-limit)]
      (. builder colorItemsLimit data))
    (when-let [data (lookup-entry config id :color-sort)]
      (. builder colorSort data))
    (.build builder)))


(defn cfn-template-combo-chart-visual-property-builder
  "The cfn-template-combo-chart-visual-property-builder function buildes out new instances of 
CfnTemplate$ComboChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ComboChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$ComboChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-comparison-configuration-property-builder
  "The cfn-template-comparison-configuration-property-builder function buildes out new instances of 
CfnTemplate$ComparisonConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comparisonFormat` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:comparison-format` |
| `comparisonMethod` | java.lang.String | [[cdk.support/lookup-entry]] | `:comparison-method` |"
  [stack id config]
  (let [builder (CfnTemplate$ComparisonConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :comparison-format)]
      (. builder comparisonFormat data))
    (when-let [data (lookup-entry config id :comparison-method)]
      (. builder comparisonMethod data))
    (.build builder)))


(defn cfn-template-comparison-format-configuration-property-builder
  "The cfn-template-comparison-format-configuration-property-builder function buildes out new instances of 
CfnTemplate$ComparisonFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `numberDisplayFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:number-display-format-configuration` |
| `percentageDisplayFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$PercentageDisplayFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:percentage-display-format-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$ComparisonFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :number-display-format-configuration)]
      (. builder numberDisplayFormatConfiguration data))
    (when-let [data (lookup-entry config id :percentage-display-format-configuration)]
      (. builder percentageDisplayFormatConfiguration data))
    (.build builder)))


(defn cfn-template-computation-property-builder
  "The cfn-template-computation-property-builder function buildes out new instances of 
CfnTemplate$ComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `forecast` | software.amazon.awscdk.services.quicksight.CfnTemplate$ForecastComputationProperty | [[cdk.support/lookup-entry]] | `:forecast` |
| `growthRate` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:growth-rate` |
| `maximumMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:maximum-minimum` |
| `metricComparison` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:metric-comparison` |
| `periodOverPeriod` | software.amazon.awscdk.services.quicksight.CfnTemplate$PeriodOverPeriodComputationProperty | [[cdk.support/lookup-entry]] | `:period-over-period` |
| `periodToDate` | software.amazon.awscdk.services.quicksight.CfnTemplate$PeriodToDateComputationProperty | [[cdk.support/lookup-entry]] | `:period-to-date` |
| `topBottomMovers` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:top-bottom-movers` |
| `topBottomRanked` | software.amazon.awscdk.services.quicksight.CfnTemplate$TopBottomRankedComputationProperty | [[cdk.support/lookup-entry]] | `:top-bottom-ranked` |
| `totalAggregation` | software.amazon.awscdk.services.quicksight.CfnTemplate$TotalAggregationComputationProperty | [[cdk.support/lookup-entry]] | `:total-aggregation` |
| `uniqueValues` | software.amazon.awscdk.services.quicksight.CfnTemplate$UniqueValuesComputationProperty | [[cdk.support/lookup-entry]] | `:unique-values` |"
  [stack id config]
  (let [builder (CfnTemplate$ComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :forecast)]
      (. builder forecast data))
    (when-let [data (lookup-entry config id :growth-rate)]
      (. builder growthRate data))
    (when-let [data (lookup-entry config id :maximum-minimum)]
      (. builder maximumMinimum data))
    (when-let [data (lookup-entry config id :metric-comparison)]
      (. builder metricComparison data))
    (when-let [data (lookup-entry config id :period-over-period)]
      (. builder periodOverPeriod data))
    (when-let [data (lookup-entry config id :period-to-date)]
      (. builder periodToDate data))
    (when-let [data (lookup-entry config id :top-bottom-movers)]
      (. builder topBottomMovers data))
    (when-let [data (lookup-entry config id :top-bottom-ranked)]
      (. builder topBottomRanked data))
    (when-let [data (lookup-entry config id :total-aggregation)]
      (. builder totalAggregation data))
    (when-let [data (lookup-entry config id :unique-values)]
      (. builder uniqueValues data))
    (.build builder)))


(defn cfn-template-conditional-formatting-color-property-builder
  "The cfn-template-conditional-formatting-color-property-builder function buildes out new instances of 
CfnTemplate$ConditionalFormattingColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `gradient` | software.amazon.awscdk.services.quicksight.CfnTemplate$ConditionalFormattingGradientColorProperty | [[cdk.support/lookup-entry]] | `:gradient` |
| `solid` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:solid` |"
  [stack id config]
  (let [builder (CfnTemplate$ConditionalFormattingColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :gradient)]
      (. builder gradient data))
    (when-let [data (lookup-entry config id :solid)]
      (. builder solid data))
    (.build builder)))


(defn cfn-template-conditional-formatting-custom-icon-condition-property-builder
  "The cfn-template-conditional-formatting-custom-icon-condition-property-builder function buildes out new instances of 
CfnTemplate$ConditionalFormattingCustomIconConditionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `displayConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ConditionalFormattingIconDisplayConfigurationProperty | [[cdk.support/lookup-entry]] | `:display-configuration` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `iconOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ConditionalFormattingCustomIconOptionsProperty | [[cdk.support/lookup-entry]] | `:icon-options` |"
  [stack id config]
  (let [builder (CfnTemplate$ConditionalFormattingCustomIconConditionProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :display-configuration)]
      (. builder displayConfiguration data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (when-let [data (lookup-entry config id :icon-options)]
      (. builder iconOptions data))
    (.build builder)))


(defn cfn-template-conditional-formatting-custom-icon-options-property-builder
  "The cfn-template-conditional-formatting-custom-icon-options-property-builder function buildes out new instances of 
CfnTemplate$ConditionalFormattingCustomIconOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon` |
| `unicodeIcon` | java.lang.String | [[cdk.support/lookup-entry]] | `:unicode-icon` |"
  [stack id config]
  (let [builder (CfnTemplate$ConditionalFormattingCustomIconOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :unicode-icon)]
      (. builder unicodeIcon data))
    (.build builder)))


(defn cfn-template-conditional-formatting-gradient-color-property-builder
  "The cfn-template-conditional-formatting-gradient-color-property-builder function buildes out new instances of 
CfnTemplate$ConditionalFormattingGradientColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |"
  [stack id config]
  (let [builder (CfnTemplate$ConditionalFormattingGradientColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (.build builder)))


(defn cfn-template-conditional-formatting-icon-display-configuration-property-builder
  "The cfn-template-conditional-formatting-icon-display-configuration-property-builder function buildes out new instances of 
CfnTemplate$ConditionalFormattingIconDisplayConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `iconDisplayOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon-display-option` |"
  [stack id config]
  (let [builder (CfnTemplate$ConditionalFormattingIconDisplayConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon-display-option)]
      (. builder iconDisplayOption data))
    (.build builder)))


(defn cfn-template-conditional-formatting-icon-property-builder
  "The cfn-template-conditional-formatting-icon-property-builder function buildes out new instances of 
CfnTemplate$ConditionalFormattingIconProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customCondition` | software.amazon.awscdk.services.quicksight.CfnTemplate$ConditionalFormattingCustomIconConditionProperty | [[cdk.support/lookup-entry]] | `:custom-condition` |
| `iconSet` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon-set` |"
  [stack id config]
  (let [builder (CfnTemplate$ConditionalFormattingIconProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-condition)]
      (. builder customCondition data))
    (when-let [data (lookup-entry config id :icon-set)]
      (. builder iconSet data))
    (.build builder)))


(defn cfn-template-conditional-formatting-icon-set-property-builder
  "The cfn-template-conditional-formatting-icon-set-property-builder function buildes out new instances of 
CfnTemplate$ConditionalFormattingIconSetProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `iconSetType` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon-set-type` |"
  [stack id config]
  (let [builder (CfnTemplate$ConditionalFormattingIconSetProperty$Builder.)]
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (when-let [data (lookup-entry config id :icon-set-type)]
      (. builder iconSetType data))
    (.build builder)))


(defn cfn-template-conditional-formatting-solid-color-property-builder
  "The cfn-template-conditional-formatting-solid-color-property-builder function buildes out new instances of 
CfnTemplate$ConditionalFormattingSolidColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |"
  [stack id config]
  (let [builder (CfnTemplate$ConditionalFormattingSolidColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (.build builder)))


(defn cfn-template-contribution-analysis-default-property-builder
  "The cfn-template-contribution-analysis-default-property-builder function buildes out new instances of 
CfnTemplate$ContributionAnalysisDefaultProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contributorDimensions` | java.util.List | [[cdk.support/lookup-entry]] | `:contributor-dimensions` |
| `measureFieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-field-id` |"
  [stack id config]
  (let [builder (CfnTemplate$ContributionAnalysisDefaultProperty$Builder.)]
    (when-let [data (lookup-entry config id :contributor-dimensions)]
      (. builder contributorDimensions data))
    (when-let [data (lookup-entry config id :measure-field-id)]
      (. builder measureFieldId data))
    (.build builder)))


(defn cfn-template-currency-display-format-configuration-property-builder
  "The cfn-template-currency-display-format-configuration-property-builder function buildes out new instances of 
CfnTemplate$CurrencyDisplayFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$DecimalPlacesConfigurationProperty | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NegativeValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numberScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:number-scale` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |
| `symbol` | java.lang.String | [[cdk.support/lookup-entry]] | `:symbol` |"
  [stack id config]
  (let [builder (CfnTemplate$CurrencyDisplayFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :decimal-places-configuration)]
      (. builder decimalPlacesConfiguration data))
    (when-let [data (lookup-entry config id :negative-value-configuration)]
      (. builder negativeValueConfiguration data))
    (when-let [data (lookup-entry config id :null-value-format-configuration)]
      (. builder nullValueFormatConfiguration data))
    (when-let [data (lookup-entry config id :number-scale)]
      (. builder numberScale data))
    (when-let [data (lookup-entry config id :prefix)]
      (. builder prefix data))
    (when-let [data (lookup-entry config id :separator-configuration)]
      (. builder separatorConfiguration data))
    (when-let [data (lookup-entry config id :suffix)]
      (. builder suffix data))
    (when-let [data (lookup-entry config id :symbol)]
      (. builder symbol data))
    (.build builder)))


(defn cfn-template-custom-action-filter-operation-property-builder
  "The cfn-template-custom-action-filter-operation-property-builder function buildes out new instances of 
CfnTemplate$CustomActionFilterOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `selectedFieldsConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-fields-configuration` |
| `targetVisualsConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterOperationTargetVisualsConfigurationProperty | [[cdk.support/lookup-entry]] | `:target-visuals-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$CustomActionFilterOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :selected-fields-configuration)]
      (. builder selectedFieldsConfiguration data))
    (when-let [data (lookup-entry config id :target-visuals-configuration)]
      (. builder targetVisualsConfiguration data))
    (.build builder)))


(defn cfn-template-custom-action-navigation-operation-property-builder
  "The cfn-template-custom-action-navigation-operation-property-builder function buildes out new instances of 
CfnTemplate$CustomActionNavigationOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `localNavigationConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:local-navigation-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$CustomActionNavigationOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :local-navigation-configuration)]
      (. builder localNavigationConfiguration data))
    (.build builder)))


(defn cfn-template-custom-action-set-parameters-operation-property-builder
  "The cfn-template-custom-action-set-parameters-operation-property-builder function buildes out new instances of 
CfnTemplate$CustomActionSetParametersOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameterValueConfigurations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameter-value-configurations` |"
  [stack id config]
  (let [builder (CfnTemplate$CustomActionSetParametersOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :parameter-value-configurations)]
      (. builder parameterValueConfigurations data))
    (.build builder)))


(defn cfn-template-custom-action-url-operation-property-builder
  "The cfn-template-custom-action-url-operation-property-builder function buildes out new instances of 
CfnTemplate$CustomActionURLOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `urlTarget` | java.lang.String | [[cdk.support/lookup-entry]] | `:url-target` |
| `urlTemplate` | java.lang.String | [[cdk.support/lookup-entry]] | `:url-template` |"
  [stack id config]
  (let [builder (CfnTemplate$CustomActionURLOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :url-target)]
      (. builder urlTarget data))
    (when-let [data (lookup-entry config id :url-template)]
      (. builder urlTemplate data))
    (.build builder)))


(defn cfn-template-custom-color-property-builder
  "The cfn-template-custom-color-property-builder function buildes out new instances of 
CfnTemplate$CustomColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `specialValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:special-value` |"
  [stack id config]
  (let [builder (CfnTemplate$CustomColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :field-value)]
      (. builder fieldValue data))
    (when-let [data (lookup-entry config id :special-value)]
      (. builder specialValue data))
    (.build builder)))


(defn cfn-template-custom-content-configuration-property-builder
  "The cfn-template-custom-content-configuration-property-builder function buildes out new instances of 
CfnTemplate$CustomContentConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-type` |
| `contentUrl` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-url` |
| `imageScaling` | java.lang.String | [[cdk.support/lookup-entry]] | `:image-scaling` |"
  [stack id config]
  (let [builder (CfnTemplate$CustomContentConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :content-type)]
      (. builder contentType data))
    (when-let [data (lookup-entry config id :content-url)]
      (. builder contentUrl data))
    (when-let [data (lookup-entry config id :image-scaling)]
      (. builder imageScaling data))
    (.build builder)))


(defn cfn-template-custom-content-visual-property-builder
  "The cfn-template-custom-content-visual-property-builder function buildes out new instances of 
CfnTemplate$CustomContentVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$CustomContentConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$CustomContentVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-custom-filter-configuration-property-builder
  "The cfn-template-custom-filter-configuration-property-builder function buildes out new instances of 
CfnTemplate$CustomFilterConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-value` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |"
  [stack id config]
  (let [builder (CfnTemplate$CustomFilterConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-value)]
      (. builder categoryValue data))
    (when-let [data (lookup-entry config id :match-operator)]
      (. builder matchOperator data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (.build builder)))


(defn cfn-template-custom-filter-list-configuration-property-builder
  "The cfn-template-custom-filter-list-configuration-property-builder function buildes out new instances of 
CfnTemplate$CustomFilterListConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |"
  [stack id config]
  (let [builder (CfnTemplate$CustomFilterListConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-values)]
      (. builder categoryValues data))
    (when-let [data (lookup-entry config id :match-operator)]
      (. builder matchOperator data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (.build builder)))


(defn cfn-template-custom-narrative-options-property-builder
  "The cfn-template-custom-narrative-options-property-builder function buildes out new instances of 
CfnTemplate$CustomNarrativeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `narrative` | java.lang.String | [[cdk.support/lookup-entry]] | `:narrative` |"
  [stack id config]
  (let [builder (CfnTemplate$CustomNarrativeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :narrative)]
      (. builder narrative data))
    (.build builder)))


(defn cfn-template-custom-parameter-values-property-builder
  "The cfn-template-custom-parameter-values-property-builder function buildes out new instances of 
CfnTemplate$CustomParameterValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeValues` | java.util.List | [[cdk.support/lookup-entry]] | `:date-time-values` |
| `decimalValues` | java.util.List | [[cdk.support/lookup-entry]] | `:decimal-values` |
| `integerValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:integer-values` |
| `stringValues` | java.util.List | [[cdk.support/lookup-entry]] | `:string-values` |"
  [stack id config]
  (let [builder (CfnTemplate$CustomParameterValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-values)]
      (. builder dateTimeValues data))
    (when-let [data (lookup-entry config id :decimal-values)]
      (. builder decimalValues data))
    (when-let [data (lookup-entry config id :integer-values)]
      (. builder integerValues data))
    (when-let [data (lookup-entry config id :string-values)]
      (. builder stringValues data))
    (.build builder)))


(defn cfn-template-custom-values-configuration-property-builder
  "The cfn-template-custom-values-configuration-property-builder function buildes out new instances of 
CfnTemplate$CustomValuesConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-values` |
| `includeNullValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-null-value` |"
  [stack id config]
  (let [builder (CfnTemplate$CustomValuesConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-values)]
      (. builder customValues data))
    (when-let [data (lookup-entry config id :include-null-value)]
      (. builder includeNullValue data))
    (.build builder)))


(defn cfn-template-data-bars-options-property-builder
  "The cfn-template-data-bars-options-property-builder function buildes out new instances of 
CfnTemplate$DataBarsOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `negativeColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:negative-color` |
| `positiveColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:positive-color` |"
  [stack id config]
  (let [builder (CfnTemplate$DataBarsOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :negative-color)]
      (. builder negativeColor data))
    (when-let [data (lookup-entry config id :positive-color)]
      (. builder positiveColor data))
    (.build builder)))


(defn cfn-template-data-color-property-builder
  "The cfn-template-data-color-property-builder function buildes out new instances of 
CfnTemplate$DataColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `dataValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:data-value` |"
  [stack id config]
  (let [builder (CfnTemplate$DataColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :data-value)]
      (. builder dataValue data))
    (.build builder)))


(defn cfn-template-data-field-series-item-property-builder
  "The cfn-template-data-field-series-item-property-builder function buildes out new instances of 
CfnTemplate$DataFieldSeriesItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `settings` | software.amazon.awscdk.services.quicksight.CfnTemplate$LineChartSeriesSettingsProperty | [[cdk.support/lookup-entry]] | `:settings` |"
  [stack id config]
  (let [builder (CfnTemplate$DataFieldSeriesItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-binding)]
      (. builder axisBinding data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :field-value)]
      (. builder fieldValue data))
    (when-let [data (lookup-entry config id :settings)]
      (. builder settings data))
    (.build builder)))


(defn cfn-template-data-label-options-property-builder
  "The cfn-template-data-label-options-property-builder function buildes out new instances of 
CfnTemplate$DataLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-label-visibility` |
| `dataLabelTypes` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-label-types` |
| `labelColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-color` |
| `labelContent` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-content` |
| `labelFontConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:label-font-configuration` |
| `measureLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-label-visibility` |
| `overlap` | java.lang.String | [[cdk.support/lookup-entry]] | `:overlap` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$DataLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-label-visibility)]
      (. builder categoryLabelVisibility data))
    (when-let [data (lookup-entry config id :data-label-types)]
      (. builder dataLabelTypes data))
    (when-let [data (lookup-entry config id :label-color)]
      (. builder labelColor data))
    (when-let [data (lookup-entry config id :label-content)]
      (. builder labelContent data))
    (when-let [data (lookup-entry config id :label-font-configuration)]
      (. builder labelFontConfiguration data))
    (when-let [data (lookup-entry config id :measure-label-visibility)]
      (. builder measureLabelVisibility data))
    (when-let [data (lookup-entry config id :overlap)]
      (. builder overlap data))
    (when-let [data (lookup-entry config id :position)]
      (. builder position data))
    (when-let [data (lookup-entry config id :totals-visibility)]
      (. builder totalsVisibility data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-data-label-type-property-builder
  "The cfn-template-data-label-type-property-builder function buildes out new instances of 
CfnTemplate$DataLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathLabelType` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataPathLabelTypeProperty | [[cdk.support/lookup-entry]] | `:data-path-label-type` |
| `fieldLabelType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-label-type` |
| `maximumLabelType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:maximum-label-type` |
| `minimumLabelType` | software.amazon.awscdk.services.quicksight.CfnTemplate$MinimumLabelTypeProperty | [[cdk.support/lookup-entry]] | `:minimum-label-type` |
| `rangeEndsLabelType` | software.amazon.awscdk.services.quicksight.CfnTemplate$RangeEndsLabelTypeProperty | [[cdk.support/lookup-entry]] | `:range-ends-label-type` |"
  [stack id config]
  (let [builder (CfnTemplate$DataLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-path-label-type)]
      (. builder dataPathLabelType data))
    (when-let [data (lookup-entry config id :field-label-type)]
      (. builder fieldLabelType data))
    (when-let [data (lookup-entry config id :maximum-label-type)]
      (. builder maximumLabelType data))
    (when-let [data (lookup-entry config id :minimum-label-type)]
      (. builder minimumLabelType data))
    (when-let [data (lookup-entry config id :range-ends-label-type)]
      (. builder rangeEndsLabelType data))
    (.build builder)))


(defn cfn-template-data-path-color-property-builder
  "The cfn-template-data-path-color-property-builder function buildes out new instances of 
CfnTemplate$DataPathColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `element` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:element` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnTemplate$DataPathColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :element)]
      (. builder element data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-template-data-path-label-type-property-builder
  "The cfn-template-data-path-label-type-property-builder function buildes out new instances of 
CfnTemplate$DataPathLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$DataPathLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :field-value)]
      (. builder fieldValue data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-data-path-sort-property-builder
  "The cfn-template-data-path-sort-property-builder function buildes out new instances of 
CfnTemplate$DataPathSortProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `sortPaths` | java.util.List | [[cdk.support/lookup-entry]] | `:sort-paths` |"
  [stack id config]
  (let [builder (CfnTemplate$DataPathSortProperty$Builder.)]
    (when-let [data (lookup-entry config id :direction)]
      (. builder direction data))
    (when-let [data (lookup-entry config id :sort-paths)]
      (. builder sortPaths data))
    (.build builder)))


(defn cfn-template-data-path-type-property-builder
  "The cfn-template-data-path-type-property-builder function buildes out new instances of 
CfnTemplate$DataPathTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pivotTableDataPathType` | java.lang.String | [[cdk.support/lookup-entry]] | `:pivot-table-data-path-type` |"
  [stack id config]
  (let [builder (CfnTemplate$DataPathTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :pivot-table-data-path-type)]
      (. builder pivotTableDataPathType data))
    (.build builder)))


(defn cfn-template-data-path-value-property-builder
  "The cfn-template-data-path-value-property-builder function buildes out new instances of 
CfnTemplate$DataPathValueProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-path-type` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `fieldValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-value` |"
  [stack id config]
  (let [builder (CfnTemplate$DataPathValueProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-path-type)]
      (. builder dataPathType data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :field-value)]
      (. builder fieldValue data))
    (.build builder)))


(defn cfn-template-data-set-configuration-property-builder
  "The cfn-template-data-set-configuration-property-builder function buildes out new instances of 
CfnTemplate$DataSetConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnGroupSchemaList` | java.util.List | [[cdk.support/lookup-entry]] | `:column-group-schema-list` |
| `dataSetSchema` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataSetSchemaProperty | [[cdk.support/lookup-entry]] | `:data-set-schema` |
| `placeholder` | java.lang.String | [[cdk.support/lookup-entry]] | `:placeholder` |"
  [stack id config]
  (let [builder (CfnTemplate$DataSetConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-group-schema-list)]
      (. builder columnGroupSchemaList data))
    (when-let [data (lookup-entry config id :data-set-schema)]
      (. builder dataSetSchema data))
    (when-let [data (lookup-entry config id :placeholder)]
      (. builder placeholder data))
    (.build builder)))


(defn cfn-template-data-set-reference-property-builder
  "The cfn-template-data-set-reference-property-builder function buildes out new instances of 
CfnTemplate$DataSetReferenceProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-arn` |
| `dataSetPlaceholder` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-placeholder` |"
  [stack id config]
  (let [builder (CfnTemplate$DataSetReferenceProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-set-arn)]
      (. builder dataSetArn data))
    (when-let [data (lookup-entry config id :data-set-placeholder)]
      (. builder dataSetPlaceholder data))
    (.build builder)))


(defn cfn-template-data-set-schema-property-builder
  "The cfn-template-data-set-schema-property-builder function buildes out new instances of 
CfnTemplate$DataSetSchemaProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnSchemaList` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-schema-list` |"
  [stack id config]
  (let [builder (CfnTemplate$DataSetSchemaProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-schema-list)]
      (. builder columnSchemaList data))
    (.build builder)))


(defn cfn-template-date-axis-options-property-builder
  "The cfn-template-date-axis-options-property-builder function buildes out new instances of 
CfnTemplate$DateAxisOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `missingDateVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:missing-date-visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$DateAxisOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :missing-date-visibility)]
      (. builder missingDateVisibility data))
    (.build builder)))


(defn cfn-template-date-dimension-field-property-builder
  "The cfn-template-date-dimension-field-property-builder function buildes out new instances of 
CfnTemplate$DateDimensionFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `dateGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-granularity` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnTemplate$DateDimensionFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :date-granularity)]
      (. builder dateGranularity data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-template-date-measure-field-property-builder
  "The cfn-template-date-measure-field-property-builder function buildes out new instances of 
CfnTemplate$DateMeasureFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$DateTimeFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$DateMeasureFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (.build builder)))


(defn cfn-template-date-time-default-values-property-builder
  "The cfn-template-date-time-default-values-property-builder function buildes out new instances of 
CfnTemplate$DateTimeDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `rollingDate` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |"
  [stack id config]
  (let [builder (CfnTemplate$DateTimeDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :dynamic-value)]
      (. builder dynamicValue data))
    (when-let [data (lookup-entry config id :rolling-date)]
      (. builder rollingDate data))
    (when-let [data (lookup-entry config id :static-values)]
      (. builder staticValues data))
    (.build builder)))


(defn cfn-template-date-time-format-configuration-property-builder
  "The cfn-template-date-time-format-configuration-property-builder function buildes out new instances of 
CfnTemplate$DateTimeFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numericFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:numeric-format-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$DateTimeFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-format)]
      (. builder dateTimeFormat data))
    (when-let [data (lookup-entry config id :null-value-format-configuration)]
      (. builder nullValueFormatConfiguration data))
    (when-let [data (lookup-entry config id :numeric-format-configuration)]
      (. builder numericFormatConfiguration data))
    (.build builder)))


(defn cfn-template-date-time-hierarchy-property-builder
  "The cfn-template-date-time-hierarchy-property-builder function buildes out new instances of 
CfnTemplate$DateTimeHierarchyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `drillDownFilters` | java.util.List | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnTemplate$DateTimeHierarchyProperty$Builder.)]
    (when-let [data (lookup-entry config id :drill-down-filters)]
      (. builder drillDownFilters data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-template-date-time-parameter-declaration-property-builder
  "The cfn-template-date-time-parameter-declaration-property-builder function buildes out new instances of 
CfnTemplate$DateTimeParameterDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.services.quicksight.CfnTemplate$DateTimeDefaultValuesProperty | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
| `valueWhenUnset` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-when-unset` |"
  [stack id config]
  (let [builder (CfnTemplate$DateTimeParameterDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-values)]
      (. builder defaultValues data))
    (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
      (. builder mappedDataSetParameters data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (when-let [data (lookup-entry config id :value-when-unset)]
      (. builder valueWhenUnset data))
    (.build builder)))


(defn cfn-template-date-time-picker-control-display-options-property-builder
  "The cfn-template-date-time-picker-control-display-options-property-builder function buildes out new instances of 
CfnTemplate$DateTimePickerControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnTemplate$DateTimePickerControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-format)]
      (. builder dateTimeFormat data))
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-template-date-time-value-when-unset-configuration-property-builder
  "The cfn-template-date-time-value-when-unset-configuration-property-builder function buildes out new instances of 
CfnTemplate$DateTimeValueWhenUnsetConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |"
  [stack id config]
  (let [builder (CfnTemplate$DateTimeValueWhenUnsetConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-value)]
      (. builder customValue data))
    (when-let [data (lookup-entry config id :value-when-unset-option)]
      (. builder valueWhenUnsetOption data))
    (.build builder)))


(defn cfn-template-decimal-default-values-property-builder
  "The cfn-template-decimal-default-values-property-builder function buildes out new instances of 
CfnTemplate$DecimalDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:static-values` |"
  [stack id config]
  (let [builder (CfnTemplate$DecimalDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :dynamic-value)]
      (. builder dynamicValue data))
    (when-let [data (lookup-entry config id :static-values)]
      (. builder staticValues data))
    (.build builder)))


(defn cfn-template-decimal-parameter-declaration-property-builder
  "The cfn-template-decimal-parameter-declaration-property-builder function buildes out new instances of 
CfnTemplate$DecimalParameterDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | java.util.List | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-when-unset` |"
  [stack id config]
  (let [builder (CfnTemplate$DecimalParameterDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-values)]
      (. builder defaultValues data))
    (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
      (. builder mappedDataSetParameters data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :parameter-value-type)]
      (. builder parameterValueType data))
    (when-let [data (lookup-entry config id :value-when-unset)]
      (. builder valueWhenUnset data))
    (.build builder)))


(defn cfn-template-decimal-places-configuration-property-builder
  "The cfn-template-decimal-places-configuration-property-builder function buildes out new instances of 
CfnTemplate$DecimalPlacesConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlaces` | java.lang.Number | [[cdk.support/lookup-entry]] | `:decimal-places` |"
  [stack id config]
  (let [builder (CfnTemplate$DecimalPlacesConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :decimal-places)]
      (. builder decimalPlaces data))
    (.build builder)))


(defn cfn-template-decimal-value-when-unset-configuration-property-builder
  "The cfn-template-decimal-value-when-unset-configuration-property-builder function buildes out new instances of 
CfnTemplate$DecimalValueWhenUnsetConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |"
  [stack id config]
  (let [builder (CfnTemplate$DecimalValueWhenUnsetConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-value)]
      (. builder customValue data))
    (when-let [data (lookup-entry config id :value-when-unset-option)]
      (. builder valueWhenUnsetOption data))
    (.build builder)))


(defn cfn-template-default-date-time-picker-control-options-property-builder
  "The cfn-template-default-date-time-picker-control-options-property-builder function buildes out new instances of 
CfnTemplate$DefaultDateTimePickerControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnTemplate$DefaultDateTimePickerControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-template-default-filter-control-configuration-property-builder
  "The cfn-template-default-filter-control-configuration-property-builder function buildes out new instances of 
CfnTemplate$DefaultFilterControlConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `controlOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$DefaultFilterControlOptionsProperty | [[cdk.support/lookup-entry]] | `:control-options` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnTemplate$DefaultFilterControlConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :control-options)]
      (. builder controlOptions data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-template-default-filter-control-options-property-builder
  "The cfn-template-default-filter-control-options-property-builder function buildes out new instances of 
CfnTemplate$DefaultFilterControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultDateTimePickerOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-date-time-picker-options` |
| `defaultDropdownOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$DefaultFilterDropDownControlOptionsProperty | [[cdk.support/lookup-entry]] | `:default-dropdown-options` |
| `defaultListOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-list-options` |
| `defaultRelativeDateTimeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-relative-date-time-options` |
| `defaultSliderOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-slider-options` |
| `defaultTextAreaOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$DefaultTextAreaControlOptionsProperty | [[cdk.support/lookup-entry]] | `:default-text-area-options` |
| `defaultTextFieldOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$DefaultTextFieldControlOptionsProperty | [[cdk.support/lookup-entry]] | `:default-text-field-options` |"
  [stack id config]
  (let [builder (CfnTemplate$DefaultFilterControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-date-time-picker-options)]
      (. builder defaultDateTimePickerOptions data))
    (when-let [data (lookup-entry config id :default-dropdown-options)]
      (. builder defaultDropdownOptions data))
    (when-let [data (lookup-entry config id :default-list-options)]
      (. builder defaultListOptions data))
    (when-let [data (lookup-entry config id :default-relative-date-time-options)]
      (. builder defaultRelativeDateTimeOptions data))
    (when-let [data (lookup-entry config id :default-slider-options)]
      (. builder defaultSliderOptions data))
    (when-let [data (lookup-entry config id :default-text-area-options)]
      (. builder defaultTextAreaOptions data))
    (when-let [data (lookup-entry config id :default-text-field-options)]
      (. builder defaultTextFieldOptions data))
    (.build builder)))


(defn cfn-template-default-filter-drop-down-control-options-property-builder
  "The cfn-template-default-filter-drop-down-control-options-property-builder function buildes out new instances of 
CfnTemplate$DefaultFilterDropDownControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `selectableValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnTemplate$DefaultFilterDropDownControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-template-default-filter-list-control-options-property-builder
  "The cfn-template-default-filter-list-control-options-property-builder function buildes out new instances of 
CfnTemplate$DefaultFilterListControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnTemplate$DefaultFilterListControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-template-default-free-form-layout-configuration-property-builder
  "The cfn-template-default-free-form-layout-configuration-property-builder function buildes out new instances of 
CfnTemplate$DefaultFreeFormLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$FreeFormLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |"
  [stack id config]
  (let [builder (CfnTemplate$DefaultFreeFormLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (.build builder)))


(defn cfn-template-default-grid-layout-configuration-property-builder
  "The cfn-template-default-grid-layout-configuration-property-builder function buildes out new instances of 
CfnTemplate$DefaultGridLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$GridLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |"
  [stack id config]
  (let [builder (CfnTemplate$DefaultGridLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (.build builder)))


(defn cfn-template-default-interactive-layout-configuration-property-builder
  "The cfn-template-default-interactive-layout-configuration-property-builder function buildes out new instances of 
CfnTemplate$DefaultInteractiveLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeForm` | software.amazon.awscdk.services.quicksight.CfnTemplate$DefaultFreeFormLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:free-form` |
| `grid` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:grid` |"
  [stack id config]
  (let [builder (CfnTemplate$DefaultInteractiveLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :free-form)]
      (. builder freeForm data))
    (when-let [data (lookup-entry config id :grid)]
      (. builder grid data))
    (.build builder)))


(defn cfn-template-default-new-sheet-configuration-property-builder
  "The cfn-template-default-new-sheet-configuration-property-builder function buildes out new instances of 
CfnTemplate$DefaultNewSheetConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `interactiveLayoutConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:interactive-layout-configuration` |
| `paginatedLayoutConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:paginated-layout-configuration` |
| `sheetContentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-content-type` |"
  [stack id config]
  (let [builder (CfnTemplate$DefaultNewSheetConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :interactive-layout-configuration)]
      (. builder interactiveLayoutConfiguration data))
    (when-let [data (lookup-entry config id :paginated-layout-configuration)]
      (. builder paginatedLayoutConfiguration data))
    (when-let [data (lookup-entry config id :sheet-content-type)]
      (. builder sheetContentType data))
    (.build builder)))


(defn cfn-template-default-paginated-layout-configuration-property-builder
  "The cfn-template-default-paginated-layout-configuration-property-builder function buildes out new instances of 
CfnTemplate$DefaultPaginatedLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sectionBased` | software.amazon.awscdk.services.quicksight.CfnTemplate$DefaultSectionBasedLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:section-based` |"
  [stack id config]
  (let [builder (CfnTemplate$DefaultPaginatedLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :section-based)]
      (. builder sectionBased data))
    (.build builder)))


(defn cfn-template-default-relative-date-time-control-options-property-builder
  "The cfn-template-default-relative-date-time-control-options-property-builder function buildes out new instances of 
CfnTemplate$DefaultRelativeDateTimeControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$RelativeDateTimeControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |"
  [stack id config]
  (let [builder (CfnTemplate$DefaultRelativeDateTimeControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (.build builder)))


(defn cfn-template-default-section-based-layout-configuration-property-builder
  "The cfn-template-default-section-based-layout-configuration-property-builder function buildes out new instances of 
CfnTemplate$DefaultSectionBasedLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |"
  [stack id config]
  (let [builder (CfnTemplate$DefaultSectionBasedLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (.build builder)))


(defn cfn-template-default-slider-control-options-property-builder
  "The cfn-template-default-slider-control-options-property-builder function buildes out new instances of 
CfnTemplate$DefaultSliderControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnTemplate$DefaultSliderControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :maximum-value)]
      (. builder maximumValue data))
    (when-let [data (lookup-entry config id :minimum-value)]
      (. builder minimumValue data))
    (when-let [data (lookup-entry config id :step-size)]
      (. builder stepSize data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-template-default-text-area-control-options-property-builder
  "The cfn-template-default-text-area-control-options-property-builder function buildes out new instances of 
CfnTemplate$DefaultTextAreaControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |"
  [stack id config]
  (let [builder (CfnTemplate$DefaultTextAreaControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :delimiter)]
      (. builder delimiter data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (.build builder)))


(defn cfn-template-default-text-field-control-options-property-builder
  "The cfn-template-default-text-field-control-options-property-builder function buildes out new instances of 
CfnTemplate$DefaultTextFieldControlOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |"
  [stack id config]
  (let [builder (CfnTemplate$DefaultTextFieldControlOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (.build builder)))


(defn cfn-template-destination-parameter-value-configuration-property-builder
  "The cfn-template-destination-parameter-value-configuration-property-builder function buildes out new instances of 
CfnTemplate$DestinationParameterValueConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValuesConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-values-configuration` |
| `selectAllValueOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-value-options` |
| `sourceColumn` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:source-column` |
| `sourceField` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-field` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |"
  [stack id config]
  (let [builder (CfnTemplate$DestinationParameterValueConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-values-configuration)]
      (. builder customValuesConfiguration data))
    (when-let [data (lookup-entry config id :select-all-value-options)]
      (. builder selectAllValueOptions data))
    (when-let [data (lookup-entry config id :source-column)]
      (. builder sourceColumn data))
    (when-let [data (lookup-entry config id :source-field)]
      (. builder sourceField data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (.build builder)))


(defn cfn-template-dimension-field-property-builder
  "The cfn-template-dimension-field-property-builder function buildes out new instances of 
CfnTemplate$DimensionFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoricalDimensionField` | software.amazon.awscdk.services.quicksight.CfnTemplate$CategoricalDimensionFieldProperty | [[cdk.support/lookup-entry]] | `:categorical-dimension-field` |
| `dateDimensionField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-dimension-field` |
| `numericalDimensionField` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericalDimensionFieldProperty | [[cdk.support/lookup-entry]] | `:numerical-dimension-field` |"
  [stack id config]
  (let [builder (CfnTemplate$DimensionFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :categorical-dimension-field)]
      (. builder categoricalDimensionField data))
    (when-let [data (lookup-entry config id :date-dimension-field)]
      (. builder dateDimensionField data))
    (when-let [data (lookup-entry config id :numerical-dimension-field)]
      (. builder numericalDimensionField data))
    (.build builder)))


(defn cfn-template-donut-center-options-property-builder
  "The cfn-template-donut-center-options-property-builder function buildes out new instances of 
CfnTemplate$DonutCenterOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `labelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$DonutCenterOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :label-visibility)]
      (. builder labelVisibility data))
    (.build builder)))


(defn cfn-template-donut-options-property-builder
  "The cfn-template-donut-options-property-builder function buildes out new instances of 
CfnTemplate$DonutOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arcOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ArcOptionsProperty | [[cdk.support/lookup-entry]] | `:arc-options` |
| `donutCenterOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:donut-center-options` |"
  [stack id config]
  (let [builder (CfnTemplate$DonutOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :arc-options)]
      (. builder arcOptions data))
    (when-let [data (lookup-entry config id :donut-center-options)]
      (. builder donutCenterOptions data))
    (.build builder)))


(defn cfn-template-drill-down-filter-property-builder
  "The cfn-template-drill-down-filter-property-builder function buildes out new instances of 
CfnTemplate$DrillDownFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-filter` |
| `numericEqualityFilter` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericEqualityDrillDownFilterProperty | [[cdk.support/lookup-entry]] | `:numeric-equality-filter` |
| `timeRangeFilter` | software.amazon.awscdk.services.quicksight.CfnTemplate$TimeRangeDrillDownFilterProperty | [[cdk.support/lookup-entry]] | `:time-range-filter` |"
  [stack id config]
  (let [builder (CfnTemplate$DrillDownFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-filter)]
      (. builder categoryFilter data))
    (when-let [data (lookup-entry config id :numeric-equality-filter)]
      (. builder numericEqualityFilter data))
    (when-let [data (lookup-entry config id :time-range-filter)]
      (. builder timeRangeFilter data))
    (.build builder)))


(defn cfn-template-drop-down-control-display-options-property-builder
  "The cfn-template-drop-down-control-display-options-property-builder function buildes out new instances of 
CfnTemplate$DropDownControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `selectAllOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `titleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnTemplate$DropDownControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-template-dynamic-default-value-property-builder
  "The cfn-template-dynamic-default-value-property-builder function buildes out new instances of 
CfnTemplate$DynamicDefaultValueProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValueColumn` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-value-column` |
| `groupNameColumn` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:group-name-column` |
| `userNameColumn` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:user-name-column` |"
  [stack id config]
  (let [builder (CfnTemplate$DynamicDefaultValueProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-value-column)]
      (. builder defaultValueColumn data))
    (when-let [data (lookup-entry config id :group-name-column)]
      (. builder groupNameColumn data))
    (when-let [data (lookup-entry config id :user-name-column)]
      (. builder userNameColumn data))
    (.build builder)))


(defn cfn-template-empty-visual-property-builder
  "The cfn-template-empty-visual-property-builder function buildes out new instances of 
CfnTemplate$EmptyVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$EmptyVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-entity-property-builder
  "The cfn-template-entity-property-builder function buildes out new instances of 
CfnTemplate$EntityProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `path` | java.lang.String | [[cdk.support/lookup-entry]] | `:path` |"
  [stack id config]
  (let [builder (CfnTemplate$EntityProperty$Builder.)]
    (when-let [data (lookup-entry config id :path)]
      (. builder path data))
    (.build builder)))


(defn cfn-template-exclude-period-configuration-property-builder
  "The cfn-template-exclude-period-configuration-property-builder function buildes out new instances of 
CfnTemplate$ExcludePeriodConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `amount` | java.lang.Number | [[cdk.support/lookup-entry]] | `:amount` |
| `granularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:granularity` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |"
  [stack id config]
  (let [builder (CfnTemplate$ExcludePeriodConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :amount)]
      (. builder amount data))
    (when-let [data (lookup-entry config id :granularity)]
      (. builder granularity data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (.build builder)))


(defn cfn-template-explicit-hierarchy-property-builder
  "The cfn-template-explicit-hierarchy-property-builder function buildes out new instances of 
CfnTemplate$ExplicitHierarchyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:columns` |
| `drillDownFilters` | java.util.List | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnTemplate$ExplicitHierarchyProperty$Builder.)]
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (when-let [data (lookup-entry config id :drill-down-filters)]
      (. builder drillDownFilters data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-template-field-based-tooltip-property-builder
  "The cfn-template-field-based-tooltip-property-builder function buildes out new instances of 
CfnTemplate$FieldBasedTooltipProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation-visibility` |
| `tooltipFields` | java.util.List | [[cdk.support/lookup-entry]] | `:tooltip-fields` |
| `tooltipTitleType` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-title-type` |"
  [stack id config]
  (let [builder (CfnTemplate$FieldBasedTooltipProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-visibility)]
      (. builder aggregationVisibility data))
    (when-let [data (lookup-entry config id :tooltip-fields)]
      (. builder tooltipFields data))
    (when-let [data (lookup-entry config id :tooltip-title-type)]
      (. builder tooltipTitleType data))
    (.build builder)))


(defn cfn-template-field-label-type-property-builder
  "The cfn-template-field-label-type-property-builder function buildes out new instances of 
CfnTemplate$FieldLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$FieldLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-field-series-item-property-builder
  "The cfn-template-field-series-item-property-builder function buildes out new instances of 
CfnTemplate$FieldSeriesItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `settings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:settings` |"
  [stack id config]
  (let [builder (CfnTemplate$FieldSeriesItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-binding)]
      (. builder axisBinding data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :settings)]
      (. builder settings data))
    (.build builder)))


(defn cfn-template-field-sort-options-property-builder
  "The cfn-template-field-sort-options-property-builder function buildes out new instances of 
CfnTemplate$FieldSortOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-sort` |
| `fieldSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-sort` |"
  [stack id config]
  (let [builder (CfnTemplate$FieldSortOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-sort)]
      (. builder columnSort data))
    (when-let [data (lookup-entry config id :field-sort)]
      (. builder fieldSort data))
    (.build builder)))


(defn cfn-template-field-sort-property-builder
  "The cfn-template-field-sort-property-builder function buildes out new instances of 
CfnTemplate$FieldSortProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `direction` | java.lang.String | [[cdk.support/lookup-entry]] | `:direction` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |"
  [stack id config]
  (let [builder (CfnTemplate$FieldSortProperty$Builder.)]
    (when-let [data (lookup-entry config id :direction)]
      (. builder direction data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (.build builder)))


(defn cfn-template-field-tooltip-item-property-builder
  "The cfn-template-field-tooltip-item-property-builder function buildes out new instances of 
CfnTemplate$FieldTooltipItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `label` | java.lang.String | [[cdk.support/lookup-entry]] | `:label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$FieldTooltipItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :label)]
      (. builder label data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-filled-map-aggregated-field-wells-property-builder
  "The cfn-template-filled-map-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$FilledMapAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `geospatial` | java.util.List | [[cdk.support/lookup-entry]] | `:geospatial` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$FilledMapAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :geospatial)]
      (. builder geospatial data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-filled-map-conditional-formatting-option-property-builder
  "The cfn-template-filled-map-conditional-formatting-option-property-builder function buildes out new instances of 
CfnTemplate$FilledMapConditionalFormattingOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `shape` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:shape` |"
  [stack id config]
  (let [builder (CfnTemplate$FilledMapConditionalFormattingOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :shape)]
      (. builder shape data))
    (.build builder)))


(defn cfn-template-filled-map-conditional-formatting-property-builder
  "The cfn-template-filled-map-conditional-formatting-property-builder function buildes out new instances of 
CfnTemplate$FilledMapConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |"
  [stack id config]
  (let [builder (CfnTemplate$FilledMapConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :conditional-formatting-options)]
      (. builder conditionalFormattingOptions data))
    (.build builder)))


(defn cfn-template-filled-map-configuration-property-builder
  "The cfn-template-filled-map-configuration-property-builder function buildes out new instances of 
CfnTemplate$FilledMapConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilledMapFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnTemplate$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `mapStyleOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$GeospatialMapStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:map-style-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilledMapSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnTemplate$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `windowOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:window-options` |"
  [stack id config]
  (let [builder (CfnTemplate$FilledMapConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :map-style-options)]
      (. builder mapStyleOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :window-options)]
      (. builder windowOptions data))
    (.build builder)))


(defn cfn-template-filled-map-field-wells-property-builder
  "The cfn-template-filled-map-field-wells-property-builder function buildes out new instances of 
CfnTemplate$FilledMapFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `filledMapAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilledMapAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:filled-map-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$FilledMapFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :filled-map-aggregated-field-wells)]
      (. builder filledMapAggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-filled-map-shape-conditional-formatting-property-builder
  "The cfn-template-filled-map-shape-conditional-formatting-property-builder function buildes out new instances of 
CfnTemplate$FilledMapShapeConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `format` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format` |"
  [stack id config]
  (let [builder (CfnTemplate$FilledMapShapeConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format)]
      (. builder format data))
    (.build builder)))


(defn cfn-template-filled-map-sort-configuration-property-builder
  "The cfn-template-filled-map-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$FilledMapSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |"
  [stack id config]
  (let [builder (CfnTemplate$FilledMapSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (.build builder)))


(defn cfn-template-filled-map-visual-property-builder
  "The cfn-template-filled-map-visual-property-builder function buildes out new instances of 
CfnTemplate$FilledMapVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilledMapConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilledMapConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$FilledMapVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :conditional-formatting)]
      (. builder conditionalFormatting data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-filter-control-property-builder
  "The cfn-template-filter-control-property-builder function buildes out new instances of 
CfnTemplate$FilterControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `crossSheet` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterCrossSheetControlProperty | [[cdk.support/lookup-entry]] | `:cross-sheet` |
| `dateTimePicker` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterDateTimePickerControlProperty | [[cdk.support/lookup-entry]] | `:date-time-picker` |
| `dropdown` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterDropDownControlProperty | [[cdk.support/lookup-entry]] | `:dropdown` |
| `list` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:list` |
| `relativeDateTime` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterRelativeDateTimeControlProperty | [[cdk.support/lookup-entry]] | `:relative-date-time` |
| `slider` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:slider` |
| `textArea` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterTextAreaControlProperty | [[cdk.support/lookup-entry]] | `:text-area` |
| `textField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-field` |"
  [stack id config]
  (let [builder (CfnTemplate$FilterControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cross-sheet)]
      (. builder crossSheet data))
    (when-let [data (lookup-entry config id :date-time-picker)]
      (. builder dateTimePicker data))
    (when-let [data (lookup-entry config id :dropdown)]
      (. builder dropdown data))
    (when-let [data (lookup-entry config id :list)]
      (. builder list data))
    (when-let [data (lookup-entry config id :relative-date-time)]
      (. builder relativeDateTime data))
    (when-let [data (lookup-entry config id :slider)]
      (. builder slider data))
    (when-let [data (lookup-entry config id :text-area)]
      (. builder textArea data))
    (when-let [data (lookup-entry config id :text-field)]
      (. builder textField data))
    (.build builder)))


(defn cfn-template-filter-cross-sheet-control-property-builder
  "The cfn-template-filter-cross-sheet-control-property-builder function buildes out new instances of 
CfnTemplate$FilterCrossSheetControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |"
  [stack id config]
  (let [builder (CfnTemplate$FilterCrossSheetControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cascading-control-configuration)]
      (. builder cascadingControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (.build builder)))


(defn cfn-template-filter-date-time-picker-control-property-builder
  "The cfn-template-filter-date-time-picker-control-property-builder function buildes out new instances of 
CfnTemplate$FilterDateTimePickerControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnTemplate$FilterDateTimePickerControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-template-filter-drop-down-control-property-builder
  "The cfn-template-filter-drop-down-control-property-builder function buildes out new instances of 
CfnTemplate$FilterDropDownControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$DropDownControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnTemplate$FilterDropDownControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cascading-control-configuration)]
      (. builder cascadingControlConfiguration data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-template-filter-group-property-builder
  "The cfn-template-filter-group-property-builder function buildes out new instances of 
CfnTemplate$FilterGroupProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `crossDataset` | java.lang.String | [[cdk.support/lookup-entry]] | `:cross-dataset` |
| `filterGroupId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-group-id` |
| `filters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filters` |
| `scopeConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilterScopeConfigurationProperty | [[cdk.support/lookup-entry]] | `:scope-configuration` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |"
  [stack id config]
  (let [builder (CfnTemplate$FilterGroupProperty$Builder.)]
    (when-let [data (lookup-entry config id :cross-dataset)]
      (. builder crossDataset data))
    (when-let [data (lookup-entry config id :filter-group-id)]
      (. builder filterGroupId data))
    (when-let [data (lookup-entry config id :filters)]
      (. builder filters data))
    (when-let [data (lookup-entry config id :scope-configuration)]
      (. builder scopeConfiguration data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (.build builder)))


(defn cfn-template-filter-list-configuration-property-builder
  "The cfn-template-filter-list-configuration-property-builder function buildes out new instances of 
CfnTemplate$FilterListConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryValues` | java.util.List | [[cdk.support/lookup-entry]] | `:category-values` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |"
  [stack id config]
  (let [builder (CfnTemplate$FilterListConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-values)]
      (. builder categoryValues data))
    (when-let [data (lookup-entry config id :match-operator)]
      (. builder matchOperator data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (.build builder)))


(defn cfn-template-filter-list-control-property-builder
  "The cfn-template-filter-list-control-property-builder function buildes out new instances of 
CfnTemplate$FilterListControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `selectableValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnTemplate$FilterListControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cascading-control-configuration)]
      (. builder cascadingControlConfiguration data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-template-filter-operation-selected-fields-configuration-property-builder
  "The cfn-template-filter-operation-selected-fields-configuration-property-builder function buildes out new instances of 
CfnTemplate$FilterOperationSelectedFieldsConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `selectedColumns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-columns` |
| `selectedFieldOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-field-options` |
| `selectedFields` | java.util.List | [[cdk.support/lookup-entry]] | `:selected-fields` |"
  [stack id config]
  (let [builder (CfnTemplate$FilterOperationSelectedFieldsConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :selected-columns)]
      (. builder selectedColumns data))
    (when-let [data (lookup-entry config id :selected-field-options)]
      (. builder selectedFieldOptions data))
    (when-let [data (lookup-entry config id :selected-fields)]
      (. builder selectedFields data))
    (.build builder)))


(defn cfn-template-filter-operation-target-visuals-configuration-property-builder
  "The cfn-template-filter-operation-target-visuals-configuration-property-builder function buildes out new instances of 
CfnTemplate$FilterOperationTargetVisualsConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sameSheetTargetVisualConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:same-sheet-target-visual-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$FilterOperationTargetVisualsConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :same-sheet-target-visual-configuration)]
      (. builder sameSheetTargetVisualConfiguration data))
    (.build builder)))


(defn cfn-template-filter-property-builder
  "The cfn-template-filter-property-builder function buildes out new instances of 
CfnTemplate$FilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryFilter` | software.amazon.awscdk.services.quicksight.CfnTemplate$CategoryFilterProperty | [[cdk.support/lookup-entry]] | `:category-filter` |
| `numericEqualityFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-equality-filter` |
| `numericRangeFilter` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericRangeFilterProperty | [[cdk.support/lookup-entry]] | `:numeric-range-filter` |
| `relativeDatesFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:relative-dates-filter` |
| `timeEqualityFilter` | software.amazon.awscdk.services.quicksight.CfnTemplate$TimeEqualityFilterProperty | [[cdk.support/lookup-entry]] | `:time-equality-filter` |
| `timeRangeFilter` | software.amazon.awscdk.services.quicksight.CfnTemplate$TimeRangeFilterProperty | [[cdk.support/lookup-entry]] | `:time-range-filter` |
| `topBottomFilter` | software.amazon.awscdk.services.quicksight.CfnTemplate$TopBottomFilterProperty | [[cdk.support/lookup-entry]] | `:top-bottom-filter` |"
  [stack id config]
  (let [builder (CfnTemplate$FilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-filter)]
      (. builder categoryFilter data))
    (when-let [data (lookup-entry config id :numeric-equality-filter)]
      (. builder numericEqualityFilter data))
    (when-let [data (lookup-entry config id :numeric-range-filter)]
      (. builder numericRangeFilter data))
    (when-let [data (lookup-entry config id :relative-dates-filter)]
      (. builder relativeDatesFilter data))
    (when-let [data (lookup-entry config id :time-equality-filter)]
      (. builder timeEqualityFilter data))
    (when-let [data (lookup-entry config id :time-range-filter)]
      (. builder timeRangeFilter data))
    (when-let [data (lookup-entry config id :top-bottom-filter)]
      (. builder topBottomFilter data))
    (.build builder)))


(defn cfn-template-filter-relative-date-time-control-property-builder
  "The cfn-template-filter-relative-date-time-control-property-builder function buildes out new instances of 
CfnTemplate$FilterRelativeDateTimeControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnTemplate$FilterRelativeDateTimeControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-template-filter-scope-configuration-property-builder
  "The cfn-template-filter-scope-configuration-property-builder function buildes out new instances of 
CfnTemplate$FilterScopeConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `allSheets` | java.lang.Object | [[cdk.support/lookup-entry]] | `:all-sheets` |
| `selectedSheets` | software.amazon.awscdk.services.quicksight.CfnTemplate$SelectedSheetsFilterScopeConfigurationProperty | [[cdk.support/lookup-entry]] | `:selected-sheets` |"
  [stack id config]
  (let [builder (CfnTemplate$FilterScopeConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :all-sheets)]
      (. builder allSheets data))
    (when-let [data (lookup-entry config id :selected-sheets)]
      (. builder selectedSheets data))
    (.build builder)))


(defn cfn-template-filter-selectable-values-property-builder
  "The cfn-template-filter-selectable-values-property-builder function buildes out new instances of 
CfnTemplate$FilterSelectableValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$FilterSelectableValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-filter-slider-control-property-builder
  "The cfn-template-filter-slider-control-property-builder function buildes out new instances of 
CfnTemplate$FilterSliderControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SliderControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnTemplate$FilterSliderControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :maximum-value)]
      (. builder maximumValue data))
    (when-let [data (lookup-entry config id :minimum-value)]
      (. builder minimumValue data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :step-size)]
      (. builder stepSize data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-template-filter-text-area-control-property-builder
  "The cfn-template-filter-text-area-control-property-builder function buildes out new instances of 
CfnTemplate$FilterTextAreaControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$TextAreaControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnTemplate$FilterTextAreaControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :delimiter)]
      (. builder delimiter data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-template-filter-text-field-control-property-builder
  "The cfn-template-filter-text-field-control-property-builder function buildes out new instances of 
CfnTemplate$FilterTextFieldControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$TextFieldControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `filterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-control-id` |
| `sourceFilterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-filter-id` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnTemplate$FilterTextFieldControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :filter-control-id)]
      (. builder filterControlId data))
    (when-let [data (lookup-entry config id :source-filter-id)]
      (. builder sourceFilterId data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-template-font-configuration-property-builder
  "The cfn-template-font-configuration-property-builder function buildes out new instances of 
CfnTemplate$FontConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-color` |
| `fontDecoration` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-decoration` |
| `fontSize` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-size` |
| `fontStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-style` |
| `fontWeight` | software.amazon.awscdk.services.quicksight.CfnTemplate$FontWeightProperty | [[cdk.support/lookup-entry]] | `:font-weight` |"
  [stack id config]
  (let [builder (CfnTemplate$FontConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :font-color)]
      (. builder fontColor data))
    (when-let [data (lookup-entry config id :font-decoration)]
      (. builder fontDecoration data))
    (when-let [data (lookup-entry config id :font-size)]
      (. builder fontSize data))
    (when-let [data (lookup-entry config id :font-style)]
      (. builder fontStyle data))
    (when-let [data (lookup-entry config id :font-weight)]
      (. builder fontWeight data))
    (.build builder)))


(defn cfn-template-font-size-property-builder
  "The cfn-template-font-size-property-builder function buildes out new instances of 
CfnTemplate$FontSizeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `relative` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative` |"
  [stack id config]
  (let [builder (CfnTemplate$FontSizeProperty$Builder.)]
    (when-let [data (lookup-entry config id :relative)]
      (. builder relative data))
    (.build builder)))


(defn cfn-template-font-weight-property-builder
  "The cfn-template-font-weight-property-builder function buildes out new instances of 
CfnTemplate$FontWeightProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |"
  [stack id config]
  (let [builder (CfnTemplate$FontWeightProperty$Builder.)]
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (.build builder)))


(defn cfn-template-forecast-computation-property-builder
  "The cfn-template-forecast-computation-property-builder function buildes out new instances of 
CfnTemplate$ForecastComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `customSeasonalityValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-seasonality-value` |
| `lowerBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:lower-boundary` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodsBackward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-backward` |
| `periodsForward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-forward` |
| `predictionInterval` | java.lang.Number | [[cdk.support/lookup-entry]] | `:prediction-interval` |
| `seasonality` | java.lang.String | [[cdk.support/lookup-entry]] | `:seasonality` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `upperBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:upper-boundary` |
| `value` | software.amazon.awscdk.services.quicksight.CfnTemplate$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$ForecastComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :custom-seasonality-value)]
      (. builder customSeasonalityValue data))
    (when-let [data (lookup-entry config id :lower-boundary)]
      (. builder lowerBoundary data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :periods-backward)]
      (. builder periodsBackward data))
    (when-let [data (lookup-entry config id :periods-forward)]
      (. builder periodsForward data))
    (when-let [data (lookup-entry config id :prediction-interval)]
      (. builder predictionInterval data))
    (when-let [data (lookup-entry config id :seasonality)]
      (. builder seasonality data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :upper-boundary)]
      (. builder upperBoundary data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-forecast-configuration-property-builder
  "The cfn-template-forecast-configuration-property-builder function buildes out new instances of 
CfnTemplate$ForecastConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `forecastProperties` | software.amazon.awscdk.services.quicksight.CfnTemplate$TimeBasedForecastPropertiesProperty | [[cdk.support/lookup-entry]] | `:forecast-properties` |
| `scenario` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scenario` |"
  [stack id config]
  (let [builder (CfnTemplate$ForecastConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :forecast-properties)]
      (. builder forecastProperties data))
    (when-let [data (lookup-entry config id :scenario)]
      (. builder scenario data))
    (.build builder)))


(defn cfn-template-forecast-scenario-property-builder
  "The cfn-template-forecast-scenario-property-builder function buildes out new instances of 
CfnTemplate$ForecastScenarioProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `whatIfPointScenario` | software.amazon.awscdk.services.quicksight.CfnTemplate$WhatIfPointScenarioProperty | [[cdk.support/lookup-entry]] | `:what-if-point-scenario` |
| `whatIfRangeScenario` | software.amazon.awscdk.services.quicksight.CfnTemplate$WhatIfRangeScenarioProperty | [[cdk.support/lookup-entry]] | `:what-if-range-scenario` |"
  [stack id config]
  (let [builder (CfnTemplate$ForecastScenarioProperty$Builder.)]
    (when-let [data (lookup-entry config id :what-if-point-scenario)]
      (. builder whatIfPointScenario data))
    (when-let [data (lookup-entry config id :what-if-range-scenario)]
      (. builder whatIfRangeScenario data))
    (.build builder)))


(defn cfn-template-format-configuration-property-builder
  "The cfn-template-format-configuration-property-builder function buildes out new instances of 
CfnTemplate$FormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$DateTimeFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:date-time-format-configuration` |
| `numberFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumberFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:number-format-configuration` |
| `stringFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$StringFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:string-format-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$FormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-format-configuration)]
      (. builder dateTimeFormatConfiguration data))
    (when-let [data (lookup-entry config id :number-format-configuration)]
      (. builder numberFormatConfiguration data))
    (when-let [data (lookup-entry config id :string-format-configuration)]
      (. builder stringFormatConfiguration data))
    (.build builder)))


(defn cfn-template-free-form-layout-canvas-size-options-property-builder
  "The cfn-template-free-form-layout-canvas-size-options-property-builder function buildes out new instances of 
CfnTemplate$FreeFormLayoutCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `screenCanvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:screen-canvas-size-options` |"
  [stack id config]
  (let [builder (CfnTemplate$FreeFormLayoutCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :screen-canvas-size-options)]
      (. builder screenCanvasSizeOptions data))
    (.build builder)))


(defn cfn-template-free-form-layout-configuration-property-builder
  "The cfn-template-free-form-layout-configuration-property-builder function buildes out new instances of 
CfnTemplate$FreeFormLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$FreeFormLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `elements` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:elements` |"
  [stack id config]
  (let [builder (CfnTemplate$FreeFormLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (when-let [data (lookup-entry config id :elements)]
      (. builder elements data))
    (.build builder)))


(defn cfn-template-free-form-layout-element-background-style-property-builder
  "The cfn-template-free-form-layout-element-background-style-property-builder function buildes out new instances of 
CfnTemplate$FreeFormLayoutElementBackgroundStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$FreeFormLayoutElementBackgroundStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-free-form-layout-element-border-style-property-builder
  "The cfn-template-free-form-layout-element-border-style-property-builder function buildes out new instances of 
CfnTemplate$FreeFormLayoutElementBorderStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$FreeFormLayoutElementBorderStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-free-form-layout-element-property-builder
  "The cfn-template-free-form-layout-element-property-builder function buildes out new instances of 
CfnTemplate$FreeFormLayoutElementProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:background-style` |
| `borderStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:border-style` |
| `elementId` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-id` |
| `elementType` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-type` |
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `loadingAnimation` | software.amazon.awscdk.services.quicksight.CfnTemplate$LoadingAnimationProperty | [[cdk.support/lookup-entry]] | `:loading-animation` |
| `renderingRules` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rendering-rules` |
| `selectedBorderStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-border-style` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |
| `xAxisLocation` | java.lang.String | [[cdk.support/lookup-entry]] | `:x-axis-location` |
| `yAxisLocation` | java.lang.String | [[cdk.support/lookup-entry]] | `:y-axis-location` |"
  [stack id config]
  (let [builder (CfnTemplate$FreeFormLayoutElementProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-style)]
      (. builder backgroundStyle data))
    (when-let [data (lookup-entry config id :border-style)]
      (. builder borderStyle data))
    (when-let [data (lookup-entry config id :element-id)]
      (. builder elementId data))
    (when-let [data (lookup-entry config id :element-type)]
      (. builder elementType data))
    (when-let [data (lookup-entry config id :height)]
      (. builder height data))
    (when-let [data (lookup-entry config id :loading-animation)]
      (. builder loadingAnimation data))
    (when-let [data (lookup-entry config id :rendering-rules)]
      (. builder renderingRules data))
    (when-let [data (lookup-entry config id :selected-border-style)]
      (. builder selectedBorderStyle data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (when-let [data (lookup-entry config id :width)]
      (. builder width data))
    (when-let [data (lookup-entry config id :x-axis-location)]
      (. builder xAxisLocation data))
    (when-let [data (lookup-entry config id :y-axis-location)]
      (. builder yAxisLocation data))
    (.build builder)))


(defn cfn-template-free-form-layout-screen-canvas-size-options-property-builder
  "The cfn-template-free-form-layout-screen-canvas-size-options-property-builder function buildes out new instances of 
CfnTemplate$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `optimizedViewPortWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:optimized-view-port-width` |"
  [stack id config]
  (let [builder (CfnTemplate$FreeFormLayoutScreenCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :optimized-view-port-width)]
      (. builder optimizedViewPortWidth data))
    (.build builder)))


(defn cfn-template-free-form-section-layout-configuration-property-builder
  "The cfn-template-free-form-section-layout-configuration-property-builder function buildes out new instances of 
CfnTemplate$FreeFormSectionLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `elements` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:elements` |"
  [stack id config]
  (let [builder (CfnTemplate$FreeFormSectionLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :elements)]
      (. builder elements data))
    (.build builder)))


(defn cfn-template-funnel-chart-aggregated-field-wells-property-builder
  "The cfn-template-funnel-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$FunnelChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$FunnelChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-funnel-chart-configuration-property-builder
  "The cfn-template-funnel-chart-configuration-property-builder function buildes out new instances of 
CfnTemplate$FunnelChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `dataLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-label-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FunnelChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnTemplate$FunnelChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :data-label-options)]
      (. builder dataLabelOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :value-label-options)]
      (. builder valueLabelOptions data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-template-funnel-chart-data-label-options-property-builder
  "The cfn-template-funnel-chart-data-label-options-property-builder function buildes out new instances of 
CfnTemplate$FunnelChartDataLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-label-visibility` |
| `labelColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:label-color` |
| `labelFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label-font-configuration` |
| `measureDataLabelStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-data-label-style` |
| `measureLabelVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-label-visibility` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$FunnelChartDataLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-label-visibility)]
      (. builder categoryLabelVisibility data))
    (when-let [data (lookup-entry config id :label-color)]
      (. builder labelColor data))
    (when-let [data (lookup-entry config id :label-font-configuration)]
      (. builder labelFontConfiguration data))
    (when-let [data (lookup-entry config id :measure-data-label-style)]
      (. builder measureDataLabelStyle data))
    (when-let [data (lookup-entry config id :measure-label-visibility)]
      (. builder measureLabelVisibility data))
    (when-let [data (lookup-entry config id :position)]
      (. builder position data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-funnel-chart-field-wells-property-builder
  "The cfn-template-funnel-chart-field-wells-property-builder function buildes out new instances of 
CfnTemplate$FunnelChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `funnelChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:funnel-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$FunnelChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :funnel-chart-aggregated-field-wells)]
      (. builder funnelChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-funnel-chart-sort-configuration-property-builder
  "The cfn-template-funnel-chart-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$FunnelChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |"
  [stack id config]
  (let [builder (CfnTemplate$FunnelChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (.build builder)))


(defn cfn-template-funnel-chart-visual-property-builder
  "The cfn-template-funnel-chart-visual-property-builder function buildes out new instances of 
CfnTemplate$FunnelChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$FunnelChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-gauge-chart-arc-conditional-formatting-property-builder
  "The cfn-template-gauge-chart-arc-conditional-formatting-property-builder function buildes out new instances of 
CfnTemplate$GaugeChartArcConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `foregroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:foreground-color` |"
  [stack id config]
  (let [builder (CfnTemplate$GaugeChartArcConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :foreground-color)]
      (. builder foregroundColor data))
    (.build builder)))


(defn cfn-template-gauge-chart-conditional-formatting-option-property-builder
  "The cfn-template-gauge-chart-conditional-formatting-option-property-builder function buildes out new instances of 
CfnTemplate$GaugeChartConditionalFormattingOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arc` | software.amazon.awscdk.services.quicksight.CfnTemplate$GaugeChartArcConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:arc` |
| `primaryValue` | software.amazon.awscdk.services.quicksight.CfnTemplate$GaugeChartPrimaryValueConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:primary-value` |"
  [stack id config]
  (let [builder (CfnTemplate$GaugeChartConditionalFormattingOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :arc)]
      (. builder arc data))
    (when-let [data (lookup-entry config id :primary-value)]
      (. builder primaryValue data))
    (.build builder)))


(defn cfn-template-gauge-chart-conditional-formatting-property-builder
  "The cfn-template-gauge-chart-conditional-formatting-property-builder function buildes out new instances of 
CfnTemplate$GaugeChartConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |"
  [stack id config]
  (let [builder (CfnTemplate$GaugeChartConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :conditional-formatting-options)]
      (. builder conditionalFormattingOptions data))
    (.build builder)))


(defn cfn-template-gauge-chart-configuration-property-builder
  "The cfn-template-gauge-chart-configuration-property-builder function buildes out new instances of 
CfnTemplate$GaugeChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `gaugeChartOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:gauge-chart-options` |
| `tooltipOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip-options` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnTemplate$GaugeChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :gauge-chart-options)]
      (. builder gaugeChartOptions data))
    (when-let [data (lookup-entry config id :tooltip-options)]
      (. builder tooltipOptions data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-template-gauge-chart-field-wells-property-builder
  "The cfn-template-gauge-chart-field-wells-property-builder function buildes out new instances of 
CfnTemplate$GaugeChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target-values` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$GaugeChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :target-values)]
      (. builder targetValues data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-gauge-chart-options-property-builder
  "The cfn-template-gauge-chart-options-property-builder function buildes out new instances of 
CfnTemplate$GaugeChartOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arc` | software.amazon.awscdk.services.quicksight.CfnTemplate$ArcConfigurationProperty | [[cdk.support/lookup-entry]] | `:arc` |
| `arcAxis` | software.amazon.awscdk.services.quicksight.CfnTemplate$ArcAxisConfigurationProperty | [[cdk.support/lookup-entry]] | `:arc-axis` |
| `comparison` | software.amazon.awscdk.services.quicksight.CfnTemplate$ComparisonConfigurationProperty | [[cdk.support/lookup-entry]] | `:comparison` |
| `primaryValueDisplayType` | java.lang.String | [[cdk.support/lookup-entry]] | `:primary-value-display-type` |
| `primaryValueFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-value-font-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$GaugeChartOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :arc)]
      (. builder arc data))
    (when-let [data (lookup-entry config id :arc-axis)]
      (. builder arcAxis data))
    (when-let [data (lookup-entry config id :comparison)]
      (. builder comparison data))
    (when-let [data (lookup-entry config id :primary-value-display-type)]
      (. builder primaryValueDisplayType data))
    (when-let [data (lookup-entry config id :primary-value-font-configuration)]
      (. builder primaryValueFontConfiguration data))
    (.build builder)))


(defn cfn-template-gauge-chart-primary-value-conditional-formatting-property-builder
  "The cfn-template-gauge-chart-primary-value-conditional-formatting-property-builder function buildes out new instances of 
CfnTemplate$GaugeChartPrimaryValueConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.services.quicksight.CfnTemplate$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnTemplate$GaugeChartPrimaryValueConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-template-gauge-chart-visual-property-builder
  "The cfn-template-gauge-chart-visual-property-builder function buildes out new instances of 
CfnTemplate$GaugeChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$GaugeChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnTemplate$GaugeChartConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$GaugeChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :conditional-formatting)]
      (. builder conditionalFormatting data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-geospatial-coordinate-bounds-property-builder
  "The cfn-template-geospatial-coordinate-bounds-property-builder function buildes out new instances of 
CfnTemplate$GeospatialCoordinateBoundsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `east` | java.lang.Number | [[cdk.support/lookup-entry]] | `:east` |
| `north` | java.lang.Number | [[cdk.support/lookup-entry]] | `:north` |
| `south` | java.lang.Number | [[cdk.support/lookup-entry]] | `:south` |
| `west` | java.lang.Number | [[cdk.support/lookup-entry]] | `:west` |"
  [stack id config]
  (let [builder (CfnTemplate$GeospatialCoordinateBoundsProperty$Builder.)]
    (when-let [data (lookup-entry config id :east)]
      (. builder east data))
    (when-let [data (lookup-entry config id :north)]
      (. builder north data))
    (when-let [data (lookup-entry config id :south)]
      (. builder south data))
    (when-let [data (lookup-entry config id :west)]
      (. builder west data))
    (.build builder)))


(defn cfn-template-geospatial-heatmap-color-scale-property-builder
  "The cfn-template-geospatial-heatmap-color-scale-property-builder function buildes out new instances of 
CfnTemplate$GeospatialHeatmapColorScaleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |"
  [stack id config]
  (let [builder (CfnTemplate$GeospatialHeatmapColorScaleProperty$Builder.)]
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (.build builder)))


(defn cfn-template-geospatial-heatmap-configuration-property-builder
  "The cfn-template-geospatial-heatmap-configuration-property-builder function buildes out new instances of 
CfnTemplate$GeospatialHeatmapConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatmapColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heatmap-color` |"
  [stack id config]
  (let [builder (CfnTemplate$GeospatialHeatmapConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :heatmap-color)]
      (. builder heatmapColor data))
    (.build builder)))


(defn cfn-template-geospatial-heatmap-data-color-property-builder
  "The cfn-template-geospatial-heatmap-data-color-property-builder function buildes out new instances of 
CfnTemplate$GeospatialHeatmapDataColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |"
  [stack id config]
  (let [builder (CfnTemplate$GeospatialHeatmapDataColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (.build builder)))


(defn cfn-template-geospatial-map-aggregated-field-wells-property-builder
  "The cfn-template-geospatial-map-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$GeospatialMapAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
| `geospatial` | java.util.List | [[cdk.support/lookup-entry]] | `:geospatial` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$GeospatialMapAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :geospatial)]
      (. builder geospatial data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-geospatial-map-configuration-property-builder
  "The cfn-template-geospatial-map-configuration-property-builder function buildes out new instances of 
CfnTemplate$GeospatialMapConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$GeospatialMapFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnTemplate$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `mapStyleOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$GeospatialMapStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:map-style-options` |
| `pointStyleOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$GeospatialPointStyleOptionsProperty | [[cdk.support/lookup-entry]] | `:point-style-options` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `windowOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$GeospatialWindowOptionsProperty | [[cdk.support/lookup-entry]] | `:window-options` |"
  [stack id config]
  (let [builder (CfnTemplate$GeospatialMapConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :map-style-options)]
      (. builder mapStyleOptions data))
    (when-let [data (lookup-entry config id :point-style-options)]
      (. builder pointStyleOptions data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (when-let [data (lookup-entry config id :window-options)]
      (. builder windowOptions data))
    (.build builder)))


(defn cfn-template-geospatial-map-field-wells-property-builder
  "The cfn-template-geospatial-map-field-wells-property-builder function buildes out new instances of 
CfnTemplate$GeospatialMapFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `geospatialMapAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$GeospatialMapAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:geospatial-map-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$GeospatialMapFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :geospatial-map-aggregated-field-wells)]
      (. builder geospatialMapAggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-geospatial-map-style-options-property-builder
  "The cfn-template-geospatial-map-style-options-property-builder function buildes out new instances of 
CfnTemplate$GeospatialMapStyleOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `baseMapStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:base-map-style` |"
  [stack id config]
  (let [builder (CfnTemplate$GeospatialMapStyleOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :base-map-style)]
      (. builder baseMapStyle data))
    (.build builder)))


(defn cfn-template-geospatial-map-visual-property-builder
  "The cfn-template-geospatial-map-visual-property-builder function buildes out new instances of 
CfnTemplate$GeospatialMapVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$GeospatialMapConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$GeospatialMapVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-geospatial-point-style-options-property-builder
  "The cfn-template-geospatial-point-style-options-property-builder function buildes out new instances of 
CfnTemplate$GeospatialPointStyleOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `clusterMarkerConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ClusterMarkerConfigurationProperty | [[cdk.support/lookup-entry]] | `:cluster-marker-configuration` |
| `heatmapConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heatmap-configuration` |
| `selectedPointStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-point-style` |"
  [stack id config]
  (let [builder (CfnTemplate$GeospatialPointStyleOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :cluster-marker-configuration)]
      (. builder clusterMarkerConfiguration data))
    (when-let [data (lookup-entry config id :heatmap-configuration)]
      (. builder heatmapConfiguration data))
    (when-let [data (lookup-entry config id :selected-point-style)]
      (. builder selectedPointStyle data))
    (.build builder)))


(defn cfn-template-geospatial-window-options-property-builder
  "The cfn-template-geospatial-window-options-property-builder function buildes out new instances of 
CfnTemplate$GeospatialWindowOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bounds` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bounds` |
| `mapZoomMode` | java.lang.String | [[cdk.support/lookup-entry]] | `:map-zoom-mode` |"
  [stack id config]
  (let [builder (CfnTemplate$GeospatialWindowOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bounds)]
      (. builder bounds data))
    (when-let [data (lookup-entry config id :map-zoom-mode)]
      (. builder mapZoomMode data))
    (.build builder)))


(defn cfn-template-global-table-border-options-property-builder
  "The cfn-template-global-table-border-options-property-builder function buildes out new instances of 
CfnTemplate$GlobalTableBorderOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sideSpecificBorder` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:side-specific-border` |
| `uniformBorder` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:uniform-border` |"
  [stack id config]
  (let [builder (CfnTemplate$GlobalTableBorderOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :side-specific-border)]
      (. builder sideSpecificBorder data))
    (when-let [data (lookup-entry config id :uniform-border)]
      (. builder uniformBorder data))
    (.build builder)))


(defn cfn-template-gradient-color-property-builder
  "The cfn-template-gradient-color-property-builder function buildes out new instances of 
CfnTemplate$GradientColorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `stops` | java.util.List | [[cdk.support/lookup-entry]] | `:stops` |"
  [stack id config]
  (let [builder (CfnTemplate$GradientColorProperty$Builder.)]
    (when-let [data (lookup-entry config id :stops)]
      (. builder stops data))
    (.build builder)))


(defn cfn-template-gradient-stop-property-builder
  "The cfn-template-gradient-stop-property-builder function buildes out new instances of 
CfnTemplate$GradientStopProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `dataValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:data-value` |
| `gradientOffset` | java.lang.Number | [[cdk.support/lookup-entry]] | `:gradient-offset` |"
  [stack id config]
  (let [builder (CfnTemplate$GradientStopProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :data-value)]
      (. builder dataValue data))
    (when-let [data (lookup-entry config id :gradient-offset)]
      (. builder gradientOffset data))
    (.build builder)))


(defn cfn-template-grid-layout-canvas-size-options-property-builder
  "The cfn-template-grid-layout-canvas-size-options-property-builder function buildes out new instances of 
CfnTemplate$GridLayoutCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `screenCanvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:screen-canvas-size-options` |"
  [stack id config]
  (let [builder (CfnTemplate$GridLayoutCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :screen-canvas-size-options)]
      (. builder screenCanvasSizeOptions data))
    (.build builder)))


(defn cfn-template-grid-layout-configuration-property-builder
  "The cfn-template-grid-layout-configuration-property-builder function buildes out new instances of 
CfnTemplate$GridLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `canvasSizeOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `elements` | java.util.List | [[cdk.support/lookup-entry]] | `:elements` |"
  [stack id config]
  (let [builder (CfnTemplate$GridLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (when-let [data (lookup-entry config id :elements)]
      (. builder elements data))
    (.build builder)))


(defn cfn-template-grid-layout-element-property-builder
  "The cfn-template-grid-layout-element-property-builder function buildes out new instances of 
CfnTemplate$GridLayoutElementProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnIndex` | java.lang.Number | [[cdk.support/lookup-entry]] | `:column-index` |
| `columnSpan` | java.lang.Number | [[cdk.support/lookup-entry]] | `:column-span` |
| `elementId` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-id` |
| `elementType` | java.lang.String | [[cdk.support/lookup-entry]] | `:element-type` |
| `rowIndex` | java.lang.Number | [[cdk.support/lookup-entry]] | `:row-index` |
| `rowSpan` | java.lang.Number | [[cdk.support/lookup-entry]] | `:row-span` |"
  [stack id config]
  (let [builder (CfnTemplate$GridLayoutElementProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-index)]
      (. builder columnIndex data))
    (when-let [data (lookup-entry config id :column-span)]
      (. builder columnSpan data))
    (when-let [data (lookup-entry config id :element-id)]
      (. builder elementId data))
    (when-let [data (lookup-entry config id :element-type)]
      (. builder elementType data))
    (when-let [data (lookup-entry config id :row-index)]
      (. builder rowIndex data))
    (when-let [data (lookup-entry config id :row-span)]
      (. builder rowSpan data))
    (.build builder)))


(defn cfn-template-grid-layout-screen-canvas-size-options-property-builder
  "The cfn-template-grid-layout-screen-canvas-size-options-property-builder function buildes out new instances of 
CfnTemplate$GridLayoutScreenCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `optimizedViewPortWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:optimized-view-port-width` |
| `resizeOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:resize-option` |"
  [stack id config]
  (let [builder (CfnTemplate$GridLayoutScreenCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :optimized-view-port-width)]
      (. builder optimizedViewPortWidth data))
    (when-let [data (lookup-entry config id :resize-option)]
      (. builder resizeOption data))
    (.build builder)))


(defn cfn-template-growth-rate-computation-property-builder
  "The cfn-template-growth-rate-computation-property-builder function buildes out new instances of 
CfnTemplate$GrowthRateComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:period-size` |
| `time` | software.amazon.awscdk.services.quicksight.CfnTemplate$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.services.quicksight.CfnTemplate$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$GrowthRateComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :period-size)]
      (. builder periodSize data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-header-footer-section-configuration-property-builder
  "The cfn-template-header-footer-section-configuration-property-builder function buildes out new instances of 
CfnTemplate$HeaderFooterSectionConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `layout` | software.amazon.awscdk.services.quicksight.CfnTemplate$SectionLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:layout` |
| `sectionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:section-id` |
| `style` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style` |"
  [stack id config]
  (let [builder (CfnTemplate$HeaderFooterSectionConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :layout)]
      (. builder layout data))
    (when-let [data (lookup-entry config id :section-id)]
      (. builder sectionId data))
    (when-let [data (lookup-entry config id :style)]
      (. builder style data))
    (.build builder)))


(defn cfn-template-heat-map-aggregated-field-wells-property-builder
  "The cfn-template-heat-map-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$HeatMapAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:columns` |
| `rows` | java.util.List | [[cdk.support/lookup-entry]] | `:rows` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$HeatMapAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (when-let [data (lookup-entry config id :rows)]
      (. builder rows data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-heat-map-configuration-property-builder
  "The cfn-template-heat-map-configuration-property-builder function buildes out new instances of 
CfnTemplate$HeatMapConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorScale` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColorScaleProperty | [[cdk.support/lookup-entry]] | `:color-scale` |
| `columnLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-label-options` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$HeatMapFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnTemplate$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `rowLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:row-label-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$HeatMapSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnTemplate$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |"
  [stack id config]
  (let [builder (CfnTemplate$HeatMapConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :color-scale)]
      (. builder colorScale data))
    (when-let [data (lookup-entry config id :column-label-options)]
      (. builder columnLabelOptions data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :row-label-options)]
      (. builder rowLabelOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (.build builder)))


(defn cfn-template-heat-map-field-wells-property-builder
  "The cfn-template-heat-map-field-wells-property-builder function buildes out new instances of 
CfnTemplate$HeatMapFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatMapAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heat-map-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$HeatMapFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :heat-map-aggregated-field-wells)]
      (. builder heatMapAggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-heat-map-sort-configuration-property-builder
  "The cfn-template-heat-map-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$HeatMapSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `heatMapColumnItemsLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heat-map-column-items-limit-configuration` |
| `heatMapColumnSort` | java.util.List | [[cdk.support/lookup-entry]] | `:heat-map-column-sort` |
| `heatMapRowItemsLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heat-map-row-items-limit-configuration` |
| `heatMapRowSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heat-map-row-sort` |"
  [stack id config]
  (let [builder (CfnTemplate$HeatMapSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :heat-map-column-items-limit-configuration)]
      (. builder heatMapColumnItemsLimitConfiguration data))
    (when-let [data (lookup-entry config id :heat-map-column-sort)]
      (. builder heatMapColumnSort data))
    (when-let [data (lookup-entry config id :heat-map-row-items-limit-configuration)]
      (. builder heatMapRowItemsLimitConfiguration data))
    (when-let [data (lookup-entry config id :heat-map-row-sort)]
      (. builder heatMapRowSort data))
    (.build builder)))


(defn cfn-template-heat-map-visual-property-builder
  "The cfn-template-heat-map-visual-property-builder function buildes out new instances of 
CfnTemplate$HeatMapVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$HeatMapConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$HeatMapVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-histogram-aggregated-field-wells-property-builder
  "The cfn-template-histogram-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$HistogramAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$HistogramAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-histogram-bin-options-property-builder
  "The cfn-template-histogram-bin-options-property-builder function buildes out new instances of 
CfnTemplate$HistogramBinOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binCount` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bin-count` |
| `binWidth` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bin-width` |
| `selectedBinType` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-bin-type` |
| `startValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:start-value` |"
  [stack id config]
  (let [builder (CfnTemplate$HistogramBinOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bin-count)]
      (. builder binCount data))
    (when-let [data (lookup-entry config id :bin-width)]
      (. builder binWidth data))
    (when-let [data (lookup-entry config id :selected-bin-type)]
      (. builder selectedBinType data))
    (when-let [data (lookup-entry config id :start-value)]
      (. builder startValue data))
    (.build builder)))


(defn cfn-template-histogram-configuration-property-builder
  "The cfn-template-histogram-configuration-property-builder function buildes out new instances of 
CfnTemplate$HistogramConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `binOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bin-options` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$HistogramFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnTemplate$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |
| `yAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:y-axis-display-options` |"
  [stack id config]
  (let [builder (CfnTemplate$HistogramConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :bin-options)]
      (. builder binOptions data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (when-let [data (lookup-entry config id :x-axis-display-options)]
      (. builder xAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :x-axis-label-options)]
      (. builder xAxisLabelOptions data))
    (when-let [data (lookup-entry config id :y-axis-display-options)]
      (. builder yAxisDisplayOptions data))
    (.build builder)))


(defn cfn-template-histogram-field-wells-property-builder
  "The cfn-template-histogram-field-wells-property-builder function buildes out new instances of 
CfnTemplate$HistogramFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `histogramAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$HistogramAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:histogram-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$HistogramFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :histogram-aggregated-field-wells)]
      (. builder histogramAggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-histogram-visual-property-builder
  "The cfn-template-histogram-visual-property-builder function buildes out new instances of 
CfnTemplate$HistogramVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$HistogramVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-insight-configuration-property-builder
  "The cfn-template-insight-configuration-property-builder function buildes out new instances of 
CfnTemplate$InsightConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:computations` |
| `customNarrative` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-narrative` |"
  [stack id config]
  (let [builder (CfnTemplate$InsightConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computations)]
      (. builder computations data))
    (when-let [data (lookup-entry config id :custom-narrative)]
      (. builder customNarrative data))
    (.build builder)))


(defn cfn-template-insight-visual-property-builder
  "The cfn-template-insight-visual-property-builder function buildes out new instances of 
CfnTemplate$InsightVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `insightConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:insight-configuration` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$InsightVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :insight-configuration)]
      (. builder insightConfiguration data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-integer-default-values-property-builder
  "The cfn-template-integer-default-values-property-builder function buildes out new instances of 
CfnTemplate$IntegerDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |"
  [stack id config]
  (let [builder (CfnTemplate$IntegerDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :dynamic-value)]
      (. builder dynamicValue data))
    (when-let [data (lookup-entry config id :static-values)]
      (. builder staticValues data))
    (.build builder)))


(defn cfn-template-integer-parameter-declaration-property-builder
  "The cfn-template-integer-parameter-declaration-property-builder function buildes out new instances of 
CfnTemplate$IntegerParameterDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-when-unset` |"
  [stack id config]
  (let [builder (CfnTemplate$IntegerParameterDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-values)]
      (. builder defaultValues data))
    (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
      (. builder mappedDataSetParameters data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :parameter-value-type)]
      (. builder parameterValueType data))
    (when-let [data (lookup-entry config id :value-when-unset)]
      (. builder valueWhenUnset data))
    (.build builder)))


(defn cfn-template-integer-value-when-unset-configuration-property-builder
  "The cfn-template-integer-value-when-unset-configuration-property-builder function buildes out new instances of 
CfnTemplate$IntegerValueWhenUnsetConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |"
  [stack id config]
  (let [builder (CfnTemplate$IntegerValueWhenUnsetConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-value)]
      (. builder customValue data))
    (when-let [data (lookup-entry config id :value-when-unset-option)]
      (. builder valueWhenUnsetOption data))
    (.build builder)))


(defn cfn-template-items-limit-configuration-property-builder
  "The cfn-template-items-limit-configuration-property-builder function buildes out new instances of 
CfnTemplate$ItemsLimitConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `itemsLimit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:items-limit` |
| `otherCategories` | java.lang.String | [[cdk.support/lookup-entry]] | `:other-categories` |"
  [stack id config]
  (let [builder (CfnTemplate$ItemsLimitConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :items-limit)]
      (. builder itemsLimit data))
    (when-let [data (lookup-entry config id :other-categories)]
      (. builder otherCategories data))
    (.build builder)))


(defn cfn-template-kpi-actual-value-conditional-formatting-property-builder
  "The cfn-template-kpi-actual-value-conditional-formatting-property-builder function buildes out new instances of 
CfnTemplate$KPIActualValueConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnTemplate$KPIActualValueConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-template-kpi-comparison-value-conditional-formatting-property-builder
  "The cfn-template-kpi-comparison-value-conditional-formatting-property-builder function buildes out new instances of 
CfnTemplate$KPIComparisonValueConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnTemplate$KPIComparisonValueConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-template-kpi-conditional-formatting-option-property-builder
  "The cfn-template-kpi-conditional-formatting-option-property-builder function buildes out new instances of 
CfnTemplate$KPIConditionalFormattingOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actualValue` | software.amazon.awscdk.services.quicksight.CfnTemplate$KPIActualValueConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:actual-value` |
| `comparisonValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:comparison-value` |
| `primaryValue` | software.amazon.awscdk.services.quicksight.CfnTemplate$KPIPrimaryValueConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:primary-value` |
| `progressBar` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:progress-bar` |"
  [stack id config]
  (let [builder (CfnTemplate$KPIConditionalFormattingOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :actual-value)]
      (. builder actualValue data))
    (when-let [data (lookup-entry config id :comparison-value)]
      (. builder comparisonValue data))
    (when-let [data (lookup-entry config id :primary-value)]
      (. builder primaryValue data))
    (when-let [data (lookup-entry config id :progress-bar)]
      (. builder progressBar data))
    (.build builder)))


(defn cfn-template-kpi-conditional-formatting-property-builder
  "The cfn-template-kpi-conditional-formatting-property-builder function buildes out new instances of 
CfnTemplate$KPIConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |"
  [stack id config]
  (let [builder (CfnTemplate$KPIConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :conditional-formatting-options)]
      (. builder conditionalFormattingOptions data))
    (.build builder)))


(defn cfn-template-kpi-configuration-property-builder
  "The cfn-template-kpi-configuration-property-builder function buildes out new instances of 
CfnTemplate$KPIConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `kpiOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$KPIOptionsProperty | [[cdk.support/lookup-entry]] | `:kpi-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$KPIConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :kpi-options)]
      (. builder kpiOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (.build builder)))


(defn cfn-template-kpi-field-wells-property-builder
  "The cfn-template-kpi-field-wells-property-builder function buildes out new instances of 
CfnTemplate$KPIFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target-values` |
| `trendGroups` | java.util.List | [[cdk.support/lookup-entry]] | `:trend-groups` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$KPIFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :target-values)]
      (. builder targetValues data))
    (when-let [data (lookup-entry config id :trend-groups)]
      (. builder trendGroups data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-kpi-options-property-builder
  "The cfn-template-kpi-options-property-builder function buildes out new instances of 
CfnTemplate$KPIOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `comparison` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:comparison` |
| `primaryValueDisplayType` | java.lang.String | [[cdk.support/lookup-entry]] | `:primary-value-display-type` |
| `primaryValueFontConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:primary-value-font-configuration` |
| `progressBar` | software.amazon.awscdk.services.quicksight.CfnTemplate$ProgressBarOptionsProperty | [[cdk.support/lookup-entry]] | `:progress-bar` |
| `secondaryValue` | software.amazon.awscdk.services.quicksight.CfnTemplate$SecondaryValueOptionsProperty | [[cdk.support/lookup-entry]] | `:secondary-value` |
| `secondaryValueFontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-value-font-configuration` |
| `sparkline` | software.amazon.awscdk.services.quicksight.CfnTemplate$KPISparklineOptionsProperty | [[cdk.support/lookup-entry]] | `:sparkline` |
| `trendArrows` | software.amazon.awscdk.services.quicksight.CfnTemplate$TrendArrowOptionsProperty | [[cdk.support/lookup-entry]] | `:trend-arrows` |
| `visualLayoutOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$KPIVisualLayoutOptionsProperty | [[cdk.support/lookup-entry]] | `:visual-layout-options` |"
  [stack id config]
  (let [builder (CfnTemplate$KPIOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :comparison)]
      (. builder comparison data))
    (when-let [data (lookup-entry config id :primary-value-display-type)]
      (. builder primaryValueDisplayType data))
    (when-let [data (lookup-entry config id :primary-value-font-configuration)]
      (. builder primaryValueFontConfiguration data))
    (when-let [data (lookup-entry config id :progress-bar)]
      (. builder progressBar data))
    (when-let [data (lookup-entry config id :secondary-value)]
      (. builder secondaryValue data))
    (when-let [data (lookup-entry config id :secondary-value-font-configuration)]
      (. builder secondaryValueFontConfiguration data))
    (when-let [data (lookup-entry config id :sparkline)]
      (. builder sparkline data))
    (when-let [data (lookup-entry config id :trend-arrows)]
      (. builder trendArrows data))
    (when-let [data (lookup-entry config id :visual-layout-options)]
      (. builder visualLayoutOptions data))
    (.build builder)))


(defn cfn-template-kpi-primary-value-conditional-formatting-property-builder
  "The cfn-template-kpi-primary-value-conditional-formatting-property-builder function buildes out new instances of 
CfnTemplate$KPIPrimaryValueConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | software.amazon.awscdk.services.quicksight.CfnTemplate$ConditionalFormattingIconProperty | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnTemplate$KPIPrimaryValueConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-template-kpi-progress-bar-conditional-formatting-property-builder
  "The cfn-template-kpi-progress-bar-conditional-formatting-property-builder function buildes out new instances of 
CfnTemplate$KPIProgressBarConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `foregroundColor` | software.amazon.awscdk.services.quicksight.CfnTemplate$ConditionalFormattingColorProperty | [[cdk.support/lookup-entry]] | `:foreground-color` |"
  [stack id config]
  (let [builder (CfnTemplate$KPIProgressBarConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :foreground-color)]
      (. builder foregroundColor data))
    (.build builder)))


(defn cfn-template-kpi-sort-configuration-property-builder
  "The cfn-template-kpi-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$KPISortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `trendGroupSort` | java.util.List | [[cdk.support/lookup-entry]] | `:trend-group-sort` |"
  [stack id config]
  (let [builder (CfnTemplate$KPISortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :trend-group-sort)]
      (. builder trendGroupSort data))
    (.build builder)))


(defn cfn-template-kpi-sparkline-options-property-builder
  "The cfn-template-kpi-sparkline-options-property-builder function buildes out new instances of 
CfnTemplate$KPISparklineOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `tooltipVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-visibility` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$KPISparklineOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :tooltip-visibility)]
      (. builder tooltipVisibility data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-kpi-visual-layout-options-property-builder
  "The cfn-template-kpi-visual-layout-options-property-builder function buildes out new instances of 
CfnTemplate$KPIVisualLayoutOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `standardLayout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:standard-layout` |"
  [stack id config]
  (let [builder (CfnTemplate$KPIVisualLayoutOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :standard-layout)]
      (. builder standardLayout data))
    (.build builder)))


(defn cfn-template-kpi-visual-property-builder
  "The cfn-template-kpi-visual-property-builder function buildes out new instances of 
CfnTemplate$KPIVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnTemplate$KPIConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$KPIVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :conditional-formatting)]
      (. builder conditionalFormatting data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-kpi-visual-standard-layout-property-builder
  "The cfn-template-kpi-visual-standard-layout-property-builder function buildes out new instances of 
CfnTemplate$KPIVisualStandardLayoutProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnTemplate$KPIVisualStandardLayoutProperty$Builder.)]
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-template-label-options-property-builder
  "The cfn-template-label-options-property-builder function buildes out new instances of 
CfnTemplate$LabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$LabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-layout-configuration-property-builder
  "The cfn-template-layout-configuration-property-builder function buildes out new instances of 
CfnTemplate$LayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeFormLayout` | software.amazon.awscdk.services.quicksight.CfnTemplate$FreeFormLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:free-form-layout` |
| `gridLayout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:grid-layout` |
| `sectionBasedLayout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:section-based-layout` |"
  [stack id config]
  (let [builder (CfnTemplate$LayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :free-form-layout)]
      (. builder freeFormLayout data))
    (when-let [data (lookup-entry config id :grid-layout)]
      (. builder gridLayout data))
    (when-let [data (lookup-entry config id :section-based-layout)]
      (. builder sectionBasedLayout data))
    (.build builder)))


(defn cfn-template-layout-property-builder
  "The cfn-template-layout-property-builder function buildes out new instances of 
CfnTemplate$LayoutProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configuration` | software.amazon.awscdk.services.quicksight.CfnTemplate$LayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$LayoutProperty$Builder.)]
    (when-let [data (lookup-entry config id :configuration)]
      (. builder configuration data))
    (.build builder)))


(defn cfn-template-legend-options-property-builder
  "The cfn-template-legend-options-property-builder function buildes out new instances of 
CfnTemplate$LegendOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `position` | java.lang.String | [[cdk.support/lookup-entry]] | `:position` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |"
  [stack id config]
  (let [builder (CfnTemplate$LegendOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :height)]
      (. builder height data))
    (when-let [data (lookup-entry config id :position)]
      (. builder position data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (when-let [data (lookup-entry config id :width)]
      (. builder width data))
    (.build builder)))


(defn cfn-template-line-chart-aggregated-field-wells-property-builder
  "The cfn-template-line-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$LineChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `smallMultiples` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$LineChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :small-multiples)]
      (. builder smallMultiples data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-line-chart-configuration-property-builder
  "The cfn-template-line-chart-configuration-property-builder function buildes out new instances of 
CfnTemplate$LineChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contributionAnalysisDefaults` | java.util.List | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `defaultSeriesSettings` | software.amazon.awscdk.services.quicksight.CfnTemplate$LineChartDefaultSeriesSettingsProperty | [[cdk.support/lookup-entry]] | `:default-series-settings` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$LineChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `forecastConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:forecast-configurations` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnTemplate$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `referenceLines` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:reference-lines` |
| `secondaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:secondary-y-axis-display-options` |
| `secondaryYAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:secondary-y-axis-label-options` |
| `series` | java.util.List | [[cdk.support/lookup-entry]] | `:series` |
| `smallMultiplesOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SmallMultiplesOptionsProperty | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$LineChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnTemplate$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |"
  [stack id config]
  (let [builder (CfnTemplate$LineChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
      (. builder contributionAnalysisDefaults data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :default-series-settings)]
      (. builder defaultSeriesSettings data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :forecast-configurations)]
      (. builder forecastConfigurations data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
      (. builder primaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
      (. builder primaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :reference-lines)]
      (. builder referenceLines data))
    (when-let [data (lookup-entry config id :secondary-y-axis-display-options)]
      (. builder secondaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :secondary-y-axis-label-options)]
      (. builder secondaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :series)]
      (. builder series data))
    (when-let [data (lookup-entry config id :small-multiples-options)]
      (. builder smallMultiplesOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (when-let [data (lookup-entry config id :x-axis-display-options)]
      (. builder xAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :x-axis-label-options)]
      (. builder xAxisLabelOptions data))
    (.build builder)))


(defn cfn-template-line-chart-default-series-settings-property-builder
  "The cfn-template-line-chart-default-series-settings-property-builder function buildes out new instances of 
CfnTemplate$LineChartDefaultSeriesSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `lineStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-style-settings` |
| `markerStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:marker-style-settings` |"
  [stack id config]
  (let [builder (CfnTemplate$LineChartDefaultSeriesSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-binding)]
      (. builder axisBinding data))
    (when-let [data (lookup-entry config id :line-style-settings)]
      (. builder lineStyleSettings data))
    (when-let [data (lookup-entry config id :marker-style-settings)]
      (. builder markerStyleSettings data))
    (.build builder)))


(defn cfn-template-line-chart-field-wells-property-builder
  "The cfn-template-line-chart-field-wells-property-builder function buildes out new instances of 
CfnTemplate$LineChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineChartAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$LineChartAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:line-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$LineChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :line-chart-aggregated-field-wells)]
      (. builder lineChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-line-chart-line-style-settings-property-builder
  "The cfn-template-line-chart-line-style-settings-property-builder function buildes out new instances of 
CfnTemplate$LineChartLineStyleSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineInterpolation` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-interpolation` |
| `lineStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-style` |
| `lineVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-visibility` |
| `lineWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:line-width` |"
  [stack id config]
  (let [builder (CfnTemplate$LineChartLineStyleSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :line-interpolation)]
      (. builder lineInterpolation data))
    (when-let [data (lookup-entry config id :line-style)]
      (. builder lineStyle data))
    (when-let [data (lookup-entry config id :line-visibility)]
      (. builder lineVisibility data))
    (when-let [data (lookup-entry config id :line-width)]
      (. builder lineWidth data))
    (.build builder)))


(defn cfn-template-line-chart-marker-style-settings-property-builder
  "The cfn-template-line-chart-marker-style-settings-property-builder function buildes out new instances of 
CfnTemplate$LineChartMarkerStyleSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `markerColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-color` |
| `markerShape` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-shape` |
| `markerSize` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-size` |
| `markerVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:marker-visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$LineChartMarkerStyleSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :marker-color)]
      (. builder markerColor data))
    (when-let [data (lookup-entry config id :marker-shape)]
      (. builder markerShape data))
    (when-let [data (lookup-entry config id :marker-size)]
      (. builder markerSize data))
    (when-let [data (lookup-entry config id :marker-visibility)]
      (. builder markerVisibility data))
    (.build builder)))


(defn cfn-template-line-chart-series-settings-property-builder
  "The cfn-template-line-chart-series-settings-property-builder function buildes out new instances of 
CfnTemplate$LineChartSeriesSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lineStyleSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:line-style-settings` |
| `markerStyleSettings` | software.amazon.awscdk.services.quicksight.CfnTemplate$LineChartMarkerStyleSettingsProperty | [[cdk.support/lookup-entry]] | `:marker-style-settings` |"
  [stack id config]
  (let [builder (CfnTemplate$LineChartSeriesSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :line-style-settings)]
      (. builder lineStyleSettings data))
    (when-let [data (lookup-entry config id :marker-style-settings)]
      (. builder markerStyleSettings data))
    (.build builder)))


(defn cfn-template-line-chart-sort-configuration-property-builder
  "The cfn-template-line-chart-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$LineChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit-configuration` |
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:color-items-limit-configuration` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |"
  [stack id config]
  (let [builder (CfnTemplate$LineChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit-configuration)]
      (. builder categoryItemsLimitConfiguration data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :color-items-limit-configuration)]
      (. builder colorItemsLimitConfiguration data))
    (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
      (. builder smallMultiplesLimitConfiguration data))
    (when-let [data (lookup-entry config id :small-multiples-sort)]
      (. builder smallMultiplesSort data))
    (.build builder)))


(defn cfn-template-line-chart-visual-property-builder
  "The cfn-template-line-chart-visual-property-builder function buildes out new instances of 
CfnTemplate$LineChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$LineChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$LineChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-line-series-axis-display-options-property-builder
  "The cfn-template-line-series-axis-display-options-property-builder function buildes out new instances of 
CfnTemplate$LineSeriesAxisDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:axis-options` |
| `missingDataConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:missing-data-configurations` |"
  [stack id config]
  (let [builder (CfnTemplate$LineSeriesAxisDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-options)]
      (. builder axisOptions data))
    (when-let [data (lookup-entry config id :missing-data-configurations)]
      (. builder missingDataConfigurations data))
    (.build builder)))


(defn cfn-template-list-control-display-options-property-builder
  "The cfn-template-list-control-display-options-property-builder function buildes out new instances of 
CfnTemplate$ListControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `searchOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ListControlSearchOptionsProperty | [[cdk.support/lookup-entry]] | `:search-options` |
| `selectAllOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ListControlSelectAllOptionsProperty | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnTemplate$ListControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :search-options)]
      (. builder searchOptions data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-template-list-control-search-options-property-builder
  "The cfn-template-list-control-search-options-property-builder function buildes out new instances of 
CfnTemplate$ListControlSearchOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$ListControlSearchOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-list-control-select-all-options-property-builder
  "The cfn-template-list-control-select-all-options-property-builder function buildes out new instances of 
CfnTemplate$ListControlSelectAllOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$ListControlSelectAllOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-loading-animation-property-builder
  "The cfn-template-loading-animation-property-builder function buildes out new instances of 
CfnTemplate$LoadingAnimationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$LoadingAnimationProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-local-navigation-configuration-property-builder
  "The cfn-template-local-navigation-configuration-property-builder function buildes out new instances of 
CfnTemplate$LocalNavigationConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetSheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:target-sheet-id` |"
  [stack id config]
  (let [builder (CfnTemplate$LocalNavigationConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :target-sheet-id)]
      (. builder targetSheetId data))
    (.build builder)))


(defn cfn-template-long-format-text-property-builder
  "The cfn-template-long-format-text-property-builder function buildes out new instances of 
CfnTemplate$LongFormatTextProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `plainText` | java.lang.String | [[cdk.support/lookup-entry]] | `:plain-text` |
| `richText` | java.lang.String | [[cdk.support/lookup-entry]] | `:rich-text` |"
  [stack id config]
  (let [builder (CfnTemplate$LongFormatTextProperty$Builder.)]
    (when-let [data (lookup-entry config id :plain-text)]
      (. builder plainText data))
    (when-let [data (lookup-entry config id :rich-text)]
      (. builder richText data))
    (.build builder)))


(defn cfn-template-mapped-data-set-parameter-property-builder
  "The cfn-template-mapped-data-set-parameter-property-builder function buildes out new instances of 
CfnTemplate$MappedDataSetParameterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `dataSetParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-parameter-name` |"
  [stack id config]
  (let [builder (CfnTemplate$MappedDataSetParameterProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :data-set-parameter-name)]
      (. builder dataSetParameterName data))
    (.build builder)))


(defn cfn-template-maximum-label-type-property-builder
  "The cfn-template-maximum-label-type-property-builder function buildes out new instances of 
CfnTemplate$MaximumLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$MaximumLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-maximum-minimum-computation-property-builder
  "The cfn-template-maximum-minimum-computation-property-builder function buildes out new instances of 
CfnTemplate$MaximumMinimumComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.services.quicksight.CfnTemplate$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$MaximumMinimumComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-measure-field-property-builder
  "The cfn-template-measure-field-property-builder function buildes out new instances of 
CfnTemplate$MeasureFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `calculatedMeasureField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:calculated-measure-field` |
| `categoricalMeasureField` | software.amazon.awscdk.services.quicksight.CfnTemplate$CategoricalMeasureFieldProperty | [[cdk.support/lookup-entry]] | `:categorical-measure-field` |
| `dateMeasureField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-measure-field` |
| `numericalMeasureField` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericalMeasureFieldProperty | [[cdk.support/lookup-entry]] | `:numerical-measure-field` |"
  [stack id config]
  (let [builder (CfnTemplate$MeasureFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :calculated-measure-field)]
      (. builder calculatedMeasureField data))
    (when-let [data (lookup-entry config id :categorical-measure-field)]
      (. builder categoricalMeasureField data))
    (when-let [data (lookup-entry config id :date-measure-field)]
      (. builder dateMeasureField data))
    (when-let [data (lookup-entry config id :numerical-measure-field)]
      (. builder numericalMeasureField data))
    (.build builder)))


(defn cfn-template-metric-comparison-computation-property-builder
  "The cfn-template-metric-comparison-computation-property-builder function buildes out new instances of 
CfnTemplate$MetricComparisonComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `fromValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:from-value` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `targetValue` | software.amazon.awscdk.services.quicksight.CfnTemplate$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:target-value` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |"
  [stack id config]
  (let [builder (CfnTemplate$MetricComparisonComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :from-value)]
      (. builder fromValue data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :target-value)]
      (. builder targetValue data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (.build builder)))


(defn cfn-template-minimum-label-type-property-builder
  "The cfn-template-minimum-label-type-property-builder function buildes out new instances of 
CfnTemplate$MinimumLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$MinimumLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-missing-data-configuration-property-builder
  "The cfn-template-missing-data-configuration-property-builder function buildes out new instances of 
CfnTemplate$MissingDataConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treatmentOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:treatment-option` |"
  [stack id config]
  (let [builder (CfnTemplate$MissingDataConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :treatment-option)]
      (. builder treatmentOption data))
    (.build builder)))


(defn cfn-template-negative-value-configuration-property-builder
  "The cfn-template-negative-value-configuration-property-builder function buildes out new instances of 
CfnTemplate$NegativeValueConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayMode` | java.lang.String | [[cdk.support/lookup-entry]] | `:display-mode` |"
  [stack id config]
  (let [builder (CfnTemplate$NegativeValueConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-mode)]
      (. builder displayMode data))
    (.build builder)))


(defn cfn-template-null-value-format-configuration-property-builder
  "The cfn-template-null-value-format-configuration-property-builder function buildes out new instances of 
CfnTemplate$NullValueFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `nullString` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-string` |"
  [stack id config]
  (let [builder (CfnTemplate$NullValueFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :null-string)]
      (. builder nullString data))
    (.build builder)))


(defn cfn-template-number-display-format-configuration-property-builder
  "The cfn-template-number-display-format-configuration-property-builder function buildes out new instances of 
CfnTemplate$NumberDisplayFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NegativeValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numberScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:number-scale` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |"
  [stack id config]
  (let [builder (CfnTemplate$NumberDisplayFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :decimal-places-configuration)]
      (. builder decimalPlacesConfiguration data))
    (when-let [data (lookup-entry config id :negative-value-configuration)]
      (. builder negativeValueConfiguration data))
    (when-let [data (lookup-entry config id :null-value-format-configuration)]
      (. builder nullValueFormatConfiguration data))
    (when-let [data (lookup-entry config id :number-scale)]
      (. builder numberScale data))
    (when-let [data (lookup-entry config id :prefix)]
      (. builder prefix data))
    (when-let [data (lookup-entry config id :separator-configuration)]
      (. builder separatorConfiguration data))
    (when-let [data (lookup-entry config id :suffix)]
      (. builder suffix data))
    (.build builder)))


(defn cfn-template-number-format-configuration-property-builder
  "The cfn-template-number-format-configuration-property-builder function buildes out new instances of 
CfnTemplate$NumberFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$NumberFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (.build builder)))


(defn cfn-template-numeric-axis-options-property-builder
  "The cfn-template-numeric-axis-options-property-builder function buildes out new instances of 
CfnTemplate$NumericAxisOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `range` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range` |
| `scale` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scale` |"
  [stack id config]
  (let [builder (CfnTemplate$NumericAxisOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :range)]
      (. builder range data))
    (when-let [data (lookup-entry config id :scale)]
      (. builder scale data))
    (.build builder)))


(defn cfn-template-numeric-equality-drill-down-filter-property-builder
  "The cfn-template-numeric-equality-drill-down-filter-property-builder function buildes out new instances of 
CfnTemplate$NumericEqualityDrillDownFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$NumericEqualityDrillDownFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-numeric-equality-filter-property-builder
  "The cfn-template-numeric-equality-filter-property-builder function buildes out new instances of 
CfnTemplate$NumericEqualityFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `matchOperator` | java.lang.String | [[cdk.support/lookup-entry]] | `:match-operator` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$NumericEqualityFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :match-operator)]
      (. builder matchOperator data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-numeric-format-configuration-property-builder
  "The cfn-template-numeric-format-configuration-property-builder function buildes out new instances of 
CfnTemplate$NumericFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `currencyDisplayFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:currency-display-format-configuration` |
| `numberDisplayFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumberDisplayFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:number-display-format-configuration` |
| `percentageDisplayFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:percentage-display-format-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$NumericFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :currency-display-format-configuration)]
      (. builder currencyDisplayFormatConfiguration data))
    (when-let [data (lookup-entry config id :number-display-format-configuration)]
      (. builder numberDisplayFormatConfiguration data))
    (when-let [data (lookup-entry config id :percentage-display-format-configuration)]
      (. builder percentageDisplayFormatConfiguration data))
    (.build builder)))


(defn cfn-template-numeric-range-filter-property-builder
  "The cfn-template-numeric-range-filter-property-builder function buildes out new instances of 
CfnTemplate$NumericRangeFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnTemplate$AggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$DefaultFilterControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `includeMaximum` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:include-maximum` |
| `includeMinimum` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:include-minimum` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `rangeMaximum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-maximum` |
| `rangeMinimum` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericRangeFilterValueProperty | [[cdk.support/lookup-entry]] | `:range-minimum` |
| `selectAllOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:select-all-options` |"
  [stack id config]
  (let [builder (CfnTemplate$NumericRangeFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :include-maximum)]
      (. builder includeMaximum data))
    (when-let [data (lookup-entry config id :include-minimum)]
      (. builder includeMinimum data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :range-maximum)]
      (. builder rangeMaximum data))
    (when-let [data (lookup-entry config id :range-minimum)]
      (. builder rangeMinimum data))
    (when-let [data (lookup-entry config id :select-all-options)]
      (. builder selectAllOptions data))
    (.build builder)))


(defn cfn-template-numeric-range-filter-value-property-builder
  "The cfn-template-numeric-range-filter-value-property-builder function buildes out new instances of 
CfnTemplate$NumericRangeFilterValueProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameter` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter` |
| `staticValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:static-value` |"
  [stack id config]
  (let [builder (CfnTemplate$NumericRangeFilterValueProperty$Builder.)]
    (when-let [data (lookup-entry config id :parameter)]
      (. builder parameter data))
    (when-let [data (lookup-entry config id :static-value)]
      (. builder staticValue data))
    (.build builder)))


(defn cfn-template-numeric-separator-configuration-property-builder
  "The cfn-template-numeric-separator-configuration-property-builder function buildes out new instances of 
CfnTemplate$NumericSeparatorConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalSeparator` | java.lang.String | [[cdk.support/lookup-entry]] | `:decimal-separator` |
| `thousandsSeparator` | software.amazon.awscdk.services.quicksight.CfnTemplate$ThousandSeparatorOptionsProperty | [[cdk.support/lookup-entry]] | `:thousands-separator` |"
  [stack id config]
  (let [builder (CfnTemplate$NumericSeparatorConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :decimal-separator)]
      (. builder decimalSeparator data))
    (when-let [data (lookup-entry config id :thousands-separator)]
      (. builder thousandsSeparator data))
    (.build builder)))


(defn cfn-template-numerical-aggregation-function-property-builder
  "The cfn-template-numerical-aggregation-function-property-builder function buildes out new instances of 
CfnTemplate$NumericalAggregationFunctionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentileAggregation` | software.amazon.awscdk.services.quicksight.CfnTemplate$PercentileAggregationProperty | [[cdk.support/lookup-entry]] | `:percentile-aggregation` |
| `simpleNumericalAggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-numerical-aggregation` |"
  [stack id config]
  (let [builder (CfnTemplate$NumericalAggregationFunctionProperty$Builder.)]
    (when-let [data (lookup-entry config id :percentile-aggregation)]
      (. builder percentileAggregation data))
    (when-let [data (lookup-entry config id :simple-numerical-aggregation)]
      (. builder simpleNumericalAggregation data))
    (.build builder)))


(defn cfn-template-numerical-dimension-field-property-builder
  "The cfn-template-numerical-dimension-field-property-builder function buildes out new instances of 
CfnTemplate$NumericalDimensionFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnTemplate$NumericalDimensionFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-template-numerical-measure-field-property-builder
  "The cfn-template-numerical-measure-field-property-builder function buildes out new instances of 
CfnTemplate$NumericalMeasureFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationFunction` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericalAggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:aggregation-function` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumberFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$NumericalMeasureFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-function)]
      (. builder aggregationFunction data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (.build builder)))


(defn cfn-template-pagination-configuration-property-builder
  "The cfn-template-pagination-configuration-property-builder function buildes out new instances of 
CfnTemplate$PaginationConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pageNumber` | java.lang.Number | [[cdk.support/lookup-entry]] | `:page-number` |
| `pageSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:page-size` |"
  [stack id config]
  (let [builder (CfnTemplate$PaginationConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :page-number)]
      (. builder pageNumber data))
    (when-let [data (lookup-entry config id :page-size)]
      (. builder pageSize data))
    (.build builder)))


(defn cfn-template-panel-configuration-property-builder
  "The cfn-template-panel-configuration-property-builder function buildes out new instances of 
CfnTemplate$PanelConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-color` |
| `backgroundVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-visibility` |
| `borderColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-color` |
| `borderStyle` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-style` |
| `borderThickness` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-thickness` |
| `borderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:border-visibility` |
| `gutterSpacing` | java.lang.String | [[cdk.support/lookup-entry]] | `:gutter-spacing` |
| `gutterVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:gutter-visibility` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnTemplate$PanelConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-color)]
      (. builder backgroundColor data))
    (when-let [data (lookup-entry config id :background-visibility)]
      (. builder backgroundVisibility data))
    (when-let [data (lookup-entry config id :border-color)]
      (. builder borderColor data))
    (when-let [data (lookup-entry config id :border-style)]
      (. builder borderStyle data))
    (when-let [data (lookup-entry config id :border-thickness)]
      (. builder borderThickness data))
    (when-let [data (lookup-entry config id :border-visibility)]
      (. builder borderVisibility data))
    (when-let [data (lookup-entry config id :gutter-spacing)]
      (. builder gutterSpacing data))
    (when-let [data (lookup-entry config id :gutter-visibility)]
      (. builder gutterVisibility data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-template-panel-title-options-property-builder
  "The cfn-template-panel-title-options-property-builder function buildes out new instances of 
CfnTemplate$PanelTitleOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `horizontalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-text-alignment` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$PanelTitleOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (when-let [data (lookup-entry config id :horizontal-text-alignment)]
      (. builder horizontalTextAlignment data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-parameter-control-property-builder
  "The cfn-template-parameter-control-property-builder function buildes out new instances of 
CfnTemplate$ParameterControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimePicker` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-time-picker` |
| `dropdown` | software.amazon.awscdk.services.quicksight.CfnTemplate$ParameterDropDownControlProperty | [[cdk.support/lookup-entry]] | `:dropdown` |
| `list` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:list` |
| `slider` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:slider` |
| `textArea` | software.amazon.awscdk.services.quicksight.CfnTemplate$ParameterTextAreaControlProperty | [[cdk.support/lookup-entry]] | `:text-area` |
| `textField` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-field` |"
  [stack id config]
  (let [builder (CfnTemplate$ParameterControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-picker)]
      (. builder dateTimePicker data))
    (when-let [data (lookup-entry config id :dropdown)]
      (. builder dropdown data))
    (when-let [data (lookup-entry config id :list)]
      (. builder list data))
    (when-let [data (lookup-entry config id :slider)]
      (. builder slider data))
    (when-let [data (lookup-entry config id :text-area)]
      (. builder textArea data))
    (when-let [data (lookup-entry config id :text-field)]
      (. builder textField data))
    (.build builder)))


(defn cfn-template-parameter-date-time-picker-control-property-builder
  "The cfn-template-parameter-date-time-picker-control-property-builder function buildes out new instances of 
CfnTemplate$ParameterDateTimePickerControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$DateTimePickerControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnTemplate$ParameterDateTimePickerControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-template-parameter-declaration-property-builder
  "The cfn-template-parameter-declaration-property-builder function buildes out new instances of 
CfnTemplate$ParameterDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeParameterDeclaration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-time-parameter-declaration` |
| `decimalParameterDeclaration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-parameter-declaration` |
| `integerParameterDeclaration` | software.amazon.awscdk.services.quicksight.CfnTemplate$IntegerParameterDeclarationProperty | [[cdk.support/lookup-entry]] | `:integer-parameter-declaration` |
| `stringParameterDeclaration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:string-parameter-declaration` |"
  [stack id config]
  (let [builder (CfnTemplate$ParameterDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-parameter-declaration)]
      (. builder dateTimeParameterDeclaration data))
    (when-let [data (lookup-entry config id :decimal-parameter-declaration)]
      (. builder decimalParameterDeclaration data))
    (when-let [data (lookup-entry config id :integer-parameter-declaration)]
      (. builder integerParameterDeclaration data))
    (when-let [data (lookup-entry config id :string-parameter-declaration)]
      (. builder stringParameterDeclaration data))
    (.build builder)))


(defn cfn-template-parameter-drop-down-control-property-builder
  "The cfn-template-parameter-drop-down-control-property-builder function buildes out new instances of 
CfnTemplate$ParameterDropDownControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$CascadingControlConfigurationProperty | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$DropDownControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnTemplate$ParameterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnTemplate$ParameterDropDownControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cascading-control-configuration)]
      (. builder cascadingControlConfiguration data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-template-parameter-list-control-property-builder
  "The cfn-template-parameter-list-control-property-builder function buildes out new instances of 
CfnTemplate$ParameterListControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cascadingControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cascading-control-configuration` |
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `selectableValues` | software.amazon.awscdk.services.quicksight.CfnTemplate$ParameterSelectableValuesProperty | [[cdk.support/lookup-entry]] | `:selectable-values` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnTemplate$ParameterListControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :cascading-control-configuration)]
      (. builder cascadingControlConfiguration data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :selectable-values)]
      (. builder selectableValues data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-template-parameter-selectable-values-property-builder
  "The cfn-template-parameter-selectable-values-property-builder function buildes out new instances of 
CfnTemplate$ParameterSelectableValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `linkToDataSetColumn` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:link-to-data-set-column` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$ParameterSelectableValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :link-to-data-set-column)]
      (. builder linkToDataSetColumn data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-parameter-slider-control-property-builder
  "The cfn-template-parameter-slider-control-property-builder function buildes out new instances of 
CfnTemplate$ParameterSliderControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `maximumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-value` |
| `minimumValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:minimum-value` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `stepSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:step-size` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnTemplate$ParameterSliderControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :maximum-value)]
      (. builder maximumValue data))
    (when-let [data (lookup-entry config id :minimum-value)]
      (. builder minimumValue data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :step-size)]
      (. builder stepSize data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-template-parameter-text-area-control-property-builder
  "The cfn-template-parameter-text-area-control-property-builder function buildes out new instances of 
CfnTemplate$ParameterTextAreaControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `delimiter` | java.lang.String | [[cdk.support/lookup-entry]] | `:delimiter` |
| `displayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$TextAreaControlDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnTemplate$ParameterTextAreaControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :delimiter)]
      (. builder delimiter data))
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-template-parameter-text-field-control-property-builder
  "The cfn-template-parameter-text-field-control-property-builder function buildes out new instances of 
CfnTemplate$ParameterTextFieldControlProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:display-options` |
| `parameterControlId` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-control-id` |
| `sourceParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-parameter-name` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |"
  [stack id config]
  (let [builder (CfnTemplate$ParameterTextFieldControlProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-options)]
      (. builder displayOptions data))
    (when-let [data (lookup-entry config id :parameter-control-id)]
      (. builder parameterControlId data))
    (when-let [data (lookup-entry config id :source-parameter-name)]
      (. builder sourceParameterName data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (.build builder)))


(defn cfn-template-percent-visible-range-property-builder
  "The cfn-template-percent-visible-range-property-builder function buildes out new instances of 
CfnTemplate$PercentVisibleRangeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `from` | java.lang.Number | [[cdk.support/lookup-entry]] | `:from` |
| `to` | java.lang.Number | [[cdk.support/lookup-entry]] | `:to` |"
  [stack id config]
  (let [builder (CfnTemplate$PercentVisibleRangeProperty$Builder.)]
    (when-let [data (lookup-entry config id :from)]
      (. builder from data))
    (when-let [data (lookup-entry config id :to)]
      (. builder to data))
    (.build builder)))


(defn cfn-template-percentage-display-format-configuration-property-builder
  "The cfn-template-percentage-display-format-configuration-property-builder function buildes out new instances of 
CfnTemplate$PercentageDisplayFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `decimalPlacesConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:decimal-places-configuration` |
| `negativeValueConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:negative-value-configuration` |
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `separatorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:separator-configuration` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |"
  [stack id config]
  (let [builder (CfnTemplate$PercentageDisplayFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :decimal-places-configuration)]
      (. builder decimalPlacesConfiguration data))
    (when-let [data (lookup-entry config id :negative-value-configuration)]
      (. builder negativeValueConfiguration data))
    (when-let [data (lookup-entry config id :null-value-format-configuration)]
      (. builder nullValueFormatConfiguration data))
    (when-let [data (lookup-entry config id :prefix)]
      (. builder prefix data))
    (when-let [data (lookup-entry config id :separator-configuration)]
      (. builder separatorConfiguration data))
    (when-let [data (lookup-entry config id :suffix)]
      (. builder suffix data))
    (.build builder)))


(defn cfn-template-percentile-aggregation-property-builder
  "The cfn-template-percentile-aggregation-property-builder function buildes out new instances of 
CfnTemplate$PercentileAggregationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentileValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:percentile-value` |"
  [stack id config]
  (let [builder (CfnTemplate$PercentileAggregationProperty$Builder.)]
    (when-let [data (lookup-entry config id :percentile-value)]
      (. builder percentileValue data))
    (.build builder)))


(defn cfn-template-period-over-period-computation-property-builder
  "The cfn-template-period-over-period-computation-property-builder function buildes out new instances of 
CfnTemplate$PeriodOverPeriodComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.services.quicksight.CfnTemplate$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$PeriodOverPeriodComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-period-to-date-computation-property-builder
  "The cfn-template-period-to-date-computation-property-builder function buildes out new instances of 
CfnTemplate$PeriodToDateComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `periodTimeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:period-time-granularity` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `value` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$PeriodToDateComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :period-time-granularity)]
      (. builder periodTimeGranularity data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-pie-chart-aggregated-field-wells-property-builder
  "The cfn-template-pie-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$PieChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | java.util.List | [[cdk.support/lookup-entry]] | `:category` |
| `smallMultiples` | java.util.List | [[cdk.support/lookup-entry]] | `:small-multiples` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$PieChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :small-multiples)]
      (. builder smallMultiples data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-pie-chart-configuration-property-builder
  "The cfn-template-pie-chart-configuration-property-builder function buildes out new instances of 
CfnTemplate$PieChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `contributionAnalysisDefaults` | java.util.List | [[cdk.support/lookup-entry]] | `:contribution-analysis-defaults` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `donutOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:donut-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$PieChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnTemplate$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `smallMultiplesOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SmallMultiplesOptionsProperty | [[cdk.support/lookup-entry]] | `:small-multiples-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$PieChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |
| `valueLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-label-options` |
| `visualPalette` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualPaletteProperty | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnTemplate$PieChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :contribution-analysis-defaults)]
      (. builder contributionAnalysisDefaults data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :donut-options)]
      (. builder donutOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :small-multiples-options)]
      (. builder smallMultiplesOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :value-label-options)]
      (. builder valueLabelOptions data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-template-pie-chart-field-wells-property-builder
  "The cfn-template-pie-chart-field-wells-property-builder function buildes out new instances of 
CfnTemplate$PieChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pieChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:pie-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$PieChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :pie-chart-aggregated-field-wells)]
      (. builder pieChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-pie-chart-sort-configuration-property-builder
  "The cfn-template-pie-chart-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$PieChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | java.util.List | [[cdk.support/lookup-entry]] | `:category-sort` |
| `smallMultiplesLimitConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-limit-configuration` |
| `smallMultiplesSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:small-multiples-sort` |"
  [stack id config]
  (let [builder (CfnTemplate$PieChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :small-multiples-limit-configuration)]
      (. builder smallMultiplesLimitConfiguration data))
    (when-let [data (lookup-entry config id :small-multiples-sort)]
      (. builder smallMultiplesSort data))
    (.build builder)))


(defn cfn-template-pie-chart-visual-property-builder
  "The cfn-template-pie-chart-visual-property-builder function buildes out new instances of 
CfnTemplate$PieChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$PieChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-pivot-field-sort-options-property-builder
  "The cfn-template-pivot-field-sort-options-property-builder function buildes out new instances of 
CfnTemplate$PivotFieldSortOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `sortBy` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableSortByProperty | [[cdk.support/lookup-entry]] | `:sort-by` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotFieldSortOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :sort-by)]
      (. builder sortBy data))
    (.build builder)))


(defn cfn-template-pivot-table-aggregated-field-wells-property-builder
  "The cfn-template-pivot-table-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$PivotTableAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `rows` | java.util.List | [[cdk.support/lookup-entry]] | `:rows` |
| `values` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (when-let [data (lookup-entry config id :rows)]
      (. builder rows data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-pivot-table-cell-conditional-formatting-property-builder
  "The cfn-template-pivot-table-cell-conditional-formatting-property-builder function buildes out new instances of 
CfnTemplate$PivotTableCellConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `scope` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scope` |
| `scopes` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scopes` |
| `textFormat` | software.amazon.awscdk.services.quicksight.CfnTemplate$TextConditionalFormatProperty | [[cdk.support/lookup-entry]] | `:text-format` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableCellConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :scope)]
      (. builder scope data))
    (when-let [data (lookup-entry config id :scopes)]
      (. builder scopes data))
    (when-let [data (lookup-entry config id :text-format)]
      (. builder textFormat data))
    (.build builder)))


(defn cfn-template-pivot-table-conditional-formatting-option-property-builder
  "The cfn-template-pivot-table-conditional-formatting-option-property-builder function buildes out new instances of 
CfnTemplate$PivotTableConditionalFormattingOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cell` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableCellConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:cell` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableConditionalFormattingOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :cell)]
      (. builder cell data))
    (.build builder)))


(defn cfn-template-pivot-table-conditional-formatting-property-builder
  "The cfn-template-pivot-table-conditional-formatting-property-builder function buildes out new instances of 
CfnTemplate$PivotTableConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :conditional-formatting-options)]
      (. builder conditionalFormattingOptions data))
    (.build builder)))


(defn cfn-template-pivot-table-conditional-formatting-scope-property-builder
  "The cfn-template-pivot-table-conditional-formatting-scope-property-builder function buildes out new instances of 
CfnTemplate$PivotTableConditionalFormattingScopeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `role` | java.lang.String | [[cdk.support/lookup-entry]] | `:role` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableConditionalFormattingScopeProperty$Builder.)]
    (when-let [data (lookup-entry config id :role)]
      (. builder role data))
    (.build builder)))


(defn cfn-template-pivot-table-configuration-property-builder
  "The cfn-template-pivot-table-configuration-property-builder function buildes out new instances of 
CfnTemplate$PivotTableConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableFieldOptionsProperty | [[cdk.support/lookup-entry]] | `:field-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `paginatedReportOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:paginated-report-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tableOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableOptionsProperty | [[cdk.support/lookup-entry]] | `:table-options` |
| `totalOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableTotalOptionsProperty | [[cdk.support/lookup-entry]] | `:total-options` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-options)]
      (. builder fieldOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :paginated-report-options)]
      (. builder paginatedReportOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :table-options)]
      (. builder tableOptions data))
    (when-let [data (lookup-entry config id :total-options)]
      (. builder totalOptions data))
    (.build builder)))


(defn cfn-template-pivot-table-data-path-option-property-builder
  "The cfn-template-pivot-table-data-path-option-property-builder function buildes out new instances of 
CfnTemplate$PivotTableDataPathOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataPathList` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-path-list` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableDataPathOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-path-list)]
      (. builder dataPathList data))
    (when-let [data (lookup-entry config id :width)]
      (. builder width data))
    (.build builder)))


(defn cfn-template-pivot-table-field-collapse-state-option-property-builder
  "The cfn-template-pivot-table-field-collapse-state-option-property-builder function buildes out new instances of 
CfnTemplate$PivotTableFieldCollapseStateOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `state` | java.lang.String | [[cdk.support/lookup-entry]] | `:state` |
| `target` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:target` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableFieldCollapseStateOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :state)]
      (. builder state data))
    (when-let [data (lookup-entry config id :target)]
      (. builder target data))
    (.build builder)))


(defn cfn-template-pivot-table-field-collapse-state-target-property-builder
  "The cfn-template-pivot-table-field-collapse-state-target-property-builder function buildes out new instances of 
CfnTemplate$PivotTableFieldCollapseStateTargetProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldDataPathValues` | java.util.List | [[cdk.support/lookup-entry]] | `:field-data-path-values` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableFieldCollapseStateTargetProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-data-path-values)]
      (. builder fieldDataPathValues data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (.build builder)))


(defn cfn-template-pivot-table-field-option-property-builder
  "The cfn-template-pivot-table-field-option-property-builder function buildes out new instances of 
CfnTemplate$PivotTableFieldOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableFieldOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-pivot-table-field-options-property-builder
  "The cfn-template-pivot-table-field-options-property-builder function buildes out new instances of 
CfnTemplate$PivotTableFieldOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `collapseStateOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:collapse-state-options` |
| `dataPathOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:data-path-options` |
| `selectedFieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-field-options` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableFieldOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :collapse-state-options)]
      (. builder collapseStateOptions data))
    (when-let [data (lookup-entry config id :data-path-options)]
      (. builder dataPathOptions data))
    (when-let [data (lookup-entry config id :selected-field-options)]
      (. builder selectedFieldOptions data))
    (.build builder)))


(defn cfn-template-pivot-table-field-subtotal-options-property-builder
  "The cfn-template-pivot-table-field-subtotal-options-property-builder function buildes out new instances of 
CfnTemplate$PivotTableFieldSubtotalOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableFieldSubtotalOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (.build builder)))


(defn cfn-template-pivot-table-field-wells-property-builder
  "The cfn-template-pivot-table-field-wells-property-builder function buildes out new instances of 
CfnTemplate$PivotTableFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pivotTableAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:pivot-table-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :pivot-table-aggregated-field-wells)]
      (. builder pivotTableAggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-pivot-table-options-property-builder
  "The cfn-template-pivot-table-options-property-builder function buildes out new instances of 
CfnTemplate$PivotTableOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellStyle` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:cell-style` |
| `collapsedRowDimensionsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:collapsed-row-dimensions-visibility` |
| `columnHeaderStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-header-style` |
| `columnNamesVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-names-visibility` |
| `defaultCellWidth` | java.lang.String | [[cdk.support/lookup-entry]] | `:default-cell-width` |
| `metricPlacement` | java.lang.String | [[cdk.support/lookup-entry]] | `:metric-placement` |
| `rowAlternateColorOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$RowAlternateColorOptionsProperty | [[cdk.support/lookup-entry]] | `:row-alternate-color-options` |
| `rowFieldNamesStyle` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:row-field-names-style` |
| `rowHeaderStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-header-style` |
| `rowsLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:rows-label-options` |
| `rowsLayout` | java.lang.String | [[cdk.support/lookup-entry]] | `:rows-layout` |
| `singleMetricVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:single-metric-visibility` |
| `toggleButtonsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:toggle-buttons-visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :cell-style)]
      (. builder cellStyle data))
    (when-let [data (lookup-entry config id :collapsed-row-dimensions-visibility)]
      (. builder collapsedRowDimensionsVisibility data))
    (when-let [data (lookup-entry config id :column-header-style)]
      (. builder columnHeaderStyle data))
    (when-let [data (lookup-entry config id :column-names-visibility)]
      (. builder columnNamesVisibility data))
    (when-let [data (lookup-entry config id :default-cell-width)]
      (. builder defaultCellWidth data))
    (when-let [data (lookup-entry config id :metric-placement)]
      (. builder metricPlacement data))
    (when-let [data (lookup-entry config id :row-alternate-color-options)]
      (. builder rowAlternateColorOptions data))
    (when-let [data (lookup-entry config id :row-field-names-style)]
      (. builder rowFieldNamesStyle data))
    (when-let [data (lookup-entry config id :row-header-style)]
      (. builder rowHeaderStyle data))
    (when-let [data (lookup-entry config id :rows-label-options)]
      (. builder rowsLabelOptions data))
    (when-let [data (lookup-entry config id :rows-layout)]
      (. builder rowsLayout data))
    (when-let [data (lookup-entry config id :single-metric-visibility)]
      (. builder singleMetricVisibility data))
    (when-let [data (lookup-entry config id :toggle-buttons-visibility)]
      (. builder toggleButtonsVisibility data))
    (.build builder)))


(defn cfn-template-pivot-table-paginated-report-options-property-builder
  "The cfn-template-pivot-table-paginated-report-options-property-builder function buildes out new instances of 
CfnTemplate$PivotTablePaginatedReportOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `overflowColumnHeaderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:overflow-column-header-visibility` |
| `verticalOverflowVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-overflow-visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTablePaginatedReportOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :overflow-column-header-visibility)]
      (. builder overflowColumnHeaderVisibility data))
    (when-let [data (lookup-entry config id :vertical-overflow-visibility)]
      (. builder verticalOverflowVisibility data))
    (.build builder)))


(defn cfn-template-pivot-table-rows-label-options-property-builder
  "The cfn-template-pivot-table-rows-label-options-property-builder function buildes out new instances of 
CfnTemplate$PivotTableRowsLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableRowsLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-pivot-table-sort-by-property-builder
  "The cfn-template-pivot-table-sort-by-property-builder function buildes out new instances of 
CfnTemplate$PivotTableSortByProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnSortProperty | [[cdk.support/lookup-entry]] | `:column` |
| `dataPath` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataPathSortProperty | [[cdk.support/lookup-entry]] | `:data-path` |
| `field` | software.amazon.awscdk.services.quicksight.CfnTemplate$FieldSortProperty | [[cdk.support/lookup-entry]] | `:field` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableSortByProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :data-path)]
      (. builder dataPath data))
    (when-let [data (lookup-entry config id :field)]
      (. builder field data))
    (.build builder)))


(defn cfn-template-pivot-table-sort-configuration-property-builder
  "The cfn-template-pivot-table-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$PivotTableSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldSortOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:field-sort-options` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-sort-options)]
      (. builder fieldSortOptions data))
    (.build builder)))


(defn cfn-template-pivot-table-total-options-property-builder
  "The cfn-template-pivot-table-total-options-property-builder function buildes out new instances of 
CfnTemplate$PivotTableTotalOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnSubtotalOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-subtotal-options` |
| `columnTotalOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTotalOptionsProperty | [[cdk.support/lookup-entry]] | `:column-total-options` |
| `rowSubtotalOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:row-subtotal-options` |
| `rowTotalOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTotalOptionsProperty | [[cdk.support/lookup-entry]] | `:row-total-options` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableTotalOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-subtotal-options)]
      (. builder columnSubtotalOptions data))
    (when-let [data (lookup-entry config id :column-total-options)]
      (. builder columnTotalOptions data))
    (when-let [data (lookup-entry config id :row-subtotal-options)]
      (. builder rowSubtotalOptions data))
    (when-let [data (lookup-entry config id :row-total-options)]
      (. builder rowTotalOptions data))
    (.build builder)))


(defn cfn-template-pivot-table-visual-property-builder
  "The cfn-template-pivot-table-visual-property-builder function buildes out new instances of 
CfnTemplate$PivotTableVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTableVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :conditional-formatting)]
      (. builder conditionalFormatting data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-pivot-total-options-property-builder
  "The cfn-template-pivot-total-options-property-builder function buildes out new instances of 
CfnTemplate$PivotTotalOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `metricHeaderCellStyle` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:metric-header-cell-style` |
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scrollStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:scroll-status` |
| `totalAggregationOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-aggregation-options` |
| `totalCellStyle` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `valueCellStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:value-cell-style` |"
  [stack id config]
  (let [builder (CfnTemplate$PivotTotalOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :metric-header-cell-style)]
      (. builder metricHeaderCellStyle data))
    (when-let [data (lookup-entry config id :placement)]
      (. builder placement data))
    (when-let [data (lookup-entry config id :scroll-status)]
      (. builder scrollStatus data))
    (when-let [data (lookup-entry config id :total-aggregation-options)]
      (. builder totalAggregationOptions data))
    (when-let [data (lookup-entry config id :total-cell-style)]
      (. builder totalCellStyle data))
    (when-let [data (lookup-entry config id :totals-visibility)]
      (. builder totalsVisibility data))
    (when-let [data (lookup-entry config id :value-cell-style)]
      (. builder valueCellStyle data))
    (.build builder)))


(defn cfn-template-predefined-hierarchy-property-builder
  "The cfn-template-predefined-hierarchy-property-builder function buildes out new instances of 
CfnTemplate$PredefinedHierarchyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `drillDownFilters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:drill-down-filters` |
| `hierarchyId` | java.lang.String | [[cdk.support/lookup-entry]] | `:hierarchy-id` |"
  [stack id config]
  (let [builder (CfnTemplate$PredefinedHierarchyProperty$Builder.)]
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (when-let [data (lookup-entry config id :drill-down-filters)]
      (. builder drillDownFilters data))
    (when-let [data (lookup-entry config id :hierarchy-id)]
      (. builder hierarchyId data))
    (.build builder)))


(defn cfn-template-progress-bar-options-property-builder
  "The cfn-template-progress-bar-options-property-builder function buildes out new instances of 
CfnTemplate$ProgressBarOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$ProgressBarOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-props-builder
  "The cfn-template-props-builder function buildes out new instances of 
CfnTemplateProps$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `definition` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:definition` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `permissions` | java.util.List | [[cdk.support/lookup-entry]] | `:permissions` |
| `sourceEntity` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-entity` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `templateId` | java.lang.String | [[cdk.support/lookup-entry]] | `:template-id` |
| `validationStrategy` | software.amazon.awscdk.services.quicksight.CfnTemplate$ValidationStrategyProperty | [[cdk.support/lookup-entry]] | `:validation-strategy` |
| `versionDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:version-description` |"
  [stack id config]
  (let [builder (CfnTemplateProps$Builder.)]
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :definition)]
      (. builder definition data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :permissions)]
      (. builder permissions data))
    (when-let [data (lookup-entry config id :source-entity)]
      (. builder sourceEntity data))
    (when-let [data (lookup-entry config id :tags)]
      (. builder tags data))
    (when-let [data (lookup-entry config id :template-id)]
      (. builder templateId data))
    (when-let [data (lookup-entry config id :validation-strategy)]
      (. builder validationStrategy data))
    (when-let [data (lookup-entry config id :version-description)]
      (. builder versionDescription data))
    (.build builder)))


(defn cfn-template-radar-chart-aggregated-field-wells-property-builder
  "The cfn-template-radar-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$RadarChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `color` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$RadarChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-radar-chart-area-style-settings-property-builder
  "The cfn-template-radar-chart-area-style-settings-property-builder function buildes out new instances of 
CfnTemplate$RadarChartAreaStyleSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$RadarChartAreaStyleSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-radar-chart-configuration-property-builder
  "The cfn-template-radar-chart-configuration-property-builder function buildes out new instances of 
CfnTemplate$RadarChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `alternateBandColorsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-colors-visibility` |
| `alternateBandEvenColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-even-color` |
| `alternateBandOddColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:alternate-band-odd-color` |
| `axesRangeScale` | java.lang.String | [[cdk.support/lookup-entry]] | `:axes-range-scale` |
| `baseSeriesSettings` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:base-series-settings` |
| `categoryAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-axis` |
| `categoryLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `colorAxis` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:color-axis` |
| `colorLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$RadarChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `shape` | java.lang.String | [[cdk.support/lookup-entry]] | `:shape` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `startAngle` | java.lang.Number | [[cdk.support/lookup-entry]] | `:start-angle` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |"
  [stack id config]
  (let [builder (CfnTemplate$RadarChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :alternate-band-colors-visibility)]
      (. builder alternateBandColorsVisibility data))
    (when-let [data (lookup-entry config id :alternate-band-even-color)]
      (. builder alternateBandEvenColor data))
    (when-let [data (lookup-entry config id :alternate-band-odd-color)]
      (. builder alternateBandOddColor data))
    (when-let [data (lookup-entry config id :axes-range-scale)]
      (. builder axesRangeScale data))
    (when-let [data (lookup-entry config id :base-series-settings)]
      (. builder baseSeriesSettings data))
    (when-let [data (lookup-entry config id :category-axis)]
      (. builder categoryAxis data))
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :color-axis)]
      (. builder colorAxis data))
    (when-let [data (lookup-entry config id :color-label-options)]
      (. builder colorLabelOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :shape)]
      (. builder shape data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :start-angle)]
      (. builder startAngle data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (.build builder)))


(defn cfn-template-radar-chart-field-wells-property-builder
  "The cfn-template-radar-chart-field-wells-property-builder function buildes out new instances of 
CfnTemplate$RadarChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `radarChartAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$RadarChartAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:radar-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$RadarChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :radar-chart-aggregated-field-wells)]
      (. builder radarChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-radar-chart-series-settings-property-builder
  "The cfn-template-radar-chart-series-settings-property-builder function buildes out new instances of 
CfnTemplate$RadarChartSeriesSettingsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `areaStyleSettings` | software.amazon.awscdk.services.quicksight.CfnTemplate$RadarChartAreaStyleSettingsProperty | [[cdk.support/lookup-entry]] | `:area-style-settings` |"
  [stack id config]
  (let [builder (CfnTemplate$RadarChartSeriesSettingsProperty$Builder.)]
    (when-let [data (lookup-entry config id :area-style-settings)]
      (. builder areaStyleSettings data))
    (.build builder)))


(defn cfn-template-radar-chart-sort-configuration-property-builder
  "The cfn-template-radar-chart-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$RadarChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |
| `colorItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-items-limit` |
| `colorSort` | java.util.List | [[cdk.support/lookup-entry]] | `:color-sort` |"
  [stack id config]
  (let [builder (CfnTemplate$RadarChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (when-let [data (lookup-entry config id :color-items-limit)]
      (. builder colorItemsLimit data))
    (when-let [data (lookup-entry config id :color-sort)]
      (. builder colorSort data))
    (.build builder)))


(defn cfn-template-radar-chart-visual-property-builder
  "The cfn-template-radar-chart-visual-property-builder function buildes out new instances of 
CfnTemplate$RadarChartVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$RadarChartVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-range-ends-label-type-property-builder
  "The cfn-template-range-ends-label-type-property-builder function buildes out new instances of 
CfnTemplate$RangeEndsLabelTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$RangeEndsLabelTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-reference-line-custom-label-configuration-property-builder
  "The cfn-template-reference-line-custom-label-configuration-property-builder function buildes out new instances of 
CfnTemplate$ReferenceLineCustomLabelConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |"
  [stack id config]
  (let [builder (CfnTemplate$ReferenceLineCustomLabelConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (.build builder)))


(defn cfn-template-reference-line-data-configuration-property-builder
  "The cfn-template-reference-line-data-configuration-property-builder function buildes out new instances of 
CfnTemplate$ReferenceLineDataConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `axisBinding` | java.lang.String | [[cdk.support/lookup-entry]] | `:axis-binding` |
| `dynamicConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:dynamic-configuration` |
| `seriesType` | java.lang.String | [[cdk.support/lookup-entry]] | `:series-type` |
| `staticConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:static-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$ReferenceLineDataConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :axis-binding)]
      (. builder axisBinding data))
    (when-let [data (lookup-entry config id :dynamic-configuration)]
      (. builder dynamicConfiguration data))
    (when-let [data (lookup-entry config id :series-type)]
      (. builder seriesType data))
    (when-let [data (lookup-entry config id :static-configuration)]
      (. builder staticConfiguration data))
    (.build builder)))


(defn cfn-template-reference-line-dynamic-data-configuration-property-builder
  "The cfn-template-reference-line-dynamic-data-configuration-property-builder function buildes out new instances of 
CfnTemplate$ReferenceLineDynamicDataConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `calculation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:calculation` |
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `measureAggregationFunction` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:measure-aggregation-function` |"
  [stack id config]
  (let [builder (CfnTemplate$ReferenceLineDynamicDataConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :calculation)]
      (. builder calculation data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :measure-aggregation-function)]
      (. builder measureAggregationFunction data))
    (.build builder)))


(defn cfn-template-reference-line-label-configuration-property-builder
  "The cfn-template-reference-line-label-configuration-property-builder function buildes out new instances of 
CfnTemplate$ReferenceLineLabelConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabelConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-label-configuration` |
| `fontColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-color` |
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `horizontalPosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-position` |
| `valueLabelConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ReferenceLineValueLabelConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-label-configuration` |
| `verticalPosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-position` |"
  [stack id config]
  (let [builder (CfnTemplate$ReferenceLineLabelConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label-configuration)]
      (. builder customLabelConfiguration data))
    (when-let [data (lookup-entry config id :font-color)]
      (. builder fontColor data))
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (when-let [data (lookup-entry config id :horizontal-position)]
      (. builder horizontalPosition data))
    (when-let [data (lookup-entry config id :value-label-configuration)]
      (. builder valueLabelConfiguration data))
    (when-let [data (lookup-entry config id :vertical-position)]
      (. builder verticalPosition data))
    (.build builder)))


(defn cfn-template-reference-line-property-builder
  "The cfn-template-reference-line-property-builder function buildes out new instances of 
CfnTemplate$ReferenceLineProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-configuration` |
| `labelConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:label-configuration` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `styleConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:style-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$ReferenceLineProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-configuration)]
      (. builder dataConfiguration data))
    (when-let [data (lookup-entry config id :label-configuration)]
      (. builder labelConfiguration data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (when-let [data (lookup-entry config id :style-configuration)]
      (. builder styleConfiguration data))
    (.build builder)))


(defn cfn-template-reference-line-static-data-configuration-property-builder
  "The cfn-template-reference-line-static-data-configuration-property-builder function buildes out new instances of 
CfnTemplate$ReferenceLineStaticDataConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$ReferenceLineStaticDataConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-reference-line-style-configuration-property-builder
  "The cfn-template-reference-line-style-configuration-property-builder function buildes out new instances of 
CfnTemplate$ReferenceLineStyleConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `pattern` | java.lang.String | [[cdk.support/lookup-entry]] | `:pattern` |"
  [stack id config]
  (let [builder (CfnTemplate$ReferenceLineStyleConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :pattern)]
      (. builder pattern data))
    (.build builder)))


(defn cfn-template-reference-line-value-label-configuration-property-builder
  "The cfn-template-reference-line-value-label-configuration-property-builder function buildes out new instances of 
CfnTemplate$ReferenceLineValueLabelConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NumericFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:format-configuration` |
| `relativePosition` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative-position` |"
  [stack id config]
  (let [builder (CfnTemplate$ReferenceLineValueLabelConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (when-let [data (lookup-entry config id :relative-position)]
      (. builder relativePosition data))
    (.build builder)))


(defn cfn-template-relative-date-time-control-display-options-property-builder
  "The cfn-template-relative-date-time-control-display-options-property-builder function buildes out new instances of 
CfnTemplate$RelativeDateTimeControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dateTimeFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-time-format` |
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnTemplate$RelativeDateTimeControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :date-time-format)]
      (. builder dateTimeFormat data))
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-template-relative-dates-filter-property-builder
  "The cfn-template-relative-dates-filter-property-builder function buildes out new instances of 
CfnTemplate$RelativeDatesFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `anchorDateConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$AnchorDateConfigurationProperty | [[cdk.support/lookup-entry]] | `:anchor-date-configuration` |
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `excludePeriodConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:exclude-period-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `minimumGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:minimum-granularity` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `relativeDateType` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative-date-type` |
| `relativeDateValue` | java.lang.Number | [[cdk.support/lookup-entry]] | `:relative-date-value` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnTemplate$RelativeDatesFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :anchor-date-configuration)]
      (. builder anchorDateConfiguration data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :exclude-period-configuration)]
      (. builder excludePeriodConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :minimum-granularity)]
      (. builder minimumGranularity data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (when-let [data (lookup-entry config id :relative-date-type)]
      (. builder relativeDateType data))
    (when-let [data (lookup-entry config id :relative-date-value)]
      (. builder relativeDateValue data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-template-resource-permission-property-builder
  "The cfn-template-resource-permission-property-builder function buildes out new instances of 
CfnTemplate$ResourcePermissionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `principal` | java.lang.String | [[cdk.support/lookup-entry]] | `:principal` |
| `resource` | java.lang.String | [[cdk.support/lookup-entry]] | `:resource` |"
  [stack id config]
  (let [builder (CfnTemplate$ResourcePermissionProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :principal)]
      (. builder principal data))
    (when-let [data (lookup-entry config id :resource)]
      (. builder resource data))
    (.build builder)))


(defn cfn-template-rolling-date-configuration-property-builder
  "The cfn-template-rolling-date-configuration-property-builder function buildes out new instances of 
CfnTemplate$RollingDateConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataSetIdentifier` | java.lang.String | [[cdk.support/lookup-entry]] | `:data-set-identifier` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |"
  [stack id config]
  (let [builder (CfnTemplate$RollingDateConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-set-identifier)]
      (. builder dataSetIdentifier data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (.build builder)))


(defn cfn-template-row-alternate-color-options-property-builder
  "The cfn-template-row-alternate-color-options-property-builder function buildes out new instances of 
CfnTemplate$RowAlternateColorOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `rowAlternateColors` | java.util.List | [[cdk.support/lookup-entry]] | `:row-alternate-colors` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `usePrimaryBackgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:use-primary-background-color` |"
  [stack id config]
  (let [builder (CfnTemplate$RowAlternateColorOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :row-alternate-colors)]
      (. builder rowAlternateColors data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (when-let [data (lookup-entry config id :use-primary-background-color)]
      (. builder usePrimaryBackgroundColor data))
    (.build builder)))


(defn cfn-template-same-sheet-target-visual-configuration-property-builder
  "The cfn-template-same-sheet-target-visual-configuration-property-builder function buildes out new instances of 
CfnTemplate$SameSheetTargetVisualConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `targetVisualOptions` | java.lang.String | [[cdk.support/lookup-entry]] | `:target-visual-options` |
| `targetVisuals` | java.util.List | [[cdk.support/lookup-entry]] | `:target-visuals` |"
  [stack id config]
  (let [builder (CfnTemplate$SameSheetTargetVisualConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :target-visual-options)]
      (. builder targetVisualOptions data))
    (when-let [data (lookup-entry config id :target-visuals)]
      (. builder targetVisuals data))
    (.build builder)))


(defn cfn-template-sankey-diagram-aggregated-field-wells-property-builder
  "The cfn-template-sankey-diagram-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$SankeyDiagramAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destination` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:destination` |
| `source` | java.util.List | [[cdk.support/lookup-entry]] | `:source` |
| `weight` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:weight` |"
  [stack id config]
  (let [builder (CfnTemplate$SankeyDiagramAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :destination)]
      (. builder destination data))
    (when-let [data (lookup-entry config id :source)]
      (. builder source data))
    (when-let [data (lookup-entry config id :weight)]
      (. builder weight data))
    (.build builder)))


(defn cfn-template-sankey-diagram-chart-configuration-property-builder
  "The cfn-template-sankey-diagram-chart-configuration-property-builder function buildes out new instances of 
CfnTemplate$SankeyDiagramChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$SankeyDiagramFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$SankeyDiagramSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$SankeyDiagramChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (.build builder)))


(defn cfn-template-sankey-diagram-field-wells-property-builder
  "The cfn-template-sankey-diagram-field-wells-property-builder function buildes out new instances of 
CfnTemplate$SankeyDiagramFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sankeyDiagramAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$SankeyDiagramAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:sankey-diagram-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$SankeyDiagramFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :sankey-diagram-aggregated-field-wells)]
      (. builder sankeyDiagramAggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-sankey-diagram-sort-configuration-property-builder
  "The cfn-template-sankey-diagram-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$SankeyDiagramSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destinationItemsLimit` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:destination-items-limit` |
| `sourceItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:source-items-limit` |
| `weightSort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:weight-sort` |"
  [stack id config]
  (let [builder (CfnTemplate$SankeyDiagramSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :destination-items-limit)]
      (. builder destinationItemsLimit data))
    (when-let [data (lookup-entry config id :source-items-limit)]
      (. builder sourceItemsLimit data))
    (when-let [data (lookup-entry config id :weight-sort)]
      (. builder weightSort data))
    (.build builder)))


(defn cfn-template-sankey-diagram-visual-property-builder
  "The cfn-template-sankey-diagram-visual-property-builder function buildes out new instances of 
CfnTemplate$SankeyDiagramVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$SankeyDiagramChartConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$SankeyDiagramVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-scatter-plot-categorically-aggregated-field-wells-property-builder
  "The cfn-template-scatter-plot-categorically-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `label` | java.util.List | [[cdk.support/lookup-entry]] | `:label` |
| `size` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:size` |
| `xAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:y-axis` |"
  [stack id config]
  (let [builder (CfnTemplate$ScatterPlotCategoricallyAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :label)]
      (. builder label data))
    (when-let [data (lookup-entry config id :size)]
      (. builder size data))
    (when-let [data (lookup-entry config id :x-axis)]
      (. builder xAxis data))
    (when-let [data (lookup-entry config id :y-axis)]
      (. builder yAxis data))
    (.build builder)))


(defn cfn-template-scatter-plot-configuration-property-builder
  "The cfn-template-scatter-plot-configuration-property-builder function buildes out new instances of 
CfnTemplate$ScatterPlotConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnTemplate$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `tooltip` | software.amazon.awscdk.services.quicksight.CfnTemplate$TooltipOptionsProperty | [[cdk.support/lookup-entry]] | `:tooltip` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `xAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-display-options` |
| `xAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:x-axis-label-options` |
| `yAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:y-axis-display-options` |
| `yAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:y-axis-label-options` |"
  [stack id config]
  (let [builder (CfnTemplate$ScatterPlotConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (when-let [data (lookup-entry config id :x-axis-display-options)]
      (. builder xAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :x-axis-label-options)]
      (. builder xAxisLabelOptions data))
    (when-let [data (lookup-entry config id :y-axis-display-options)]
      (. builder yAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :y-axis-label-options)]
      (. builder yAxisLabelOptions data))
    (.build builder)))


(defn cfn-template-scatter-plot-field-wells-property-builder
  "The cfn-template-scatter-plot-field-wells-property-builder function buildes out new instances of 
CfnTemplate$ScatterPlotFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `scatterPlotCategoricallyAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$ScatterPlotCategoricallyAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:scatter-plot-categorically-aggregated-field-wells` |
| `scatterPlotUnaggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:scatter-plot-unaggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$ScatterPlotFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :scatter-plot-categorically-aggregated-field-wells)]
      (. builder scatterPlotCategoricallyAggregatedFieldWells data))
    (when-let [data (lookup-entry config id :scatter-plot-unaggregated-field-wells)]
      (. builder scatterPlotUnaggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-scatter-plot-unaggregated-field-wells-property-builder
  "The cfn-template-scatter-plot-unaggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$ScatterPlotUnaggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | java.util.List | [[cdk.support/lookup-entry]] | `:category` |
| `label` | java.util.List | [[cdk.support/lookup-entry]] | `:label` |
| `size` | java.util.List | [[cdk.support/lookup-entry]] | `:size` |
| `xAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:y-axis` |"
  [stack id config]
  (let [builder (CfnTemplate$ScatterPlotUnaggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :label)]
      (. builder label data))
    (when-let [data (lookup-entry config id :size)]
      (. builder size data))
    (when-let [data (lookup-entry config id :x-axis)]
      (. builder xAxis data))
    (when-let [data (lookup-entry config id :y-axis)]
      (. builder yAxis data))
    (.build builder)))


(defn cfn-template-scatter-plot-visual-property-builder
  "The cfn-template-scatter-plot-visual-property-builder function buildes out new instances of 
CfnTemplate$ScatterPlotVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$ScatterPlotVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-scroll-bar-options-property-builder
  "The cfn-template-scroll-bar-options-property-builder function buildes out new instances of 
CfnTemplate$ScrollBarOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `visibleRange` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisibleRangeOptionsProperty | [[cdk.support/lookup-entry]] | `:visible-range` |"
  [stack id config]
  (let [builder (CfnTemplate$ScrollBarOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (when-let [data (lookup-entry config id :visible-range)]
      (. builder visibleRange data))
    (.build builder)))


(defn cfn-template-secondary-value-options-property-builder
  "The cfn-template-secondary-value-options-property-builder function buildes out new instances of 
CfnTemplate$SecondaryValueOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$SecondaryValueOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-section-after-page-break-property-builder
  "The cfn-template-section-after-page-break-property-builder function buildes out new instances of 
CfnTemplate$SectionAfterPageBreakProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |"
  [stack id config]
  (let [builder (CfnTemplate$SectionAfterPageBreakProperty$Builder.)]
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (.build builder)))


(defn cfn-template-section-based-layout-canvas-size-options-property-builder
  "The cfn-template-section-based-layout-canvas-size-options-property-builder function buildes out new instances of 
CfnTemplate$SectionBasedLayoutCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paperCanvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SectionBasedLayoutPaperCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:paper-canvas-size-options` |"
  [stack id config]
  (let [builder (CfnTemplate$SectionBasedLayoutCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :paper-canvas-size-options)]
      (. builder paperCanvasSizeOptions data))
    (.build builder)))


(defn cfn-template-section-based-layout-configuration-property-builder
  "The cfn-template-section-based-layout-configuration-property-builder function buildes out new instances of 
CfnTemplate$SectionBasedLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bodySections` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:body-sections` |
| `canvasSizeOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SectionBasedLayoutCanvasSizeOptionsProperty | [[cdk.support/lookup-entry]] | `:canvas-size-options` |
| `footerSections` | java.util.List | [[cdk.support/lookup-entry]] | `:footer-sections` |
| `headerSections` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:header-sections` |"
  [stack id config]
  (let [builder (CfnTemplate$SectionBasedLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :body-sections)]
      (. builder bodySections data))
    (when-let [data (lookup-entry config id :canvas-size-options)]
      (. builder canvasSizeOptions data))
    (when-let [data (lookup-entry config id :footer-sections)]
      (. builder footerSections data))
    (when-let [data (lookup-entry config id :header-sections)]
      (. builder headerSections data))
    (.build builder)))


(defn cfn-template-section-based-layout-paper-canvas-size-options-property-builder
  "The cfn-template-section-based-layout-paper-canvas-size-options-property-builder function buildes out new instances of 
CfnTemplate$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paperMargin` | software.amazon.awscdk.services.quicksight.CfnTemplate$SpacingProperty | [[cdk.support/lookup-entry]] | `:paper-margin` |
| `paperOrientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:paper-orientation` |
| `paperSize` | java.lang.String | [[cdk.support/lookup-entry]] | `:paper-size` |"
  [stack id config]
  (let [builder (CfnTemplate$SectionBasedLayoutPaperCanvasSizeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :paper-margin)]
      (. builder paperMargin data))
    (when-let [data (lookup-entry config id :paper-orientation)]
      (. builder paperOrientation data))
    (when-let [data (lookup-entry config id :paper-size)]
      (. builder paperSize data))
    (.build builder)))


(defn cfn-template-section-layout-configuration-property-builder
  "The cfn-template-section-layout-configuration-property-builder function buildes out new instances of 
CfnTemplate$SectionLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `freeFormLayout` | software.amazon.awscdk.services.quicksight.CfnTemplate$FreeFormSectionLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:free-form-layout` |"
  [stack id config]
  (let [builder (CfnTemplate$SectionLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :free-form-layout)]
      (. builder freeFormLayout data))
    (.build builder)))


(defn cfn-template-section-page-break-configuration-property-builder
  "The cfn-template-section-page-break-configuration-property-builder function buildes out new instances of 
CfnTemplate$SectionPageBreakConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `after` | software.amazon.awscdk.services.quicksight.CfnTemplate$SectionAfterPageBreakProperty | [[cdk.support/lookup-entry]] | `:after` |"
  [stack id config]
  (let [builder (CfnTemplate$SectionPageBreakConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :after)]
      (. builder after data))
    (.build builder)))


(defn cfn-template-section-style-property-builder
  "The cfn-template-section-style-property-builder function buildes out new instances of 
CfnTemplate$SectionStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `height` | java.lang.String | [[cdk.support/lookup-entry]] | `:height` |
| `padding` | software.amazon.awscdk.services.quicksight.CfnTemplate$SpacingProperty | [[cdk.support/lookup-entry]] | `:padding` |"
  [stack id config]
  (let [builder (CfnTemplate$SectionStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :height)]
      (. builder height data))
    (when-let [data (lookup-entry config id :padding)]
      (. builder padding data))
    (.build builder)))


(defn cfn-template-selected-sheets-filter-scope-configuration-property-builder
  "The cfn-template-selected-sheets-filter-scope-configuration-property-builder function buildes out new instances of 
CfnTemplate$SelectedSheetsFilterScopeConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sheetVisualScopingConfigurations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sheet-visual-scoping-configurations` |"
  [stack id config]
  (let [builder (CfnTemplate$SelectedSheetsFilterScopeConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :sheet-visual-scoping-configurations)]
      (. builder sheetVisualScopingConfigurations data))
    (.build builder)))


(defn cfn-template-series-item-property-builder
  "The cfn-template-series-item-property-builder function buildes out new instances of 
CfnTemplate$SeriesItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataFieldSeriesItem` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataFieldSeriesItemProperty | [[cdk.support/lookup-entry]] | `:data-field-series-item` |
| `fieldSeriesItem` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-series-item` |"
  [stack id config]
  (let [builder (CfnTemplate$SeriesItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-field-series-item)]
      (. builder dataFieldSeriesItem data))
    (when-let [data (lookup-entry config id :field-series-item)]
      (. builder fieldSeriesItem data))
    (.build builder)))


(defn cfn-template-set-parameter-value-configuration-property-builder
  "The cfn-template-set-parameter-value-configuration-property-builder function buildes out new instances of 
CfnTemplate$SetParameterValueConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `destinationParameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:destination-parameter-name` |
| `value` | software.amazon.awscdk.services.quicksight.CfnTemplate$DestinationParameterValueConfigurationProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$SetParameterValueConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :destination-parameter-name)]
      (. builder destinationParameterName data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-shape-conditional-format-property-builder
  "The cfn-template-shape-conditional-format-property-builder function buildes out new instances of 
CfnTemplate$ShapeConditionalFormatProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:background-color` |"
  [stack id config]
  (let [builder (CfnTemplate$ShapeConditionalFormatProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-color)]
      (. builder backgroundColor data))
    (.build builder)))


(defn cfn-template-sheet-control-info-icon-label-options-property-builder
  "The cfn-template-sheet-control-info-icon-label-options-property-builder function buildes out new instances of 
CfnTemplate$SheetControlInfoIconLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconText` | java.lang.String | [[cdk.support/lookup-entry]] | `:info-icon-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$SheetControlInfoIconLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-text)]
      (. builder infoIconText data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-sheet-control-layout-configuration-property-builder
  "The cfn-template-sheet-control-layout-configuration-property-builder function buildes out new instances of 
CfnTemplate$SheetControlLayoutConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `gridLayout` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:grid-layout` |"
  [stack id config]
  (let [builder (CfnTemplate$SheetControlLayoutConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :grid-layout)]
      (. builder gridLayout data))
    (.build builder)))


(defn cfn-template-sheet-control-layout-property-builder
  "The cfn-template-sheet-control-layout-property-builder function buildes out new instances of 
CfnTemplate$SheetControlLayoutProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configuration` | software.amazon.awscdk.services.quicksight.CfnTemplate$SheetControlLayoutConfigurationProperty | [[cdk.support/lookup-entry]] | `:configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$SheetControlLayoutProperty$Builder.)]
    (when-let [data (lookup-entry config id :configuration)]
      (. builder configuration data))
    (.build builder)))


(defn cfn-template-sheet-definition-property-builder
  "The cfn-template-sheet-definition-property-builder function buildes out new instances of 
CfnTemplate$SheetDefinitionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `contentType` | java.lang.String | [[cdk.support/lookup-entry]] | `:content-type` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `filterControls` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-controls` |
| `layouts` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:layouts` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterControls` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameter-controls` |
| `sheetControlLayouts` | java.util.List | [[cdk.support/lookup-entry]] | `:sheet-control-layouts` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |
| `textBoxes` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-boxes` |
| `title` | java.lang.String | [[cdk.support/lookup-entry]] | `:title` |
| `visuals` | java.util.List | [[cdk.support/lookup-entry]] | `:visuals` |"
  [stack id config]
  (let [builder (CfnTemplate$SheetDefinitionProperty$Builder.)]
    (when-let [data (lookup-entry config id :content-type)]
      (. builder contentType data))
    (when-let [data (lookup-entry config id :description)]
      (. builder description data))
    (when-let [data (lookup-entry config id :filter-controls)]
      (. builder filterControls data))
    (when-let [data (lookup-entry config id :layouts)]
      (. builder layouts data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :parameter-controls)]
      (. builder parameterControls data))
    (when-let [data (lookup-entry config id :sheet-control-layouts)]
      (. builder sheetControlLayouts data))
    (when-let [data (lookup-entry config id :sheet-id)]
      (. builder sheetId data))
    (when-let [data (lookup-entry config id :text-boxes)]
      (. builder textBoxes data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visuals)]
      (. builder visuals data))
    (.build builder)))


(defn cfn-template-sheet-element-configuration-overrides-property-builder
  "The cfn-template-sheet-element-configuration-overrides-property-builder function buildes out new instances of 
CfnTemplate$SheetElementConfigurationOverridesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$SheetElementConfigurationOverridesProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-sheet-element-rendering-rule-property-builder
  "The cfn-template-sheet-element-rendering-rule-property-builder function buildes out new instances of 
CfnTemplate$SheetElementRenderingRuleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `configurationOverrides` | software.amazon.awscdk.services.quicksight.CfnTemplate$SheetElementConfigurationOverridesProperty | [[cdk.support/lookup-entry]] | `:configuration-overrides` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |"
  [stack id config]
  (let [builder (CfnTemplate$SheetElementRenderingRuleProperty$Builder.)]
    (when-let [data (lookup-entry config id :configuration-overrides)]
      (. builder configurationOverrides data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (.build builder)))


(defn cfn-template-sheet-property-builder
  "The cfn-template-sheet-property-builder function buildes out new instances of 
CfnTemplate$SheetProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |"
  [stack id config]
  (let [builder (CfnTemplate$SheetProperty$Builder.)]
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :sheet-id)]
      (. builder sheetId data))
    (.build builder)))


(defn cfn-template-sheet-text-box-property-builder
  "The cfn-template-sheet-text-box-property-builder function buildes out new instances of 
CfnTemplate$SheetTextBoxProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | java.lang.String | [[cdk.support/lookup-entry]] | `:content` |
| `sheetTextBoxId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-text-box-id` |"
  [stack id config]
  (let [builder (CfnTemplate$SheetTextBoxProperty$Builder.)]
    (when-let [data (lookup-entry config id :content)]
      (. builder content data))
    (when-let [data (lookup-entry config id :sheet-text-box-id)]
      (. builder sheetTextBoxId data))
    (.build builder)))


(defn cfn-template-sheet-visual-scoping-configuration-property-builder
  "The cfn-template-sheet-visual-scoping-configuration-property-builder function buildes out new instances of 
CfnTemplate$SheetVisualScopingConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `scope` | java.lang.String | [[cdk.support/lookup-entry]] | `:scope` |
| `sheetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:sheet-id` |
| `visualIds` | java.util.List | [[cdk.support/lookup-entry]] | `:visual-ids` |"
  [stack id config]
  (let [builder (CfnTemplate$SheetVisualScopingConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :scope)]
      (. builder scope data))
    (when-let [data (lookup-entry config id :sheet-id)]
      (. builder sheetId data))
    (when-let [data (lookup-entry config id :visual-ids)]
      (. builder visualIds data))
    (.build builder)))


(defn cfn-template-short-format-text-property-builder
  "The cfn-template-short-format-text-property-builder function buildes out new instances of 
CfnTemplate$ShortFormatTextProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `plainText` | java.lang.String | [[cdk.support/lookup-entry]] | `:plain-text` |
| `richText` | java.lang.String | [[cdk.support/lookup-entry]] | `:rich-text` |"
  [stack id config]
  (let [builder (CfnTemplate$ShortFormatTextProperty$Builder.)]
    (when-let [data (lookup-entry config id :plain-text)]
      (. builder plainText data))
    (when-let [data (lookup-entry config id :rich-text)]
      (. builder richText data))
    (.build builder)))


(defn cfn-template-simple-cluster-marker-property-builder
  "The cfn-template-simple-cluster-marker-property-builder function buildes out new instances of 
CfnTemplate$SimpleClusterMarkerProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |"
  [stack id config]
  (let [builder (CfnTemplate$SimpleClusterMarkerProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (.build builder)))


(defn cfn-template-slider-control-display-options-property-builder
  "The cfn-template-slider-control-display-options-property-builder function buildes out new instances of 
CfnTemplate$SliderControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `titleOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$LabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnTemplate$SliderControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-template-small-multiples-axis-properties-property-builder
  "The cfn-template-small-multiples-axis-properties-property-builder function buildes out new instances of 
CfnTemplate$SmallMultiplesAxisPropertiesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scale` | java.lang.String | [[cdk.support/lookup-entry]] | `:scale` |"
  [stack id config]
  (let [builder (CfnTemplate$SmallMultiplesAxisPropertiesProperty$Builder.)]
    (when-let [data (lookup-entry config id :placement)]
      (. builder placement data))
    (when-let [data (lookup-entry config id :scale)]
      (. builder scale data))
    (.build builder)))


(defn cfn-template-small-multiples-options-property-builder
  "The cfn-template-small-multiples-options-property-builder function buildes out new instances of 
CfnTemplate$SmallMultiplesOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `maxVisibleColumns` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max-visible-columns` |
| `maxVisibleRows` | java.lang.Number | [[cdk.support/lookup-entry]] | `:max-visible-rows` |
| `panelConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:panel-configuration` |
| `xAxis` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:x-axis` |
| `yAxis` | software.amazon.awscdk.services.quicksight.CfnTemplate$SmallMultiplesAxisPropertiesProperty | [[cdk.support/lookup-entry]] | `:y-axis` |"
  [stack id config]
  (let [builder (CfnTemplate$SmallMultiplesOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :max-visible-columns)]
      (. builder maxVisibleColumns data))
    (when-let [data (lookup-entry config id :max-visible-rows)]
      (. builder maxVisibleRows data))
    (when-let [data (lookup-entry config id :panel-configuration)]
      (. builder panelConfiguration data))
    (when-let [data (lookup-entry config id :x-axis)]
      (. builder xAxis data))
    (when-let [data (lookup-entry config id :y-axis)]
      (. builder yAxis data))
    (.build builder)))


(defn cfn-template-spacing-property-builder
  "The cfn-template-spacing-property-builder function buildes out new instances of 
CfnTemplate$SpacingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bottom` | java.lang.String | [[cdk.support/lookup-entry]] | `:bottom` |
| `left` | java.lang.String | [[cdk.support/lookup-entry]] | `:left` |
| `right` | java.lang.String | [[cdk.support/lookup-entry]] | `:right` |
| `top` | java.lang.String | [[cdk.support/lookup-entry]] | `:top` |"
  [stack id config]
  (let [builder (CfnTemplate$SpacingProperty$Builder.)]
    (when-let [data (lookup-entry config id :bottom)]
      (. builder bottom data))
    (when-let [data (lookup-entry config id :left)]
      (. builder left data))
    (when-let [data (lookup-entry config id :right)]
      (. builder right data))
    (when-let [data (lookup-entry config id :top)]
      (. builder top data))
    (.build builder)))


(defn cfn-template-string-default-values-property-builder
  "The cfn-template-string-default-values-property-builder function buildes out new instances of 
CfnTemplate$StringDefaultValuesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dynamicValue` | software.amazon.awscdk.services.quicksight.CfnTemplate$DynamicDefaultValueProperty | [[cdk.support/lookup-entry]] | `:dynamic-value` |
| `staticValues` | java.util.List | [[cdk.support/lookup-entry]] | `:static-values` |"
  [stack id config]
  (let [builder (CfnTemplate$StringDefaultValuesProperty$Builder.)]
    (when-let [data (lookup-entry config id :dynamic-value)]
      (. builder dynamicValue data))
    (when-let [data (lookup-entry config id :static-values)]
      (. builder staticValues data))
    (.build builder)))


(defn cfn-template-string-format-configuration-property-builder
  "The cfn-template-string-format-configuration-property-builder function buildes out new instances of 
CfnTemplate$StringFormatConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `nullValueFormatConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$NullValueFormatConfigurationProperty | [[cdk.support/lookup-entry]] | `:null-value-format-configuration` |
| `numericFormatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-format-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$StringFormatConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :null-value-format-configuration)]
      (. builder nullValueFormatConfiguration data))
    (when-let [data (lookup-entry config id :numeric-format-configuration)]
      (. builder numericFormatConfiguration data))
    (.build builder)))


(defn cfn-template-string-parameter-declaration-property-builder
  "The cfn-template-string-parameter-declaration-property-builder function buildes out new instances of 
CfnTemplate$StringParameterDeclarationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `defaultValues` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-values` |
| `mappedDataSetParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:mapped-data-set-parameters` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `parameterValueType` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-value-type` |
| `valueWhenUnset` | software.amazon.awscdk.services.quicksight.CfnTemplate$StringValueWhenUnsetConfigurationProperty | [[cdk.support/lookup-entry]] | `:value-when-unset` |"
  [stack id config]
  (let [builder (CfnTemplate$StringParameterDeclarationProperty$Builder.)]
    (when-let [data (lookup-entry config id :default-values)]
      (. builder defaultValues data))
    (when-let [data (lookup-entry config id :mapped-data-set-parameters)]
      (. builder mappedDataSetParameters data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :parameter-value-type)]
      (. builder parameterValueType data))
    (when-let [data (lookup-entry config id :value-when-unset)]
      (. builder valueWhenUnset data))
    (.build builder)))


(defn cfn-template-string-value-when-unset-configuration-property-builder
  "The cfn-template-string-value-when-unset-configuration-property-builder function buildes out new instances of 
CfnTemplate$StringValueWhenUnsetConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-value` |
| `valueWhenUnsetOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:value-when-unset-option` |"
  [stack id config]
  (let [builder (CfnTemplate$StringValueWhenUnsetConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-value)]
      (. builder customValue data))
    (when-let [data (lookup-entry config id :value-when-unset-option)]
      (. builder valueWhenUnsetOption data))
    (.build builder)))


(defn cfn-template-subtotal-options-property-builder
  "The cfn-template-subtotal-options-property-builder function buildes out new instances of 
CfnTemplate$SubtotalOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldLevel` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-level` |
| `fieldLevelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-level-options` |
| `metricHeaderCellStyle` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:metric-header-cell-style` |
| `styleTargets` | java.util.List | [[cdk.support/lookup-entry]] | `:style-targets` |
| `totalCellStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |
| `valueCellStyle` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:value-cell-style` |"
  [stack id config]
  (let [builder (CfnTemplate$SubtotalOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :field-level)]
      (. builder fieldLevel data))
    (when-let [data (lookup-entry config id :field-level-options)]
      (. builder fieldLevelOptions data))
    (when-let [data (lookup-entry config id :metric-header-cell-style)]
      (. builder metricHeaderCellStyle data))
    (when-let [data (lookup-entry config id :style-targets)]
      (. builder styleTargets data))
    (when-let [data (lookup-entry config id :total-cell-style)]
      (. builder totalCellStyle data))
    (when-let [data (lookup-entry config id :totals-visibility)]
      (. builder totalsVisibility data))
    (when-let [data (lookup-entry config id :value-cell-style)]
      (. builder valueCellStyle data))
    (.build builder)))


(defn cfn-template-table-aggregated-field-wells-property-builder
  "The cfn-template-table-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$TableAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-by` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$TableAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :group-by)]
      (. builder groupBy data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-table-border-options-property-builder
  "The cfn-template-table-border-options-property-builder function buildes out new instances of 
CfnTemplate$TableBorderOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `color` | java.lang.String | [[cdk.support/lookup-entry]] | `:color` |
| `style` | java.lang.String | [[cdk.support/lookup-entry]] | `:style` |
| `thickness` | java.lang.Number | [[cdk.support/lookup-entry]] | `:thickness` |"
  [stack id config]
  (let [builder (CfnTemplate$TableBorderOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :color)]
      (. builder color data))
    (when-let [data (lookup-entry config id :style)]
      (. builder style data))
    (when-let [data (lookup-entry config id :thickness)]
      (. builder thickness data))
    (.build builder)))


(defn cfn-template-table-cell-conditional-formatting-property-builder
  "The cfn-template-table-cell-conditional-formatting-property-builder function buildes out new instances of 
CfnTemplate$TableCellConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `textFormat` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-format` |"
  [stack id config]
  (let [builder (CfnTemplate$TableCellConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :text-format)]
      (. builder textFormat data))
    (.build builder)))


(defn cfn-template-table-cell-image-sizing-configuration-property-builder
  "The cfn-template-table-cell-image-sizing-configuration-property-builder function buildes out new instances of 
CfnTemplate$TableCellImageSizingConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `tableCellImageScalingConfiguration` | java.lang.String | [[cdk.support/lookup-entry]] | `:table-cell-image-scaling-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$TableCellImageSizingConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :table-cell-image-scaling-configuration)]
      (. builder tableCellImageScalingConfiguration data))
    (.build builder)))


(defn cfn-template-table-cell-style-property-builder
  "The cfn-template-table-cell-style-property-builder function buildes out new instances of 
CfnTemplate$TableCellStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:background-color` |
| `border` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:border` |
| `fontConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$FontConfigurationProperty | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `height` | java.lang.Number | [[cdk.support/lookup-entry]] | `:height` |
| `horizontalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:horizontal-text-alignment` |
| `textWrap` | java.lang.String | [[cdk.support/lookup-entry]] | `:text-wrap` |
| `verticalTextAlignment` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-text-alignment` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$TableCellStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-color)]
      (. builder backgroundColor data))
    (when-let [data (lookup-entry config id :border)]
      (. builder border data))
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (when-let [data (lookup-entry config id :height)]
      (. builder height data))
    (when-let [data (lookup-entry config id :horizontal-text-alignment)]
      (. builder horizontalTextAlignment data))
    (when-let [data (lookup-entry config id :text-wrap)]
      (. builder textWrap data))
    (when-let [data (lookup-entry config id :vertical-text-alignment)]
      (. builder verticalTextAlignment data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-table-conditional-formatting-option-property-builder
  "The cfn-template-table-conditional-formatting-option-property-builder function buildes out new instances of 
CfnTemplate$TableConditionalFormattingOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cell` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableCellConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:cell` |
| `row` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableRowConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:row` |"
  [stack id config]
  (let [builder (CfnTemplate$TableConditionalFormattingOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :cell)]
      (. builder cell data))
    (when-let [data (lookup-entry config id :row)]
      (. builder row data))
    (.build builder)))


(defn cfn-template-table-conditional-formatting-property-builder
  "The cfn-template-table-conditional-formatting-property-builder function buildes out new instances of 
CfnTemplate$TableConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `conditionalFormattingOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:conditional-formatting-options` |"
  [stack id config]
  (let [builder (CfnTemplate$TableConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :conditional-formatting-options)]
      (. builder conditionalFormattingOptions data))
    (.build builder)))


(defn cfn-template-table-configuration-property-builder
  "The cfn-template-table-configuration-property-builder function buildes out new instances of 
CfnTemplate$TableConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `paginatedReportOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$TablePaginatedReportOptionsProperty | [[cdk.support/lookup-entry]] | `:paginated-report-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tableInlineVisualizations` | java.util.List | [[cdk.support/lookup-entry]] | `:table-inline-visualizations` |
| `tableOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableOptionsProperty | [[cdk.support/lookup-entry]] | `:table-options` |
| `totalOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:total-options` |"
  [stack id config]
  (let [builder (CfnTemplate$TableConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-options)]
      (. builder fieldOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :paginated-report-options)]
      (. builder paginatedReportOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :table-inline-visualizations)]
      (. builder tableInlineVisualizations data))
    (when-let [data (lookup-entry config id :table-options)]
      (. builder tableOptions data))
    (when-let [data (lookup-entry config id :total-options)]
      (. builder totalOptions data))
    (.build builder)))


(defn cfn-template-table-field-custom-icon-content-property-builder
  "The cfn-template-table-field-custom-icon-content-property-builder function buildes out new instances of 
CfnTemplate$TableFieldCustomIconContentProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `icon` | java.lang.String | [[cdk.support/lookup-entry]] | `:icon` |"
  [stack id config]
  (let [builder (CfnTemplate$TableFieldCustomIconContentProperty$Builder.)]
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (.build builder)))


(defn cfn-template-table-field-custom-text-content-property-builder
  "The cfn-template-table-field-custom-text-content-property-builder function buildes out new instances of 
CfnTemplate$TableFieldCustomTextContentProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-configuration` |
| `value` | java.lang.String | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$TableFieldCustomTextContentProperty$Builder.)]
    (when-let [data (lookup-entry config id :font-configuration)]
      (. builder fontConfiguration data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-table-field-image-configuration-property-builder
  "The cfn-template-table-field-image-configuration-property-builder function buildes out new instances of 
CfnTemplate$TableFieldImageConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sizingOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sizing-options` |"
  [stack id config]
  (let [builder (CfnTemplate$TableFieldImageConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :sizing-options)]
      (. builder sizingOptions data))
    (.build builder)))


(defn cfn-template-table-field-link-configuration-property-builder
  "The cfn-template-table-field-link-configuration-property-builder function buildes out new instances of 
CfnTemplate$TableFieldLinkConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `content` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableFieldLinkContentConfigurationProperty | [[cdk.support/lookup-entry]] | `:content` |
| `target` | java.lang.String | [[cdk.support/lookup-entry]] | `:target` |"
  [stack id config]
  (let [builder (CfnTemplate$TableFieldLinkConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :content)]
      (. builder content data))
    (when-let [data (lookup-entry config id :target)]
      (. builder target data))
    (.build builder)))


(defn cfn-template-table-field-link-content-configuration-property-builder
  "The cfn-template-table-field-link-content-configuration-property-builder function buildes out new instances of 
CfnTemplate$TableFieldLinkContentConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customIconContent` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableFieldCustomIconContentProperty | [[cdk.support/lookup-entry]] | `:custom-icon-content` |
| `customTextContent` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-text-content` |"
  [stack id config]
  (let [builder (CfnTemplate$TableFieldLinkContentConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-icon-content)]
      (. builder customIconContent data))
    (when-let [data (lookup-entry config id :custom-text-content)]
      (. builder customTextContent data))
    (.build builder)))


(defn cfn-template-table-field-option-property-builder
  "The cfn-template-table-field-option-property-builder function buildes out new instances of 
CfnTemplate$TableFieldOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `urlStyling` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:url-styling` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |
| `width` | java.lang.String | [[cdk.support/lookup-entry]] | `:width` |"
  [stack id config]
  (let [builder (CfnTemplate$TableFieldOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :url-styling)]
      (. builder urlStyling data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (when-let [data (lookup-entry config id :width)]
      (. builder width data))
    (.build builder)))


(defn cfn-template-table-field-options-property-builder
  "The cfn-template-table-field-options-property-builder function buildes out new instances of 
CfnTemplate$TableFieldOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `order` | java.util.List | [[cdk.support/lookup-entry]] | `:order` |
| `pinnedFieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:pinned-field-options` |
| `selectedFieldOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:selected-field-options` |"
  [stack id config]
  (let [builder (CfnTemplate$TableFieldOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :order)]
      (. builder order data))
    (when-let [data (lookup-entry config id :pinned-field-options)]
      (. builder pinnedFieldOptions data))
    (when-let [data (lookup-entry config id :selected-field-options)]
      (. builder selectedFieldOptions data))
    (.build builder)))


(defn cfn-template-table-field-url-configuration-property-builder
  "The cfn-template-table-field-url-configuration-property-builder function buildes out new instances of 
CfnTemplate$TableFieldURLConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `imageConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableFieldImageConfigurationProperty | [[cdk.support/lookup-entry]] | `:image-configuration` |
| `linkConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableFieldLinkConfigurationProperty | [[cdk.support/lookup-entry]] | `:link-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$TableFieldURLConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :image-configuration)]
      (. builder imageConfiguration data))
    (when-let [data (lookup-entry config id :link-configuration)]
      (. builder linkConfiguration data))
    (.build builder)))


(defn cfn-template-table-field-wells-property-builder
  "The cfn-template-table-field-wells-property-builder function buildes out new instances of 
CfnTemplate$TableFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `tableAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:table-aggregated-field-wells` |
| `tableUnaggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:table-unaggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$TableFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :table-aggregated-field-wells)]
      (. builder tableAggregatedFieldWells data))
    (when-let [data (lookup-entry config id :table-unaggregated-field-wells)]
      (. builder tableUnaggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-table-inline-visualization-property-builder
  "The cfn-template-table-inline-visualization-property-builder function buildes out new instances of 
CfnTemplate$TableInlineVisualizationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataBars` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataBarsOptionsProperty | [[cdk.support/lookup-entry]] | `:data-bars` |"
  [stack id config]
  (let [builder (CfnTemplate$TableInlineVisualizationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-bars)]
      (. builder dataBars data))
    (.build builder)))


(defn cfn-template-table-options-property-builder
  "The cfn-template-table-options-property-builder function buildes out new instances of 
CfnTemplate$TableOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cell-style` |
| `headerStyle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:header-style` |
| `orientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:orientation` |
| `rowAlternateColorOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$RowAlternateColorOptionsProperty | [[cdk.support/lookup-entry]] | `:row-alternate-color-options` |"
  [stack id config]
  (let [builder (CfnTemplate$TableOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :cell-style)]
      (. builder cellStyle data))
    (when-let [data (lookup-entry config id :header-style)]
      (. builder headerStyle data))
    (when-let [data (lookup-entry config id :orientation)]
      (. builder orientation data))
    (when-let [data (lookup-entry config id :row-alternate-color-options)]
      (. builder rowAlternateColorOptions data))
    (.build builder)))


(defn cfn-template-table-paginated-report-options-property-builder
  "The cfn-template-table-paginated-report-options-property-builder function buildes out new instances of 
CfnTemplate$TablePaginatedReportOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `overflowColumnHeaderVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:overflow-column-header-visibility` |
| `verticalOverflowVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:vertical-overflow-visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$TablePaginatedReportOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :overflow-column-header-visibility)]
      (. builder overflowColumnHeaderVisibility data))
    (when-let [data (lookup-entry config id :vertical-overflow-visibility)]
      (. builder verticalOverflowVisibility data))
    (.build builder)))


(defn cfn-template-table-pinned-field-options-property-builder
  "The cfn-template-table-pinned-field-options-property-builder function buildes out new instances of 
CfnTemplate$TablePinnedFieldOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `pinnedLeftFields` | java.util.List | [[cdk.support/lookup-entry]] | `:pinned-left-fields` |"
  [stack id config]
  (let [builder (CfnTemplate$TablePinnedFieldOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :pinned-left-fields)]
      (. builder pinnedLeftFields data))
    (.build builder)))


(defn cfn-template-table-row-conditional-formatting-property-builder
  "The cfn-template-table-row-conditional-formatting-property-builder function buildes out new instances of 
CfnTemplate$TableRowConditionalFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:background-color` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnTemplate$TableRowConditionalFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-color)]
      (. builder backgroundColor data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-template-table-side-border-options-property-builder
  "The cfn-template-table-side-border-options-property-builder function buildes out new instances of 
CfnTemplate$TableSideBorderOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `bottom` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bottom` |
| `innerHorizontal` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:inner-horizontal` |
| `innerVertical` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:inner-vertical` |
| `left` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:left` |
| `right` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:right` |
| `top` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableBorderOptionsProperty | [[cdk.support/lookup-entry]] | `:top` |"
  [stack id config]
  (let [builder (CfnTemplate$TableSideBorderOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :bottom)]
      (. builder bottom data))
    (when-let [data (lookup-entry config id :inner-horizontal)]
      (. builder innerHorizontal data))
    (when-let [data (lookup-entry config id :inner-vertical)]
      (. builder innerVertical data))
    (when-let [data (lookup-entry config id :left)]
      (. builder left data))
    (when-let [data (lookup-entry config id :right)]
      (. builder right data))
    (when-let [data (lookup-entry config id :top)]
      (. builder top data))
    (.build builder)))


(defn cfn-template-table-sort-configuration-property-builder
  "The cfn-template-table-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$TableSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `paginationConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$PaginationConfigurationProperty | [[cdk.support/lookup-entry]] | `:pagination-configuration` |
| `rowSort` | java.util.List | [[cdk.support/lookup-entry]] | `:row-sort` |"
  [stack id config]
  (let [builder (CfnTemplate$TableSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :pagination-configuration)]
      (. builder paginationConfiguration data))
    (when-let [data (lookup-entry config id :row-sort)]
      (. builder rowSort data))
    (.build builder)))


(defn cfn-template-table-style-target-property-builder
  "The cfn-template-table-style-target-property-builder function buildes out new instances of 
CfnTemplate$TableStyleTargetProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellType` | java.lang.String | [[cdk.support/lookup-entry]] | `:cell-type` |"
  [stack id config]
  (let [builder (CfnTemplate$TableStyleTargetProperty$Builder.)]
    (when-let [data (lookup-entry config id :cell-type)]
      (. builder cellType data))
    (.build builder)))


(defn cfn-template-table-unaggregated-field-wells-property-builder
  "The cfn-template-table-unaggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$TableUnaggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$TableUnaggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-table-visual-property-builder
  "The cfn-template-table-visual-property-builder function buildes out new instances of 
CfnTemplate$TableVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `conditionalFormatting` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableConditionalFormattingProperty | [[cdk.support/lookup-entry]] | `:conditional-formatting` |
| `subtitle` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$TableVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :conditional-formatting)]
      (. builder conditionalFormatting data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-template-error-property-builder
  "The cfn-template-template-error-property-builder function buildes out new instances of 
CfnTemplate$TemplateErrorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `message` | java.lang.String | [[cdk.support/lookup-entry]] | `:message` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `violatedEntities` | java.util.List | [[cdk.support/lookup-entry]] | `:violated-entities` |"
  [stack id config]
  (let [builder (CfnTemplate$TemplateErrorProperty$Builder.)]
    (when-let [data (lookup-entry config id :message)]
      (. builder message data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :violated-entities)]
      (. builder violatedEntities data))
    (.build builder)))


(defn cfn-template-template-source-analysis-property-builder
  "The cfn-template-template-source-analysis-property-builder function buildes out new instances of 
CfnTemplate$TemplateSourceAnalysisProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arn` | java.lang.String | [[cdk.support/lookup-entry]] | `:arn` |
| `dataSetReferences` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-set-references` |"
  [stack id config]
  (let [builder (CfnTemplate$TemplateSourceAnalysisProperty$Builder.)]
    (when-let [data (lookup-entry config id :arn)]
      (. builder arn data))
    (when-let [data (lookup-entry config id :data-set-references)]
      (. builder dataSetReferences data))
    (.build builder)))


(defn cfn-template-template-source-entity-property-builder
  "The cfn-template-template-source-entity-property-builder function buildes out new instances of 
CfnTemplate$TemplateSourceEntityProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `sourceAnalysis` | software.amazon.awscdk.services.quicksight.CfnTemplate$TemplateSourceAnalysisProperty | [[cdk.support/lookup-entry]] | `:source-analysis` |
| `sourceTemplate` | software.amazon.awscdk.services.quicksight.CfnTemplate$TemplateSourceTemplateProperty | [[cdk.support/lookup-entry]] | `:source-template` |"
  [stack id config]
  (let [builder (CfnTemplate$TemplateSourceEntityProperty$Builder.)]
    (when-let [data (lookup-entry config id :source-analysis)]
      (. builder sourceAnalysis data))
    (when-let [data (lookup-entry config id :source-template)]
      (. builder sourceTemplate data))
    (.build builder)))


(defn cfn-template-template-source-template-property-builder
  "The cfn-template-template-source-template-property-builder function buildes out new instances of 
CfnTemplate$TemplateSourceTemplateProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arn` | java.lang.String | [[cdk.support/lookup-entry]] | `:arn` |"
  [stack id config]
  (let [builder (CfnTemplate$TemplateSourceTemplateProperty$Builder.)]
    (when-let [data (lookup-entry config id :arn)]
      (. builder arn data))
    (.build builder)))


(defn cfn-template-template-version-definition-property-builder
  "The cfn-template-template-version-definition-property-builder function buildes out new instances of 
CfnTemplate$TemplateVersionDefinitionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `analysisDefaults` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:analysis-defaults` |
| `calculatedFields` | java.util.List | [[cdk.support/lookup-entry]] | `:calculated-fields` |
| `columnConfigurations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column-configurations` |
| `dataSetConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:data-set-configurations` |
| `filterGroups` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:filter-groups` |
| `options` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:options` |
| `parameterDeclarations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:parameter-declarations` |
| `sheets` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sheets` |"
  [stack id config]
  (let [builder (CfnTemplate$TemplateVersionDefinitionProperty$Builder.)]
    (when-let [data (lookup-entry config id :analysis-defaults)]
      (. builder analysisDefaults data))
    (when-let [data (lookup-entry config id :calculated-fields)]
      (. builder calculatedFields data))
    (when-let [data (lookup-entry config id :column-configurations)]
      (. builder columnConfigurations data))
    (when-let [data (lookup-entry config id :data-set-configurations)]
      (. builder dataSetConfigurations data))
    (when-let [data (lookup-entry config id :filter-groups)]
      (. builder filterGroups data))
    (when-let [data (lookup-entry config id :options)]
      (. builder options data))
    (when-let [data (lookup-entry config id :parameter-declarations)]
      (. builder parameterDeclarations data))
    (when-let [data (lookup-entry config id :sheets)]
      (. builder sheets data))
    (.build builder)))


(defn cfn-template-template-version-property-builder
  "The cfn-template-template-version-property-builder function buildes out new instances of 
CfnTemplate$TemplateVersionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `createdTime` | java.lang.String | [[cdk.support/lookup-entry]] | `:created-time` |
| `dataSetConfigurations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-set-configurations` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `errors` | java.util.List | [[cdk.support/lookup-entry]] | `:errors` |
| `sheets` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sheets` |
| `sourceEntityArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:source-entity-arn` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `themeArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:theme-arn` |
| `versionNumber` | java.lang.Number | [[cdk.support/lookup-entry]] | `:version-number` |"
  [stack id config]
  (let [builder (CfnTemplate$TemplateVersionProperty$Builder.)]
    (when-let [data (lookup-entry config id :created-time)]
      (. builder createdTime data))
    (when-let [data (lookup-entry config id :data-set-configurations)]
      (. builder dataSetConfigurations data))
    (when-let [data (lookup-entry config id :description)]
      (. builder description data))
    (when-let [data (lookup-entry config id :errors)]
      (. builder errors data))
    (when-let [data (lookup-entry config id :sheets)]
      (. builder sheets data))
    (when-let [data (lookup-entry config id :source-entity-arn)]
      (. builder sourceEntityArn data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (when-let [data (lookup-entry config id :theme-arn)]
      (. builder themeArn data))
    (when-let [data (lookup-entry config id :version-number)]
      (. builder versionNumber data))
    (.build builder)))


(defn cfn-template-text-area-control-display-options-property-builder
  "The cfn-template-text-area-control-display-options-property-builder function buildes out new instances of 
CfnTemplate$TextAreaControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$SheetControlInfoIconLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `placeholderOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:placeholder-options` |
| `titleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnTemplate$TextAreaControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :placeholder-options)]
      (. builder placeholderOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-template-text-conditional-format-property-builder
  "The cfn-template-text-conditional-format-property-builder function buildes out new instances of 
CfnTemplate$TextConditionalFormatProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `backgroundColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:background-color` |
| `icon` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:icon` |
| `textColor` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:text-color` |"
  [stack id config]
  (let [builder (CfnTemplate$TextConditionalFormatProperty$Builder.)]
    (when-let [data (lookup-entry config id :background-color)]
      (. builder backgroundColor data))
    (when-let [data (lookup-entry config id :icon)]
      (. builder icon data))
    (when-let [data (lookup-entry config id :text-color)]
      (. builder textColor data))
    (.build builder)))


(defn cfn-template-text-control-placeholder-options-property-builder
  "The cfn-template-text-control-placeholder-options-property-builder function buildes out new instances of 
CfnTemplate$TextControlPlaceholderOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$TextControlPlaceholderOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-text-field-control-display-options-property-builder
  "The cfn-template-text-field-control-display-options-property-builder function buildes out new instances of 
CfnTemplate$TextFieldControlDisplayOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `infoIconLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:info-icon-label-options` |
| `placeholderOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:placeholder-options` |
| `titleOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title-options` |"
  [stack id config]
  (let [builder (CfnTemplate$TextFieldControlDisplayOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :info-icon-label-options)]
      (. builder infoIconLabelOptions data))
    (when-let [data (lookup-entry config id :placeholder-options)]
      (. builder placeholderOptions data))
    (when-let [data (lookup-entry config id :title-options)]
      (. builder titleOptions data))
    (.build builder)))


(defn cfn-template-thousand-separator-options-property-builder
  "The cfn-template-thousand-separator-options-property-builder function buildes out new instances of 
CfnTemplate$ThousandSeparatorOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `symbol` | java.lang.String | [[cdk.support/lookup-entry]] | `:symbol` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$ThousandSeparatorOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :symbol)]
      (. builder symbol data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-time-based-forecast-properties-property-builder
  "The cfn-template-time-based-forecast-properties-property-builder function buildes out new instances of 
CfnTemplate$TimeBasedForecastPropertiesProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `lowerBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:lower-boundary` |
| `periodsBackward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-backward` |
| `periodsForward` | java.lang.Number | [[cdk.support/lookup-entry]] | `:periods-forward` |
| `predictionInterval` | java.lang.Number | [[cdk.support/lookup-entry]] | `:prediction-interval` |
| `seasonality` | java.lang.Number | [[cdk.support/lookup-entry]] | `:seasonality` |
| `upperBoundary` | java.lang.Number | [[cdk.support/lookup-entry]] | `:upper-boundary` |"
  [stack id config]
  (let [builder (CfnTemplate$TimeBasedForecastPropertiesProperty$Builder.)]
    (when-let [data (lookup-entry config id :lower-boundary)]
      (. builder lowerBoundary data))
    (when-let [data (lookup-entry config id :periods-backward)]
      (. builder periodsBackward data))
    (when-let [data (lookup-entry config id :periods-forward)]
      (. builder periodsForward data))
    (when-let [data (lookup-entry config id :prediction-interval)]
      (. builder predictionInterval data))
    (when-let [data (lookup-entry config id :seasonality)]
      (. builder seasonality data))
    (when-let [data (lookup-entry config id :upper-boundary)]
      (. builder upperBoundary data))
    (.build builder)))


(defn cfn-template-time-equality-filter-property-builder
  "The cfn-template-time-equality-filter-property-builder function buildes out new instances of 
CfnTemplate$TimeEqualityFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `rollingDate` | software.amazon.awscdk.services.quicksight.CfnTemplate$RollingDateConfigurationProperty | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |
| `value` | java.lang.String | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$TimeEqualityFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (when-let [data (lookup-entry config id :rolling-date)]
      (. builder rollingDate data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-time-range-drill-down-filter-property-builder
  "The cfn-template-time-range-drill-down-filter-property-builder function buildes out new instances of 
CfnTemplate$TimeRangeDrillDownFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `rangeMaximum` | java.lang.String | [[cdk.support/lookup-entry]] | `:range-maximum` |
| `rangeMinimum` | java.lang.String | [[cdk.support/lookup-entry]] | `:range-minimum` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnTemplate$TimeRangeDrillDownFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :range-maximum)]
      (. builder rangeMaximum data))
    (when-let [data (lookup-entry config id :range-minimum)]
      (. builder rangeMinimum data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-template-time-range-filter-property-builder
  "The cfn-template-time-range-filter-property-builder function buildes out new instances of 
CfnTemplate$TimeRangeFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `excludePeriodConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:exclude-period-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `includeMaximum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-maximum` |
| `includeMinimum` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:include-minimum` |
| `nullOption` | java.lang.String | [[cdk.support/lookup-entry]] | `:null-option` |
| `rangeMaximumValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-maximum-value` |
| `rangeMinimumValue` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-minimum-value` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnTemplate$TimeRangeFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :exclude-period-configuration)]
      (. builder excludePeriodConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :include-maximum)]
      (. builder includeMaximum data))
    (when-let [data (lookup-entry config id :include-minimum)]
      (. builder includeMinimum data))
    (when-let [data (lookup-entry config id :null-option)]
      (. builder nullOption data))
    (when-let [data (lookup-entry config id :range-maximum-value)]
      (. builder rangeMaximumValue data))
    (when-let [data (lookup-entry config id :range-minimum-value)]
      (. builder rangeMinimumValue data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-template-time-range-filter-value-property-builder
  "The cfn-template-time-range-filter-value-property-builder function buildes out new instances of 
CfnTemplate$TimeRangeFilterValueProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `parameter` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter` |
| `rollingDate` | software.amazon.awscdk.services.quicksight.CfnTemplate$RollingDateConfigurationProperty | [[cdk.support/lookup-entry]] | `:rolling-date` |
| `staticValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:static-value` |"
  [stack id config]
  (let [builder (CfnTemplate$TimeRangeFilterValueProperty$Builder.)]
    (when-let [data (lookup-entry config id :parameter)]
      (. builder parameter data))
    (when-let [data (lookup-entry config id :rolling-date)]
      (. builder rollingDate data))
    (when-let [data (lookup-entry config id :static-value)]
      (. builder staticValue data))
    (.build builder)))


(defn cfn-template-tooltip-item-property-builder
  "The cfn-template-tooltip-item-property-builder function buildes out new instances of 
CfnTemplate$TooltipItemProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `columnTooltipItem` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnTooltipItemProperty | [[cdk.support/lookup-entry]] | `:column-tooltip-item` |
| `fieldTooltipItem` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-tooltip-item` |"
  [stack id config]
  (let [builder (CfnTemplate$TooltipItemProperty$Builder.)]
    (when-let [data (lookup-entry config id :column-tooltip-item)]
      (. builder columnTooltipItem data))
    (when-let [data (lookup-entry config id :field-tooltip-item)]
      (. builder fieldTooltipItem data))
    (.build builder)))


(defn cfn-template-tooltip-options-property-builder
  "The cfn-template-tooltip-options-property-builder function buildes out new instances of 
CfnTemplate$TooltipOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldBasedTooltip` | software.amazon.awscdk.services.quicksight.CfnTemplate$FieldBasedTooltipProperty | [[cdk.support/lookup-entry]] | `:field-based-tooltip` |
| `selectedTooltipType` | java.lang.String | [[cdk.support/lookup-entry]] | `:selected-tooltip-type` |
| `tooltipVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:tooltip-visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$TooltipOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-based-tooltip)]
      (. builder fieldBasedTooltip data))
    (when-let [data (lookup-entry config id :selected-tooltip-type)]
      (. builder selectedTooltipType data))
    (when-let [data (lookup-entry config id :tooltip-visibility)]
      (. builder tooltipVisibility data))
    (.build builder)))


(defn cfn-template-top-bottom-filter-property-builder
  "The cfn-template-top-bottom-filter-property-builder function buildes out new instances of 
CfnTemplate$TopBottomFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregationSortConfigurations` | java.util.List | [[cdk.support/lookup-entry]] | `:aggregation-sort-configurations` |
| `column` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColumnIdentifierProperty | [[cdk.support/lookup-entry]] | `:column` |
| `defaultFilterControlConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-filter-control-configuration` |
| `filterId` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-id` |
| `limit` | java.lang.Number | [[cdk.support/lookup-entry]] | `:limit` |
| `parameterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:parameter-name` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnTemplate$TopBottomFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation-sort-configurations)]
      (. builder aggregationSortConfigurations data))
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :default-filter-control-configuration)]
      (. builder defaultFilterControlConfiguration data))
    (when-let [data (lookup-entry config id :filter-id)]
      (. builder filterId data))
    (when-let [data (lookup-entry config id :limit)]
      (. builder limit data))
    (when-let [data (lookup-entry config id :parameter-name)]
      (. builder parameterName data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-template-top-bottom-movers-computation-property-builder
  "The cfn-template-top-bottom-movers-computation-property-builder function buildes out new instances of 
CfnTemplate$TopBottomMoversComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `moverSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:mover-size` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `sortOrder` | java.lang.String | [[cdk.support/lookup-entry]] | `:sort-order` |
| `time` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:time` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.services.quicksight.CfnTemplate$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$TopBottomMoversComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :mover-size)]
      (. builder moverSize data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :sort-order)]
      (. builder sortOrder data))
    (when-let [data (lookup-entry config id :time)]
      (. builder time data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-top-bottom-ranked-computation-property-builder
  "The cfn-template-top-bottom-ranked-computation-property-builder function buildes out new instances of 
CfnTemplate$TopBottomRankedComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `resultSize` | java.lang.Number | [[cdk.support/lookup-entry]] | `:result-size` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |
| `value` | software.amazon.awscdk.services.quicksight.CfnTemplate$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$TopBottomRankedComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :result-size)]
      (. builder resultSize data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-total-aggregation-computation-property-builder
  "The cfn-template-total-aggregation-computation-property-builder function buildes out new instances of 
CfnTemplate$TotalAggregationComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `value` | software.amazon.awscdk.services.quicksight.CfnTemplate$MeasureFieldProperty | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$TotalAggregationComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-total-aggregation-function-property-builder
  "The cfn-template-total-aggregation-function-property-builder function buildes out new instances of 
CfnTemplate$TotalAggregationFunctionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `simpleTotalAggregationFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:simple-total-aggregation-function` |"
  [stack id config]
  (let [builder (CfnTemplate$TotalAggregationFunctionProperty$Builder.)]
    (when-let [data (lookup-entry config id :simple-total-aggregation-function)]
      (. builder simpleTotalAggregationFunction data))
    (.build builder)))


(defn cfn-template-total-aggregation-option-property-builder
  "The cfn-template-total-aggregation-option-property-builder function buildes out new instances of 
CfnTemplate$TotalAggregationOptionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `totalAggregationFunction` | software.amazon.awscdk.services.quicksight.CfnTemplate$TotalAggregationFunctionProperty | [[cdk.support/lookup-entry]] | `:total-aggregation-function` |"
  [stack id config]
  (let [builder (CfnTemplate$TotalAggregationOptionProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :total-aggregation-function)]
      (. builder totalAggregationFunction data))
    (.build builder)))


(defn cfn-template-total-options-property-builder
  "The cfn-template-total-options-property-builder function buildes out new instances of 
CfnTemplate$TotalOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `customLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-label` |
| `placement` | java.lang.String | [[cdk.support/lookup-entry]] | `:placement` |
| `scrollStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:scroll-status` |
| `totalAggregationOptions` | java.util.List | [[cdk.support/lookup-entry]] | `:total-aggregation-options` |
| `totalCellStyle` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableCellStyleProperty | [[cdk.support/lookup-entry]] | `:total-cell-style` |
| `totalsVisibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:totals-visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$TotalOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :custom-label)]
      (. builder customLabel data))
    (when-let [data (lookup-entry config id :placement)]
      (. builder placement data))
    (when-let [data (lookup-entry config id :scroll-status)]
      (. builder scrollStatus data))
    (when-let [data (lookup-entry config id :total-aggregation-options)]
      (. builder totalAggregationOptions data))
    (when-let [data (lookup-entry config id :total-cell-style)]
      (. builder totalCellStyle data))
    (when-let [data (lookup-entry config id :totals-visibility)]
      (. builder totalsVisibility data))
    (.build builder)))


(defn cfn-template-tree-map-aggregated-field-wells-property-builder
  "The cfn-template-tree-map-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$TreeMapAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:colors` |
| `groups` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:groups` |
| `sizes` | java.util.List | [[cdk.support/lookup-entry]] | `:sizes` |"
  [stack id config]
  (let [builder (CfnTemplate$TreeMapAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :groups)]
      (. builder groups data))
    (when-let [data (lookup-entry config id :sizes)]
      (. builder sizes data))
    (.build builder)))


(defn cfn-template-tree-map-configuration-property-builder
  "The cfn-template-tree-map-configuration-property-builder function buildes out new instances of 
CfnTemplate$TreeMapConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colorLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-label-options` |
| `colorScale` | software.amazon.awscdk.services.quicksight.CfnTemplate$ColorScaleProperty | [[cdk.support/lookup-entry]] | `:color-scale` |
| `dataLabels` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `groupLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-label-options` |
| `legend` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:legend` |
| `sizeLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:size-label-options` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `tooltip` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tooltip` |"
  [stack id config]
  (let [builder (CfnTemplate$TreeMapConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :color-label-options)]
      (. builder colorLabelOptions data))
    (when-let [data (lookup-entry config id :color-scale)]
      (. builder colorScale data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :group-label-options)]
      (. builder groupLabelOptions data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :size-label-options)]
      (. builder sizeLabelOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :tooltip)]
      (. builder tooltip data))
    (.build builder)))


(defn cfn-template-tree-map-field-wells-property-builder
  "The cfn-template-tree-map-field-wells-property-builder function buildes out new instances of 
CfnTemplate$TreeMapFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treeMapAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tree-map-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$TreeMapFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :tree-map-aggregated-field-wells)]
      (. builder treeMapAggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-tree-map-sort-configuration-property-builder
  "The cfn-template-tree-map-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$TreeMapSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `treeMapGroupItemsLimitConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$ItemsLimitConfigurationProperty | [[cdk.support/lookup-entry]] | `:tree-map-group-items-limit-configuration` |
| `treeMapSort` | java.util.List | [[cdk.support/lookup-entry]] | `:tree-map-sort` |"
  [stack id config]
  (let [builder (CfnTemplate$TreeMapSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :tree-map-group-items-limit-configuration)]
      (. builder treeMapGroupItemsLimitConfiguration data))
    (when-let [data (lookup-entry config id :tree-map-sort)]
      (. builder treeMapSort data))
    (.build builder)))


(defn cfn-template-tree-map-visual-property-builder
  "The cfn-template-tree-map-visual-property-builder function buildes out new instances of 
CfnTemplate$TreeMapVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$TreeMapConfigurationProperty | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$TreeMapVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-trend-arrow-options-property-builder
  "The cfn-template-trend-arrow-options-property-builder function buildes out new instances of 
CfnTemplate$TrendArrowOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$TrendArrowOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-unaggregated-field-property-builder
  "The cfn-template-unaggregated-field-property-builder function buildes out new instances of 
CfnTemplate$UnaggregatedFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `column` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:column` |
| `fieldId` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-id` |
| `formatConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:format-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$UnaggregatedFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :column)]
      (. builder column data))
    (when-let [data (lookup-entry config id :field-id)]
      (. builder fieldId data))
    (when-let [data (lookup-entry config id :format-configuration)]
      (. builder formatConfiguration data))
    (.build builder)))


(defn cfn-template-unique-values-computation-property-builder
  "The cfn-template-unique-values-computation-property-builder function buildes out new instances of 
CfnTemplate$UniqueValuesComputationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `category` | software.amazon.awscdk.services.quicksight.CfnTemplate$DimensionFieldProperty | [[cdk.support/lookup-entry]] | `:category` |
| `computationId` | java.lang.String | [[cdk.support/lookup-entry]] | `:computation-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |"
  [stack id config]
  (let [builder (CfnTemplate$UniqueValuesComputationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category)]
      (. builder category data))
    (when-let [data (lookup-entry config id :computation-id)]
      (. builder computationId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (.build builder)))


(defn cfn-template-validation-strategy-property-builder
  "The cfn-template-validation-strategy-property-builder function buildes out new instances of 
CfnTemplate$ValidationStrategyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `mode` | java.lang.String | [[cdk.support/lookup-entry]] | `:mode` |"
  [stack id config]
  (let [builder (CfnTemplate$ValidationStrategyProperty$Builder.)]
    (when-let [data (lookup-entry config id :mode)]
      (. builder mode data))
    (.build builder)))


(defn cfn-template-visible-range-options-property-builder
  "The cfn-template-visible-range-options-property-builder function buildes out new instances of 
CfnTemplate$VisibleRangeOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `percentRange` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:percent-range` |"
  [stack id config]
  (let [builder (CfnTemplate$VisibleRangeOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :percent-range)]
      (. builder percentRange data))
    (.build builder)))


(defn cfn-template-visual-custom-action-operation-property-builder
  "The cfn-template-visual-custom-action-operation-property-builder function buildes out new instances of 
CfnTemplate$VisualCustomActionOperationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `filterOperation` | software.amazon.awscdk.services.quicksight.CfnTemplate$CustomActionFilterOperationProperty | [[cdk.support/lookup-entry]] | `:filter-operation` |
| `navigationOperation` | software.amazon.awscdk.services.quicksight.CfnTemplate$CustomActionNavigationOperationProperty | [[cdk.support/lookup-entry]] | `:navigation-operation` |
| `setParametersOperation` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:set-parameters-operation` |
| `urlOperation` | software.amazon.awscdk.services.quicksight.CfnTemplate$CustomActionURLOperationProperty | [[cdk.support/lookup-entry]] | `:url-operation` |"
  [stack id config]
  (let [builder (CfnTemplate$VisualCustomActionOperationProperty$Builder.)]
    (when-let [data (lookup-entry config id :filter-operation)]
      (. builder filterOperation data))
    (when-let [data (lookup-entry config id :navigation-operation)]
      (. builder navigationOperation data))
    (when-let [data (lookup-entry config id :set-parameters-operation)]
      (. builder setParametersOperation data))
    (when-let [data (lookup-entry config id :url-operation)]
      (. builder urlOperation data))
    (.build builder)))


(defn cfn-template-visual-custom-action-property-builder
  "The cfn-template-visual-custom-action-property-builder function buildes out new instances of 
CfnTemplate$VisualCustomActionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actionOperations` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:action-operations` |
| `customActionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:custom-action-id` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `trigger` | java.lang.String | [[cdk.support/lookup-entry]] | `:trigger` |"
  [stack id config]
  (let [builder (CfnTemplate$VisualCustomActionProperty$Builder.)]
    (when-let [data (lookup-entry config id :action-operations)]
      (. builder actionOperations data))
    (when-let [data (lookup-entry config id :custom-action-id)]
      (. builder customActionId data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (when-let [data (lookup-entry config id :trigger)]
      (. builder trigger data))
    (.build builder)))


(defn cfn-template-visual-palette-property-builder
  "The cfn-template-visual-palette-property-builder function buildes out new instances of 
CfnTemplate$VisualPaletteProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `chartColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:chart-color` |
| `colorMap` | java.util.List | [[cdk.support/lookup-entry]] | `:color-map` |"
  [stack id config]
  (let [builder (CfnTemplate$VisualPaletteProperty$Builder.)]
    (when-let [data (lookup-entry config id :chart-color)]
      (. builder chartColor data))
    (when-let [data (lookup-entry config id :color-map)]
      (. builder colorMap data))
    (.build builder)))


(defn cfn-template-visual-property-builder
  "The cfn-template-visual-property-builder function buildes out new instances of 
CfnTemplate$VisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `barChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:bar-chart-visual` |
| `boxPlotVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:box-plot-visual` |
| `comboChartVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$ComboChartVisualProperty | [[cdk.support/lookup-entry]] | `:combo-chart-visual` |
| `customContentVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:custom-content-visual` |
| `emptyVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:empty-visual` |
| `filledMapVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$FilledMapVisualProperty | [[cdk.support/lookup-entry]] | `:filled-map-visual` |
| `funnelChartVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$FunnelChartVisualProperty | [[cdk.support/lookup-entry]] | `:funnel-chart-visual` |
| `gaugeChartVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$GaugeChartVisualProperty | [[cdk.support/lookup-entry]] | `:gauge-chart-visual` |
| `geospatialMapVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:geospatial-map-visual` |
| `heatMapVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:heat-map-visual` |
| `histogramVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:histogram-visual` |
| `insightVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:insight-visual` |
| `kpiVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$KPIVisualProperty | [[cdk.support/lookup-entry]] | `:kpi-visual` |
| `lineChartVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$LineChartVisualProperty | [[cdk.support/lookup-entry]] | `:line-chart-visual` |
| `pieChartVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$PieChartVisualProperty | [[cdk.support/lookup-entry]] | `:pie-chart-visual` |
| `pivotTableVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$PivotTableVisualProperty | [[cdk.support/lookup-entry]] | `:pivot-table-visual` |
| `radarChartVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:radar-chart-visual` |
| `sankeyDiagramVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sankey-diagram-visual` |
| `scatterPlotVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$ScatterPlotVisualProperty | [[cdk.support/lookup-entry]] | `:scatter-plot-visual` |
| `tableVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$TableVisualProperty | [[cdk.support/lookup-entry]] | `:table-visual` |
| `treeMapVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:tree-map-visual` |
| `waterfallVisual` | software.amazon.awscdk.services.quicksight.CfnTemplate$WaterfallVisualProperty | [[cdk.support/lookup-entry]] | `:waterfall-visual` |
| `wordCloudVisual` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:word-cloud-visual` |"
  [stack id config]
  (let [builder (CfnTemplate$VisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :bar-chart-visual)]
      (. builder barChartVisual data))
    (when-let [data (lookup-entry config id :box-plot-visual)]
      (. builder boxPlotVisual data))
    (when-let [data (lookup-entry config id :combo-chart-visual)]
      (. builder comboChartVisual data))
    (when-let [data (lookup-entry config id :custom-content-visual)]
      (. builder customContentVisual data))
    (when-let [data (lookup-entry config id :empty-visual)]
      (. builder emptyVisual data))
    (when-let [data (lookup-entry config id :filled-map-visual)]
      (. builder filledMapVisual data))
    (when-let [data (lookup-entry config id :funnel-chart-visual)]
      (. builder funnelChartVisual data))
    (when-let [data (lookup-entry config id :gauge-chart-visual)]
      (. builder gaugeChartVisual data))
    (when-let [data (lookup-entry config id :geospatial-map-visual)]
      (. builder geospatialMapVisual data))
    (when-let [data (lookup-entry config id :heat-map-visual)]
      (. builder heatMapVisual data))
    (when-let [data (lookup-entry config id :histogram-visual)]
      (. builder histogramVisual data))
    (when-let [data (lookup-entry config id :insight-visual)]
      (. builder insightVisual data))
    (when-let [data (lookup-entry config id :kpi-visual)]
      (. builder kpiVisual data))
    (when-let [data (lookup-entry config id :line-chart-visual)]
      (. builder lineChartVisual data))
    (when-let [data (lookup-entry config id :pie-chart-visual)]
      (. builder pieChartVisual data))
    (when-let [data (lookup-entry config id :pivot-table-visual)]
      (. builder pivotTableVisual data))
    (when-let [data (lookup-entry config id :radar-chart-visual)]
      (. builder radarChartVisual data))
    (when-let [data (lookup-entry config id :sankey-diagram-visual)]
      (. builder sankeyDiagramVisual data))
    (when-let [data (lookup-entry config id :scatter-plot-visual)]
      (. builder scatterPlotVisual data))
    (when-let [data (lookup-entry config id :table-visual)]
      (. builder tableVisual data))
    (when-let [data (lookup-entry config id :tree-map-visual)]
      (. builder treeMapVisual data))
    (when-let [data (lookup-entry config id :waterfall-visual)]
      (. builder waterfallVisual data))
    (when-let [data (lookup-entry config id :word-cloud-visual)]
      (. builder wordCloudVisual data))
    (.build builder)))


(defn cfn-template-visual-subtitle-label-options-property-builder
  "The cfn-template-visual-subtitle-label-options-property-builder function buildes out new instances of 
CfnTemplate$VisualSubtitleLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatText` | software.amazon.awscdk.services.quicksight.CfnTemplate$LongFormatTextProperty | [[cdk.support/lookup-entry]] | `:format-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$VisualSubtitleLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :format-text)]
      (. builder formatText data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-visual-title-label-options-property-builder
  "The cfn-template-visual-title-label-options-property-builder function buildes out new instances of 
CfnTemplate$VisualTitleLabelOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `formatText` | software.amazon.awscdk.services.quicksight.CfnTemplate$ShortFormatTextProperty | [[cdk.support/lookup-entry]] | `:format-text` |
| `visibility` | java.lang.String | [[cdk.support/lookup-entry]] | `:visibility` |"
  [stack id config]
  (let [builder (CfnTemplate$VisualTitleLabelOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :format-text)]
      (. builder formatText data))
    (when-let [data (lookup-entry config id :visibility)]
      (. builder visibility data))
    (.build builder)))


(defn cfn-template-waterfall-chart-aggregated-field-wells-property-builder
  "The cfn-template-waterfall-chart-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$WaterfallChartAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `breakdowns` | java.util.List | [[cdk.support/lookup-entry]] | `:breakdowns` |
| `categories` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:categories` |
| `values` | java.util.List | [[cdk.support/lookup-entry]] | `:values` |"
  [stack id config]
  (let [builder (CfnTemplate$WaterfallChartAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :breakdowns)]
      (. builder breakdowns data))
    (when-let [data (lookup-entry config id :categories)]
      (. builder categories data))
    (when-let [data (lookup-entry config id :values)]
      (. builder values data))
    (.build builder)))


(defn cfn-template-waterfall-chart-color-configuration-property-builder
  "The cfn-template-waterfall-chart-color-configuration-property-builder function buildes out new instances of 
CfnTemplate$WaterfallChartColorConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupColorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-color-configuration` |"
  [stack id config]
  (let [builder (CfnTemplate$WaterfallChartColorConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :group-color-configuration)]
      (. builder groupColorConfiguration data))
    (.build builder)))


(defn cfn-template-waterfall-chart-configuration-property-builder
  "The cfn-template-waterfall-chart-configuration-property-builder function buildes out new instances of 
CfnTemplate$WaterfallChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryAxisDisplayOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$AxisDisplayOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis-display-options` |
| `categoryAxisLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-axis-label-options` |
| `colorConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:color-configuration` |
| `dataLabels` | software.amazon.awscdk.services.quicksight.CfnTemplate$DataLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:data-labels` |
| `fieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$WaterfallChartFieldWellsProperty | [[cdk.support/lookup-entry]] | `:field-wells` |
| `legend` | software.amazon.awscdk.services.quicksight.CfnTemplate$LegendOptionsProperty | [[cdk.support/lookup-entry]] | `:legend` |
| `primaryYAxisDisplayOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-display-options` |
| `primaryYAxisLabelOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:primary-y-axis-label-options` |
| `sortConfiguration` | software.amazon.awscdk.services.quicksight.CfnTemplate$WaterfallChartSortConfigurationProperty | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `visualPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:visual-palette` |
| `waterfallChartOptions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:waterfall-chart-options` |"
  [stack id config]
  (let [builder (CfnTemplate$WaterfallChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-axis-display-options)]
      (. builder categoryAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :category-axis-label-options)]
      (. builder categoryAxisLabelOptions data))
    (when-let [data (lookup-entry config id :color-configuration)]
      (. builder colorConfiguration data))
    (when-let [data (lookup-entry config id :data-labels)]
      (. builder dataLabels data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :legend)]
      (. builder legend data))
    (when-let [data (lookup-entry config id :primary-y-axis-display-options)]
      (. builder primaryYAxisDisplayOptions data))
    (when-let [data (lookup-entry config id :primary-y-axis-label-options)]
      (. builder primaryYAxisLabelOptions data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :visual-palette)]
      (. builder visualPalette data))
    (when-let [data (lookup-entry config id :waterfall-chart-options)]
      (. builder waterfallChartOptions data))
    (.build builder)))


(defn cfn-template-waterfall-chart-field-wells-property-builder
  "The cfn-template-waterfall-chart-field-wells-property-builder function buildes out new instances of 
CfnTemplate$WaterfallChartFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `waterfallChartAggregatedFieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:waterfall-chart-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$WaterfallChartFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :waterfall-chart-aggregated-field-wells)]
      (. builder waterfallChartAggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-waterfall-chart-group-color-configuration-property-builder
  "The cfn-template-waterfall-chart-group-color-configuration-property-builder function buildes out new instances of 
CfnTemplate$WaterfallChartGroupColorConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `negativeBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:negative-bar-color` |
| `positiveBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:positive-bar-color` |
| `totalBarColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:total-bar-color` |"
  [stack id config]
  (let [builder (CfnTemplate$WaterfallChartGroupColorConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :negative-bar-color)]
      (. builder negativeBarColor data))
    (when-let [data (lookup-entry config id :positive-bar-color)]
      (. builder positiveBarColor data))
    (when-let [data (lookup-entry config id :total-bar-color)]
      (. builder totalBarColor data))
    (.build builder)))


(defn cfn-template-waterfall-chart-options-property-builder
  "The cfn-template-waterfall-chart-options-property-builder function buildes out new instances of 
CfnTemplate$WaterfallChartOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `totalBarLabel` | java.lang.String | [[cdk.support/lookup-entry]] | `:total-bar-label` |"
  [stack id config]
  (let [builder (CfnTemplate$WaterfallChartOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :total-bar-label)]
      (. builder totalBarLabel data))
    (.build builder)))


(defn cfn-template-waterfall-chart-sort-configuration-property-builder
  "The cfn-template-waterfall-chart-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$WaterfallChartSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `breakdownItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:breakdown-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |"
  [stack id config]
  (let [builder (CfnTemplate$WaterfallChartSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :breakdown-items-limit)]
      (. builder breakdownItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (.build builder)))


(defn cfn-template-waterfall-visual-property-builder
  "The cfn-template-waterfall-visual-property-builder function buildes out new instances of 
CfnTemplate$WaterfallVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$WaterfallVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-template-what-if-point-scenario-property-builder
  "The cfn-template-what-if-point-scenario-property-builder function buildes out new instances of 
CfnTemplate$WhatIfPointScenarioProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `date` | java.lang.String | [[cdk.support/lookup-entry]] | `:date` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$WhatIfPointScenarioProperty$Builder.)]
    (when-let [data (lookup-entry config id :date)]
      (. builder date data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-what-if-range-scenario-property-builder
  "The cfn-template-what-if-range-scenario-property-builder function buildes out new instances of 
CfnTemplate$WhatIfRangeScenarioProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `endDate` | java.lang.String | [[cdk.support/lookup-entry]] | `:end-date` |
| `startDate` | java.lang.String | [[cdk.support/lookup-entry]] | `:start-date` |
| `value` | java.lang.Number | [[cdk.support/lookup-entry]] | `:value` |"
  [stack id config]
  (let [builder (CfnTemplate$WhatIfRangeScenarioProperty$Builder.)]
    (when-let [data (lookup-entry config id :end-date)]
      (. builder endDate data))
    (when-let [data (lookup-entry config id :start-date)]
      (. builder startDate data))
    (when-let [data (lookup-entry config id :value)]
      (. builder value data))
    (.build builder)))


(defn cfn-template-word-cloud-aggregated-field-wells-property-builder
  "The cfn-template-word-cloud-aggregated-field-wells-property-builder function buildes out new instances of 
CfnTemplate$WordCloudAggregatedFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `groupBy` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:group-by` |
| `size` | java.util.List | [[cdk.support/lookup-entry]] | `:size` |"
  [stack id config]
  (let [builder (CfnTemplate$WordCloudAggregatedFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :group-by)]
      (. builder groupBy data))
    (when-let [data (lookup-entry config id :size)]
      (. builder size data))
    (.build builder)))


(defn cfn-template-word-cloud-chart-configuration-property-builder
  "The cfn-template-word-cloud-chart-configuration-property-builder function buildes out new instances of 
CfnTemplate$WordCloudChartConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryLabelOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$ChartAxisLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:category-label-options` |
| `fieldWells` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:field-wells` |
| `sortConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:sort-configuration` |
| `wordCloudOptions` | software.amazon.awscdk.services.quicksight.CfnTemplate$WordCloudOptionsProperty | [[cdk.support/lookup-entry]] | `:word-cloud-options` |"
  [stack id config]
  (let [builder (CfnTemplate$WordCloudChartConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-label-options)]
      (. builder categoryLabelOptions data))
    (when-let [data (lookup-entry config id :field-wells)]
      (. builder fieldWells data))
    (when-let [data (lookup-entry config id :sort-configuration)]
      (. builder sortConfiguration data))
    (when-let [data (lookup-entry config id :word-cloud-options)]
      (. builder wordCloudOptions data))
    (.build builder)))


(defn cfn-template-word-cloud-field-wells-property-builder
  "The cfn-template-word-cloud-field-wells-property-builder function buildes out new instances of 
CfnTemplate$WordCloudFieldWellsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `wordCloudAggregatedFieldWells` | software.amazon.awscdk.services.quicksight.CfnTemplate$WordCloudAggregatedFieldWellsProperty | [[cdk.support/lookup-entry]] | `:word-cloud-aggregated-field-wells` |"
  [stack id config]
  (let [builder (CfnTemplate$WordCloudFieldWellsProperty$Builder.)]
    (when-let [data (lookup-entry config id :word-cloud-aggregated-field-wells)]
      (. builder wordCloudAggregatedFieldWells data))
    (.build builder)))


(defn cfn-template-word-cloud-options-property-builder
  "The cfn-template-word-cloud-options-property-builder function buildes out new instances of 
CfnTemplate$WordCloudOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cloudLayout` | java.lang.String | [[cdk.support/lookup-entry]] | `:cloud-layout` |
| `maximumStringLength` | java.lang.Number | [[cdk.support/lookup-entry]] | `:maximum-string-length` |
| `wordCasing` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-casing` |
| `wordOrientation` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-orientation` |
| `wordPadding` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-padding` |
| `wordScaling` | java.lang.String | [[cdk.support/lookup-entry]] | `:word-scaling` |"
  [stack id config]
  (let [builder (CfnTemplate$WordCloudOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :cloud-layout)]
      (. builder cloudLayout data))
    (when-let [data (lookup-entry config id :maximum-string-length)]
      (. builder maximumStringLength data))
    (when-let [data (lookup-entry config id :word-casing)]
      (. builder wordCasing data))
    (when-let [data (lookup-entry config id :word-orientation)]
      (. builder wordOrientation data))
    (when-let [data (lookup-entry config id :word-padding)]
      (. builder wordPadding data))
    (when-let [data (lookup-entry config id :word-scaling)]
      (. builder wordScaling data))
    (.build builder)))


(defn cfn-template-word-cloud-sort-configuration-property-builder
  "The cfn-template-word-cloud-sort-configuration-property-builder function buildes out new instances of 
CfnTemplate$WordCloudSortConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryItemsLimit` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-items-limit` |
| `categorySort` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-sort` |"
  [stack id config]
  (let [builder (CfnTemplate$WordCloudSortConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-items-limit)]
      (. builder categoryItemsLimit data))
    (when-let [data (lookup-entry config id :category-sort)]
      (. builder categorySort data))
    (.build builder)))


(defn cfn-template-word-cloud-visual-property-builder
  "The cfn-template-word-cloud-visual-property-builder function buildes out new instances of 
CfnTemplate$WordCloudVisualProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `chartConfiguration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:chart-configuration` |
| `columnHierarchies` | java.util.List | [[cdk.support/lookup-entry]] | `:column-hierarchies` |
| `subtitle` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualSubtitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:subtitle` |
| `title` | software.amazon.awscdk.services.quicksight.CfnTemplate$VisualTitleLabelOptionsProperty | [[cdk.support/lookup-entry]] | `:title` |
| `visualId` | java.lang.String | [[cdk.support/lookup-entry]] | `:visual-id` |"
  [stack id config]
  (let [builder (CfnTemplate$WordCloudVisualProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :chart-configuration)]
      (. builder chartConfiguration data))
    (when-let [data (lookup-entry config id :column-hierarchies)]
      (. builder columnHierarchies data))
    (when-let [data (lookup-entry config id :subtitle)]
      (. builder subtitle data))
    (when-let [data (lookup-entry config id :title)]
      (. builder title data))
    (when-let [data (lookup-entry config id :visual-id)]
      (. builder visualId data))
    (.build builder)))


(defn cfn-theme-border-style-property-builder
  "The cfn-theme-border-style-property-builder function buildes out new instances of 
CfnTheme$BorderStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `show` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:show` |"
  [stack id config]
  (let [builder (CfnTheme$BorderStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :show)]
      (. builder show data))
    (.build builder)))


(defn cfn-theme-builder
  "The cfn-theme-builder function buildes out new instances of 
CfnTheme$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `baseThemeId` | java.lang.String | [[cdk.support/lookup-entry]] | `:base-theme-id` |
| `configuration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:configuration` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `permissions` | java.util.List | [[cdk.support/lookup-entry]] | `:permissions` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `themeId` | java.lang.String | [[cdk.support/lookup-entry]] | `:theme-id` |
| `versionDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:version-description` |"
  [stack id config]
  (let [builder (CfnTheme$Builder/create stack id)]
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :base-theme-id)]
      (. builder baseThemeId data))
    (when-let [data (lookup-entry config id :configuration)]
      (. builder configuration data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :permissions)]
      (. builder permissions data))
    (when-let [data (lookup-entry config id :tags)]
      (. builder tags data))
    (when-let [data (lookup-entry config id :theme-id)]
      (. builder themeId data))
    (when-let [data (lookup-entry config id :version-description)]
      (. builder versionDescription data))
    (.build builder)))


(defn cfn-theme-data-color-palette-property-builder
  "The cfn-theme-data-color-palette-property-builder function buildes out new instances of 
CfnTheme$DataColorPaletteProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `colors` | java.util.List | [[cdk.support/lookup-entry]] | `:colors` |
| `emptyFillColor` | java.lang.String | [[cdk.support/lookup-entry]] | `:empty-fill-color` |
| `minMaxGradient` | java.util.List | [[cdk.support/lookup-entry]] | `:min-max-gradient` |"
  [stack id config]
  (let [builder (CfnTheme$DataColorPaletteProperty$Builder.)]
    (when-let [data (lookup-entry config id :colors)]
      (. builder colors data))
    (when-let [data (lookup-entry config id :empty-fill-color)]
      (. builder emptyFillColor data))
    (when-let [data (lookup-entry config id :min-max-gradient)]
      (. builder minMaxGradient data))
    (.build builder)))


(defn cfn-theme-font-property-builder
  "The cfn-theme-font-property-builder function buildes out new instances of 
CfnTheme$FontProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontFamily` | java.lang.String | [[cdk.support/lookup-entry]] | `:font-family` |"
  [stack id config]
  (let [builder (CfnTheme$FontProperty$Builder.)]
    (when-let [data (lookup-entry config id :font-family)]
      (. builder fontFamily data))
    (.build builder)))


(defn cfn-theme-gutter-style-property-builder
  "The cfn-theme-gutter-style-property-builder function buildes out new instances of 
CfnTheme$GutterStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `show` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:show` |"
  [stack id config]
  (let [builder (CfnTheme$GutterStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :show)]
      (. builder show data))
    (.build builder)))


(defn cfn-theme-margin-style-property-builder
  "The cfn-theme-margin-style-property-builder function buildes out new instances of 
CfnTheme$MarginStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `show` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:show` |"
  [stack id config]
  (let [builder (CfnTheme$MarginStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :show)]
      (. builder show data))
    (.build builder)))


(defn cfn-theme-props-builder
  "The cfn-theme-props-builder function buildes out new instances of 
CfnThemeProps$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `baseThemeId` | java.lang.String | [[cdk.support/lookup-entry]] | `:base-theme-id` |
| `configuration` | software.amazon.awscdk.services.quicksight.CfnTheme$ThemeConfigurationProperty | [[cdk.support/lookup-entry]] | `:configuration` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `permissions` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:permissions` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `themeId` | java.lang.String | [[cdk.support/lookup-entry]] | `:theme-id` |
| `versionDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:version-description` |"
  [stack id config]
  (let [builder (CfnThemeProps$Builder.)]
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :base-theme-id)]
      (. builder baseThemeId data))
    (when-let [data (lookup-entry config id :configuration)]
      (. builder configuration data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :permissions)]
      (. builder permissions data))
    (when-let [data (lookup-entry config id :tags)]
      (. builder tags data))
    (when-let [data (lookup-entry config id :theme-id)]
      (. builder themeId data))
    (when-let [data (lookup-entry config id :version-description)]
      (. builder versionDescription data))
    (.build builder)))


(defn cfn-theme-resource-permission-property-builder
  "The cfn-theme-resource-permission-property-builder function buildes out new instances of 
CfnTheme$ResourcePermissionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `actions` | java.util.List | [[cdk.support/lookup-entry]] | `:actions` |
| `principal` | java.lang.String | [[cdk.support/lookup-entry]] | `:principal` |
| `resource` | java.lang.String | [[cdk.support/lookup-entry]] | `:resource` |"
  [stack id config]
  (let [builder (CfnTheme$ResourcePermissionProperty$Builder.)]
    (when-let [data (lookup-entry config id :actions)]
      (. builder actions data))
    (when-let [data (lookup-entry config id :principal)]
      (. builder principal data))
    (when-let [data (lookup-entry config id :resource)]
      (. builder resource data))
    (.build builder)))


(defn cfn-theme-sheet-style-property-builder
  "The cfn-theme-sheet-style-property-builder function buildes out new instances of 
CfnTheme$SheetStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `tile` | software.amazon.awscdk.services.quicksight.CfnTheme$TileStyleProperty | [[cdk.support/lookup-entry]] | `:tile` |
| `tileLayout` | software.amazon.awscdk.services.quicksight.CfnTheme$TileLayoutStyleProperty | [[cdk.support/lookup-entry]] | `:tile-layout` |"
  [stack id config]
  (let [builder (CfnTheme$SheetStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :tile)]
      (. builder tile data))
    (when-let [data (lookup-entry config id :tile-layout)]
      (. builder tileLayout data))
    (.build builder)))


(defn cfn-theme-theme-configuration-property-builder
  "The cfn-theme-theme-configuration-property-builder function buildes out new instances of 
CfnTheme$ThemeConfigurationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `dataColorPalette` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-color-palette` |
| `sheet` | software.amazon.awscdk.services.quicksight.CfnTheme$SheetStyleProperty | [[cdk.support/lookup-entry]] | `:sheet` |
| `typography` | software.amazon.awscdk.services.quicksight.CfnTheme$TypographyProperty | [[cdk.support/lookup-entry]] | `:typography` |
| `uiColorPalette` | software.amazon.awscdk.services.quicksight.CfnTheme$UIColorPaletteProperty | [[cdk.support/lookup-entry]] | `:ui-color-palette` |"
  [stack id config]
  (let [builder (CfnTheme$ThemeConfigurationProperty$Builder.)]
    (when-let [data (lookup-entry config id :data-color-palette)]
      (. builder dataColorPalette data))
    (when-let [data (lookup-entry config id :sheet)]
      (. builder sheet data))
    (when-let [data (lookup-entry config id :typography)]
      (. builder typography data))
    (when-let [data (lookup-entry config id :ui-color-palette)]
      (. builder uiColorPalette data))
    (.build builder)))


(defn cfn-theme-theme-error-property-builder
  "The cfn-theme-theme-error-property-builder function buildes out new instances of 
CfnTheme$ThemeErrorProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `message` | java.lang.String | [[cdk.support/lookup-entry]] | `:message` |
| `type` | java.lang.String | [[cdk.support/lookup-entry]] | `:type` |"
  [stack id config]
  (let [builder (CfnTheme$ThemeErrorProperty$Builder.)]
    (when-let [data (lookup-entry config id :message)]
      (. builder message data))
    (when-let [data (lookup-entry config id :type)]
      (. builder type data))
    (.build builder)))


(defn cfn-theme-theme-version-property-builder
  "The cfn-theme-theme-version-property-builder function buildes out new instances of 
CfnTheme$ThemeVersionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `arn` | java.lang.String | [[cdk.support/lookup-entry]] | `:arn` |
| `baseThemeId` | java.lang.String | [[cdk.support/lookup-entry]] | `:base-theme-id` |
| `configuration` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:configuration` |
| `createdTime` | java.lang.String | [[cdk.support/lookup-entry]] | `:created-time` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `errors` | java.util.List | [[cdk.support/lookup-entry]] | `:errors` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `versionNumber` | java.lang.Number | [[cdk.support/lookup-entry]] | `:version-number` |"
  [stack id config]
  (let [builder (CfnTheme$ThemeVersionProperty$Builder.)]
    (when-let [data (lookup-entry config id :arn)]
      (. builder arn data))
    (when-let [data (lookup-entry config id :base-theme-id)]
      (. builder baseThemeId data))
    (when-let [data (lookup-entry config id :configuration)]
      (. builder configuration data))
    (when-let [data (lookup-entry config id :created-time)]
      (. builder createdTime data))
    (when-let [data (lookup-entry config id :description)]
      (. builder description data))
    (when-let [data (lookup-entry config id :errors)]
      (. builder errors data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (when-let [data (lookup-entry config id :version-number)]
      (. builder versionNumber data))
    (.build builder)))


(defn cfn-theme-tile-layout-style-property-builder
  "The cfn-theme-tile-layout-style-property-builder function buildes out new instances of 
CfnTheme$TileLayoutStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `gutter` | software.amazon.awscdk.services.quicksight.CfnTheme$GutterStyleProperty | [[cdk.support/lookup-entry]] | `:gutter` |
| `margin` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:margin` |"
  [stack id config]
  (let [builder (CfnTheme$TileLayoutStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :gutter)]
      (. builder gutter data))
    (when-let [data (lookup-entry config id :margin)]
      (. builder margin data))
    (.build builder)))


(defn cfn-theme-tile-style-property-builder
  "The cfn-theme-tile-style-property-builder function buildes out new instances of 
CfnTheme$TileStyleProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `border` | software.amazon.awscdk.services.quicksight.CfnTheme$BorderStyleProperty | [[cdk.support/lookup-entry]] | `:border` |"
  [stack id config]
  (let [builder (CfnTheme$TileStyleProperty$Builder.)]
    (when-let [data (lookup-entry config id :border)]
      (. builder border data))
    (.build builder)))


(defn cfn-theme-typography-property-builder
  "The cfn-theme-typography-property-builder function buildes out new instances of 
CfnTheme$TypographyProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fontFamilies` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:font-families` |"
  [stack id config]
  (let [builder (CfnTheme$TypographyProperty$Builder.)]
    (when-let [data (lookup-entry config id :font-families)]
      (. builder fontFamilies data))
    (.build builder)))


(defn cfn-theme-ui-color-palette-property-builder
  "The cfn-theme-ui-color-palette-property-builder function buildes out new instances of 
CfnTheme$UIColorPaletteProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `accent` | java.lang.String | [[cdk.support/lookup-entry]] | `:accent` |
| `accentForeground` | java.lang.String | [[cdk.support/lookup-entry]] | `:accent-foreground` |
| `danger` | java.lang.String | [[cdk.support/lookup-entry]] | `:danger` |
| `dangerForeground` | java.lang.String | [[cdk.support/lookup-entry]] | `:danger-foreground` |
| `dimension` | java.lang.String | [[cdk.support/lookup-entry]] | `:dimension` |
| `dimensionForeground` | java.lang.String | [[cdk.support/lookup-entry]] | `:dimension-foreground` |
| `measure` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure` |
| `measureForeground` | java.lang.String | [[cdk.support/lookup-entry]] | `:measure-foreground` |
| `primaryBackground` | java.lang.String | [[cdk.support/lookup-entry]] | `:primary-background` |
| `primaryForeground` | java.lang.String | [[cdk.support/lookup-entry]] | `:primary-foreground` |
| `secondaryBackground` | java.lang.String | [[cdk.support/lookup-entry]] | `:secondary-background` |
| `secondaryForeground` | java.lang.String | [[cdk.support/lookup-entry]] | `:secondary-foreground` |
| `success` | java.lang.String | [[cdk.support/lookup-entry]] | `:success` |
| `successForeground` | java.lang.String | [[cdk.support/lookup-entry]] | `:success-foreground` |
| `warning` | java.lang.String | [[cdk.support/lookup-entry]] | `:warning` |
| `warningForeground` | java.lang.String | [[cdk.support/lookup-entry]] | `:warning-foreground` |"
  [stack id config]
  (let [builder (CfnTheme$UIColorPaletteProperty$Builder.)]
    (when-let [data (lookup-entry config id :accent)]
      (. builder accent data))
    (when-let [data (lookup-entry config id :accent-foreground)]
      (. builder accentForeground data))
    (when-let [data (lookup-entry config id :danger)]
      (. builder danger data))
    (when-let [data (lookup-entry config id :danger-foreground)]
      (. builder dangerForeground data))
    (when-let [data (lookup-entry config id :dimension)]
      (. builder dimension data))
    (when-let [data (lookup-entry config id :dimension-foreground)]
      (. builder dimensionForeground data))
    (when-let [data (lookup-entry config id :measure)]
      (. builder measure data))
    (when-let [data (lookup-entry config id :measure-foreground)]
      (. builder measureForeground data))
    (when-let [data (lookup-entry config id :primary-background)]
      (. builder primaryBackground data))
    (when-let [data (lookup-entry config id :primary-foreground)]
      (. builder primaryForeground data))
    (when-let [data (lookup-entry config id :secondary-background)]
      (. builder secondaryBackground data))
    (when-let [data (lookup-entry config id :secondary-foreground)]
      (. builder secondaryForeground data))
    (when-let [data (lookup-entry config id :success)]
      (. builder success data))
    (when-let [data (lookup-entry config id :success-foreground)]
      (. builder successForeground data))
    (when-let [data (lookup-entry config id :warning)]
      (. builder warning data))
    (when-let [data (lookup-entry config id :warning-foreground)]
      (. builder warningForeground data))
    (.build builder)))


(defn cfn-topic-builder
  "The cfn-topic-builder function buildes out new instances of 
CfnTopic$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `dataSets` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:data-sets` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `topicId` | java.lang.String | [[cdk.support/lookup-entry]] | `:topic-id` |
| `userExperienceVersion` | java.lang.String | [[cdk.support/lookup-entry]] | `:user-experience-version` |"
  [stack id config]
  (let [builder (CfnTopic$Builder/create stack id)]
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :data-sets)]
      (. builder dataSets data))
    (when-let [data (lookup-entry config id :description)]
      (. builder description data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :topic-id)]
      (. builder topicId data))
    (when-let [data (lookup-entry config id :user-experience-version)]
      (. builder userExperienceVersion data))
    (.build builder)))


(defn cfn-topic-cell-value-synonym-property-builder
  "The cfn-topic-cell-value-synonym-property-builder function buildes out new instances of 
CfnTopic$CellValueSynonymProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `cellValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:cell-value` |
| `synonyms` | java.util.List | [[cdk.support/lookup-entry]] | `:synonyms` |"
  [stack id config]
  (let [builder (CfnTopic$CellValueSynonymProperty$Builder.)]
    (when-let [data (lookup-entry config id :cell-value)]
      (. builder cellValue data))
    (when-let [data (lookup-entry config id :synonyms)]
      (. builder synonyms data))
    (.build builder)))


(defn cfn-topic-collective-constant-property-builder
  "The cfn-topic-collective-constant-property-builder function buildes out new instances of 
CfnTopic$CollectiveConstantProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `valueList` | java.util.List | [[cdk.support/lookup-entry]] | `:value-list` |"
  [stack id config]
  (let [builder (CfnTopic$CollectiveConstantProperty$Builder.)]
    (when-let [data (lookup-entry config id :value-list)]
      (. builder valueList data))
    (.build builder)))


(defn cfn-topic-comparative-order-property-builder
  "The cfn-topic-comparative-order-property-builder function buildes out new instances of 
CfnTopic$ComparativeOrderProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `specifedOrder` | java.util.List | [[cdk.support/lookup-entry]] | `:specifed-order` |
| `treatUndefinedSpecifiedValues` | java.lang.String | [[cdk.support/lookup-entry]] | `:treat-undefined-specified-values` |
| `useOrdering` | java.lang.String | [[cdk.support/lookup-entry]] | `:use-ordering` |"
  [stack id config]
  (let [builder (CfnTopic$ComparativeOrderProperty$Builder.)]
    (when-let [data (lookup-entry config id :specifed-order)]
      (. builder specifedOrder data))
    (when-let [data (lookup-entry config id :treat-undefined-specified-values)]
      (. builder treatUndefinedSpecifiedValues data))
    (when-let [data (lookup-entry config id :use-ordering)]
      (. builder useOrdering data))
    (.build builder)))


(defn cfn-topic-data-aggregation-property-builder
  "The cfn-topic-data-aggregation-property-builder function buildes out new instances of 
CfnTopic$DataAggregationProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `datasetRowDateGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:dataset-row-date-granularity` |
| `defaultDateColumnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:default-date-column-name` |"
  [stack id config]
  (let [builder (CfnTopic$DataAggregationProperty$Builder.)]
    (when-let [data (lookup-entry config id :dataset-row-date-granularity)]
      (. builder datasetRowDateGranularity data))
    (when-let [data (lookup-entry config id :default-date-column-name)]
      (. builder defaultDateColumnName data))
    (.build builder)))


(defn cfn-topic-dataset-metadata-property-builder
  "The cfn-topic-dataset-metadata-property-builder function buildes out new instances of 
CfnTopic$DatasetMetadataProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `calculatedFields` | java.util.List | [[cdk.support/lookup-entry]] | `:calculated-fields` |
| `columns` | java.util.List | [[cdk.support/lookup-entry]] | `:columns` |
| `dataAggregation` | software.amazon.awscdk.services.quicksight.CfnTopic$DataAggregationProperty | [[cdk.support/lookup-entry]] | `:data-aggregation` |
| `datasetArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:dataset-arn` |
| `datasetDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:dataset-description` |
| `datasetName` | java.lang.String | [[cdk.support/lookup-entry]] | `:dataset-name` |
| `filters` | java.util.List | [[cdk.support/lookup-entry]] | `:filters` |
| `namedEntities` | java.util.List | [[cdk.support/lookup-entry]] | `:named-entities` |"
  [stack id config]
  (let [builder (CfnTopic$DatasetMetadataProperty$Builder.)]
    (when-let [data (lookup-entry config id :calculated-fields)]
      (. builder calculatedFields data))
    (when-let [data (lookup-entry config id :columns)]
      (. builder columns data))
    (when-let [data (lookup-entry config id :data-aggregation)]
      (. builder dataAggregation data))
    (when-let [data (lookup-entry config id :dataset-arn)]
      (. builder datasetArn data))
    (when-let [data (lookup-entry config id :dataset-description)]
      (. builder datasetDescription data))
    (when-let [data (lookup-entry config id :dataset-name)]
      (. builder datasetName data))
    (when-let [data (lookup-entry config id :filters)]
      (. builder filters data))
    (when-let [data (lookup-entry config id :named-entities)]
      (. builder namedEntities data))
    (.build builder)))


(defn cfn-topic-default-formatting-property-builder
  "The cfn-topic-default-formatting-property-builder function buildes out new instances of 
CfnTopic$DefaultFormattingProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `displayFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:display-format` |
| `displayFormatOptions` | software.amazon.awscdk.services.quicksight.CfnTopic$DisplayFormatOptionsProperty | [[cdk.support/lookup-entry]] | `:display-format-options` |"
  [stack id config]
  (let [builder (CfnTopic$DefaultFormattingProperty$Builder.)]
    (when-let [data (lookup-entry config id :display-format)]
      (. builder displayFormat data))
    (when-let [data (lookup-entry config id :display-format-options)]
      (. builder displayFormatOptions data))
    (.build builder)))


(defn cfn-topic-display-format-options-property-builder
  "The cfn-topic-display-format-options-property-builder function buildes out new instances of 
CfnTopic$DisplayFormatOptionsProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `blankCellFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:blank-cell-format` |
| `currencySymbol` | java.lang.String | [[cdk.support/lookup-entry]] | `:currency-symbol` |
| `dateFormat` | java.lang.String | [[cdk.support/lookup-entry]] | `:date-format` |
| `decimalSeparator` | java.lang.String | [[cdk.support/lookup-entry]] | `:decimal-separator` |
| `fractionDigits` | java.lang.Number | [[cdk.support/lookup-entry]] | `:fraction-digits` |
| `groupingSeparator` | java.lang.String | [[cdk.support/lookup-entry]] | `:grouping-separator` |
| `negativeFormat` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:negative-format` |
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |
| `unitScaler` | java.lang.String | [[cdk.support/lookup-entry]] | `:unit-scaler` |
| `useBlankCellFormat` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:use-blank-cell-format` |
| `useGrouping` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:use-grouping` |"
  [stack id config]
  (let [builder (CfnTopic$DisplayFormatOptionsProperty$Builder.)]
    (when-let [data (lookup-entry config id :blank-cell-format)]
      (. builder blankCellFormat data))
    (when-let [data (lookup-entry config id :currency-symbol)]
      (. builder currencySymbol data))
    (when-let [data (lookup-entry config id :date-format)]
      (. builder dateFormat data))
    (when-let [data (lookup-entry config id :decimal-separator)]
      (. builder decimalSeparator data))
    (when-let [data (lookup-entry config id :fraction-digits)]
      (. builder fractionDigits data))
    (when-let [data (lookup-entry config id :grouping-separator)]
      (. builder groupingSeparator data))
    (when-let [data (lookup-entry config id :negative-format)]
      (. builder negativeFormat data))
    (when-let [data (lookup-entry config id :prefix)]
      (. builder prefix data))
    (when-let [data (lookup-entry config id :suffix)]
      (. builder suffix data))
    (when-let [data (lookup-entry config id :unit-scaler)]
      (. builder unitScaler data))
    (when-let [data (lookup-entry config id :use-blank-cell-format)]
      (. builder useBlankCellFormat data))
    (when-let [data (lookup-entry config id :use-grouping)]
      (. builder useGrouping data))
    (.build builder)))


(defn cfn-topic-named-entity-definition-metric-property-builder
  "The cfn-topic-named-entity-definition-metric-property-builder function buildes out new instances of 
CfnTopic$NamedEntityDefinitionMetricProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation` |
| `aggregationFunctionParameters` | java.util.Map | [[cdk.support/lookup-entry]] | `:aggregation-function-parameters` |"
  [stack id config]
  (let [builder (CfnTopic$NamedEntityDefinitionMetricProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation)]
      (. builder aggregation data))
    (when-let [data (lookup-entry config id :aggregation-function-parameters)]
      (. builder aggregationFunctionParameters data))
    (.build builder)))


(defn cfn-topic-named-entity-definition-property-builder
  "The cfn-topic-named-entity-definition-property-builder function buildes out new instances of 
CfnTopic$NamedEntityDefinitionProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `fieldName` | java.lang.String | [[cdk.support/lookup-entry]] | `:field-name` |
| `metric` | software.amazon.awscdk.services.quicksight.CfnTopic$NamedEntityDefinitionMetricProperty | [[cdk.support/lookup-entry]] | `:metric` |
| `propertyName` | java.lang.String | [[cdk.support/lookup-entry]] | `:property-name` |
| `propertyRole` | java.lang.String | [[cdk.support/lookup-entry]] | `:property-role` |
| `propertyUsage` | java.lang.String | [[cdk.support/lookup-entry]] | `:property-usage` |"
  [stack id config]
  (let [builder (CfnTopic$NamedEntityDefinitionProperty$Builder.)]
    (when-let [data (lookup-entry config id :field-name)]
      (. builder fieldName data))
    (when-let [data (lookup-entry config id :metric)]
      (. builder metric data))
    (when-let [data (lookup-entry config id :property-name)]
      (. builder propertyName data))
    (when-let [data (lookup-entry config id :property-role)]
      (. builder propertyRole data))
    (when-let [data (lookup-entry config id :property-usage)]
      (. builder propertyUsage data))
    (.build builder)))


(defn cfn-topic-negative-format-property-builder
  "The cfn-topic-negative-format-property-builder function buildes out new instances of 
CfnTopic$NegativeFormatProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `prefix` | java.lang.String | [[cdk.support/lookup-entry]] | `:prefix` |
| `suffix` | java.lang.String | [[cdk.support/lookup-entry]] | `:suffix` |"
  [stack id config]
  (let [builder (CfnTopic$NegativeFormatProperty$Builder.)]
    (when-let [data (lookup-entry config id :prefix)]
      (. builder prefix data))
    (when-let [data (lookup-entry config id :suffix)]
      (. builder suffix data))
    (.build builder)))


(defn cfn-topic-props-builder
  "The cfn-topic-props-builder function buildes out new instances of 
CfnTopicProps$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `dataSets` | java.util.List | [[cdk.support/lookup-entry]] | `:data-sets` |
| `description` | java.lang.String | [[cdk.support/lookup-entry]] | `:description` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `topicId` | java.lang.String | [[cdk.support/lookup-entry]] | `:topic-id` |
| `userExperienceVersion` | java.lang.String | [[cdk.support/lookup-entry]] | `:user-experience-version` |"
  [stack id config]
  (let [builder (CfnTopicProps$Builder.)]
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :data-sets)]
      (. builder dataSets data))
    (when-let [data (lookup-entry config id :description)]
      (. builder description data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :topic-id)]
      (. builder topicId data))
    (when-let [data (lookup-entry config id :user-experience-version)]
      (. builder userExperienceVersion data))
    (.build builder)))


(defn cfn-topic-range-constant-property-builder
  "The cfn-topic-range-constant-property-builder function buildes out new instances of 
CfnTopic$RangeConstantProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `maximum` | java.lang.String | [[cdk.support/lookup-entry]] | `:maximum` |
| `minimum` | java.lang.String | [[cdk.support/lookup-entry]] | `:minimum` |"
  [stack id config]
  (let [builder (CfnTopic$RangeConstantProperty$Builder.)]
    (when-let [data (lookup-entry config id :maximum)]
      (. builder maximum data))
    (when-let [data (lookup-entry config id :minimum)]
      (. builder minimum data))
    (.build builder)))


(defn cfn-topic-semantic-entity-type-property-builder
  "The cfn-topic-semantic-entity-type-property-builder function buildes out new instances of 
CfnTopic$SemanticEntityTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `subTypeName` | java.lang.String | [[cdk.support/lookup-entry]] | `:sub-type-name` |
| `typeName` | java.lang.String | [[cdk.support/lookup-entry]] | `:type-name` |
| `typeParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:type-parameters` |"
  [stack id config]
  (let [builder (CfnTopic$SemanticEntityTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :sub-type-name)]
      (. builder subTypeName data))
    (when-let [data (lookup-entry config id :type-name)]
      (. builder typeName data))
    (when-let [data (lookup-entry config id :type-parameters)]
      (. builder typeParameters data))
    (.build builder)))


(defn cfn-topic-semantic-type-property-builder
  "The cfn-topic-semantic-type-property-builder function buildes out new instances of 
CfnTopic$SemanticTypeProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `falseyCellValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:falsey-cell-value` |
| `falseyCellValueSynonyms` | java.util.List | [[cdk.support/lookup-entry]] | `:falsey-cell-value-synonyms` |
| `subTypeName` | java.lang.String | [[cdk.support/lookup-entry]] | `:sub-type-name` |
| `truthyCellValue` | java.lang.String | [[cdk.support/lookup-entry]] | `:truthy-cell-value` |
| `truthyCellValueSynonyms` | java.util.List | [[cdk.support/lookup-entry]] | `:truthy-cell-value-synonyms` |
| `typeName` | java.lang.String | [[cdk.support/lookup-entry]] | `:type-name` |
| `typeParameters` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:type-parameters` |"
  [stack id config]
  (let [builder (CfnTopic$SemanticTypeProperty$Builder.)]
    (when-let [data (lookup-entry config id :falsey-cell-value)]
      (. builder falseyCellValue data))
    (when-let [data (lookup-entry config id :falsey-cell-value-synonyms)]
      (. builder falseyCellValueSynonyms data))
    (when-let [data (lookup-entry config id :sub-type-name)]
      (. builder subTypeName data))
    (when-let [data (lookup-entry config id :truthy-cell-value)]
      (. builder truthyCellValue data))
    (when-let [data (lookup-entry config id :truthy-cell-value-synonyms)]
      (. builder truthyCellValueSynonyms data))
    (when-let [data (lookup-entry config id :type-name)]
      (. builder typeName data))
    (when-let [data (lookup-entry config id :type-parameters)]
      (. builder typeParameters data))
    (.build builder)))


(defn cfn-topic-topic-calculated-field-property-builder
  "The cfn-topic-topic-calculated-field-property-builder function buildes out new instances of 
CfnTopic$TopicCalculatedFieldProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation` |
| `allowedAggregations` | java.util.List | [[cdk.support/lookup-entry]] | `:allowed-aggregations` |
| `calculatedFieldDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:calculated-field-description` |
| `calculatedFieldName` | java.lang.String | [[cdk.support/lookup-entry]] | `:calculated-field-name` |
| `calculatedFieldSynonyms` | java.util.List | [[cdk.support/lookup-entry]] | `:calculated-field-synonyms` |
| `cellValueSynonyms` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:cell-value-synonyms` |
| `columnDataRole` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-data-role` |
| `comparativeOrder` | software.amazon.awscdk.services.quicksight.CfnTopic$ComparativeOrderProperty | [[cdk.support/lookup-entry]] | `:comparative-order` |
| `defaultFormatting` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:default-formatting` |
| `disableIndexing` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:disable-indexing` |
| `expression` | java.lang.String | [[cdk.support/lookup-entry]] | `:expression` |
| `isIncludedInTopic` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:is-included-in-topic` |
| `neverAggregateInFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:never-aggregate-in-filter` |
| `nonAdditive` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:non-additive` |
| `notAllowedAggregations` | java.util.List | [[cdk.support/lookup-entry]] | `:not-allowed-aggregations` |
| `semanticType` | software.amazon.awscdk.services.quicksight.CfnTopic$SemanticTypeProperty | [[cdk.support/lookup-entry]] | `:semantic-type` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnTopic$TopicCalculatedFieldProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation)]
      (. builder aggregation data))
    (when-let [data (lookup-entry config id :allowed-aggregations)]
      (. builder allowedAggregations data))
    (when-let [data (lookup-entry config id :calculated-field-description)]
      (. builder calculatedFieldDescription data))
    (when-let [data (lookup-entry config id :calculated-field-name)]
      (. builder calculatedFieldName data))
    (when-let [data (lookup-entry config id :calculated-field-synonyms)]
      (. builder calculatedFieldSynonyms data))
    (when-let [data (lookup-entry config id :cell-value-synonyms)]
      (. builder cellValueSynonyms data))
    (when-let [data (lookup-entry config id :column-data-role)]
      (. builder columnDataRole data))
    (when-let [data (lookup-entry config id :comparative-order)]
      (. builder comparativeOrder data))
    (when-let [data (lookup-entry config id :default-formatting)]
      (. builder defaultFormatting data))
    (when-let [data (lookup-entry config id :disable-indexing)]
      (. builder disableIndexing data))
    (when-let [data (lookup-entry config id :expression)]
      (. builder expression data))
    (when-let [data (lookup-entry config id :is-included-in-topic)]
      (. builder isIncludedInTopic data))
    (when-let [data (lookup-entry config id :never-aggregate-in-filter)]
      (. builder neverAggregateInFilter data))
    (when-let [data (lookup-entry config id :non-additive)]
      (. builder nonAdditive data))
    (when-let [data (lookup-entry config id :not-allowed-aggregations)]
      (. builder notAllowedAggregations data))
    (when-let [data (lookup-entry config id :semantic-type)]
      (. builder semanticType data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-topic-topic-category-filter-constant-property-builder
  "The cfn-topic-topic-category-filter-constant-property-builder function buildes out new instances of 
CfnTopic$TopicCategoryFilterConstantProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `collectiveConstant` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:collective-constant` |
| `constantType` | java.lang.String | [[cdk.support/lookup-entry]] | `:constant-type` |
| `singularConstant` | java.lang.String | [[cdk.support/lookup-entry]] | `:singular-constant` |"
  [stack id config]
  (let [builder (CfnTopic$TopicCategoryFilterConstantProperty$Builder.)]
    (when-let [data (lookup-entry config id :collective-constant)]
      (. builder collectiveConstant data))
    (when-let [data (lookup-entry config id :constant-type)]
      (. builder constantType data))
    (when-let [data (lookup-entry config id :singular-constant)]
      (. builder singularConstant data))
    (.build builder)))


(defn cfn-topic-topic-category-filter-property-builder
  "The cfn-topic-topic-category-filter-property-builder function buildes out new instances of 
CfnTopic$TopicCategoryFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryFilterFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-filter-function` |
| `categoryFilterType` | java.lang.String | [[cdk.support/lookup-entry]] | `:category-filter-type` |
| `constant` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:constant` |
| `inverse` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:inverse` |"
  [stack id config]
  (let [builder (CfnTopic$TopicCategoryFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-filter-function)]
      (. builder categoryFilterFunction data))
    (when-let [data (lookup-entry config id :category-filter-type)]
      (. builder categoryFilterType data))
    (when-let [data (lookup-entry config id :constant)]
      (. builder constant data))
    (when-let [data (lookup-entry config id :inverse)]
      (. builder inverse data))
    (.build builder)))


(defn cfn-topic-topic-column-property-builder
  "The cfn-topic-topic-column-property-builder function buildes out new instances of 
CfnTopic$TopicColumnProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation` |
| `allowedAggregations` | java.util.List | [[cdk.support/lookup-entry]] | `:allowed-aggregations` |
| `cellValueSynonyms` | java.util.List | [[cdk.support/lookup-entry]] | `:cell-value-synonyms` |
| `columnDataRole` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-data-role` |
| `columnDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-description` |
| `columnFriendlyName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-friendly-name` |
| `columnName` | java.lang.String | [[cdk.support/lookup-entry]] | `:column-name` |
| `columnSynonyms` | java.util.List | [[cdk.support/lookup-entry]] | `:column-synonyms` |
| `comparativeOrder` | software.amazon.awscdk.services.quicksight.CfnTopic$ComparativeOrderProperty | [[cdk.support/lookup-entry]] | `:comparative-order` |
| `defaultFormatting` | software.amazon.awscdk.services.quicksight.CfnTopic$DefaultFormattingProperty | [[cdk.support/lookup-entry]] | `:default-formatting` |
| `disableIndexing` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:disable-indexing` |
| `isIncludedInTopic` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:is-included-in-topic` |
| `neverAggregateInFilter` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:never-aggregate-in-filter` |
| `nonAdditive` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:non-additive` |
| `notAllowedAggregations` | java.util.List | [[cdk.support/lookup-entry]] | `:not-allowed-aggregations` |
| `semanticType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:semantic-type` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnTopic$TopicColumnProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation)]
      (. builder aggregation data))
    (when-let [data (lookup-entry config id :allowed-aggregations)]
      (. builder allowedAggregations data))
    (when-let [data (lookup-entry config id :cell-value-synonyms)]
      (. builder cellValueSynonyms data))
    (when-let [data (lookup-entry config id :column-data-role)]
      (. builder columnDataRole data))
    (when-let [data (lookup-entry config id :column-description)]
      (. builder columnDescription data))
    (when-let [data (lookup-entry config id :column-friendly-name)]
      (. builder columnFriendlyName data))
    (when-let [data (lookup-entry config id :column-name)]
      (. builder columnName data))
    (when-let [data (lookup-entry config id :column-synonyms)]
      (. builder columnSynonyms data))
    (when-let [data (lookup-entry config id :comparative-order)]
      (. builder comparativeOrder data))
    (when-let [data (lookup-entry config id :default-formatting)]
      (. builder defaultFormatting data))
    (when-let [data (lookup-entry config id :disable-indexing)]
      (. builder disableIndexing data))
    (when-let [data (lookup-entry config id :is-included-in-topic)]
      (. builder isIncludedInTopic data))
    (when-let [data (lookup-entry config id :never-aggregate-in-filter)]
      (. builder neverAggregateInFilter data))
    (when-let [data (lookup-entry config id :non-additive)]
      (. builder nonAdditive data))
    (when-let [data (lookup-entry config id :not-allowed-aggregations)]
      (. builder notAllowedAggregations data))
    (when-let [data (lookup-entry config id :semantic-type)]
      (. builder semanticType data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-topic-topic-date-range-filter-property-builder
  "The cfn-topic-topic-date-range-filter-property-builder function buildes out new instances of 
CfnTopic$TopicDateRangeFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `constant` | software.amazon.awscdk.services.quicksight.CfnTopic$TopicRangeFilterConstantProperty | [[cdk.support/lookup-entry]] | `:constant` |
| `inclusive` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:inclusive` |"
  [stack id config]
  (let [builder (CfnTopic$TopicDateRangeFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :constant)]
      (. builder constant data))
    (when-let [data (lookup-entry config id :inclusive)]
      (. builder inclusive data))
    (.build builder)))


(defn cfn-topic-topic-filter-property-builder
  "The cfn-topic-topic-filter-property-builder function buildes out new instances of 
CfnTopic$TopicFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `categoryFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:category-filter` |
| `dateRangeFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:date-range-filter` |
| `filterClass` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-class` |
| `filterDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-description` |
| `filterName` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-name` |
| `filterSynonyms` | java.util.List | [[cdk.support/lookup-entry]] | `:filter-synonyms` |
| `filterType` | java.lang.String | [[cdk.support/lookup-entry]] | `:filter-type` |
| `numericEqualityFilter` | software.amazon.awscdk.services.quicksight.CfnTopic$TopicNumericEqualityFilterProperty | [[cdk.support/lookup-entry]] | `:numeric-equality-filter` |
| `numericRangeFilter` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:numeric-range-filter` |
| `operandFieldName` | java.lang.String | [[cdk.support/lookup-entry]] | `:operand-field-name` |
| `relativeDateFilter` | software.amazon.awscdk.services.quicksight.CfnTopic$TopicRelativeDateFilterProperty | [[cdk.support/lookup-entry]] | `:relative-date-filter` |"
  [stack id config]
  (let [builder (CfnTopic$TopicFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :category-filter)]
      (. builder categoryFilter data))
    (when-let [data (lookup-entry config id :date-range-filter)]
      (. builder dateRangeFilter data))
    (when-let [data (lookup-entry config id :filter-class)]
      (. builder filterClass data))
    (when-let [data (lookup-entry config id :filter-description)]
      (. builder filterDescription data))
    (when-let [data (lookup-entry config id :filter-name)]
      (. builder filterName data))
    (when-let [data (lookup-entry config id :filter-synonyms)]
      (. builder filterSynonyms data))
    (when-let [data (lookup-entry config id :filter-type)]
      (. builder filterType data))
    (when-let [data (lookup-entry config id :numeric-equality-filter)]
      (. builder numericEqualityFilter data))
    (when-let [data (lookup-entry config id :numeric-range-filter)]
      (. builder numericRangeFilter data))
    (when-let [data (lookup-entry config id :operand-field-name)]
      (. builder operandFieldName data))
    (when-let [data (lookup-entry config id :relative-date-filter)]
      (. builder relativeDateFilter data))
    (.build builder)))


(defn cfn-topic-topic-named-entity-property-builder
  "The cfn-topic-topic-named-entity-property-builder function buildes out new instances of 
CfnTopic$TopicNamedEntityProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `definition` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:definition` |
| `entityDescription` | java.lang.String | [[cdk.support/lookup-entry]] | `:entity-description` |
| `entityName` | java.lang.String | [[cdk.support/lookup-entry]] | `:entity-name` |
| `entitySynonyms` | java.util.List | [[cdk.support/lookup-entry]] | `:entity-synonyms` |
| `semanticEntityType` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:semantic-entity-type` |"
  [stack id config]
  (let [builder (CfnTopic$TopicNamedEntityProperty$Builder.)]
    (when-let [data (lookup-entry config id :definition)]
      (. builder definition data))
    (when-let [data (lookup-entry config id :entity-description)]
      (. builder entityDescription data))
    (when-let [data (lookup-entry config id :entity-name)]
      (. builder entityName data))
    (when-let [data (lookup-entry config id :entity-synonyms)]
      (. builder entitySynonyms data))
    (when-let [data (lookup-entry config id :semantic-entity-type)]
      (. builder semanticEntityType data))
    (.build builder)))


(defn cfn-topic-topic-numeric-equality-filter-property-builder
  "The cfn-topic-topic-numeric-equality-filter-property-builder function buildes out new instances of 
CfnTopic$TopicNumericEqualityFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation` |
| `constant` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:constant` |"
  [stack id config]
  (let [builder (CfnTopic$TopicNumericEqualityFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation)]
      (. builder aggregation data))
    (when-let [data (lookup-entry config id :constant)]
      (. builder constant data))
    (.build builder)))


(defn cfn-topic-topic-numeric-range-filter-property-builder
  "The cfn-topic-topic-numeric-range-filter-property-builder function buildes out new instances of 
CfnTopic$TopicNumericRangeFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `aggregation` | java.lang.String | [[cdk.support/lookup-entry]] | `:aggregation` |
| `constant` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:constant` |
| `inclusive` | java.lang.Boolean | [[cdk.support/lookup-entry]] | `:inclusive` |"
  [stack id config]
  (let [builder (CfnTopic$TopicNumericRangeFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :aggregation)]
      (. builder aggregation data))
    (when-let [data (lookup-entry config id :constant)]
      (. builder constant data))
    (when-let [data (lookup-entry config id :inclusive)]
      (. builder inclusive data))
    (.build builder)))


(defn cfn-topic-topic-range-filter-constant-property-builder
  "The cfn-topic-topic-range-filter-constant-property-builder function buildes out new instances of 
CfnTopic$TopicRangeFilterConstantProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `constantType` | java.lang.String | [[cdk.support/lookup-entry]] | `:constant-type` |
| `rangeConstant` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:range-constant` |"
  [stack id config]
  (let [builder (CfnTopic$TopicRangeFilterConstantProperty$Builder.)]
    (when-let [data (lookup-entry config id :constant-type)]
      (. builder constantType data))
    (when-let [data (lookup-entry config id :range-constant)]
      (. builder rangeConstant data))
    (.build builder)))


(defn cfn-topic-topic-relative-date-filter-property-builder
  "The cfn-topic-topic-relative-date-filter-property-builder function buildes out new instances of 
CfnTopic$TopicRelativeDateFilterProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `constant` | software.amazon.awscdk.IResolvable | [[cdk.support/lookup-entry]] | `:constant` |
| `relativeDateFilterFunction` | java.lang.String | [[cdk.support/lookup-entry]] | `:relative-date-filter-function` |
| `timeGranularity` | java.lang.String | [[cdk.support/lookup-entry]] | `:time-granularity` |"
  [stack id config]
  (let [builder (CfnTopic$TopicRelativeDateFilterProperty$Builder.)]
    (when-let [data (lookup-entry config id :constant)]
      (. builder constant data))
    (when-let [data (lookup-entry config id :relative-date-filter-function)]
      (. builder relativeDateFilterFunction data))
    (when-let [data (lookup-entry config id :time-granularity)]
      (. builder timeGranularity data))
    (.build builder)))


(defn cfn-topic-topic-singular-filter-constant-property-builder
  "The cfn-topic-topic-singular-filter-constant-property-builder function buildes out new instances of 
CfnTopic$TopicSingularFilterConstantProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `constantType` | java.lang.String | [[cdk.support/lookup-entry]] | `:constant-type` |
| `singularConstant` | java.lang.String | [[cdk.support/lookup-entry]] | `:singular-constant` |"
  [stack id config]
  (let [builder (CfnTopic$TopicSingularFilterConstantProperty$Builder.)]
    (when-let [data (lookup-entry config id :constant-type)]
      (. builder constantType data))
    (when-let [data (lookup-entry config id :singular-constant)]
      (. builder singularConstant data))
    (.build builder)))


(defn cfn-vpc-connection-builder
  "The cfn-vpc-connection-builder function buildes out new instances of 
CfnVPCConnection$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `dnsResolvers` | java.util.List | [[cdk.support/lookup-entry]] | `:dns-resolvers` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `roleArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:role-arn` |
| `securityGroupIds` | java.util.List | [[cdk.support/lookup-entry]] | `:security-group-ids` |
| `subnetIds` | java.util.List | [[cdk.support/lookup-entry]] | `:subnet-ids` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `vpcConnectionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:vpc-connection-id` |"
  [stack id config]
  (let [builder (CfnVPCConnection$Builder/create stack id)]
    (when-let [data (lookup-entry config id :availability-status)]
      (. builder availabilityStatus data))
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :dns-resolvers)]
      (. builder dnsResolvers data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :role-arn)]
      (. builder roleArn data))
    (when-let [data (lookup-entry config id :security-group-ids)]
      (. builder securityGroupIds data))
    (when-let [data (lookup-entry config id :subnet-ids)]
      (. builder subnetIds data))
    (when-let [data (lookup-entry config id :tags)]
      (. builder tags data))
    (when-let [data (lookup-entry config id :vpc-connection-id)]
      (. builder vpcConnectionId data))
    (.build builder)))


(defn cfn-vpc-connection-network-interface-property-builder
  "The cfn-vpc-connection-network-interface-property-builder function buildes out new instances of 
CfnVPCConnection$NetworkInterfaceProperty$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityZone` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-zone` |
| `errorMessage` | java.lang.String | [[cdk.support/lookup-entry]] | `:error-message` |
| `networkInterfaceId` | java.lang.String | [[cdk.support/lookup-entry]] | `:network-interface-id` |
| `status` | java.lang.String | [[cdk.support/lookup-entry]] | `:status` |
| `subnetId` | java.lang.String | [[cdk.support/lookup-entry]] | `:subnet-id` |"
  [stack id config]
  (let [builder (CfnVPCConnection$NetworkInterfaceProperty$Builder.)]
    (when-let [data (lookup-entry config id :availability-zone)]
      (. builder availabilityZone data))
    (when-let [data (lookup-entry config id :error-message)]
      (. builder errorMessage data))
    (when-let [data (lookup-entry config id :network-interface-id)]
      (. builder networkInterfaceId data))
    (when-let [data (lookup-entry config id :status)]
      (. builder status data))
    (when-let [data (lookup-entry config id :subnet-id)]
      (. builder subnetId data))
    (.build builder)))


(defn cfn-vpc-connection-props-builder
  "The cfn-vpc-connection-props-builder function buildes out new instances of 
CfnVPCConnectionProps$Builder using the provided configuration.  Each field is set as follows:

| Field | DataType | Lookup Function | Data Key |
|---|---|---|---|
| `availabilityStatus` | java.lang.String | [[cdk.support/lookup-entry]] | `:availability-status` |
| `awsAccountId` | java.lang.String | [[cdk.support/lookup-entry]] | `:aws-account-id` |
| `dnsResolvers` | java.util.List | [[cdk.support/lookup-entry]] | `:dns-resolvers` |
| `name` | java.lang.String | [[cdk.support/lookup-entry]] | `:name` |
| `roleArn` | java.lang.String | [[cdk.support/lookup-entry]] | `:role-arn` |
| `securityGroupIds` | java.util.List | [[cdk.support/lookup-entry]] | `:security-group-ids` |
| `subnetIds` | java.util.List | [[cdk.support/lookup-entry]] | `:subnet-ids` |
| `tags` | java.util.List | [[cdk.support/lookup-entry]] | `:tags` |
| `vpcConnectionId` | java.lang.String | [[cdk.support/lookup-entry]] | `:vpc-connection-id` |"
  [stack id config]
  (let [builder (CfnVPCConnectionProps$Builder.)]
    (when-let [data (lookup-entry config id :availability-status)]
      (. builder availabilityStatus data))
    (when-let [data (lookup-entry config id :aws-account-id)]
      (. builder awsAccountId data))
    (when-let [data (lookup-entry config id :dns-resolvers)]
      (. builder dnsResolvers data))
    (when-let [data (lookup-entry config id :name)]
      (. builder name data))
    (when-let [data (lookup-entry config id :role-arn)]
      (. builder roleArn data))
    (when-let [data (lookup-entry config id :security-group-ids)]
      (. builder securityGroupIds data))
    (when-let [data (lookup-entry config id :subnet-ids)]
      (. builder subnetIds data))
    (when-let [data (lookup-entry config id :tags)]
      (. builder tags data))
    (when-let [data (lookup-entry config id :vpc-connection-id)]
      (. builder vpcConnectionId data))
    (.build builder)))